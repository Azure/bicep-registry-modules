#########################################################
## 'Publishing' Composite Action                   ##
#########################################################
##
## This composite action contains the logic to publish a given module to the Public Bicep Registry.
##
#########################################################
##
##-------------------------------------------##
## ACTION PARAMETERS                         ##
##-------------------------------------------##
##
##   |==============================================================================================================================================================================================================|
##   | Parameter                  | Required | Default | Description                                                                                       | Example                                                |
##   |----------------------------|----------|---------|---------------------------------------------------------------------------------------------------|--------------------------------------------------------|
##   | templateFilePath           | true     | ''      | The path to the template file to publish                                                          | 'modules/api-management/service/main.bicep'            |
##   |==============================================================================================================================================================================================================|
##
##---------------------------------------------##
name: "Publishing"
description: "Publishing"

inputs:
  templateFilePath:
    description: "The path to the template file to publish"
    required: true

runs:
  using: "composite"
  steps:
    - name: Log in to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ env.PUBLISH_CLIENT_ID }}
        tenant-id: ${{ env.PUBLISH_TENANT_ID }}
        subscription-id: ${{ env.PUBLISH_SUBSCRIPTION_ID }}

    # Adding a step to explicitly install the latest Bicep CLI because there is
    # always a delay in updating Bicep CLI in the job runner environments.
    - name: Install the latest Bicep CLI
      shell: bash
      run: |
        curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
        chmod +x ./bicep
        sudo mv ./bicep /usr/local/bin/bicep
        bicep --version

    - name: "Publish module to public bicep registry"
      id: publish_step
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Publish module to public bicep registry'

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines'  'publish' 'Publish-ModuleFromPathToPBR.ps1')

          $functionInput = @{
            TemplateFilePath     = Join-Path $env:GITHUB_WORKSPACE "${{ inputs.templateFilePath }}"
            PublicRegistryServer = ConvertTo-SecureString '${{ env.PUBLISH_REGISTRY_SERVER }}' -AsPlainText -Force
            RepoRoot             = $env:GITHUB_WORKSPACE
          }

          Write-Verbose "Invoke function with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          # if($publishOutputs = Publish-ModuleFromPathToPBR @functionInput -Verbose) {
          #   $publishOutputs.Keys | Foreach-Object {
          #     $_.Keys | Foreach-Object {
          #       Write-Verbose ('Passing pipeline variable [{0}] with value [{1}]' -f $_, $publishOutputs.$_) -Verbose
          #       Write-Output ('{0}={1}' -f $_, $publishOutputs.$_) >> $env:GITHUB_OUTPUT
          #     }
          #   }
          # }

          # foreach($parameterName in $workflowParameters.Keys) {

          #   if([String]::IsNullOrEmpty($workflowParameters[$parameterName])) {
          #     Write-Verbose "Skipping parameter [$parameterName] as it has no explicit or default value" -Verbose
          #     continue
          #   }

          #   Write-Verbose ('Passing output [{0}] with value [{1}]' -f $parameterName, $workflowParameters[$parameterName]) -Verbose
          #   $workflowInput[$parameterName] = $workflowParameters[$parameterName].toString()
          # }
          # Write-Output ('{0}={1}' -f 'workflowInput', ($workflowInput | ConvertTo-Json -Compress)) >> $env:GITHUB_OUTPUT


          # if($publishOutputs = Publish-ModuleFromPathToPBR @functionInput -Verbose) {
          #   foreach($moduleName in $publishOutputs.Keys) {
          #     foreach($key in $publishOutputs.$modulename.Keys) {
          #       Write-Verbose ('Passing pipeline variable [{0}] with key [{1}] and value [{2}]' -f $moduleName, $key, $publishOutputs.$moduleName.$key) -Verbose
          #       Write-Output ('{0}={{1},{2}}' -f $moduleName, $key, $publishOutputs.$moduleName.$key) >> $env:GITHUB_OUTPUT
          #     }
          #   }
          # }

          # # Output values to be accessed by next jobs
          # $psRuleCompressedOutput = $psRuleTestFilePaths | ForEach-Object {
          #   @{
          #     path = $_
          #     name = Split-Path (Split-Path $_) -Leaf
          #   }
          # } | ConvertTo-Json -Compress

          # if($psRuleCompressedOutput -notmatch "\[.*\]") {
          #   $psRuleCompressedOutput = "[$psRuleCompressedOutput]"
          # }
          # Write-Verbose "Publishing output: $psRuleCompressedOutput" -Verbose
          # Write-Output ('{0}={1}' -f 'psRuleModuleTestFilePaths', $psRuleCompressedOutput) >> $env:GITHUB_OUTPUT

          # # WORKING
          # if($publishOutputs = Publish-ModuleFromPathToPBR @functionInput -Verbose) {
          #   $publishCompressedOutput = $publishOutputs.Keys | Foreach-Object {
          #     @{
          #       version             = $publishOutputs.$_.version
          #       publishedModuleName = $publishOutputs.$_.publishedModuleName
          #       gitTagName          = $publishOutputs.$_.gitTagName
          #     }
          #   } | ConvertTo-Json -Compress
          #   Write-Verbose "Publishing output: $publishCompressedOutput" -Verbose
          #   Write-Output ('{0}={1}' -f 'publishOutput', $publishCompressedOutput) >> $env:GITHUB_OUTPUT
          # }

          if($publishOutputs = Publish-ModuleFromPathToPBR @functionInput -Verbose) {
            $publishCompressedOutput = $publishOutputs.Keys | Foreach-Object {
              @{
                version             = $publishOutputs.$_.version
                publishedModuleName = $publishOutputs.$_.publishedModuleName
                gitTagName          = $publishOutputs.$_.gitTagName
              }
            } | ConvertTo-Json -Compress
            Write-Verbose "Publishing output: $publishCompressedOutput" -Verbose
            Write-Output ('{0}={1}' -f 'publishOutput', $publishCompressedOutput) >> $env:GITHUB_OUTPUT
          }

          Write-Output '::endgroup::'

    - name: "Validate publish"
      uses: azure/powershell@v2
      # if: ${{ steps.publish_step.outputs.version != '' && steps.publish_step.outputs.publishedModuleName != '' }}
      if: ${{ steps.publish_step.outputs.publishOutput != '' }}
      with:
        azPSVersion: "latest"
        inlineScript: |
          # Grouping task logs
          Write-Output '::group::Validate publish'

          # Load used functions
          . (Join-Path $env:GITHUB_WORKSPACE 'utilities' 'pipelines'  'publish' 'Confirm-ModuleIsPublished.ps1')

          $functionInput = @{
            Version             = "${{ steps.publish_step.outputs.version }}"
            PublishedModuleName = "${{ steps.publish_step.outputs.publishedModuleName }}"
            GitTagName          = "${{ steps.publish_step.outputs.gitTagName }}"
          }

          Write-Verbose "Invoke function with" -Verbose
          Write-Verbose ($functionInput | ConvertTo-Json | Out-String) -Verbose

          Confirm-ModuleIsPublished @functionInput

          Write-Output '::endgroup::'
