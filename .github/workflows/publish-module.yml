name: Publish module

on:
  workflow_call:
    inputs:
      tag:
        description: "The git tag of the module to publish."
        required: true
        type: string
  workflow_dispatch:
    inputs:
      tag:
        description: "The git tag of the module to publish."
        required: true
        type: string

permissions:
  id-token: write
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Get module path and version
        id: get-module-path-and-version
        uses: actions/github-script@v5
        with:
          result-encoding: string
          script: |
            const tag = context.payload.inputs.tag
            const segments = tag.split("/")
            
            if (segments.length !== 3 || segments.includes("")) {
              core.setFailed(`Invalid tag: "${tag}". A valid tag must be in the format of "<ModuleFolder>/<ModuleName>/<ModuleVersion>".`)
            }

            const modulePathSegmentRegex = /^[a-z0-9]+([._-][a-z0-9]+)*$/
            const moduleFolder = segments[0]
            const moduleName = segments[1]
            
            if (!modulePathSegmentRegex.test(moduleFolder)) {
              core.setFailed(`The module folder "${moduleFolder}" in the tag "${tag}" is invalid. It must match the regex "${modulePathSegmentRegex}".`)
            }

            if (!modulePathSegmentRegex.test(moduleName)) {
              core.setFailed(`The module name "${moduleName}" in the tag "${tag}" is invalid. It must match the regex "${modulePathSegmentRegex}".`)
            }

            const versionRegex = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?$/
            const version = segments[2]
            
            if (!versionRegex.test(version)) {
              core.setFailed(`The version "${version}" in the tag "${tag}" is invalid. It must match the regex "${versionRegex}".`)
            }
            
            core.setOutput("module_path", `${moduleFolder}/${moduleName}`)
            core.setOutput("version", version)

      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.tag }}

      - name: "Log in to Azure"
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.PUBLISH_TEST_CLIENT_ID }}
          tenant-id: ${{ secrets.PUBLISH_TEST_TENANT_ID }}
          subscription-id: ${{ secrets.PUBLISH_TEST_SUBSCRIPTION_ID }}

      - name: "Publish module"
        run: |
          chmod +x ./tools/bin/bicep
          ./tools/bin/bicep publish "modules/${{ steps.get-module-path-and-version.outputs.module_path }}/main.json" --target "br:${{ secrets.TEST_REGISTRY_SERVER }}/${{ steps.get-module-path-and-version.outputs.module_path }}:${{ steps.get-module-path-and-version.outputs.version }}"
