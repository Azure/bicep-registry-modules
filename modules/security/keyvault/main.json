{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.14.85.62628",
      "templateHash": "9672951491274242172"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[format('keyvault-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Key Vault"
      }
    },
    "subnetID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet ID for the Key Vault"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "The tenant ID where the Key Vault is deployed"
      }
    },
    "enableVNet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable VNet Service Endpoints for Key Vault"
      }
    },
    "rbacPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of RBAC policies to assign to the Key Vault"
      }
    },
    "newOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Specifies whether to create a new Key Vault or use an existing one. Use \"new\" to create a new Key Vault or \"existing\" to use an existing one."
      },
      "allowedValues": [
        "new",
        "existing"
      ]
    },
    "assignRole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable role assignment for the Key Vault"
      }
    }
  },
  "variables": {
    "rbacSecretsReaderRole": "4633458b-17de-408a-b874-0445c86b69e6",
    "rbacCertificateOfficerRole": "a4417e6f-fecd-4de8-b567-7b0420556985",
    "networkAcls": "[if(parameters('enableVNet'), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('action', 'Allow', 'id', parameters('subnetID')))), createObject())]"
  },
  "resources": [
    {
      "condition": "[equals(parameters('newOrExisting'), 'new')]",
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[take(parameters('name'), 24)]",
      "location": "[parameters('location')]",
      "properties": {
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 7,
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "enableRbacAuthorization": true,
        "tenantId": "[parameters('tenantId')]",
        "networkAcls": "[variables('networkAcls')]"
      }
    },
    {
      "copy": {
        "name": "identityRoleAssignDeployment",
        "count": "[length(parameters('rbacPolicies'))]"
      },
      "condition": "[parameters('assignRole')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', take(parameters('name'), 24))]",
      "name": "[guid(variables('rbacSecretsReaderRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacSecretsReaderRole'))]",
        "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24))]"
      ]
    },
    {
      "copy": {
        "name": "rbacCertsReader",
        "count": "[length(parameters('rbacPolicies'))]"
      },
      "condition": "[parameters('assignRole')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', take(parameters('name'), 24))]",
      "name": "[guid(variables('rbacCertificateOfficerRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacCertificateOfficerRole'))]",
        "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24))]"
      ]
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "value": "[if(equals(parameters('newOrExisting'), 'new'), resourceId('Microsoft.KeyVault/vaults', take(parameters('name'), 24)), resourceId('Microsoft.KeyVault/vaults', parameters('name')))]",
      "metadata": {
        "description": "Key Vault Id"
      }
    },
    "name": {
      "type": "string",
      "value": "[if(equals(parameters('newOrExisting'), 'new'), take(parameters('name'), 24), parameters('name'))]",
      "metadata": {
        "description": "Key Vault Name"
      }
    }
  }
}