{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "11062603258316570816"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "kv",
      "metadata": {
        "description": "Prefix of Cosmos DB Resource Name"
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Key Vault"
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "metadata": {
        "description": "The tenant ID where the Key Vault is deployed"
      }
    },
    "subscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "resourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "subnetID": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Subnet ID for the Key Vault"
      }
    },
    "enableVNet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable VNet Service Endpoints for Key Vault"
      }
    },
    "rbacPolicies": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of RBAC policies to assign to the Key Vault"
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [
        "4633458b-17de-408a-b874-0445c86b69e6",
        "a4417e6f-fecd-4de8-b567-7b0420556985"
      ],
      "metadata": {
        "description": "RBAC Role Assignments to apply to each RBAC policy"
      }
    },
    "newOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "metadata": {
        "description": "Whether to create a new Key Vault or use an existing one"
      },
      "allowedValues": [
        "new",
        "existing"
      ]
    },
    "secrets": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "List of secrets to create in the Key Vault [ { secretName: string, secretValue: string }]"
      }
    },
    "enableSoftDelete": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether soft delete should be enabled for the Key Vault."
      }
    },
    "softDeleteRetentionInDays": {
      "type": "int",
      "defaultValue": 7,
      "metadata": {
        "description": "The number of days to retain deleted data in the Key Vault."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "standard",
      "metadata": {
        "description": "The SKU name of the Key Vault."
      },
      "allowedValues": [
        "standard",
        "premium"
      ]
    },
    "skuFamily": {
      "type": "string",
      "defaultValue": "A",
      "metadata": {
        "description": "The SKU family of the Key Vault."
      },
      "allowedValues": [
        "A",
        "B"
      ]
    },
    "enableRbacAuthorization": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Specifies whether RBAC authorization should be enabled for the Key Vault."
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[guid(parameters('name'), 'deploy')]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "newOrExisting": {
            "value": "[parameters('newOrExisting')]"
          },
          "enableSoftDelete": {
            "value": "[parameters('enableSoftDelete')]"
          },
          "softDeleteRetentionInDays": {
            "value": "[parameters('softDeleteRetentionInDays')]"
          },
          "skuFamily": {
            "value": "[parameters('skuFamily')]"
          },
          "skuName": {
            "value": "[parameters('skuName')]"
          },
          "enableRbacAuthorization": {
            "value": "[parameters('enableRbacAuthorization')]"
          },
          "tenantId": {
            "value": "[parameters('tenantId')]"
          },
          "subnetID": {
            "value": "[parameters('subnetID')]"
          },
          "enableVNet": {
            "value": "[parameters('enableVNet')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "2023048292384948848"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Deployment Location"
              }
            },
            "prefix": {
              "type": "string",
              "defaultValue": "kv",
              "metadata": {
                "description": "Prefix of Cosmos DB Resource Name"
              }
            },
            "name": {
              "type": "string",
              "defaultValue": "[take(format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id)), 24)]",
              "metadata": {
                "description": "Name of the Key Vault"
              }
            },
            "newOrExisting": {
              "type": "string",
              "defaultValue": "new",
              "metadata": {
                "description": "Whether to create a new Key Vault or use an existing one"
              },
              "allowedValues": [
                "new",
                "existing"
              ]
            },
            "enableVNet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable VNet Service Endpoints for Key Vault"
              }
            },
            "subnetID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Subnet ID for the Key Vault"
              }
            },
            "tenantId": {
              "type": "string",
              "defaultValue": "[subscription().tenantId]",
              "metadata": {
                "description": "The tenant ID where the Key Vault is deployed"
              }
            },
            "enableSoftDelete": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specifies whether soft delete should be enabled for the Key Vault."
              }
            },
            "softDeleteRetentionInDays": {
              "type": "int",
              "defaultValue": 7,
              "metadata": {
                "description": "The number of days to retain deleted data in the Key Vault."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "standard",
              "metadata": {
                "description": "The SKU name of the Key Vault."
              },
              "allowedValues": [
                "standard",
                "premium"
              ]
            },
            "skuFamily": {
              "type": "string",
              "defaultValue": "A",
              "metadata": {
                "description": "The SKU family of the Key Vault."
              },
              "allowedValues": [
                "A",
                "B"
              ]
            },
            "enableRbacAuthorization": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Specifies whether RBAC authorization should be enabled for the Key Vault."
              }
            }
          },
          "variables": {
            "networkAcls": "[if(parameters('enableVNet'), createObject('defaultAction', 'Deny', 'virtualNetworkRules', createArray(createObject('action', 'Allow', 'id', parameters('subnetID')))), createObject())]"
          },
          "resources": [
            {
              "condition": "[equals(parameters('newOrExisting'), 'new')]",
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2022-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "properties": {
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "sku": {
                  "family": "[parameters('skuFamily')]",
                  "name": "[parameters('skuName')]"
                },
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "tenantId": "[parameters('tenantId')]",
                "networkAcls": "[variables('networkAcls')]"
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[if(equals(parameters('newOrExisting'), 'new'), resourceId('Microsoft.KeyVault/vaults', parameters('name')), resourceId('Microsoft.KeyVault/vaults', parameters('name')))]",
              "metadata": {
                "description": "Key Vault Id"
              }
            },
            "name": {
              "type": "string",
              "value": "[if(equals(parameters('newOrExisting'), 'new'), parameters('name'), parameters('name'))]",
              "metadata": {
                "description": "Key Vault Name"
              }
            }
          }
        }
      }
    },
    {
      "copy": {
        "name": "rbacRoleAssignments",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[guid(guid(parameters('name'), 'deploy'), parameters('roleAssignments')[copyIndex()])]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[guid(parameters('name'), 'deploy')]"
          },
          "rbacPolicies": {
            "value": "[parameters('rbacPolicies')]"
          },
          "rbacRole": {
            "value": "[parameters('roleAssignments')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "16197444694091798636"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string"
            },
            "rbacPolicies": {
              "type": "array"
            },
            "rbacRole": {
              "type": "string"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "rbac_certs_reader",
                "count": "[length(parameters('rbacPolicies'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyVaultName'))]",
              "name": "[guid(parameters('rbacRole'), parameters('rbacPolicies')[copyIndex()].objectId)]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRole'))]",
                "principalId": "[parameters('rbacPolicies')[copyIndex()].objectId]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', guid(parameters('name'), 'deploy'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[guid(guid(parameters('name'), 'deploy'), 'secrets')]",
      "subscriptionId": "[parameters('subscriptionId')]",
      "resourceGroup": "[parameters('resourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyVaultName": {
            "value": "[guid(parameters('name'), 'deploy')]"
          },
          "secrets": {
            "value": "[parameters('secrets')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "9674585796932358038"
            }
          },
          "parameters": {
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the key vault."
              }
            },
            "secrets": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "List of secrets to create in the Key Vault [ { secretName: string, secretValue: string }]"
              }
            }
          },
          "resources": [
            {
              "copy": {
                "name": "secret",
                "count": "[length(parameters('secrets'))]"
              },
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2022-11-01",
              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secrets')[copyIndex()].secretName)]",
              "properties": {
                "value": "[parameters('secrets')[copyIndex()].secretValue]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', guid(parameters('name'), 'deploy'))]"
      ]
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', guid(parameters('name'), 'deploy')), '2020-10-01').outputs.id.value]",
      "metadata": {
        "description": "Key Vault Id"
      }
    },
    "name": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', guid(parameters('name'), 'deploy')), '2020-10-01').outputs.name.value]",
      "metadata": {
        "description": "Key Vault Name"
      }
    }
  }
}