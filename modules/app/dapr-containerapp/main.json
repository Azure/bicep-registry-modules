{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "18066693510890011191"
    }
  },
  "parameters": {
    "containerAppName": {
      "type": "string",
      "defaultValue": "[format('containerapp-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Specifies the name of the container app."
      }
    },
    "containerAppEnvName": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the container app environment to target, must be in the same resourceGroup."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "containerImage": {
      "type": "string",
      "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
      "metadata": {
        "description": "Specifies the docker container image to deploy."
      }
    },
    "targetPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Specifies the container port."
      }
    },
    "daprAppPort": {
      "type": "int",
      "defaultValue": "[parameters('targetPort')]",
      "metadata": {
        "description": "Specifies the dapr app port."
      }
    },
    "daprAppProtocol": {
      "type": "string",
      "defaultValue": "http",
      "metadata": {
        "description": "Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http"
      },
      "allowedValues": [
        "http",
        "grpc",
        ""
      ]
    },
    "revisionMode": {
      "type": "string",
      "defaultValue": "Single",
      "metadata": {
        "description": "Controls how active revisions are handled for the Container app"
      },
      "allowedValues": [
        "Single",
        "Multiple"
      ]
    },
    "cpuCore": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "Number of CPU cores the container can use. Can be with a maximum of two decimals places. Max of 2.0. Valid values include, 0.5 1.25 1.4"
      }
    },
    "memorySize": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "Amount of memory (in gibibytes, GiB) allocated to the container up to 4GiB. Can be with a maximum of two decimals. Ratio with CPU cores must be equal to 2."
      }
    },
    "minReplicas": {
      "type": "int",
      "defaultValue": 1,
      "maxValue": 25,
      "minValue": 0,
      "metadata": {
        "description": "Minimum number of replicas that will be deployed"
      }
    },
    "maxReplicas": {
      "type": "int",
      "defaultValue": 3,
      "maxValue": 25,
      "minValue": 0,
      "metadata": {
        "description": "Maximum number of replicas that will be deployed"
      }
    },
    "externalIngress": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Should the app be exposed on an external endpoint"
      }
    },
    "enableIngress": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Does the app expect traffic, or should it operate headless"
      }
    },
    "revisionSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(utcNow())]",
      "metadata": {
        "description": "Revisions to the container app need to be unique"
      }
    },
    "environmentVariables": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Any environment variables that your container needs"
      }
    },
    "azureContainerRegistry": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "An ACR name can be optionally passed if thats where the container app image is homed"
      }
    },
    "createUserManagedId": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Will create a user managed identity for the application to access other Azure resoruces as"
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Any tags that are to be applied to the Container App"
      }
    }
  },
  "resources": [
    {
      "condition": "[empty(parameters('azureContainerRegistry'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[parameters('containerAppName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerAppEnvName": {
            "value": "[parameters('containerAppEnvName')]"
          },
          "containerAppName": {
            "value": "[parameters('containerAppName')]"
          },
          "containerImage": {
            "value": "[parameters('containerImage')]"
          },
          "cpuCore": {
            "value": "[parameters('cpuCore')]"
          },
          "createUserManagedId": {
            "value": "[parameters('createUserManagedId')]"
          },
          "daprAppPort": {
            "value": "[parameters('daprAppPort')]"
          },
          "daprAppProtocol": {
            "value": "[parameters('daprAppProtocol')]"
          },
          "enableIngress": {
            "value": "[parameters('enableIngress')]"
          },
          "environmentVariables": {
            "value": "[parameters('environmentVariables')]"
          },
          "externalIngress": {
            "value": "[parameters('externalIngress')]"
          },
          "maxReplicas": {
            "value": "[parameters('maxReplicas')]"
          },
          "memorySize": {
            "value": "[parameters('memorySize')]"
          },
          "minReplicas": {
            "value": "[parameters('minReplicas')]"
          },
          "revisionMode": {
            "value": "[parameters('revisionMode')]"
          },
          "revisionSuffix": {
            "value": "[parameters('revisionSuffix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "targetPort": {
            "value": "[parameters('targetPort')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "7009689267588982199"
            }
          },
          "parameters": {
            "containerAppName": {
              "type": "string",
              "defaultValue": "[format('containerapp-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specifies the name of the container app."
              }
            },
            "containerAppEnvName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the container app environment to target, must be in the same resourceGroup."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for all resources."
              }
            },
            "containerImage": {
              "type": "string",
              "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
              "metadata": {
                "description": "Specifies the docker container image to deploy."
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Specifies the container port."
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Specifies the dapr app port."
              }
            },
            "daprAppProtocol": {
              "type": "string",
              "defaultValue": "http",
              "metadata": {
                "description": "Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http"
              },
              "allowedValues": [
                "http",
                "grpc",
                ""
              ]
            },
            "revisionMode": {
              "type": "string",
              "defaultValue": "Single",
              "metadata": {
                "description": "Controls how active revisions are handled for the Container app"
              },
              "allowedValues": [
                "Single",
                "Multiple"
              ]
            },
            "cpuCore": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "Number of CPU cores the container can use. Can be with a maximum of two decimals places. Max of 2.0. Valid values include, 0.5 1.25 1.4"
              }
            },
            "memorySize": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Amount of memory (in gibibytes, GiB) allocated to the container up to 4GiB. Can be with a maximum of two decimals. Ratio with CPU cores must be equal to 2."
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 25,
              "minValue": 0,
              "metadata": {
                "description": "Minimum number of replicas that will be deployed"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 3,
              "maxValue": 25,
              "minValue": 0,
              "metadata": {
                "description": "Maximum number of replicas that will be deployed"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Should the app be exposed on an external endpoint"
              }
            },
            "enableIngress": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Does the app expect traffic, or should it operate headless"
              }
            },
            "revisionSuffix": {
              "type": "string",
              "defaultValue": "[uniqueString(utcNow())]",
              "metadata": {
                "description": "Revisions to the container app need to be unique"
              }
            },
            "environmentVariables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Any environment variables that your container needs"
              }
            },
            "createUserManagedId": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Will create a user managed identity for the application to access other Azure resoruces as"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Any tags that are to be applied to the Container App"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2022-06-01-preview",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('location')]",
              "identity": "[if(parameters('createUserManagedId'), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))), createObject())), createObject('type', 'None'))]",
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvName'))]",
                "configuration": {
                  "ingress": "[if(parameters('enableIngress'), createObject('external', parameters('externalIngress'), 'targetPort', parameters('targetPort'), 'allowInsecure', false(), 'traffic', createArray(createObject('latestRevision', true(), 'weight', 100))), null())]",
                  "dapr": {
                    "appId": "[parameters('containerAppName')]",
                    "appProtocol": "[if(not(empty(parameters('daprAppProtocol'))), parameters('daprAppProtocol'), null())]",
                    "appPort": "[if(equals(parameters('enableIngress'), true()), parameters('daprAppPort'), null())]",
                    "enabled": true
                  },
                  "activeRevisionsMode": "[parameters('revisionMode')]"
                },
                "template": {
                  "revisionSuffix": "[parameters('revisionSuffix')]",
                  "containers": [
                    {
                      "name": "[parameters('containerAppName')]",
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "cpu": "[json(parameters('cpuCore'))]",
                        "memory": "[format('{0}Gi', parameters('memorySize'))]"
                      },
                      "env": "[parameters('environmentVariables')]"
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]"
                  }
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))]"
              ]
            },
            {
              "condition": "[parameters('createUserManagedId')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[format('id-{0}', parameters('containerAppName'))]",
              "location": "[parameters('location')]"
            }
          ],
          "outputs": {
            "containerAppFQDN": {
              "type": "string",
              "value": "[if(parameters('enableIngress'), reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName'))).configuration.ingress.fqdn, '')]",
              "metadata": {
                "description": "If ingress is enabled, this is the FQDN that the Container App is exposed on"
              }
            },
            "userAssignedIdPrincipalId": {
              "type": "string",
              "value": "[if(parameters('createUserManagedId'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName'))), '2022-01-31-preview').principalId, '')]",
              "metadata": {
                "description": "The Principal Id of the Container Apps Managed Identity"
              }
            }
          }
        }
      }
    },
    {
      "condition": "[not(empty(parameters('azureContainerRegistry')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-acr', parameters('containerAppName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerAppEnvName": {
            "value": "[parameters('containerAppEnvName')]"
          },
          "azureContainerRegistry": {
            "value": "[parameters('azureContainerRegistry')]"
          },
          "containerAppName": {
            "value": "[parameters('containerAppName')]"
          },
          "containerImage": {
            "value": "[parameters('containerImage')]"
          },
          "cpuCore": {
            "value": "[parameters('cpuCore')]"
          },
          "createUserManagedId": {
            "value": "[parameters('createUserManagedId')]"
          },
          "daprAppPort": {
            "value": "[parameters('daprAppPort')]"
          },
          "daprAppProtocol": {
            "value": "[parameters('daprAppProtocol')]"
          },
          "enableIngress": {
            "value": "[parameters('enableIngress')]"
          },
          "environmentVariables": {
            "value": "[parameters('environmentVariables')]"
          },
          "externalIngress": {
            "value": "[parameters('externalIngress')]"
          },
          "maxReplicas": {
            "value": "[parameters('maxReplicas')]"
          },
          "memorySize": {
            "value": "[parameters('memorySize')]"
          },
          "minReplicas": {
            "value": "[parameters('minReplicas')]"
          },
          "revisionMode": {
            "value": "[parameters('revisionMode')]"
          },
          "revisionSuffix": {
            "value": "[parameters('revisionSuffix')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "targetPort": {
            "value": "[parameters('targetPort')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "1021504825763956878"
            }
          },
          "parameters": {
            "containerAppName": {
              "type": "string",
              "defaultValue": "[format('containerapp-{0}', uniqueString(resourceGroup().id))]",
              "metadata": {
                "description": "Specifies the name of the container app."
              }
            },
            "containerAppEnvName": {
              "type": "string",
              "metadata": {
                "description": "Specifies the name of the container app environment to target, must be in the same resourceGroup."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Specifies the location for all resources."
              }
            },
            "containerImage": {
              "type": "string",
              "defaultValue": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
              "metadata": {
                "description": "Specifies the docker container image to deploy."
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Specifies the container port."
              }
            },
            "daprAppPort": {
              "type": "int",
              "defaultValue": "[parameters('targetPort')]",
              "metadata": {
                "description": "Specifies the dapr app port."
              }
            },
            "daprAppProtocol": {
              "type": "string",
              "defaultValue": "http",
              "metadata": {
                "description": "Tells Dapr which protocol your application is using. Valid options are http and grpc. Default is http"
              },
              "allowedValues": [
                "http",
                "grpc",
                ""
              ]
            },
            "revisionMode": {
              "type": "string",
              "defaultValue": "Single",
              "metadata": {
                "description": "Controls how active revisions are handled for the Container app"
              },
              "allowedValues": [
                "Single",
                "Multiple"
              ]
            },
            "cpuCore": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "Number of CPU cores the container can use. Can be with a maximum of two decimals places. Max of 2.0. Valid values include, 0.5 1.25 1.4"
              }
            },
            "memorySize": {
              "type": "string",
              "defaultValue": "1",
              "metadata": {
                "description": "Amount of memory (in gibibytes, GiB) allocated to the container up to 4GiB. Can be with a maximum of two decimals. Ratio with CPU cores must be equal to 2."
              }
            },
            "minReplicas": {
              "type": "int",
              "defaultValue": 1,
              "maxValue": 25,
              "minValue": 0,
              "metadata": {
                "description": "Minimum number of replicas that will be deployed"
              }
            },
            "maxReplicas": {
              "type": "int",
              "defaultValue": 3,
              "maxValue": 25,
              "minValue": 0,
              "metadata": {
                "description": "Maximum number of replicas that will be deployed"
              }
            },
            "externalIngress": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Should the app be exposed on an external endpoint"
              }
            },
            "enableIngress": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Does the app expect traffic, or should it operate headless"
              }
            },
            "revisionSuffix": {
              "type": "string",
              "defaultValue": "[uniqueString(utcNow())]",
              "metadata": {
                "description": "Revisions to the container app need to be unique"
              }
            },
            "environmentVariables": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Any environment variables that your container needs"
              }
            },
            "azureContainerRegistry": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "An ACR name can be optionally passed if thats where the container app image is homed"
              }
            },
            "createUserManagedId": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Will create a user managed identity for the application to access other Azure resoruces as"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Any tags that are to be applied to the Container App"
              }
            }
          },
          "variables": {
            "acrPullRole": "[resourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
          },
          "resources": [
            {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2022-06-01-preview",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('location')]",
              "identity": "[if(parameters('createUserManagedId'), createObject('type', 'UserAssigned', 'userAssignedIdentities', createObject(format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))), createObject())), createObject('type', 'None'))]",
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvName'))]",
                "configuration": {
                  "ingress": "[if(parameters('enableIngress'), createObject('external', parameters('externalIngress'), 'targetPort', parameters('targetPort'), 'allowInsecure', false(), 'traffic', createArray(createObject('latestRevision', true(), 'weight', 100))), null())]",
                  "dapr": {
                    "appId": "[parameters('containerAppName')]",
                    "appProtocol": "[if(not(empty(parameters('daprAppProtocol'))), parameters('daprAppProtocol'), null())]",
                    "appPort": "[if(equals(parameters('enableIngress'), true()), parameters('daprAppPort'), null())]",
                    "enabled": true
                  },
                  "activeRevisionsMode": "[parameters('revisionMode')]",
                  "registries": [
                    {
                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))]",
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('azureContainerRegistry')), '2022-02-01-preview').loginServer]"
                    }
                  ]
                },
                "template": {
                  "revisionSuffix": "[parameters('revisionSuffix')]",
                  "containers": [
                    {
                      "name": "[parameters('containerAppName')]",
                      "image": "[parameters('containerImage')]",
                      "resources": {
                        "cpu": "[json(parameters('cpuCore'))]",
                        "memory": "[format('{0}Gi', parameters('memorySize'))]"
                      },
                      "env": "[parameters('environmentVariables')]"
                    }
                  ],
                  "scale": {
                    "minReplicas": "[parameters('minReplicas')]",
                    "maxReplicas": "[parameters('maxReplicas')]"
                  }
                }
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('wait-{0}', parameters('containerAppName')))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))]"
              ]
            },
            {
              "condition": "[parameters('createUserManagedId')]",
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2022-01-31-preview",
              "name": "[format('id-{0}', parameters('containerAppName'))]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[and(parameters('createUserManagedId'), not(empty(parameters('azureContainerRegistry'))))]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('azureContainerRegistry'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('azureContainerRegistry')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName'))), variables('acrPullRole'))]",
              "properties": {
                "roleDefinitionId": "[variables('acrPullRole')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName'))), '2022-01-31-preview').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName')))]"
              ],
              "metadata": {
                "description": "This allows the managed identity of the container app to access the registry"
              }
            },
            {
              "condition": "[and(parameters('createUserManagedId'), not(empty(parameters('azureContainerRegistry'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('wait-{0}', parameters('containerAppName'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "waitSeconds": {
                    "value": 30
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.8.9.13224",
                      "templateHash": "2218759242619531802"
                    }
                  },
                  "parameters": {
                    "waitSeconds": {
                      "type": "int",
                      "metadata": {
                        "description": "The number of seconds to wait for"
                      },
                      "maxValue": 180,
                      "minValue": 1
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location to deploy the resources to"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2020-10-01",
                      "name": "DeployDelay",
                      "location": "[parameters('location')]",
                      "kind": "AzurePowerShell",
                      "properties": {
                        "retentionInterval": "PT1H",
                        "azPowerShellVersion": "6.4",
                        "cleanupPreference": "OnSuccess",
                        "environmentVariables": [
                          {
                            "name": "waitSeconds",
                            "value": "[format('{0}', parameters('waitSeconds'))]"
                          }
                        ],
                        "scriptContent": "write-output \"Sleeping for $Env:waitSeconds\"; start-sleep -Seconds $Env:waitSeconds"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('azureContainerRegistry')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('azureContainerRegistry')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName'))), variables('acrPullRole')))]"
              ]
            }
          ],
          "outputs": {
            "containerAppFQDN": {
              "type": "string",
              "value": "[if(parameters('enableIngress'), reference(resourceId('Microsoft.App/containerApps', parameters('containerAppName'))).configuration.ingress.fqdn, '')]",
              "metadata": {
                "description": "If ingress is enabled, this is the FQDN that the Container App is exposed on"
              }
            },
            "userAssignedIdPrincipalId": {
              "type": "string",
              "value": "[if(parameters('createUserManagedId'), reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('id-{0}', parameters('containerAppName'))), '2022-01-31-preview').principalId, '')]",
              "metadata": {
                "description": "The Principal Id of the Container Apps Managed Identity"
              }
            }
          }
        }
      }
    }
  ],
  "outputs": {
    "containerAppFQDN": {
      "type": "string",
      "value": "[if(parameters('enableIngress'), if(empty(parameters('azureContainerRegistry')), reference(resourceId('Microsoft.Resources/deployments', parameters('containerAppName')), '2020-10-01').outputs.containerAppFQDN.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-acr', parameters('containerAppName'))), '2020-10-01').outputs.containerAppFQDN.value), '')]",
      "metadata": {
        "description": "If ingress is enabled, this is the FQDN that the Container App is exposed on"
      }
    },
    "userAssignedIdPrincipalId": {
      "type": "string",
      "value": "[if(empty(parameters('azureContainerRegistry')), reference(resourceId('Microsoft.Resources/deployments', parameters('containerAppName')), '2020-10-01').outputs.userAssignedIdPrincipalId.value, reference(resourceId('Microsoft.Resources/deployments', format('{0}-acr', parameters('containerAppName'))), '2020-10-01').outputs.userAssignedIdPrincipalId.value)]",
      "metadata": {
        "description": "The PrinicpalId of the Container Apps Managed Identity"
      }
    }
  }
}