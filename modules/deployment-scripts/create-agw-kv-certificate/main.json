{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "491657933686265403"
    }
  },
  "parameters": {
    "akvName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Key Vault"
      }
    },
    "agwName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Application Gateway"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location to deploy the resources to"
      }
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "How the deployment script should be forced to execute"
      }
    },
    "azCliVersion": {
      "type": "string",
      "defaultValue": "2.30.0",
      "metadata": {
        "description": "Version of the Azure CLI to use"
      }
    },
    "timeout": {
      "type": "string",
      "defaultValue": "PT30M",
      "metadata": {
        "description": "Deployment Script timeout"
      }
    },
    "retention": {
      "type": "string",
      "defaultValue": "P1D",
      "metadata": {
        "description": "The retention period for the deployment script"
      }
    },
    "rbacRolesNeeded": {
      "type": "array",
      "defaultValue": [
        "b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "metadata": {
        "description": "An array of Azure RoleIds that are required for the DeploymentScript resource"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the Managed Identity already exists, or should be created"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "id-ContainerRegistryImport",
      "metadata": {
        "description": "Name of the Managed Identity resource"
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "certNames": {
      "type": "array",
      "metadata": {
        "description": "An array of Certificate names to create"
      }
    },
    "agwCertType": {
      "type": "string",
      "defaultValue": "none",
      "metadata": {
        "description": "Configured certificate in Application Gateway as Frontend (ssl-cert) or Backend (root-cert)"
      },
      "allowedValues": [
        "none",
        "root-cert",
        "ssl-cert"
      ]
    },
    "initialScriptDelay": {
      "type": "string",
      "defaultValue": "30s",
      "metadata": {
        "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
      }
    },
    "cleanupPreference": {
      "type": "string",
      "defaultValue": "OnSuccess",
      "metadata": {
        "description": "When the script resource is cleaned up"
      },
      "allowedValues": [
        "OnSuccess",
        "OnExpiration",
        "Always"
      ]
    }
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "copy": {
        "name": "rbac",
        "count": "[length(parameters('rbacRolesNeeded'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('akvName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), parameters('rbacRolesNeeded')[copyIndex()], if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeeded')[copyIndex()])]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "copy": {
        "name": "createImportImage",
        "count": "[length(parameters('certNames'))]"
      },
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('ACR-Import-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('forceUpdateTag')]",
        "azCliVersion": "[parameters('azCliVersion')]",
        "timeout": "[parameters('timeout')]",
        "retentionInterval": "[parameters('retention')]",
        "environmentVariables": [
          {
            "name": "RG",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "akvName",
            "value": "[parameters('akvName')]"
          },
          {
            "name": "agwName",
            "value": "[parameters('agwName')]"
          },
          {
            "name": "agwCertType",
            "value": "[parameters('agwCertType')]"
          },
          {
            "name": "certName",
            "value": "[parameters('certNames')[copyIndex()]]"
          },
          {
            "name": "initialDelay",
            "value": "[parameters('initialScriptDelay')]"
          },
          {
            "name": "certificateWait",
            "value": "[parameters('initialScriptDelay')]"
          }
        ],
        "scriptContent": "      #!/bin/bash\r\n      set -e\r\n\r\n      echo \"Waiting on RBAC replication ($initialDelay)\"\r\n      sleep $initialDelay\r\n\r\n      echo \"Creating AKV Cert $certName\";\r\n      az keyvault certificate create --vault-name $akvName -n $certName -p \"$(az keyvault certificate get-default-policy | sed -e s/CN=CLIGetDefaultPolicy/CN=${certName}/g )\";\r\n\r\n      sleep $certificateWait\r\n\r\n      echo \"getting akv secretid for $certName to add to $agwName\";\r\n      versionedSecretId=$(az keyvault certificate show -n $certName --vault-name $akvName --query \"sid\" -o tsv);\r\n      unversionedSecretId=$(echo $versionedSecretId | cut -d'/' -f-5) # remove the version from the url;\r\n\r\n      echo $agwCertType\r\n      echo \"creating root certificate reference in application gateway\";\r\n      rootcertcmd=\"az network application-gateway root-cert create --gateway-name $agwName  -g $RG -n $certName --keyvault-secret $unversionedSecretId\";\r\n      $rootcertcmd\r\n\r\n    ",
        "cleanupPreference": "[parameters('cleanupPreference')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "rbac"
      ]
    }
  ]
}