{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.5.6.12127",
      "templateHash": "10197498417809521496"
    }
  },
  "parameters": {
    "akvName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Key Vault"
      }
    },
    "agwName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the Azure Application Gateway"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location to deploy the resources to"
      }
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "How the deployment script should be forced to execute"
      }
    },
    "azCliVersion": {
      "type": "string",
      "defaultValue": "2.30.0",
      "metadata": {
        "description": "Version of the Azure CLI to use"
      }
    },
    "timeout": {
      "type": "string",
      "defaultValue": "PT30M",
      "metadata": {
        "description": "Deployment Script timeout"
      }
    },
    "retention": {
      "type": "string",
      "defaultValue": "P1D",
      "metadata": {
        "description": "The retention period for the deployment script"
      }
    },
    "rbacRolesNeededOnKV": {
      "type": "array",
      "defaultValue": [
        "a4417e6f-fecd-4de8-b567-7b0420556985"
      ],
      "metadata": {
        "description": "An array of Azure Key Vault RoleIds that are required for the DeploymentScript resource"
      }
    },
    "rbacRolesNeededOnAppGw": {
      "type": "array",
      "defaultValue": [
        "b24988ac-6180-42a0-ab88-20f7382dd24c"
      ],
      "metadata": {
        "description": "An array of Azure Application Gateway RoleIds that are required for the DeploymentScript resource"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the Managed Identity already exists, or should be created"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "id-KeyVaultCertificateCreator",
      "metadata": {
        "description": "Name of the Managed Identity resource"
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "certNames": {
      "type": "array",
      "metadata": {
        "description": "An array of Certificate names to create"
      }
    },
    "agwCertType": {
      "type": "string",
      "defaultValue": "none",
      "metadata": {
        "description": "Configured certificate in Application Gateway as Frontend (ssl-cert) or Backend (root-cert)"
      },
      "allowedValues": [
        "none",
        "root-cert",
        "ssl-cert"
      ]
    },
    "initialScriptDelay": {
      "type": "string",
      "defaultValue": "30s",
      "metadata": {
        "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
      }
    },
    "agwCertImportDelay": {
      "type": "string",
      "defaultValue": "120s",
      "metadata": {
        "description": "A delay before the Application Gateway imports the Certificate from KeyVault. Primarily to allow the certificate creation operation to complete"
      }
    },
    "cleanupPreference": {
      "type": "string",
      "defaultValue": "OnSuccess",
      "metadata": {
        "description": "When the script resource is cleaned up"
      },
      "allowedValues": [
        "OnSuccess",
        "OnExpiration",
        "Always"
      ]
    },
    "agwIdName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The User Assigned Identity of the Azure Application Gateway"
      }
    }
  },
  "variables": {
    "managedIdentityOperator": "[resourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]"
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]",
      "metadata": {
        "description": "A new managed identity that will be created in this Resource Group, this is the default option"
      }
    },
    {
      "copy": {
        "name": "rbacKv",
        "count": "[length(parameters('rbacRolesNeededOnKV'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('akvName'))]",
      "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('akvName')), parameters('rbacRolesNeededOnKV')[copyIndex()], if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeededOnKV')[copyIndex()])]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('agwName'))), not(equals(parameters('agwCertType'), 'none')))]",
      "copy": {
        "name": "rbacAppGw",
        "count": "[length(parameters('rbacRolesNeededOnAppGw'))]"
      },
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('agwName'))]",
      "name": "[guid(resourceId('Microsoft.Network/applicationGateways', parameters('agwName')), parameters('rbacRolesNeededOnAppGw')[copyIndex()], if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRolesNeededOnAppGw')[copyIndex()])]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "condition": "[and(not(empty(parameters('agwName'))), not(equals(parameters('agwCertType'), 'none')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('agwIdName'))]",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('agwIdName')), variables('managedIdentityOperator'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[variables('managedIdentityOperator')]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ],
      "metadata": {
        "description": "Managed identity requires \"Managed Identity Operator\" permission over the user assigned identity of the Application Gateway."
      }
    },
    {
      "copy": {
        "name": "createImportCert",
        "count": "[length(parameters('certNames'))]"
      },
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('forceUpdateTag')]",
        "azCliVersion": "[parameters('azCliVersion')]",
        "timeout": "[parameters('timeout')]",
        "retentionInterval": "[parameters('retention')]",
        "environmentVariables": [
          {
            "name": "RG",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "akvName",
            "value": "[parameters('akvName')]"
          },
          {
            "name": "agwName",
            "value": "[parameters('agwName')]"
          },
          {
            "name": "agwCertType",
            "value": "[parameters('agwCertType')]"
          },
          {
            "name": "certName",
            "value": "[parameters('certNames')[copyIndex()]]"
          },
          {
            "name": "initialDelay",
            "value": "[parameters('initialScriptDelay')]"
          },
          {
            "name": "certificateWait",
            "value": "[parameters('agwCertImportDelay')]"
          }
        ],
        "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Waiting on Identity RBAC replication ($initialDelay)\"\n      sleep $initialDelay\n\n      echo \"Creating AKV Cert $certName\"\n      az keyvault certificate create --vault-name $akvName -n $certName -p \"$(az keyvault certificate get-default-policy | sed -e s/CN=CLIGetDefaultPolicy/CN=${certName}/g )\";\n\n      echo \"Waiting for AKV Cert Generation ($certificateWait)\"\n      sleep $certificateWait\n\n      echo \"getting akv secretid for $certName to add to $agwName\";\n      versionedSecretId=$(az keyvault certificate show -n $certName --vault-name $akvName --query \"sid\" -o tsv);\n      unversionedSecretId=$(echo $versionedSecretId | cut -d'/' -f-5) # remove the version from the url;\n\n      case $agwCertType in\n        none)\n          echo \"AppGw Certificate Creation not configured\"\n          ;;\n\n        root-cert)\n          echo \"Creating root certificate in application gateway\";\n          rootcertcmd=\"az network application-gateway root-cert create --gateway-name $agwName -g $RG -n $certName --key-vault-secret-id $unversionedSecretId\";\n          echo $rootcertcmd #Inspecting az command is a great DEBUG for the script output\n          $rootcertcmd\n          ;;\n\n        ssl-cert)\n          echo \"Creating ssl certificate in application gateway\";\n          fecertcmd=\"az network application-gateway ssl-cert create --gateway-name $agwName -g $RG -n $certName --key-vault-secret-id $unversionedSecretId\";\n          echo $fecertcmd #Inspecting az command is a great DEBUG for the script output\n          $fecertcmd\n          ;;\n\n      esac\n\n      jsonOutputString=$(jq -n --arg cn \"$certName\" --arg sid \"$unversionedSecretId\" --arg vsid \"$versionedSecretId\" --arg ct \"$agwCertType\" '{certName: $cn, certSecretId: {versioned: $vsid, unversioned: $sid }, agwCertType: $ct}')\n      echo $jsonOutputString > $AZ_SCRIPTS_OUTPUT_PATH\n    ",
        "cleanupPreference": "[parameters('cleanupPreference')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "rbacAppGw",
        "rbacKv"
      ]
    }
  ],
  "outputs": {
    "createdCertificates": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('certNames'))]",
        "input": {
          "certName": "[parameters('certNames')[copyIndex()]]",
          "DeploymentScriptName": "[format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-'))]",
          "DeploymentScriptOutputs": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-')))).outputs]",
          "DeploymentScriptStartTime": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-')))).status.startTime]",
          "DeploymentScriptEndTime": "[reference(resourceId('Microsoft.Resources/deploymentScripts', format('AKV-Cert-{0}-{1}', parameters('akvName'), replace(replace(parameters('certNames')[copyIndex()], ':', ''), '/', '-')))).status.endTime]"
        }
      },
      "metadata": {
        "description": "Array of info from each Certificate Deployment Script"
      }
    }
  }
}