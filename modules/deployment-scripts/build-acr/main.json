{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.13.1.58284",
      "templateHash": "1371553491347240684"
    }
  },
  "parameters": {
    "AcrName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Container Registry"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location of the ACR and where to deploy the module resources to"
      }
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "How the deployment script should be forced to execute"
      }
    },
    "rbacRoleNeeded": {
      "type": "string",
      "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
      "metadata": {
        "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the Managed Identity already exists, or should be created"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "id-ContainerRegistryBuild",
      "metadata": {
        "description": "Name of the Managed Identity resource"
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "initialScriptDelay": {
      "type": "string",
      "defaultValue": "30s",
      "metadata": {
        "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
      }
    },
    "cleanupPreference": {
      "type": "string",
      "defaultValue": "OnSuccess",
      "metadata": {
        "description": "When the script resource is cleaned up"
      },
      "allowedValues": [
        "OnSuccess",
        "OnExpiration",
        "Always"
      ]
    },
    "gitRepositoryUrl": {
      "type": "string",
      "metadata": {
        "description": "The Git Repository URL, eg. https://github.com/YOURORG/YOURREPO.git"
      }
    },
    "gitBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "The name of the repository branch to use"
      }
    },
    "buildWorkingDirectory": {
      "type": "string",
      "defaultValue": ".",
      "metadata": {
        "description": "The docker context working directory, change this when your Dockerfile and source files are ALL located in a repo subdirectory"
      }
    },
    "dockerfileDirectory": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The subdirectory relative to the working directory that contains the Dockerfile"
      }
    },
    "dockerfileName": {
      "type": "string",
      "defaultValue": "Dockerfile",
      "metadata": {
        "description": "The name of the dockerfile"
      }
    },
    "imageName": {
      "type": "string",
      "metadata": {
        "description": "The image name/path you want to create in ACR"
      }
    },
    "imageTag": {
      "type": "string",
      "defaultValue": "[string(dateTimeToEpoch(utcNow()))]",
      "metadata": {
        "description": "The image tag you want to create"
      }
    },
    "acrBuildPlatform": {
      "type": "string",
      "defaultValue": "linux",
      "metadata": {
        "description": "The ACR compute platform needed to build the image"
      }
    }
  },
  "variables": {
    "$fxv#0": "#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\"\nsleep $initialDelay\n\naz acr build --resource-group $acrResourceGroup \\\n  --registry $acrName \\\n  --image $taggedImageName $repo \\\n  --file $dockerfilePath \\\n  --platform $platform",
    "repo": "[format('{0}#{1}:{2}', parameters('gitRepositoryUrl'), parameters('gitBranch'), parameters('buildWorkingDirectory'))]",
    "cleanRepoName": "[last(split(parameters('gitRepositoryUrl'), '/'))]",
    "cleanImageName": "[replace(parameters('imageName'), '/', '')]",
    "taggedImageName": "[format('{0}:{1}', parameters('imageName'), parameters('imageTag'))]",
    "dockerfilePath": "[if(not(empty(parameters('dockerfileDirectory'))), format('{0}/{1}', parameters('dockerfileDirectory'), parameters('dockerfileName')), parameters('dockerfileName'))]"
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('AcrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('ACR-Build-{0}-{1}', variables('cleanImageName'), variables('cleanRepoName'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('forceUpdateTag')]",
        "azCliVersion": "2.30.0",
        "timeout": "PT45M",
        "retentionInterval": "P1D",
        "environmentVariables": [
          {
            "name": "acrName",
            "value": "[parameters('AcrName')]"
          },
          {
            "name": "acrResourceGroup",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "taggedImageName",
            "value": "[variables('taggedImageName')]"
          },
          {
            "name": "repo",
            "value": "[variables('repo')]"
          },
          {
            "name": "dockerfilePath",
            "value": "[variables('dockerfilePath')]"
          },
          {
            "name": "platform",
            "value": "[parameters('acrBuildPlatform')]"
          },
          {
            "name": "initialDelay",
            "value": "[parameters('initialScriptDelay')]"
          }
        ],
        "scriptContent": "[variables('$fxv#0')]",
        "cleanupPreference": "[parameters('cleanupPreference')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
      ]
    }
  ],
  "outputs": {
    "acrImage": {
      "type": "string",
      "value": "[format('{0}/{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('AcrName')), '2021-12-01-preview').loginServer, variables('taggedImageName'))]",
      "metadata": {
        "description": "The ACR uri the image can be accessed on if building was successful"
      }
    }
  }
}