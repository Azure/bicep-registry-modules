{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "8432140579349303037"
    }
  },
  "parameters": {
    "acrName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Container Registry"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "The location to deploy the resources to"
      }
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "How the deployment script should be forced to execute"
      }
    },
    "rbacRoleNeeded": {
      "type": "string",
      "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
      "metadata": {
        "description": "Azure RoleId that are required for the DeploymentScript resource to import images"
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Does the Managed Identity already exists, or should be created"
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "id-ContainerRegistryImport",
      "metadata": {
        "description": "Name of the Managed Identity resource"
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "For an existing Managed Identity, the Subscription Id it is located in"
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "For an existing Managed Identity, the Resource Group it is located in"
      }
    },
    "images": {
      "type": "array",
      "metadata": {
        "description": "An array of fully qualified images names to import"
      }
    },
    "initialScriptDelay": {
      "type": "string",
      "defaultValue": "30s",
      "metadata": {
        "description": "A delay before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate"
      }
    },
    "cleanupPreference": {
      "type": "string",
      "defaultValue": "OnSuccess",
      "metadata": {
        "description": "When the script resource is cleaned up"
      },
      "allowedValues": [
        "OnSuccess",
        "OnExpiration",
        "Always"
      ]
    }
  },
  "resources": [
    {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]"
    },
    {
      "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId, reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), '2018-11-30').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]"
      ]
    },
    {
      "copy": {
        "name": "createImportImage",
        "count": "[length(parameters('images'))]"
      },
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('ACR-Import-{0}-{1}', parameters('acrName'), last(split(replace(parameters('images')[copyIndex()], ':', ''), '/')))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": {
        "forceUpdateTag": "[parameters('forceUpdateTag')]",
        "azCliVersion": "2.30.0",
        "timeout": "PT30M",
        "retentionInterval": "P1D",
        "environmentVariables": [
          {
            "name": "acrName",
            "value": "[parameters('acrName')]"
          },
          {
            "name": "imageName",
            "value": "[parameters('images')[copyIndex()]]"
          },
          {
            "name": "initialDelay",
            "value": "[parameters('initialScriptDelay')]"
          },
          {
            "name": "retryMax",
            "value": "2"
          },
          {
            "name": "retrySleep",
            "value": "5s"
          }
        ],
        "scriptContent": "      #!/bin/bash\n      set -e\n\n      echo \"Waiting on RBAC replication ($initialDelay)\"\n      sleep $initialDelay\n      \n      #Retry loop to catch errors (usually RBAC delays, but 'Error copying blobs' is also not unheard of)\n      retryLoopCount=0\n      until [ $retryLoopCount -ge $retryMax ]\n      do\n        echo \"Importing Image: $imageName into ACR: $acrName\"\n        az acr import -n $acrName --source $imageName --force \\\n          && break\n\n        sleep $retrySleep\n        retryLoopCount=$((retryLoopCount+1))\n      done\n\n    ",
        "cleanupPreference": "[parameters('cleanupPreference')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))]",
        "[extensionResourceId(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), 'Microsoft.Authorization/roleAssignments', guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')))))]"
      ]
    }
  ],
  "outputs": {
    "importedImages": {
      "type": "array",
      "copy": {
        "count": "[length(parameters('images'))]",
        "input": {
          "originalImage": "[parameters('images')[copyIndex()]]",
          "acrHostedImage": "[format('{0}{1}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), '2021-12-01-preview').loginServer, string(skip(parameters('images')[copyIndex()], indexOf(parameters('images')[copyIndex()], '/'))))]"
        }
      },
      "metadata": {
        "description": "An array of the imported images"
      }
    }
  }
}