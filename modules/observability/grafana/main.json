{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "4519444355604454397"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "The geo-location where the grafana resource lives."
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "grafana",
      "metadata": {
        "description": "Prefix of Grafana Resource Name"
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[take(format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id)), 23)]",
      "metadata": {
        "description": "The grafana resource name."
      },
      "maxLength": 23,
      "minLength": 2
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The tags for grafana resource."
      }
    },
    "resourceSku": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The Sku of the grafana resource."
      }
    },
    "apiKey": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "The api key setting of the Grafana instance. Default value is Disabled."
      }
    },
    "deterministicOutboundIP": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Whether a Grafana instance uses deterministic outbound IPs. Default value is Disabled."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "Indicate the state for enable or disable traffic over the public interface. Default value is Disabled."
      }
    },
    "zoneRedundancy": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "Enabled"
      ],
      "metadata": {
        "description": "The zone redundancy setting of the Grafana instance. Default value is Disabled."
      }
    },
    "azureMonitorWorkspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource Id of the connected Azure Monitor Workspace."
      }
    },
    "managedServiceIdentityType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "SystemAssigned,UserAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "The managed service identity type of the Grafana instance. Default value is None."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The user assigned identity resource Ids of the Grafana instance."
      }
    },
    "enableDiagnostics": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Diagnostic Capture . default is false"
      }
    },
    "diagnosticLogsRetentionInDays": {
      "type": "int",
      "defaultValue": 365,
      "maxValue": 365,
      "minValue": 0,
      "metadata": {
        "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely. default is 365."
      }
    },
    "diagnosticStorageAccountId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the diagnostic storage account."
      }
    },
    "diagnosticWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the diagnostic log analytics workspace."
      }
    },
    "diagnosticEventHubAuthorizationRuleId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
      }
    },
    "diagnosticEventHubName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
      }
    },
    "logsToEnable": {
      "type": "string",
      "defaultValue": "allLogs",
      "allowedValues": [
        "allLogs",
        "audit",
        "GrafanaLoginEvents"
      ],
      "metadata": {
        "description": "The name of logs that will be streamed. default is allLogs."
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Define Private Endpoints that should be created for Grafana."
      }
    },
    "privateEndpointsApprovalEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Toggle if Private Endpoints manual approval for Grafana should be enabled."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "varPrivateEndpoints",
        "count": "[length(parameters('privateEndpoints'))]",
        "input": {
          "name": "[format('{0}-{1}', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name, parameters('name'))]",
          "privateLinkServiceId": "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]",
          "groupIds": [
            "grafana"
          ],
          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]"
        }
      },
      {
        "name": "diagnosticsMetrics",
        "count": "[length(variables('metricsToEnable'))]",
        "input": {
          "category": "[variables('metricsToEnable')[copyIndex('diagnosticsMetrics')]]",
          "timeGrain": null,
          "enabled": true,
          "retentionPolicy": {
            "enabled": true,
            "days": "[parameters('diagnosticLogsRetentionInDays')]"
          }
        }
      }
    ],
    "metricsToEnable": [
      "AllMetrics"
    ],
    "diagnosticsLogs": [
      {
        "category": "[if(or(equals(parameters('logsToEnable'), 'allLogs'), equals(parameters('logsToEnable'), 'audit')), null(), parameters('logsToEnable'))]",
        "categoryGroup": "[if(or(equals(parameters('logsToEnable'), 'allLogs'), equals(parameters('logsToEnable'), 'audit')), parameters('logsToEnable'), null())]",
        "enabled": true,
        "retentionPolicy": {
          "enabled": true,
          "days": "[parameters('diagnosticLogsRetentionInDays')]"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.Dashboard/grafana",
      "apiVersion": "2022-08-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('resourceSku')]"
      },
      "identity": {
        "type": "[parameters('managedServiceIdentityType')]",
        "userAssignedIdentities": "[parameters('userAssignedIdentities')]"
      },
      "properties": {
        "apiKey": "[parameters('apiKey')]",
        "autoGeneratedDomainNameLabelScope": "TenantReuse",
        "deterministicOutboundIP": "[parameters('deterministicOutboundIP')]",
        "grafanaIntegrations": "[if(equals(parameters('azureMonitorWorkspaceResourceId'), ''), createObject(), createObject('azureMonitorWorkspaceIntegrations', createArray(createObject('azureMonitorWorkspaceResourceId', parameters('azureMonitorWorkspaceResourceId')))))]",
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "zoneRedundancy": "[parameters('zoneRedundancy')]"
      }
    },
    {
      "condition": "[parameters('enableDiagnostics')]",
      "type": "Microsoft.Insights/diagnosticSettings",
      "apiVersion": "2021-05-01-preview",
      "scope": "[format('Microsoft.Dashboard/grafana/{0}', parameters('name'))]",
      "name": "[format('{0}-diagnosticSettings', parameters('name'))]",
      "properties": {
        "storageAccountId": "[if(not(empty(parameters('diagnosticStorageAccountId'))), parameters('diagnosticStorageAccountId'), null())]",
        "workspaceId": "[if(not(empty(parameters('diagnosticWorkspaceId'))), parameters('diagnosticWorkspaceId'), null())]",
        "eventHubAuthorizationRuleId": "[if(not(empty(parameters('diagnosticEventHubAuthorizationRuleId'))), parameters('diagnosticEventHubAuthorizationRuleId'), null())]",
        "eventHubName": "[if(not(empty(parameters('diagnosticEventHubName'))), parameters('diagnosticEventHubName'), null())]",
        "metrics": "[variables('diagnosticsMetrics')]",
        "logs": "[variables('diagnosticsLogs')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]"
      ]
    },
    {
      "copy": {
        "name": "grafana_rbac",
        "count": "[length(parameters('roleAssignments'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-grafana-rbac-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
          "resourceId": {
            "value": "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "7748193169751536110"
            }
          },
          "parameters": {
            "description": {
              "type": "string",
              "defaultValue": ""
            },
            "principalIds": {
              "type": "array"
            },
            "principalType": {
              "type": "string",
              "defaultValue": ""
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "resourceId": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Grafana Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '22926164-76b3-42b3-bc55-97df8dab3e41')]",
              "Grafana Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a79a5197-3a5c-4973-a920-486035ffd60f')]",
              "Grafana Viewer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60921a7e-fef1-4a43-9b16-a26c52ad4769')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Dashboard/grafana/{0}', last(split(parameters('resourceId'), '/')))]",
              "name": "[guid(last(split(parameters('resourceId'), '/')), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "description": "[parameters('description')]",
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-grafana-private-endpoints', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privateEndpoints": {
            "value": "[variables('varPrivateEndpoints')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "manualApprovalEnabled": {
            "value": "[parameters('privateEndpointsApprovalEnabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "3480581273140228488"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "manualApprovalEnabled": {
              "type": "bool"
            },
            "privateEndpoints": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "varPrivateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                  "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                  "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                  "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]"
                }
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpoint",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                "manualPrivateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                "subnet": {
                  "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                },
                "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
              }
            },
            {
              "copy": {
                "name": "privateDnsZoneGroup",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                    "input": {
                      "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                      "properties": {
                        "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "Grafana resouce id"
      },
      "value": "[resourceId('Microsoft.Dashboard/grafana', parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Grafana resource name"
      },
      "value": "[parameters('name')]"
    }
  }
}