@description('The geo-location where the grafana resource lives.')
param location string

@description('Prefix of Grafana Resource Name')
param prefix string = 'grafana'

@minLength(2)
@maxLength(23)
@description('The grafana resource name.')
param name string = take('${prefix}-${uniqueString(resourceGroup().id)}', 23)

@description('The tags for grafana resource.')
param tags object = {}

@description('The Sku of the grafana resource.')
param resourceSku string = 'Standard'

@description('The api key setting of the Grafana instance. Default value is Disabled.')
@allowed([ 'Disabled', 'Enabled' ])
param apiKey string = 'Disabled'

@description('Whether a Grafana instance uses deterministic outbound IPs. Default value is Disabled.')
@allowed([ 'Disabled', 'Enabled' ])
param deterministicOutboundIP string = 'Disabled'

@description('Indicate the state for enable or disable traffic over the public interface. Default value is Disabled.')
@allowed([ 'Disabled', 'Enabled' ])
param publicNetworkAccess string = 'Disabled'

@description('The zone redundancy setting of the Grafana instance. Default value is Disabled.')
@allowed([ 'Disabled', 'Enabled' ])
param zoneRedundancy string = 'Disabled'

@description('The resource Id of the connected Azure Monitor Workspace.')
param azureMonitorWorkspaceResourceId string = ''

@description('The managed service identity type of the Grafana instance. Default value is None.')
@allowed([ 'None', 'SystemAssigned', 'SystemAssigned,UserAssigned', 'UserAssigned' ])
param managedServiceIdentityType string = 'None'

@description('The user assigned identity resource Ids of the Grafana instance.')
param userAssignedIdentities object = {}

@description('Enable Diagnostic Capture . default is false')
param enableDiagnostics bool = false

@description('Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely. default is 365.')
@minValue(0)
@maxValue(365)
param diagnosticLogsRetentionInDays int = 365

@description('Resource ID of the diagnostic storage account.')
param diagnosticStorageAccountId string = ''

@description('Resource ID of the diagnostic log analytics workspace.')
param diagnosticWorkspaceId string = ''

@description('Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to.')
param diagnosticEventHubAuthorizationRuleId string = ''

@description('Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category.')
param diagnosticEventHubName string = ''

@description('The name of logs that will be streamed. default is allLogs.')
@allowed([
  'allLogs'
  'audit'
  'GrafanaLoginEvents'

])
param logsToEnable string = 'allLogs'

@description('Array of role assignment objects that contain the \'roleDefinitionIdOrName\' and \'principalId\' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: \'/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\'')
param roleAssignments array = []

@description('Define Private Endpoints that should be created for Grafana.')
param privateEndpoints array = []

@description('Toggle if Private Endpoints manual approval for Grafana should be enabled.')
param privateEndpointsApprovalEnabled bool = false

var metricsToEnable = [
  'AllMetrics'
]

var varPrivateEndpoints = [for privateEndpoint in privateEndpoints: {
  name: '${privateEndpoint.name}-${grafana.name}'
  privateLinkServiceId: grafana.id
  groupIds: [
    'grafana'
  ]
  subnetId: privateEndpoint.subnetId
  privateDnsZones: contains(privateEndpoint, 'privateDnsZoneId') ? [
    {
      name: 'default'
      zoneId: privateEndpoint.privateDnsZoneId
    }
  ] : []
}]

var diagnosticsLogs = [ {
    category: logsToEnable == 'allLogs' || logsToEnable == 'audit' ? null : logsToEnable
    categoryGroup: logsToEnable == 'allLogs' || logsToEnable == 'audit' ? logsToEnable : null
    enabled: true
    retentionPolicy: {
      enabled: true
      days: diagnosticLogsRetentionInDays
    }
  } ]

var diagnosticsMetrics = [for metric in metricsToEnable: {
  category: metric
  timeGrain: null
  enabled: true
  retentionPolicy: {
    enabled: true
    days: diagnosticLogsRetentionInDays
  }
}]

resource grafana 'Microsoft.Dashboard/grafana@2022-08-01' = {
  name: name
  location: location
  tags: tags
  sku: {
    name: resourceSku
  }
  identity: {
    type: managedServiceIdentityType
    userAssignedIdentities: userAssignedIdentities
  }
  properties: {
    apiKey: apiKey
    autoGeneratedDomainNameLabelScope: 'TenantReuse'
    deterministicOutboundIP: deterministicOutboundIP
    grafanaIntegrations: azureMonitorWorkspaceResourceId == '' ? {} : {
      azureMonitorWorkspaceIntegrations: [
        {
          azureMonitorWorkspaceResourceId: azureMonitorWorkspaceResourceId
        }
      ]
    }
    publicNetworkAccess: publicNetworkAccess
    zoneRedundancy: zoneRedundancy
  }
}

module grafana_rbac 'modules/nested_rbac.bicep' = [for (roleAssignment, index) in roleAssignments: {
  name: '${uniqueString(deployment().name, location)}-grafana-rbac-${index}'
  params: {
    description: contains(roleAssignment, 'description') ? roleAssignment.description : ''
    principalIds: roleAssignment.principalIds
    roleDefinitionIdOrName: roleAssignment.roleDefinitionIdOrName
    principalType: contains(roleAssignment, 'principalType') ? roleAssignment.principalType : ''
    resourceId: grafana.id
  }
}]

module grafana_privateEndpoint 'modules/nested_privateEndpoint.bicep' = {
  name: '${uniqueString(deployment().name, location)}-grafana-private-endpoints'
  params: {
    location: location
    privateEndpoints: varPrivateEndpoints
    tags: tags
    manualApprovalEnabled: privateEndpointsApprovalEnabled
  }
}

resource grafanaDiagnosticSettings 'Microsoft.Insights/diagnosticSettings@2021-05-01-preview' = if (enableDiagnostics) {
  name: '${grafana.name}-diagnosticSettings'
  properties: {
    storageAccountId: !empty(diagnosticStorageAccountId) ? diagnosticStorageAccountId : null
    workspaceId: !empty(diagnosticWorkspaceId) ? diagnosticWorkspaceId : null
    eventHubAuthorizationRuleId: !empty(diagnosticEventHubAuthorizationRuleId) ? diagnosticEventHubAuthorizationRuleId : null
    eventHubName: !empty(diagnosticEventHubName) ? diagnosticEventHubName : null
    metrics: diagnosticsMetrics
    logs: diagnosticsLogs
  }
  scope: grafana
}

@description('Grafana resouce id')
output id string = grafana.id

@description('Grafana resource name')
output name string = grafana.name
