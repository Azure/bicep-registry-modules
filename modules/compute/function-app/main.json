{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "4792359155737200648"
    }
  },
  "definitions": {
    "functionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "properties": {
          "type": "object",
          "properties": {
            "language": {
              "type": "string"
            },
            "config": {
              "type": "object"
            },
            "isDisabled": {
              "type": "bool"
            },
            "files": {
              "type": "object"
            }
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "maxLength": 64,
      "metadata": {
        "description": "Required. Name for the Azure Function App."
      }
    },
    "location": {
      "type": "string",
      "metadata": {
        "description": "Required. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags for all resources within Azure Function App module."
      }
    },
    "sku": {
      "type": "object",
      "defaultValue": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y",
        "capacity": 0
      },
      "metadata": {
        "description": "Required. Defines the name, tier, size, family and capacity of the app service plan."
      }
    },
    "serverOS": {
      "type": "string",
      "defaultValue": "Windows",
      "allowedValues": [
        "Windows",
        "Linux"
      ],
      "metadata": {
        "description": "Optional. Kind of server OS."
      }
    },
    "perSiteScaling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. If true, apps assigned to this app service plan can be scaled independently. If false, apps assigned to this app service plan will scale to all instances of the plan."
      }
    },
    "maximumElasticWorkerCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled app service plan."
      }
    },
    "targetWorkerCount": {
      "type": "int",
      "defaultValue": 0,
      "metadata": {
        "description": "Optional. Scaling worker count."
      }
    },
    "targetWorkerSizeId": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [
        0,
        1,
        2
      ],
      "metadata": {
        "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "SystemAssigned",
      "metadata": {
        "description": "Optional. The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user assigned identities. The type 'None' will remove any identities from the sites ( app or functionapp)."
      },
      "allowedValues": [
        "None",
        "SystemAssigned",
        "UserAssigned",
        "SystemAssigned, UserAssigned"
      ]
    },
    "userAssignedIdentityId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Specify the resource ID of the user assigned Managed Identity, if 'identity' is set as 'UserAssigned'."
      }
    },
    "httpsOnly": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Configures a site to accept only HTTPS requests. Issues redirect for HTTP requests."
      }
    },
    "appServiceEnvironmentId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the app service environment to use for this resource."
      }
    },
    "clientAffinityEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. If client affinity is enabled."
      }
    },
    "kind": {
      "type": "string",
      "defaultValue": "functionapp",
      "allowedValues": [
        "functionapp",
        "app"
      ],
      "metadata": {
        "description": "Required. Type of site to deploy."
      }
    },
    "functionsExtensionVersion": {
      "type": "string",
      "defaultValue": "~4",
      "metadata": {
        "description": "Optional. Version of the function extension."
      }
    },
    "functionAppEditMode": {
      "type": "string",
      "defaultValue": "readonly",
      "allowedValues": [
        "readonly",
        "readwrite"
      ],
      "metadata": {
        "description": "Dictates whether editing in the Azure portal is enabled."
      }
    },
    "functionsWorkerRuntime": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java",
        "powershell",
        ""
      ],
      "metadata": {
        "description": "Optional. Runtime of the function worker. WARNING: NOT ALL OSes SUPPORT ALL RUNTIMES!"
      }
    },
    "functionsDefaultNodeversion": {
      "type": "string",
      "defaultValue": "~14",
      "metadata": {
        "description": "Optional. NodeJS version."
      }
    },
    "publicNetworkAccessForIngestion": {
      "type": "string",
      "defaultValue": "Enabled",
      "metadata": {
        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
      },
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "publicNetworkAccessForQuery": {
      "type": "string",
      "defaultValue": "Enabled",
      "metadata": {
        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
      },
      "allowedValues": [
        "Disabled",
        "Enabled"
      ]
    },
    "appInsightsType": {
      "type": "string",
      "defaultValue": "web",
      "allowedValues": [
        "web",
        "other"
      ],
      "metadata": {
        "description": "Optional. Application type."
      }
    },
    "appInsightsKind": {
      "type": "string",
      "defaultValue": "azfunc",
      "metadata": {
        "description": "Optional. The kind of application that this component refers to, used to customize UI."
      }
    },
    "enableInsights": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enabled or Disable Insights for Azure functions."
      }
    },
    "workspaceResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Resource ID of the log analytics workspace which the data will be ingested to, if enableaInsights is false."
      }
    },
    "functions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/functionType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of Azure function (Actual object where our code resides)."
      }
    },
    "enableVnetIntegration": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable Vnet Integration or not."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The subnet that will be integrated to enable vnet Integration."
      }
    },
    "enableSourceControl": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable Source control for the function."
      }
    },
    "repoUrl": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Repository or source control URL."
      }
    },
    "branch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Optional. Name of branch to use for deployment."
      }
    },
    "storageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the storage account used by function app."
      }
    },
    "isManualIntegration": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. to limit to manual integration; to enable continuous integration (which configures webhooks into online repos like GitHub)."
      }
    },
    "isMercurial": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. true for a Mercurial repository; false for a Git repository."
      }
    },
    "storgeAccountResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource Group of storage account used by function app."
      }
    },
    "enablePackageDeploy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. True to deploy functions from zip package. \"functionPackageUri\" must be specified if enabled. The package option and sourcecontrol option should not be enabled at the same time."
      }
    },
    "functionPackageUri": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. URI to the function source code zip package, must be accessible by the deployer. E.g. A zip file on Azure storage in the same resource group."
      }
    },
    "enableDockerContainer": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable docker image deployment."
      }
    },
    "dockerImage": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. This will be required when enableDockerContainer passed as true."
      }
    },
    "extraAppSettings": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Extra app settings that should be provisioned while creating the function app. Note! Settings below should not be included unless absolutely necessary, because settings in this param will override the ones added by the module:\nAzureWebJobsStorage\nAzureWebJobsDashboard\nWEBSITE_CONTENTSHARE\nWEBSITE_CONTENTAZUREFILECONNECTIONSTRING\nFUNCTIONS_EXTENSION_VERSION\nFUNCTIONS_WORKER_RUNTIME\nWEBSITE_NODE_DEFAULT_VERSION\nAPPINSIGHTS_INSTRUMENTATIONKEY\nAPPLICATIONINSIGHTS_CONNECTION_STRING"
      }
    },
    "ftpsState": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Disabled",
        "AllAllowed",
        "FtpsOnly"
      ],
      "metadata": {
        "description": "The state of FTP / FTPS service."
      }
    },
    "minTlsVersion": {
      "type": "string",
      "defaultValue": "1.2",
      "allowedValues": [
        "1.0",
        "1.1",
        "1.2"
      ],
      "metadata": {
        "description": "Configures the minimum version of TLS required for SSL requests."
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Linux App Framework and version. e.g. PYTHON|3.9"
      }
    },
    "connectionStringProperties": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The connection strings properties"
      }
    }
  },
  "variables": {
    "servicePlanKind": "[if(equals(parameters('serverOS'), 'Linux'), toLower(parameters('serverOS')), '')]"
  },
  "resources": {
    "storageAccount": {
      "existing": true,
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-06-01",
      "resourceGroup": "[parameters('storgeAccountResourceGroup')]",
      "name": "[parameters('storageAccountName')]",
      "metadata": {
        "description": "Defines storageAccounts for Azure Function App."
      }
    },
    "serverfarms": {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": "[parameters('sku')]",
      "kind": "[variables('servicePlanKind')]",
      "properties": {
        "perSiteScaling": "[parameters('perSiteScaling')]",
        "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
        "reserved": "[equals(parameters('serverOS'), 'Linux')]",
        "targetWorkerCount": "[parameters('targetWorkerCount')]",
        "targetWorkerSizeId": "[parameters('targetWorkerSizeId')]"
      },
      "metadata": {
        "description": "Defines Application service plan."
      }
    },
    "appInsights": {
      "condition": "[parameters('enableInsights')]",
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('ai-{0}', parameters('name'))]",
      "location": "[parameters('location')]",
      "kind": "[parameters('appInsightsKind')]",
      "properties": {
        "Application_Type": "[parameters('appInsightsType')]",
        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]"
      },
      "tags": "[parameters('tags')]",
      "metadata": {
        "description": "If enabled, this will help monitor the application using the log analytics workspace."
      }
    },
    "sites": {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "[parameters('kind')]",
      "identity": {
        "type": "[parameters('identityType')]",
        "userAssignedIdentities": "[if(or(equals(parameters('identityType'), 'UserAssigned'), equals(parameters('identityType'), 'SystemAssigned, UserAssigned')), createObject(format('{0}', parameters('userAssignedIdentityId')), createObject()), null())]"
      },
      "properties": {
        "siteConfig": {
          "linuxFxVersion": "[if(parameters('enableDockerContainer'), format('DOCKER|{0}', parameters('dockerImage')), coalesce(parameters('linuxFxVersion'), null()))]",
          "ftpsState": "[parameters('ftpsState')]",
          "minTlsVersion": "[parameters('minTlsVersion')]"
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]",
        "httpsOnly": "[parameters('httpsOnly')]",
        "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
        "clientAffinityEnabled": "[parameters('clientAffinityEnabled')]"
      },
      "dependsOn": [
        "serverfarms"
      ],
      "metadata": {
        "description": "The app or function app resource.\nNote: This is not actual Azure Function App this will be container for storing multiple functions."
      }
    },
    "config": {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}', parameters('name'), 'appsettings')]",
      "properties": "[union(createObject('AzureWebJobsStorage', if(not(empty(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('storageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[0].value), null()), 'AzureWebJobsDashboard', if(not(empty(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('storageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[0].value), null()), 'WEBSITE_CONTENTSHARE', parameters('name'), 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', if(not(empty(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')))), format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('storageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storgeAccountResourceGroup')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-06-01').keys[0].value), null()), 'FUNCTIONS_EXTENSION_VERSION', parameters('functionsExtensionVersion'), 'FUNCTION_APP_EDIT_MODE', parameters('functionAppEditMode'), 'FUNCTIONS_WORKER_RUNTIME', if(and(equals(reference('sites', '2022-03-01', 'full').kind, 'functionapp'), not(empty(parameters('functionsWorkerRuntime')))), parameters('functionsWorkerRuntime'), null()), 'WEBSITE_NODE_DEFAULT_VERSION', if(and(and(equals(reference('sites', '2022-03-01', 'full').kind, 'functionapp'), equals(parameters('functionsWorkerRuntime'), 'node')), not(empty(parameters('functionsDefaultNodeversion')))), parameters('functionsDefaultNodeversion'), null()), 'APPINSIGHTS_INSTRUMENTATIONKEY', if(and(not(empty(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('name'))))), parameters('enableInsights')), reference('appInsights').InstrumentationKey, null()), 'APPLICATIONINSIGHTS_CONNECTION_STRING', if(and(not(empty(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('name'))))), parameters('enableInsights')), reference('appInsights').ConnectionString, null())), parameters('extraAppSettings'))]",
      "dependsOn": [
        "appInsights",
        "networkConfig",
        "sites"
      ],
      "metadata": {
        "description": "Appsettings/config for the sites (app or functionapp)."
      }
    },
    "connectionString": {
      "condition": "[not(empty(parameters('connectionStringProperties')))]",
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('name'), 'connectionstrings')]",
      "kind": "string",
      "properties": "[parameters('connectionStringProperties')]",
      "dependsOn": [
        "sites"
      ]
    },
    "networkConfig": {
      "condition": "[equals(parameters('enableVnetIntegration'), true())]",
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('name'), 'virtualNetwork')]",
      "properties": {
        "subnetResourceId": "[parameters('subnetId')]"
      },
      "dependsOn": [
        "sites"
      ]
    },
    "azureFunction": {
      "copy": {
        "name": "azureFunction",
        "count": "[length(parameters('functions'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}', parameters('name'), parameters('functions')[copyIndex()].name)]",
      "properties": {
        "language": "[parameters('functions')[copyIndex()].properties.language]",
        "config": "[parameters('functions')[copyIndex()].properties.config]",
        "isDisabled": "[parameters('functions')[copyIndex()].properties.isDisabled]",
        "files": "[parameters('functions')[copyIndex()].properties.files]"
      },
      "dependsOn": [
        "config",
        "serverfarms",
        "sites"
      ],
      "metadata": {
        "description": "The resources actual is function where code exits."
      }
    },
    "sourcecontrol": {
      "condition": "[parameters('enableSourceControl')]",
      "type": "Microsoft.Web/sites/sourcecontrols",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('name'), 'web')]",
      "properties": {
        "repoUrl": "[parameters('repoUrl')]",
        "branch": "[parameters('branch')]",
        "isManualIntegration": "[parameters('isManualIntegration')]",
        "isMercurial": "[parameters('isMercurial')]"
      },
      "dependsOn": [
        "sites"
      ]
    },
    "extensions": {
      "condition": "[parameters('enablePackageDeploy')]",
      "type": "Microsoft.Web/sites/extensions",
      "apiVersion": "2022-03-01",
      "name": "[format('{0}/{1}', parameters('name'), 'MSDeploy')]",
      "properties": {
        "packageUri": "[parameters('functionPackageUri')]"
      },
      "dependsOn": [
        "sites"
      ],
      "metadata": {
        "description": "Deploy function app from zip file."
      }
    }
  },
  "outputs": {
    "siteId": {
      "type": "string",
      "metadata": {
        "description": "Get resource id for app or functionapp."
      },
      "value": "[resourceId('Microsoft.Web/sites', parameters('name'))]"
    },
    "siteName": {
      "type": "string",
      "metadata": {
        "description": "Get resource name for app or functionapp."
      },
      "value": "[parameters('name')]"
    },
    "serverfarmsId": {
      "type": "string",
      "metadata": {
        "description": "Get resource ID of the app service plan."
      },
      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
    },
    "serverfarmsName": {
      "type": "string",
      "metadata": {
        "description": "Get name of the app service plan."
      },
      "value": "[parameters('name')]"
    },
    "functions": {
      "type": "array",
      "metadata": {
        "description": "Array of functions having name , language,isDisabled and id of functions."
      },
      "copy": {
        "count": "[length(parameters('functions'))]",
        "input": {
          "name": "[parameters('functions')[copyIndex()].name]",
          "language": "[parameters('functions')[copyIndex()].properties.language]",
          "isDisabled": "[parameters('functions')[copyIndex()].properties.isDisabled]",
          "id": "[format('{0}/functions/{1}', resourceId('Microsoft.Web/sites', parameters('name')), parameters('functions')[copyIndex()].name)]",
          "files": "[parameters('functions')[copyIndex()].properties.files]"
        }
      }
    },
    "sitePrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Principal Id of the identity assigned to the function app."
      },
      "value": "[if(equals(reference('sites', '2022-03-01', 'full').identity.type, 'SystemAssigned'), reference('sites', '2022-03-01', 'full').identity.principalId, '')]"
    }
  }
}