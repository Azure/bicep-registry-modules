{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.1.55165",
      "templateHash": "12234303818178862283"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[format('kusto{0}', uniqueString(resourceGroup().id, subscription().id))]",
      "metadata": {
        "description": "Name of the Kusto Cluster. Must be unique within Azure."
      },
      "maxLength": 22,
      "minLength": 4
    },
    "databaseName": {
      "type": "string",
      "defaultValue": "[format('kustodb{0}', uniqueString(resourceGroup().id, subscription().id))]",
      "metadata": {
        "description": "Name of the Kusto Database. Must be unique within Kusto Cluster."
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "Dev(No SLA)_Standard_D11_v2",
      "metadata": {
        "description": "The SKU of the Kusto Cluster."
      },
      "allowedValues": [
        "Dev(No SLA)_Standard_D11_v2",
        "Dev(No SLA)_Standard_E2a_v4",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D16d_v5",
        "Standard_D32d_v4",
        "Standard_D32d_v5",
        "Standard_DS13_v2+1TB_PS",
        "Standard_DS13_v2+2TB_PS",
        "Standard_DS14_v2+3TB_PS",
        "Standard_DS14_v2+4TB_PS",
        "Standard_E16a_v4",
        "Standard_E16ads_v5",
        "Standard_E16as_v4+3TB_PS",
        "Standard_E16as_v4+4TB_PS",
        "Standard_E16as_v5+3TB_PS",
        "Standard_E16as_v5+4TB_PS",
        "Standard_E16d_v4",
        "Standard_E16d_v5",
        "Standard_E16s_v4+3TB_PS",
        "Standard_E16s_v4+4TB_PS",
        "Standard_E16s_v5+3TB_PS",
        "Standard_E16s_v5+4TB_PS",
        "Standard_E2a_v4",
        "Standard_E2ads_v5",
        "Standard_E2d_v4",
        "Standard_E2d_v5",
        "Standard_E4a_v4",
        "Standard_E4ads_v5",
        "Standard_E4d_v4",
        "Standard_E4d_v5",
        "Standard_E64i_v3",
        "Standard_E80ids_v4",
        "Standard_E8a_v4",
        "Standard_E8ads_v5",
        "Standard_E8as_v4+1TB_PS",
        "Standard_E8as_v4+2TB_PS",
        "Standard_E8as_v5+1TB_PS",
        "Standard_E8as_v5+2TB_PS",
        "Standard_E8d_v4",
        "Standard_E8d_v5",
        "Standard_E8s_v4+1TB_PS",
        "Standard_E8s_v4+2TB_PS",
        "Standard_E8s_v5+1TB_PS",
        "Standard_E8s_v5+2TB_PS",
        "Standard_EC16ads_v5",
        "Standard_EC16as_v5+3TB_PS",
        "Standard_EC16as_v5+4TB_PS",
        "Standard_EC8ads_v5",
        "Standard_EC8as_v5+1TB_PS",
        "Standard_EC8as_v5+2TB_PS",
        "Standard_L16as_v3",
        "Standard_L16s",
        "Standard_L16s_v2",
        "Standard_L16s_v3",
        "Standard_L32as_v3",
        "Standard_L32s_v3",
        "Standard_L4s",
        "Standard_L8as_v3",
        "Standard_L8s",
        "Standard_L8s_v2",
        "Standard_L8s_v3"
      ]
    },
    "tier": {
      "type": "string",
      "defaultValue": "Standard",
      "metadata": {
        "description": "The tier of the Kusto Cluster."
      },
      "allowedValues": [
        "Basic",
        "Standard"
      ]
    },
    "numberOfNodes": {
      "type": "int",
      "defaultValue": "[parameters('autoScaleMin')]",
      "metadata": {
        "description": "The number of nodes in the Kusto Cluster."
      },
      "maxValue": 1000,
      "minValue": 2
    },
    "version": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The version of the Kusto Cluster."
      }
    },
    "enableAutoScale": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable auto scale."
      }
    },
    "autoScaleMin": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The minimum number of nodes in the Kusto Cluster."
      },
      "maxValue": 999,
      "minValue": 2
    },
    "autoScaleMax": {
      "type": "int",
      "defaultValue": 8,
      "metadata": {
        "description": "The maximum number of nodes in the Kusto Cluster."
      },
      "maxValue": 1000,
      "minValue": 3
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The tags of the Kusto Cluster."
      }
    },
    "scripts": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The script content of the Kusto Database. Use [loadTextContent('script.kql')] to load the script content from a file."
      }
    },
    "continueOnErrors": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Continue if there are errors running a script."
      }
    },
    "enableManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable the use of a Managed Identity with Data Explorer."
      }
    },
    "enableStreamingIngest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable streaming ingest."
      }
    },
    "enablePurge": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable purge."
      }
    },
    "enableDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable disk encryption."
      }
    },
    "enableDoubleEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable double encryption."
      }
    },
    "trustAllTenants": {
      "type": "bool",
      "defaultValue": false
    },
    "trustedExternalTenants": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The list of trusted external tenants."
      }
    },
    "enableAutoStop": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable auto stop."
      }
    },
    "enableZoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable zone redundant."
      }
    },
    "databaseKind": {
      "type": "string",
      "defaultValue": "ReadWrite",
      "metadata": {
        "description": "The kind of the Kusto Database."
      },
      "allowedValues": [
        "ReadWrite",
        "ReadOnlyFollowing"
      ]
    },
    "unlimitedSoftDelete": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable soft delete."
      }
    },
    "softDeletePeriod": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The soft delete period of the Kusto Database."
      },
      "maxValue": 36500,
      "minValue": 0
    },
    "unlimitedHotCache": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable unlimited hot cache."
      }
    },
    "hotCachePeriod": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The hot cache period of the Kusto Database."
      },
      "maxValue": 36500,
      "minValue": 0
    },
    "enableEventHubConnector": {
      "type": "bool",
      "defaultValue": "[not(equals(parameters('newOrExistingEventHub'), 'none'))]",
      "metadata": {
        "description": "Enable or disable the Event Hub connector."
      }
    },
    "eventHubNamespaceName": {
      "type": "string",
      "defaultValue": "[format('eventHub{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of Event Hub's namespace"
      }
    },
    "eventHubName": {
      "type": "string",
      "defaultValue": "kustoHub",
      "metadata": {
        "description": "Name of Event Hub"
      }
    },
    "enableCosmosDBConnector": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable the Cosmos DB connector."
      }
    },
    "cosmosDDAccountName": {
      "type": "string",
      "defaultValue": "[format('cosmosdb{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of Cosmos DB account"
      }
    },
    "cosmosDBDatabaseName": {
      "type": "string",
      "defaultValue": "mydb",
      "metadata": {
        "description": "Name of Cosmos DB database"
      }
    },
    "cosmosDBContainerName": {
      "type": "string",
      "defaultValue": "mycontainer",
      "metadata": {
        "description": "Name of Cosmos DB container"
      }
    },
    "newOrExistingEventHub": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ]
    },
    "eventHubSku": {
      "type": "object",
      "defaultValue": {
        "capacity": 1,
        "name": "Standard",
        "tier": "Standard"
      }
    },
    "eventHubProperties": {
      "type": "object",
      "defaultValue": {
        "messageRetentionInDays": 2,
        "partitionCount": 2
      }
    },
    "newOrExistingCosmosDB": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "new",
        "existing",
        "none"
      ]
    }
  },
  "variables": {
    "eventHubDataReceiver": "a638d3c7-ab3a-418d-83e6-5f17a39d4fde",
    "cosmosDataReader": "00000000-0000-0000-0000-000000000001"
  },
  "resources": [
    {
      "copy": {
        "name": "kustoScript",
        "count": "[length(parameters('scripts'))]"
      },
      "type": "Microsoft.Kusto/clusters/databases/scripts",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), format('db-script-{0}', uniqueString(parameters('scripts')[copyIndex()])))]",
      "properties": {
        "scriptContent": "[parameters('scripts')[copyIndex()]]",
        "continueOnErrors": "[parameters('continueOnErrors')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('name'), parameters('databaseName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHubConnector')]",
      "type": "Microsoft.Kusto/clusters/databases/dataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), 'eventConnection')]",
      "location": "[parameters('location')]",
      "kind": "EventHub",
      "properties": {
        "compression": "None",
        "consumerGroup": "kustoConsumerGroup",
        "dataFormat": "MULTIJSON",
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
        "eventSystemProperties": [
          "x-opt-enqueued-time"
        ],
        "managedIdentityResourceId": "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]",
        "mappingRuleName": "DirectJson",
        "tableName": "RawEvents"
      },
      "dependsOn": [
        "[extensionResourceId(resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName')), 'Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, parameters('eventHubName'), variables('eventHubDataReceiver'), parameters('name')))]",
        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('name'), parameters('databaseName'))]",
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs/consumergroups', parameters('eventHubNamespaceName'), parameters('eventHubName'), 'kustoConsumerGroup')]",
        "kustoScript"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/dataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databaseName'), 'nosqlConnection')]",
      "location": "[parameters('location')]",
      "kind": "CosmosDb",
      "properties": {
        "tableName": "TestTable",
        "mappingRuleName": "DocumentMapping",
        "managedIdentityResourceId": "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]",
        "cosmosDbAccountResourceId": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDDAccountName'))]",
        "cosmosDbDatabase": "[parameters('cosmosDBDatabaseName')]",
        "cosmosDbContainer": "[parameters('cosmosDBContainerName')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('cosmosDDAccountName'), guid(resourceId('Microsoft.Kusto/clusters', parameters('name')), parameters('cosmosDDAccountName')))]",
        "[resourceId('Microsoft.Kusto/clusters/databases', parameters('name'), parameters('databaseName'))]",
        "kustoScript"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}', parameters('name'), parameters('databaseName'))]",
      "location": "[parameters('location')]",
      "kind": "[parameters('databaseKind')]",
      "properties": {
        "softDeletePeriod": "[if(parameters('unlimitedSoftDelete'), null(), format('P{0}D', parameters('softDeletePeriod')))]",
        "hotCachePeriod": "[if(parameters('unlimitedHotCache'), null(), format('P{0}D', parameters('hotCachePeriod')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableEventHubConnector'), equals(parameters('newOrExistingEventHub'), 'new'))]",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}/{2}', parameters('eventHubNamespaceName'), parameters('eventHubName'), 'kustoConsumerGroup')]",
      "properties": {},
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubNamespaceName'), parameters('eventHubName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableEventHubConnector'), equals(parameters('newOrExistingEventHub'), 'new'))]",
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
      "properties": "[parameters('eventHubProperties')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ]
    },
    {
      "condition": "[parameters('enableEventHubConnector')]",
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}/{2}', parameters('eventHubNamespaceName'), parameters('eventHubName'), 'kustoConsumerGroup')]"
    },
    {
      "condition": "[and(parameters('enableCosmosDBConnector'), equals(parameters('newOrExistingCosmosDB'), 'new'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}/{2}', parameters('cosmosDDAccountName'), parameters('cosmosDBDatabaseName'), parameters('cosmosDBContainerName'))]",
      "properties": {
        "options": {
          "throughput": 400
        },
        "resource": {
          "id": "[parameters('cosmosDBContainerName')]",
          "partitionKey": {
            "kind": "Hash",
            "paths": [
              "/part"
            ]
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosDDAccountName'), parameters('cosmosDBDatabaseName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableCosmosDBConnector'), equals(parameters('newOrExistingCosmosDB'), 'new'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}', parameters('cosmosDDAccountName'), parameters('cosmosDBDatabaseName'))]",
      "properties": {
        "resource": {
          "id": "[parameters('cosmosDBDatabaseName')]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDDAccountName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableCosmosDBConnector'), parameters('enableCosmosDBConnector'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
      "apiVersion": "2022-08-15",
      "name": "[format('{0}/{1}', parameters('cosmosDDAccountName'), guid(resourceId('Microsoft.Kusto/clusters', parameters('name')), parameters('cosmosDDAccountName')))]",
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('name')), '2022-12-29', 'full').identity.principalId]",
        "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDDAccountName'), variables('cosmosDataReader'))]",
        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDDAccountName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters",
      "apiVersion": "2022-12-29",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "[parameters('tier')]",
        "capacity": "[parameters('numberOfNodes')]"
      },
      "tags": "[parameters('tags')]",
      "identity": "[if(parameters('enableManagedIdentity'), createObject('type', 'systemAssigned'), null())]",
      "zones": "[if(parameters('enableZoneRedundant'), createArray('1', '2', '3'), null())]",
      "properties": {
        "optimizedAutoscale": "[if(parameters('enableAutoScale'), createObject('isEnabled', parameters('enableAutoScale'), 'minimum', parameters('autoScaleMin'), 'maximum', parameters('autoScaleMax'), 'version', parameters('version')), null())]",
        "enableStreamingIngest": "[parameters('enableStreamingIngest')]",
        "enablePurge": "[parameters('enablePurge')]",
        "enableDiskEncryption": "[parameters('enableDiskEncryption')]",
        "enableDoubleEncryption": "[parameters('enableDoubleEncryption')]",
        "trustedExternalTenants": "[if(parameters('trustAllTenants'), createArray(createObject('value', '*')), parameters('trustedExternalTenants'))]",
        "enableAutoStop": "[parameters('enableAutoStop')]"
      }
    },
    {
      "condition": "[and(parameters('enableEventHubConnector'), equals(parameters('newOrExistingEventHub'), 'new'))]",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[parameters('eventHubNamespaceName')]",
      "location": "[parameters('location')]",
      "sku": "[parameters('eventHubSku')]",
      "properties": {}
    },
    {
      "condition": "[parameters('enableEventHubConnector')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', parameters('eventHubNamespaceName'), parameters('eventHubName'))]",
      "name": "[guid(resourceGroup().id, parameters('eventHubName'), variables('eventHubDataReceiver'), parameters('name'))]",
      "properties": {
        "description": "Give \"Azure Event Hubs Data Receiver\" to the cluster",
        "principalId": "[reference(resourceId('Microsoft.Kusto/clusters', parameters('name')), '2022-12-29', 'full').identity.principalId]",
        "principalType": "ServicePrincipal",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('eventHubDataReceiver'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]",
        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventHubNamespaceName'))]"
      ]
    },
    {
      "condition": "[and(parameters('enableCosmosDBConnector'), equals(parameters('newOrExistingCosmosDB'), 'new'))]",
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2022-08-15",
      "name": "[parameters('cosmosDDAccountName')]",
      "location": "[parameters('location')]",
      "kind": "GlobalDocumentDB",
      "properties": {
        "locations": [
          {
            "locationName": "[parameters('location')]",
            "failoverPriority": 0
          }
        ],
        "databaseAccountOfferType": "Standard"
      }
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "The ID of the created or existing Kusto Cluster. Use this ID to reference the Kusto Cluster in other Azure resource deployments."
      },
      "value": "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]"
    }
  }
}