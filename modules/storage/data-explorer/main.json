{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.18.4.5664",
      "templateHash": "13062535941509403074"
    }
  },
  "definitions": {
    "kustoTier": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard"
      ]
    },
    "kustoSku": {
      "type": "string",
      "allowedValues": [
        "Dev(No SLA)_Standard_D11_v2",
        "Dev(No SLA)_Standard_E2a_v4",
        "Standard_D11_v2",
        "Standard_D12_v2",
        "Standard_D13_v2",
        "Standard_D14_v2",
        "Standard_D16d_v5",
        "Standard_D32d_v4",
        "Standard_D32d_v5",
        "Standard_DS13_v2+1TB_PS",
        "Standard_DS13_v2+2TB_PS",
        "Standard_DS14_v2+3TB_PS",
        "Standard_DS14_v2+4TB_PS",
        "Standard_E16a_v4",
        "Standard_E16ads_v5",
        "Standard_E16as_v4+3TB_PS",
        "Standard_E16as_v4+4TB_PS",
        "Standard_E16as_v5+3TB_PS",
        "Standard_E16as_v5+4TB_PS",
        "Standard_E16d_v4",
        "Standard_E16d_v5",
        "Standard_E16s_v4+3TB_PS",
        "Standard_E16s_v4+4TB_PS",
        "Standard_E16s_v5+3TB_PS",
        "Standard_E16s_v5+4TB_PS",
        "Standard_E2a_v4",
        "Standard_E2ads_v5",
        "Standard_E2d_v4",
        "Standard_E2d_v5",
        "Standard_E4a_v4",
        "Standard_E4ads_v5",
        "Standard_E4d_v4",
        "Standard_E4d_v5",
        "Standard_E64i_v3",
        "Standard_E80ids_v4",
        "Standard_E8a_v4",
        "Standard_E8ads_v5",
        "Standard_E8as_v4+1TB_PS",
        "Standard_E8as_v4+2TB_PS",
        "Standard_E8as_v5+1TB_PS",
        "Standard_E8as_v5+2TB_PS",
        "Standard_E8d_v4",
        "Standard_E8d_v5",
        "Standard_E8s_v4+1TB_PS",
        "Standard_E8s_v4+2TB_PS",
        "Standard_E8s_v5+1TB_PS",
        "Standard_E8s_v5+2TB_PS",
        "Standard_EC16ads_v5",
        "Standard_EC16as_v5+3TB_PS"
      ]
    },
    "period": {
      "type": "int",
      "maxValue": 36500,
      "minValue": 0
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Deployment Location"
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[format('kusto{0}', uniqueString(resourceGroup().id, subscription().id))]",
      "metadata": {
        "description": "Name of the Kusto Cluster. Must be unique within Azure."
      },
      "maxLength": 22,
      "minLength": 4
    },
    "sku": {
      "$ref": "#/definitions/kustoSku",
      "defaultValue": "Dev(No SLA)_Standard_D11_v2",
      "metadata": {
        "description": "The SKU of the Kusto Cluster."
      }
    },
    "tier": {
      "$ref": "#/definitions/kustoTier",
      "defaultValue": "Basic",
      "metadata": {
        "description": "The tier of the Kusto Cluster."
      }
    },
    "numberOfNodes": {
      "type": "int",
      "defaultValue": "[parameters('autoScaleMin')]",
      "metadata": {
        "description": "The number of nodes in the Kusto Cluster."
      },
      "maxValue": 1000,
      "minValue": 2
    },
    "version": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The version of the Kusto Cluster."
      }
    },
    "enableAutoScale": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable auto scale."
      }
    },
    "autoScaleMin": {
      "type": "int",
      "defaultValue": 2,
      "metadata": {
        "description": "The minimum number of nodes in the Kusto Cluster."
      },
      "maxValue": 999,
      "minValue": 2
    },
    "autoScaleMax": {
      "type": "int",
      "defaultValue": 8,
      "metadata": {
        "description": "The maximum number of nodes in the Kusto Cluster."
      },
      "maxValue": 1000,
      "minValue": 3
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "The tags of the Kusto Cluster."
      }
    },
    "scripts": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The script content of the Kusto Database. Use [loadTextContent('script.kql')] to load the script content from a file."
      }
    },
    "continueOnErrors": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Continue if there are errors running a script."
      }
    },
    "enableStreamingIngest": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable streaming ingest."
      }
    },
    "enablePurge": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable purge."
      }
    },
    "enableDiskEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable disk encryption."
      }
    },
    "enableDoubleEncryption": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable double encryption."
      }
    },
    "trustAllTenants": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable public access from all Tenants."
      }
    },
    "trustedExternalTenants": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The list of trusted external tenants."
      }
    },
    "enableAutoStop": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable or disable auto stop."
      }
    },
    "enableZoneRedundant": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable or disable zone redundant."
      }
    },
    "privateEndpointsApprovalEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Toggle if Private Endpoints manual approval for Kusto Cluster should be enabled."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Define Private Endpoints that should be created for Kusto Cluster."
      }
    },
    "databases": {
      "type": "array",
      "metadata": {
        "description": "optional. database list of kustoCluster to be created."
      }
    },
    "dataCosmosDbConnections": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "optional. data connection for specied database and resource cosmosdb"
      }
    },
    "dataEventHubConnections": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "optional. data connection for specied database and resource eventhub."
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "Optional. The identity type attach to kustoCluster."
      }
    },
    "userAssignedIdentities": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this kustoCluster.\nThe key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here\n"
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "metadata": {
        "description": "Enable or disable public network access."
      }
    },
    "managedPrivateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "The list of managed private endpoints."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "varPrivateEndpoints",
        "count": "[length(parameters('privateEndpoints'))]",
        "input": {
          "name": "[format('{0}-{1}', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name, parameters('name'))]",
          "privateLinkServiceId": "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]",
          "groupIds": [
            "cluster"
          ],
          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]"
        }
      }
    ],
    "$fxv#0": ".create-merge table RawEvents(document:dynamic)",
    "databasesNames": "[map(parameters('databases'), lambda('db', lambdaVariables('db').name))]"
  },
  "resources": {
    "kustoCluster": {
      "type": "Microsoft.Kusto/clusters",
      "apiVersion": "2022-12-29",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "[parameters('tier')]",
        "capacity": "[if(or(equals(parameters('sku'), 'Dev(No SLA)_Standard_D11_v2'), equals(parameters('sku'), 'Dev(No SLA)_Standard_D11_v2')), 1, parameters('numberOfNodes'))]"
      },
      "tags": "[parameters('tags')]",
      "identity": "[if(equals(parameters('identityType'), 'UserAssigned'), createObject('type', parameters('identityType'), 'userAssignedIdentities', parameters('userAssignedIdentities')), createObject('type', parameters('identityType')))]",
      "zones": "[if(parameters('enableZoneRedundant'), createArray('1', '2', '3'), null())]",
      "properties": {
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "optimizedAutoscale": "[if(parameters('enableAutoScale'), createObject('isEnabled', parameters('enableAutoScale'), 'minimum', parameters('autoScaleMin'), 'maximum', parameters('autoScaleMax'), 'version', parameters('version')), null())]",
        "enableStreamingIngest": "[parameters('enableStreamingIngest')]",
        "enablePurge": "[parameters('enablePurge')]",
        "enableDiskEncryption": "[parameters('enableDiskEncryption')]",
        "enableDoubleEncryption": "[parameters('enableDoubleEncryption')]",
        "trustedExternalTenants": "[if(parameters('trustAllTenants'), createArray(createObject('value', '*')), parameters('trustedExternalTenants'))]",
        "enableAutoStop": "[parameters('enableAutoStop')]"
      }
    },
    "database": {
      "copy": {
        "name": "database",
        "count": "[length(parameters('databases'))]"
      },
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}', parameters('name'), parameters('databases')[copyIndex()].name)]",
      "kind": "[parameters('databases')[copyIndex()].kind]",
      "location": "[parameters('location')]",
      "properties": {
        "softDeletePeriod": "[if(parameters('databases')[copyIndex()].unlimitedSoftDelete, null(), format('P{0}D', parameters('databases')[copyIndex()].softDeletePeriod))]",
        "hotCachePeriod": "[if(parameters('databases')[copyIndex()].unlimitedHotCache, null(), format('P{0}D', parameters('databases')[copyIndex()].hotCachePeriod))]"
      },
      "dependsOn": [
        "kustoCluster"
      ]
    },
    "script": {
      "copy": {
        "name": "script",
        "count": "[length(parameters('scripts'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Kusto/clusters/databases/scripts",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databases')[indexOf(variables('databasesNames'), parameters('scripts')[copyIndex()].databaseName)].name, format('db-script-{0}-{1}', parameters('scripts')[copyIndex()].name, uniqueString(parameters('scripts')[copyIndex()].name)))]",
      "properties": {
        "scriptContent": "[if(contains(parameters('scripts')[copyIndex()], 'scriptContent'), parameters('scripts')[copyIndex()].scriptContent, variables('$fxv#0'))]",
        "continueOnErrors": "[parameters('continueOnErrors')]"
      },
      "dependsOn": [
        "[format('database[{0}]', indexOf(variables('databasesNames'), parameters('scripts')[copyIndex()].databaseName))]"
      ]
    },
    "dataCosmosDbConnection": {
      "copy": {
        "name": "dataCosmosDbConnection",
        "count": "[length(parameters('dataCosmosDbConnections'))]"
      },
      "type": "Microsoft.Kusto/clusters/databases/dataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databases')[indexOf(variables('databasesNames'), parameters('dataCosmosDbConnections')[copyIndex()].databaseName)].name, format('cosmosdb-{0}-{1}', parameters('dataCosmosDbConnections')[copyIndex()].name, uniqueString(parameters('dataCosmosDbConnections')[copyIndex()].name)))]",
      "location": "[parameters('location')]",
      "kind": "CosmosDb",
      "properties": {
        "cosmosDbAccountResourceId": "[parameters('dataCosmosDbConnections')[copyIndex()].cosmosDbAccountResourceId]",
        "cosmosDbContainer": "[parameters('dataCosmosDbConnections')[copyIndex()].cosmosDbContainer]",
        "cosmosDbDatabase": "[parameters('dataCosmosDbConnections')[copyIndex()].cosmosDbDatabase]",
        "managedIdentityResourceId": "[parameters('dataCosmosDbConnections')[copyIndex()].managedIdentityResourceId]",
        "tableName": "[if(empty(parameters('dataCosmosDbConnections')[copyIndex()].tableName), null(), parameters('dataCosmosDbConnections')[copyIndex()].tableName)]"
      },
      "dependsOn": [
        "database",
        "script"
      ]
    },
    "dataEventHubConnection": {
      "copy": {
        "name": "dataEventHubConnection",
        "count": "[length(parameters('dataEventHubConnections'))]"
      },
      "type": "Microsoft.Kusto/clusters/databases/dataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', parameters('name'), parameters('databases')[indexOf(variables('databasesNames'), parameters('dataEventHubConnections')[copyIndex()].databaseName)].name, format('eventhub-{0}-{1}', parameters('dataEventHubConnections')[copyIndex()].name, uniqueString(parameters('dataEventHubConnections')[copyIndex()].name)))]",
      "location": "[parameters('location')]",
      "kind": "EventHub",
      "properties": {
        "consumerGroup": "[parameters('dataEventHubConnections')[copyIndex()].consumerGroup]",
        "eventHubResourceId": "[parameters('dataEventHubConnections')[copyIndex()].eventHubResourceId]",
        "tableName": "[if(empty(parameters('dataEventHubConnections')[copyIndex()].tableName), null(), parameters('dataEventHubConnections')[copyIndex()].tableName)]",
        "compression": "[parameters('dataEventHubConnections')[copyIndex()].compression]"
      },
      "dependsOn": [
        "database",
        "script"
      ]
    },
    "managedPrivateEndpoint": {
      "copy": {
        "name": "managedPrivateEndpoint",
        "count": "[length(parameters('managedPrivateEndpoints'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Kusto/clusters/managedPrivateEndpoints",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}', parameters('name'), format('{0}-{1}-managedPrivateEndpoints', parameters('managedPrivateEndpoints')[copyIndex()].name, parameters('name')))]",
      "properties": {
        "groupId": "[parameters('managedPrivateEndpoints')[copyIndex()].groupId]",
        "privateLinkResourceId": "[parameters('managedPrivateEndpoints')[copyIndex()].privateLinkResourceId]"
      },
      "dependsOn": [
        "kustoCluster"
      ]
    },
    "kustoCluster_privateEndpoint": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-kusto-private-endpoints', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privateEndpoints": {
            "value": "[variables('varPrivateEndpoints')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "manualApprovalEnabled": {
            "value": "[parameters('privateEndpointsApprovalEnabled')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.18.4.5664",
              "templateHash": "17055812702908829865"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "manualApprovalEnabled": {
              "type": "bool"
            },
            "privateEndpoints": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "varPrivateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                  "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                  "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                  "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]"
                }
              }
            ]
          },
          "resources": {
            "privateEndpoint": {
              "copy": {
                "name": "privateEndpoint",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                "manualPrivateLinkServiceConnections": "[if(parameters('manualApprovalEnabled'), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                "subnet": {
                  "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                },
                "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
              }
            },
            "privateDnsZoneGroup": {
              "copy": {
                "name": "privateDnsZoneGroup",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                    "input": {
                      "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                      "properties": {
                        "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[format('privateEndpoint[{0}]', copyIndex())]"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "kustoCluster"
      ]
    }
  },
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "The ID of the created or existing Kusto Cluster. Use this ID to reference the Kusto Cluster in other Azure resource deployments."
      },
      "value": "[resourceId('Microsoft.Kusto/clusters', parameters('name'))]"
    },
    "clusterName": {
      "type": "string",
      "metadata": {
        "description": "Name of the kusto cluster created"
      },
      "value": "[parameters('name')]"
    }
  }
}