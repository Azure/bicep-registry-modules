{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "1.10-experimental",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
    "_generator": {
      "name": "bicep",
      "version": "0.17.1.54307",
      "templateHash": "16386157308987333511"
    }
  },
  "definitions": {
    "tagType": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "metadata": {
            "description": "The tag name."
          },
          "maxLength": 128
        },
        "value": {
          "type": "string",
          "metadata": {
            "description": "The tag value."
          },
          "maxLength": 256
        }
      }
    },
    "corsType": {
      "type": "object",
      "properties": {
        "allowedOrigins": {
          "type": "string",
          "metadata": {
            "description": "The origin domains that are permitted to make a request against the service via CORS."
          }
        },
        "allowedMethods": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)"
          }
        },
        "allowedHeaders": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The response headers that should be sent back to the client for CORS requests. (comma separated)"
          }
        },
        "exposedHeaders": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The response headers that should be exposed to the client for CORS requests. (comma separated)"
          }
        },
        "maxAgeInSeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The maximum amount time that a browser should cache the preflight OPTIONS request."
          }
        }
      }
    },
    "schemaType": {
      "type": "object",
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string"
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "List of Cassandra table columns."
          }
        },
        "partitionKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "List of Cassandra table partition keys."
          }
        },
        "clusterKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "orderBy": {
                "type": "string",
                "metadata": {
                  "description": "Order of the Cosmos DB Cassandra table cluster key, only support \"Asc\" and \"Desc\""
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "List of Cassandra table cluster keys."
          }
        }
      },
      "metadata": {
        "description": "Schema of the Cosmos DB Cassandra table."
      }
    },
    "performanceConfigType": {
      "type": "object",
      "properties": {
        "enableAutoScale": {
          "type": "bool",
          "metadata": {
            "description": "Flag to enable/disable automatic throughput scaling."
          }
        },
        "throughput": {
          "type": "int",
          "metadata": {
            "description": "  When enableAutoScale is set to false, this parameter is the static throughput capability. 400 RU/s is the minimum for production workloads and must be set in increments of 100. The maxium is 100,000 unless a higher limit is requested via Azure Support.\n  When enableAutoScale is set to true, this parameter is the maximum of the autoscaled throughput capability. It would scale down to a minimum of 10% of this max throughput based on usage. It ranges from 1000 to 100,000 inclusive.\n  "
          },
          "minValue": 400
        }
      },
      "metadata": {
        "description": "Performance configurations."
      }
    },
    "cassandraTableType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configuration."
          }
        },
        "defaultTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Default time to live (TTL) in seconds."
          }
        },
        "analyticalStorageTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The analytical storage TTL in seconds."
          }
        },
        "schema": {
          "$ref": "#/definitions/schemaType",
          "nullable": true,
          "metadata": {
            "description": "The schema of the Cassandra table."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the Cassandra table."
          }
        }
      },
      "metadata": {
        "description": "Cassandra table configurations."
      }
    },
    "cassandraKeyspaceType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Throughtput configuration."
          }
        },
        "tables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/cassandraTableType"
          },
          "nullable": true,
          "metadata": {
            "description": "  The object of Cassandra table configurations.\n  The key of each element is the name of the  table.\n  The value of each element is an configuration object."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the Cassandra keyspace."
          }
        }
      },
      "metadata": {
        "description": "Cassandra keyspaces configurations."
      }
    },
    "sqlContainerClientEncryptionPolicyIncludedPathsType": {
      "type": "object",
      "properties": {
        "clientEncryptionKeyId": {
          "type": "string",
          "metadata": {
            "description": "The identifier of the Client Encryption Key to be used to encrypt the path."
          }
        },
        "encryptionAlgorithm": {
          "type": "string",
          "metadata": {
            "description": "The encryption algorithm which will be used. Eg - AEAD_AES_256_CBC_HMAC_SHA256."
          }
        },
        "encryptionType": {
          "type": "string",
          "metadata": {
            "description": "The type of encryption to be performed. Eg - Deterministic, Randomized."
          }
        },
        "path": {
          "type": "string",
          "metadata": {
            "description": "Path that needs to be encrypted."
          }
        }
      },
      "metadata": {
        "description": "The type definition of sql container client encryption policy included paths."
      }
    },
    "sqlContainerClientEncryptionPolicyType": {
      "type": "object",
      "properties": {
        "includedPaths": {
          "$ref": "#/definitions/sqlContainerClientEncryptionPolicyIncludedPathsType",
          "metadata": {
            "description": "Paths of the item that need encryption along with path-specific settings."
          }
        },
        "policyFormatVersion": {
          "type": "int",
          "allowedValues": [
            1,
            2
          ],
          "metadata": {
            "description": "Version of the client encryption policy definition. Supported versions are 1 and 2. Version 2 supports id and partition key path encryption."
          }
        }
      },
      "metadata": {
        "description": "Type definition of client encryption policy for the container."
      }
    },
    "sqlContainerIndexingPolicyIncludedPathsIndexesType": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Hash",
            "Range",
            "Spatial",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The type of index."
          }
        },
        "precision": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The precision of the index. -1 is maximum precision."
          }
        },
        "dataType": {
          "type": "string",
          "allowedValues": [
            "LineString",
            "MultiPolygon",
            "Number",
            "Point",
            "Polygon",
            "String",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The datatype for which the indexing behavior is applied to."
          }
        }
      }
    },
    "sqlContainerIndexingPolicyIncludedPathsType": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)."
          }
        },
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlContainerIndexingPolicyIncludedPathsIndexesType"
          },
          "nullable": true,
          "metadata": {
            "description": "List of indexes for this path."
          }
        }
      },
      "metadata": {
        "description": "Type definition of container indexing policy's included paths."
      }
    },
    "sqlContainerIndexingPolicyCompositeIndexesType": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)."
          }
        },
        "order": {
          "type": "string",
          "allowedValues": [
            "ascending",
            "descending",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The sort order for composite paths."
          }
        }
      },
      "metadata": {
        "description": "Type definition of container indexing policy's composite indexes."
      }
    },
    "sqlContainerIndexingPolicySpatialIndexesType": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)."
          }
        },
        "types": {
          "type": "string",
          "allowedValues": [
            "LineString",
            "MultiPolygon",
            "Point",
            "Polygon",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The spatial type"
          }
        }
      },
      "metadata": {
        "description": "Type definition of container indexing policy's spatial indexes."
      }
    },
    "graphIndexingPolicyTypeForSqlContainerAndGremlinGraph": {
      "type": "object",
      "properties": {
        "indexingMode": {
          "type": "string",
          "allowedValues": [
            "consistent",
            "lazy",
            "none",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The indexing mode."
          }
        },
        "automatic": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Indicates if the indexing policy is automatic."
          }
        },
        "includedPaths": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlContainerIndexingPolicyIncludedPathsType"
          },
          "nullable": true,
          "metadata": {
            "description": "The indexing paths"
          }
        },
        "excludedPaths": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "path": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "The path for which the indexing behavior applies to. Index paths typically start with root and end with wildcard (/path/*)."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "List of paths to exclude from indexing."
          }
        },
        "compositeIndexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlContainerIndexingPolicyCompositeIndexesType"
          },
          "nullable": true,
          "metadata": {
            "description": "List of composite path list."
          }
        },
        "spatialIndexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlContainerIndexingPolicySpatialIndexesType"
          },
          "nullable": true,
          "metadata": {
            "description": "The spatial indexes"
          }
        }
      }
    },
    "conflictResolutionPolicyTypeForSqlContainerAndGremlinGraph": {
      "type": "object",
      "properties": {
        "conflictResolutionPath": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The conflict resolution path in the container."
          }
        },
        "conflictResolutionProcedure": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The conflict resolution procedure in the container."
          }
        },
        "mode": {
          "type": "string",
          "allowedValues": [
            "Custom",
            "LastWriterWins",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "The conflict resolution mode."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container conflict resolution policy."
      }
    },
    "partitionKeyTypeForSqlContainerAndGremlinGraph": {
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "allowedValues": [
            "Hash",
            "MultiHash",
            "Range",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "Indicates the kind of algorithm used for partitioning. For MultiHash, multiple partition keys (upto three maximum) are supported for container create"
          }
        },
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "List of paths using which data within the container can be partitioned."
          }
        },
        "version": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Indicates the version of the partition key definition."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container partition key."
      }
    },
    "graphUniqueKeyPolicyTypeForSqlContainerAndGremlinGraph": {
      "type": "object",
      "properties": {
        "uniqueKeys": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "paths": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "metadata": {
                  "description": "List of paths must be unique for each document in the Azure Cosmos DB service."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "List of unique keys."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container unique key policy."
      }
    },
    "sqlContainerStoredProceduresType": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The body of the stored procedure."
          }
        },
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container stored procedures."
      }
    },
    "sqlContainerUserDefinedFunctionsType": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The body of the user defined functions."
          }
        },
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container user defined functions."
      }
    },
    "sqlContainerTriggersType": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The body of the triggers."
          }
        },
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "triggerType": {
          "type": "string",
          "allowedValues": [
            "Post",
            "Pre",
            null
          ],
          "nullable": true,
          "metadata": {
            "description": "Type of the Trigger"
          }
        },
        "triggerOperation": {
          "type": "array",
          "allowedValues": [
            "Create",
            "Delete",
            "Replace",
            "Update"
          ],
          "nullable": true,
          "metadata": {
            "description": "The operation the trigger is associated with."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container triggers."
      }
    },
    "sqlContainerType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "analyticalStorageTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The analytical storage TTL in seconds."
          }
        },
        "defaultTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Default time to live (TTL) in seconds."
          }
        },
        "clientEncryptionPolicy": {
          "$ref": "#/definitions/sqlContainerClientEncryptionPolicyType",
          "nullable": true,
          "metadata": {
            "description": "The client encryption policy for the container."
          }
        },
        "conflictResolutionPolicy": {
          "$ref": "#/definitions/conflictResolutionPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The conflict resolution policy for the container."
          }
        },
        "indexingPolicy": {
          "$ref": "#/definitions/graphIndexingPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The indexing policy for the container. The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the container."
          }
        },
        "partitionKey": {
          "$ref": "#/definitions/partitionKeyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions."
          }
        },
        "uniqueKeyPolicy": {
          "$ref": "#/definitions/graphUniqueKeyPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
          }
        },
        "storedProcedures": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sqlContainerStoredProceduresType"
          },
          "nullable": true,
          "metadata": {
            "description": "Configuration of stored procedures in the container."
          }
        },
        "userDefinedFunctions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sqlContainerUserDefinedFunctionsType"
          },
          "nullable": true,
          "metadata": {
            "description": "Configuration of user defined functions in the container."
          }
        },
        "triggers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sqlContainerTriggersType"
          },
          "nullable": true,
          "metadata": {
            "description": "Configuration of triggers in the container."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database container."
      }
    },
    "sqlDatabaseType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "containers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/sqlContainerType"
          },
          "nullable": true,
          "metadata": {
            "description": "sql Container configurations."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the SQL database."
          }
        }
      },
      "metadata": {
        "description": "The type definition of SQL database configuration."
      }
    },
    "consistencyPolicyType": {
      "type": "object",
      "properties": {
        "defaultConsistencyLevel": {
          "type": "string",
          "allowedValues": [
            "BoundedStaleness",
            "ConsistentPrefix",
            "Eventual",
            "Session",
            "Strong"
          ],
          "metadata": {
            "description": "The default consistency level and configuration settings of the Cosmos DB account."
          }
        },
        "maxStalenessPrefix": {
          "type": "int",
          "nullable": true,
          "maxValue": 2147483647,
          "minValue": 10,
          "metadata": {
            "description": "  When used with the Bounded Staleness consistency level, this value represents the time amount of staleness (in seconds) tolerated.\n  Required only when defaultConsistencyPolicy is set to 'BoundedStaleness'.\n  Valid ranges:\n  - Single Region: 10 to 2147483647\n  - Multi Region: 100000 to 2147483647.\n  "
          }
        },
        "maxIntervalInSeconds": {
          "type": "int",
          "nullable": true,
          "maxValue": 86400,
          "minValue": 5,
          "metadata": {
            "description": "  When used with the Bounded Staleness consistency level, this value represents the number of stale requests tolerated.\n  Required only when defaultConsistencyPolicy is set to 'BoundedStaleness'.\n  Valid ranges:\n  - Single Region: 5 to 84600.\n  - Multi Region: 300 to 86400.\n  "
          }
        }
      }
    },
    "mongodbDatabaseIndexOptionsType": {
      "type": "object",
      "properties": {
        "expireAfterSeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Expire after seconds."
          }
        },
        "unique": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Is it unique or not."
          }
        }
      }
    },
    "mongodbDatabaseIndexType": {
      "type": "object",
      "properties": {
        "key": {
          "type": "object",
          "properties": {
            "keys": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "List of keys for the MongoDB collection."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Cosmos DB MongoDB collection index keys."
          }
        },
        "options": {
          "$ref": "#/definitions/mongodbDatabaseIndexOptionsType",
          "metadata": {
            "description": "Cosmos DB MongoDB collection index key options."
          }
        }
      }
    },
    "mongodbDatabaseCollectionType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "indexes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mongodbDatabaseIndexType"
          },
          "nullable": true,
          "metadata": {
            "description": "\tList of index keys."
          }
        },
        "shardKey": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "A key-value pair of shard keys to be applied for the request."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      }
    },
    "mongodbDatabaseType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "collections": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/mongodbDatabaseCollectionType"
          },
          "nullable": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      }
    },
    "tableType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      }
    },
    "gremlinGraphType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "analyticalStorageTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The analytical storage TTL in seconds."
          }
        },
        "defaultTtl": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "The default time to live in seconds."
          }
        },
        "conflictResolutionPolicy": {
          "$ref": "#/definitions/conflictResolutionPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The conflict resolution policy for the graph."
          }
        },
        "indexingPolicy": {
          "$ref": "#/definitions/graphIndexingPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The configuration of the indexing policy. By default, the indexing is automatic for all document paths within the graph."
          }
        },
        "partitionKey": {
          "$ref": "#/definitions/partitionKeyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The configuration of the partition key to be used for partitioning data into multiple partitions."
          }
        },
        "uniqueKeyPolicy": {
          "$ref": "#/definitions/graphUniqueKeyPolicyTypeForSqlContainerAndGremlinGraph",
          "nullable": true,
          "metadata": {
            "description": "The unique key policy configuration for specifying uniqueness constraints on documents in the collection in the Azure Cosmos DB service."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      }
    },
    "gremlinDatabaseType": {
      "type": "object",
      "properties": {
        "performance": {
          "$ref": "#/definitions/performanceConfigType",
          "nullable": true,
          "metadata": {
            "description": "Performance configs."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        },
        "graphs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/gremlinGraphType"
          },
          "nullable": true,
          "metadata": {
            "description": "The object of Gremlin database graphs."
          }
        }
      }
    },
    "sqlRoleDefinitionPermissionType": {
      "type": "object",
      "properties": {
        "actions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "The set of permissions that the role definition contains."
          }
        },
        "dataActions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "The set of Data Actions that the role definition contains."
          }
        }
      },
      "metadata": {
        "description": "Type definition for the SQL Role Definition Permission."
      }
    },
    "sqlRoleAssignmentType": {
      "type": "object",
      "properties": {
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "The principal ID of the assigment."
          }
        },
        "scope": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "  The scope of the assignment. It can be the entire cosmosDB account, or a specific database or container.\n  If omitted, it means the entire cosmosDB account.\n  "
          }
        }
      }
    },
    "sqlRoleDefinitionType": {
      "type": "object",
      "properties": {
        "roleType": {
          "type": "string",
          "allowedValues": [
            "BuiltInRole",
            "CustomRole"
          ],
          "metadata": {
            "description": "  Indicates whether the Role Definition was built-in or user created.\n  If type=BuiltInRole, the name of this role should be a Azure built-in role name, like Contributor, Reader, etc, and permissions should be null or omitted.\n  "
          }
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlRoleDefinitionPermissionType"
          },
          "nullable": true
        },
        "assisgnments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/sqlRoleAssignmentType"
          },
          "nullable": true,
          "metadata": {
            "description": "The list of SQL role assignments."
          }
        }
      }
    },
    "privateEndpointType": {
      "type": "object",
      "properties": {
        "subnetId": {
          "type": "string",
          "metadata": {
            "description": "The subnet that the private endpoint should be created in."
          }
        },
        "groupId": {
          "type": "string",
          "metadata": {
            "description": "The subresource name of the target Azure resource that private endpoint will connect to."
          }
        },
        "privateDnsZoneId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "The ID of the private DNS zone in which private endpoint will register its private IP address."
          }
        },
        "isManualApproval": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "When set to true, users will need to manually approve the private endpoint connection request."
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagType"
          },
          "nullable": true,
          "metadata": {
            "description": "Tags for the resource."
          }
        }
      }
    },
    "locationType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "The name of the Azure region."
          }
        },
        "isZoneRedundant": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Flag to indicate whether or not this region is an AvailabilityZone region"
          }
        }
      }
    }
  },
  "parameters": {
    "backendApi": {
      "type": "string",
      "defaultValue": "sql",
      "allowedValues": [
        "cassandra",
        "gremlin",
        "mongodb",
        "sql",
        "table"
      ],
      "metadata": {
        "description": "The bakend API type of Cosmos DB database account. The API selection cannot be changed after account creation. Possible values: \"cassandra\", \"gremlin\", \"mongodb\", \"sql\", \"table\"."
      }
    },
    "prefix": {
      "type": "string",
      "defaultValue": "[createObject('cassandra', 'coscas', 'gremlin', 'cosgrm', 'mongodb', 'cosmon', 'sql', 'cosmos', 'table', 'costab')[parameters('backendApi')]]",
      "metadata": {
        "description": "Prefix of Cosmos DB Resource Name. Not used if name is provided."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "[format('{0}-{1}', parameters('prefix'), uniqueString(resourceGroup().id, resourceGroup().location, 'cosmosdb', parameters('backendApi')))]",
      "minLength": 3,
      "maxLength": 44,
      "metadata": {
        "description": "The name of the Cosmos DB account. Character limit: 3-44, valid characters: lowercase letters, numbers, and hyphens. It must me unique across Azure."
      }
    },
    "enableAutomaticFailover": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account."
      }
    },
    "enableMultipleWriteLocations": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enables the account to write in multiple locations. Once enabled, all regions included in the param.locations will be read/write regions.\nMulti-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe."
      }
    },
    "enableServerless": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Serverless for consumption-based usage."
      }
    },
    "enableFreeTier": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate whether Free Tier is enabled, up to one account per subscription is allowed."
      }
    },
    "totalThroughputLimit": {
      "type": "int",
      "defaultValue": -1,
      "minValue": -1,
      "metadata": {
        "description": "The total throughput limit of the Cosmos DB account in measurement of requests units (RUs) per second, -1 indicates no limits on provisioning of throughput."
      }
    },
    "locations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/locationType"
      },
      "defaultValue": [
        {
          "name": "[resourceGroup().location]"
        }
      ],
      "metadata": {
        "description": "The array of geo locations that Cosmos DB account would be hosted in.\nEach element defines a region of georeplication.\nThe order of regions in this list is the order for region failover. The first element is the primary region which is a write region of the Cosmos DB account.\n"
      },
      "minLength": 1
    },
    "MongoDBServerVersion": {
      "type": "string",
      "defaultValue": "4.2",
      "allowedValues": [
        "3.2",
        "3.6",
        "4.0",
        "4.2"
      ],
      "metadata": {
        "description": "MongoDB server version. Required for mongodb API type Cosmos DB account"
      }
    },
    "cors": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/corsType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "List of CORS rules. Each CORS rule allows or denies requests from a set of origins to a Cosmos DB account or a database"
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "Restore"
      ],
      "metadata": {
        "description": "The mode of the Cosmos Account creation. Set to Restore to restore from an existing account."
      }
    },
    "disableKeyBasedMetadataWriteAccess": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys."
      }
    },
    "enablePublicNetworkAccess": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Whether requests from public network allowed."
      }
    },
    "networkAclBypass": {
      "type": "string",
      "defaultValue": "AzureServices",
      "metadata": {
        "description": "Indicates what services are allowed to bypass firewall checks."
      },
      "allowedValues": [
        "AzureServices",
        "None"
      ]
    },
    "ipRules": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "metadata": {
        "description": "List of IpRules to be allowed.\nEach element in this array is either a single IPv4 address or a single IPv4 address range in CIDR format.\n"
      }
    },
    "virtualNetworkRules": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "metadata": {
              "description": "The id of the subnet. For example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}."
            }
          },
          "ignoreMissingVNetServiceEndpoint": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Whether to ignore missing virtual network service endpoint."
            }
          }
        }
      },
      "defaultValue": [],
      "metadata": {
        "description": "The list of virtual network ACL rules. Subnets in this list will be allowed to connect."
      }
    },
    "networkAclBypassResourceIds": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "metadata": {
        "description": "An array that contains the Resource Ids for Network Acl Bypass."
      }
    },
    "extraCapabilities": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "metadata": {
        "description": "Extra capabilities besides the ones required by param.backendApi and param.enableServerless."
      }
    },
    "disableLocalAuth": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication."
      }
    },
    "enableAnalyticalStorage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate whether to enable storage analytics."
      }
    },
    "analyticalStorageSchemaType": {
      "type": "string",
      "defaultValue": "WellDefined",
      "allowedValues": [
        "FullFidelity",
        "WellDefined"
      ],
      "metadata": {
        "description": "The type of schema for analytical storage."
      }
    },
    "cassandraKeyspaces": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/cassandraKeyspaceType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The object of Cassandra keyspaces configurations.\nThe key of each element is the name of the Cassandra keyspace.\nThe value of each element is an configuration object.\n"
      }
    },
    "sqlDatabases": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/sqlDatabaseType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The object of sql database configurations.\nThe key of each element is the name of the sql database.\nThe value of each element is an configuration object.\n"
      }
    },
    "mongodbDatabases": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/mongodbDatabaseType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The list of MongoDB databases configurations.\nThe key of each element is the name of the MongoDB database.\nThe value of each element is an configuration object.\n"
      }
    },
    "tables": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/tableType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The object of Table databases configurations.\nThe key of each element is the name of the Table database.\nThe value of each element is an configuration object.\n"
      }
    },
    "gremlinDatabases": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/gremlinDatabaseType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The list of Gremlin databases configurations.\nThe key of each element is the name of the Gremlin database.\nThe value of each element is an configuration object.\n"
      }
    },
    "sqlRoleDefinitions": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/sqlRoleDefinitionType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "The list of SQL role definitions.\nThe keys are the role name.\nThe values are the role definition."
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "SystemAssigned,UserAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "The type of identity used for the Cosmos DB account. The type \"SystemAssigned, UserAssigned\" includes both an implicitly created identity and a set of user-assigned identities. The type \"None\" will remove any identities from the Cosmos DB account."
      }
    },
    "userAssignedIdentities": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "defaultValue": [],
      "metadata": {
        "description": "The list of user-assigned managed identities. The user identity dictionary key references will be ARM resource ids in the form: \"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}\""
      }
    },
    "tags": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagType"
      },
      "defaultValue": [],
      "metadata": {
        "description": "List of key-value pairs that describe the resource."
      },
      "maxLength": 15
    },
    "lock": {
      "type": "string",
      "defaultValue": "NotSpecified",
      "metadata": {
        "description": "Specify the type of lock on Cosmos DB account resource."
      },
      "allowedValues": [
        "CanNotDelete",
        "NotSpecified",
        "ReadOnly"
      ]
    },
    "consistencyPolicy": {
      "$ref": "#/definitions/consistencyPolicyType",
      "defaultValue": {
        "defaultConsistencyLevel": "Session"
      },
      "metadata": {
        "description": "The consistency policy for the Cosmos DB account."
      }
    },
    "privateEndpoints": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/privateEndpointType"
      },
      "defaultValue": {},
      "metadata": {
        "description": "Private Endpoints that should be created for Azure Cosmos DB account."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "privateEndpointsWithDefaults",
        "count": "[length(items(parameters('privateEndpoints')))]",
        "input": {
          "name": "[format('{0}-{1}', toLower(parameters('name')), items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].key)]",
          "groupIds": [
            "[items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].value.groupId]"
          ],
          "subnetId": "[items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].value.subnetId]",
          "privateDnsZoneId": "[items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].value.privateDnsZoneId]",
          "manualApprovalEnabled": "[coalesce(items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].value.isManualApproval, false())]",
          "tags": "[items(parameters('privateEndpoints'))[copyIndex('privateEndpointsWithDefaults')].value.tags]"
        }
      },
      {
        "name": "locationsWithCompleteInfo",
        "count": "[length(parameters('locations'))]",
        "input": {
          "locationName": "[parameters('locations')[copyIndex('locationsWithCompleteInfo')].name]",
          "failoverPriority": "[copyIndex('locationsWithCompleteInfo')]",
          "isZoneRedundant": "[tryGet(parameters('locations')[copyIndex('locationsWithCompleteInfo')], 'isZoneRedundant')]"
        }
      },
      {
        "name": "capabilitiesCompleteList",
        "count": "[length(union(parameters('extraCapabilities'), if(parameters('enableServerless'), createArray('EnableServerless'), createArray()), createArray(variables('capabilityNeededForBackendApi')[parameters('backendApi')])))]",
        "input": {
          "name": "[union(parameters('extraCapabilities'), if(parameters('enableServerless'), createArray('EnableServerless'), createArray()), createArray(variables('capabilityNeededForBackendApi')[parameters('backendApi')]))[copyIndex('capabilitiesCompleteList')]]"
        }
      }
    ],
    "primaryLocation": "[parameters('locations')[0].name]",
    "capabilityNeededForBackendApi": {
      "cassandra": "EnableCassandra",
      "gremlin": "EnableGremlin",
      "mongodb": "EnableMongo",
      "table": "EnableTable",
      "sql": ""
    }
  },
  "resources": {
    "cosmosDBAccount": {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "2023-04-15",
      "name": "[toLower(parameters('name'))]",
      "location": "[variables('primaryLocation')]",
      "kind": "[if(equals(parameters('backendApi'), 'mongodb'), 'MongoDB', 'GlobalDocumentDB')]",
      "properties": {
        "copy": [
          {
            "name": "ipRules",
            "count": "[length(parameters('ipRules'))]",
            "input": {
              "ipAddressOrRange": "[parameters('ipRules')[copyIndex('ipRules')]]"
            }
          }
        ],
        "analyticalStorageConfiguration": "[if(parameters('enableAnalyticalStorage'), createObject('schemaType', parameters('analyticalStorageSchemaType')), null())]",
        "apiProperties": "[if(equals(parameters('backendApi'), 'mongodb'), createObject('serverVersion', parameters('MongoDBServerVersion')), null())]",
        "capabilities": "[variables('capabilitiesCompleteList')]",
        "capacity": "[if(parameters('enableServerless'), null(), createObject('totalThroughputLimit', parameters('totalThroughputLimit')))]",
        "consistencyPolicy": "[parameters('consistencyPolicy')]",
        "cors": "[parameters('cors')]",
        "createMode": "[parameters('createMode')]",
        "databaseAccountOfferType": "Standard",
        "disableKeyBasedMetadataWriteAccess": "[parameters('disableKeyBasedMetadataWriteAccess')]",
        "disableLocalAuth": "[parameters('disableLocalAuth')]",
        "enableAnalyticalStorage": "[parameters('enableAnalyticalStorage')]",
        "enableAutomaticFailover": "[parameters('enableAutomaticFailover')]",
        "enableFreeTier": "[parameters('enableFreeTier')]",
        "enableMultipleWriteLocations": "[if(parameters('enableServerless'), false(), parameters('enableMultipleWriteLocations'))]",
        "isVirtualNetworkFilterEnabled": "[greater(length(parameters('virtualNetworkRules')), 0)]",
        "locations": "[if(parameters('enableServerless'), createArray(variables('locationsWithCompleteInfo')[0]), variables('locationsWithCompleteInfo'))]",
        "networkAclBypass": "[parameters('networkAclBypass')]",
        "networkAclBypassResourceIds": "[parameters('networkAclBypassResourceIds')]",
        "publicNetworkAccess": "[if(parameters('enablePublicNetworkAccess'), 'Enabled', 'Disabled')]",
        "virtualNetworkRules": "[parameters('virtualNetworkRules')]"
      },
      "identity": {
        "type": "[parameters('identityType')]",
        "userAssignedIdentities": "[if(contains(parameters('identityType'), 'UserAssigned'), toObject(parameters('userAssignedIdentities'), lambda('id', lambdaVariables('id')), lambda('id', createObject())), null())]"
      },
      "tags": "[toObject(parameters('tags'), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]"
    },
    "cosmosDBAccount_lock": {
      "condition": "[not(equals(parameters('lock'), 'NotSpecified'))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', toLower(parameters('name')))]",
      "name": "[format('{0}-{1}-lock', toLower(parameters('name')), toLower(parameters('lock')))]",
      "properties": {
        "level": "[parameters('lock')]",
        "notes": "[if(equals(parameters('lock'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot modify the resource or child resources.')]"
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_cassandraKeyspaces": {
      "copy": {
        "name": "cosmosDBAccount_cassandraKeyspaces",
        "count": "[length(items(parameters('cassandraKeyspaces')))]"
      },
      "condition": "[equals(parameters('backendApi'), 'cassandra')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('cassandraKeyspaces'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "keyspace": {
            "value": "[items(parameters('cassandraKeyspaces'))[copyIndex()]]"
          },
          "enableServerless": {
            "value": "[parameters('enableServerless')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "1111658398887296801"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "enableServerless": {
              "type": "bool"
            },
            "keyspace": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[parameters('keyspace').key]",
            "config": "[parameters('keyspace').value]"
          },
          "resources": {
            "cosmosDBAccount::cassandraKeyspaces::cassandraTables": {
              "copy": {
                "name": "cassandraTables",
                "count": "[length(items(coalesce(tryGet(variables('config'), 'tables'), createObject())))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces/tables",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDBAccountName'), variables('name'), items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].key)]",
              "properties": {
                "resource": {
                  "id": "[items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].key]",
                  "analyticalStorageTtl": "[tryGet(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value, 'analyticalStorageTtl')]",
                  "defaultTtl": "[tryGet(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value, 'defaultTtl')]",
                  "schema": "[tryGet(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value, 'schema')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value, 'performance'), null()), null(), if(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value.performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value.performance.throughput)), createObject('throughput', items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value.performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(items(coalesce(tryGet(variables('config'), 'tables'), createObject()))[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "dependsOn": [
                "cosmosDBAccount::cassandraKeyspaces"
              ]
            },
            "cosmosDBAccount::cassandraKeyspaces": {
              "type": "Microsoft.DocumentDB/databaseAccounts/cassandraKeyspaces",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('name'))]",
              "properties": {
                "resource": {
                  "id": "[variables('name')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]"
            },
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_sqlDatabases": {
      "copy": {
        "name": "cosmosDBAccount_sqlDatabases",
        "count": "[length(items(parameters('sqlDatabases')))]"
      },
      "condition": "[equals(parameters('backendApi'), 'sql')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('sqlDatabases'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "database": {
            "value": "[items(parameters('sqlDatabases'))[copyIndex()]]"
          },
          "enableServerless": {
            "value": "[parameters('enableServerless')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "14772954779959108754"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "enableServerless": {
              "type": "bool"
            },
            "database": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[parameters('database').key]",
            "config": "[parameters('database').value]"
          },
          "resources": {
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            },
            "sqlDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2022-11-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('name'))]",
              "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "properties": {
                "resource": {
                  "id": "[variables('name')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
              }
            },
            "sqlDatabaseContainers": {
              "copy": {
                "name": "sqlDatabaseContainers",
                "count": "[length(items(coalesce(tryGet(variables('config'), 'containers'), createObject())))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[items(coalesce(tryGet(variables('config'), 'containers'), createObject()))[copyIndex()].key]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "cosmosDBAccountName": {
                    "value": "[parameters('cosmosDBAccountName')]"
                  },
                  "databaseName": {
                    "value": "[variables('name')]"
                  },
                  "container": {
                    "value": "[items(coalesce(tryGet(variables('config'), 'containers'), createObject()))[copyIndex()]]"
                  },
                  "enableServerless": {
                    "value": "[parameters('enableServerless')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "1.10-experimental",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
                    "_generator": {
                      "name": "bicep",
                      "version": "0.17.1.54307",
                      "templateHash": "3044930762524466980"
                    }
                  },
                  "parameters": {
                    "cosmosDBAccountName": {
                      "type": "string"
                    },
                    "databaseName": {
                      "type": "string"
                    },
                    "enableServerless": {
                      "type": "bool"
                    },
                    "container": {
                      "type": "object"
                    }
                  },
                  "variables": {
                    "name": "[parameters('container').key]",
                    "config": "[parameters('container').value]"
                  },
                  "resources": {
                    "cosmosDBAccount::sqlDatabase::databaseContainers::databaseContainersStoredProcedures": {
                      "copy": {
                        "name": "databaseContainersStoredProcedures",
                        "count": "[length(items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject())))]"
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/storedProcedures",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}/{3}', parameters('cosmosDBAccountName'), parameters('databaseName'), variables('name'), items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].key)]",
                      "tags": "[toObject(coalesce(tryGet(items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
                      "properties": {
                        "resource": {
                          "id": "[items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].key]",
                          "body": "[items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value.body]"
                        },
                        "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value, 'performance'), null()), null(), if(items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value.performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value.performance.throughput)), createObject('throughput', items(coalesce(tryGet(variables('config'), 'storedProcedures'), createObject()))[copyIndex()].value.performance.throughput))))]"
                      },
                      "dependsOn": [
                        "cosmosDBAccount::sqlDatabase::databaseContainers"
                      ]
                    },
                    "cosmosDBAccount::sqlDatabase::databaseContainers::databaseContainersUserDefinedFunction": {
                      "copy": {
                        "name": "databaseContainersUserDefinedFunction",
                        "count": "[length(items(coalesce(tryGet(variables('config'), 'userDefinedFunctions'), createObject())))]"
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/userDefinedFunctions",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}/{3}', parameters('cosmosDBAccountName'), parameters('databaseName'), variables('name'), items(coalesce(tryGet(variables('config'), 'userDefinedFunctions'), createObject()))[copyIndex()].key)]",
                      "tags": "[toObject(coalesce(tryGet(items(coalesce(tryGet(variables('config'), 'userDefinedFunctions'), createObject()))[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
                      "properties": {
                        "resource": {
                          "id": "[items(coalesce(tryGet(variables('config'), 'userDefinedFunctions'), createObject()))[copyIndex()].key]",
                          "body": "[items(coalesce(tryGet(variables('config'), 'userDefinedFunctions'), createObject()))[copyIndex()].value.body]"
                        }
                      },
                      "dependsOn": [
                        "cosmosDBAccount::sqlDatabase::databaseContainers"
                      ]
                    },
                    "cosmosDBAccount::sqlDatabase::databaseContainers::databaseContainersTriggers": {
                      "copy": {
                        "name": "databaseContainersTriggers",
                        "count": "[length(items(coalesce(tryGet(variables('config'), 'triggers'), createObject())))]"
                      },
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers/triggers",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}/{3}', parameters('cosmosDBAccountName'), parameters('databaseName'), variables('name'), items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].key)]",
                      "tags": "[toObject(coalesce(tryGet(items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
                      "properties": {
                        "resource": {
                          "id": "[items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].key]",
                          "body": "[items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].value.body]",
                          "triggerOperation": "[tryGet(items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].value, 'triggerOperation')]",
                          "triggerType": "[tryGet(items(coalesce(tryGet(variables('config'), 'triggers'), createObject()))[copyIndex()].value, 'triggerType')]"
                        }
                      },
                      "dependsOn": [
                        "cosmosDBAccount::sqlDatabase::databaseContainers"
                      ]
                    },
                    "cosmosDBAccount::sqlDatabase::databaseContainers": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}/{2}', parameters('cosmosDBAccountName'), parameters('databaseName'), variables('name'))]",
                      "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
                      "properties": {
                        "resource": {
                          "id": "[variables('name')]",
                          "analyticalStorageTtl": "[tryGet(variables('config'), 'analyticalStorageTtl')]",
                          "defaultTtl": "[tryGet(variables('config'), 'defaultTtl')]",
                          "clientEncryptionPolicy": "[tryGet(variables('config'), 'clientEncryptionPolicy')]",
                          "conflictResolutionPolicy": "[tryGet(variables('config'), 'conflictResolutionPolicy')]",
                          "uniqueKeyPolicy": "[tryGet(variables('config'), 'uniqueKeyPolicy')]",
                          "indexingPolicy": "[tryGet(variables('config'), 'indexingPolicy')]",
                          "partitionKey": "[tryGet(variables('config'), 'partitionKey')]"
                        },
                        "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
                      }
                    },
                    "cosmosDBAccount::sqlDatabase": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2023-04-15",
                      "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), parameters('databaseName'))]"
                    },
                    "cosmosDBAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2023-04-15",
                      "name": "[parameters('cosmosDBAccountName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "sqlDatabase"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_mongodbDatabases": {
      "copy": {
        "name": "cosmosDBAccount_mongodbDatabases",
        "count": "[length(items(parameters('mongodbDatabases')))]"
      },
      "condition": "[equals(parameters('backendApi'), 'mongodb')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('mongodbDatabases'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "database": {
            "value": "[items(parameters('mongodbDatabases'))[copyIndex()]]"
          },
          "enableServerless": {
            "value": "[parameters('enableServerless')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "14168541263954149686"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "enableServerless": {
              "type": "bool",
              "defaultValue": false
            },
            "database": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[parameters('database').key]",
            "config": "[parameters('database').value]"
          },
          "resources": {
            "cosmosDBAccount::mongodbDatabase::mongodbDatabaseCollections": {
              "copy": {
                "name": "mongodbDatabaseCollections",
                "count": "[length(items(coalesce(tryGet(variables('config'), 'collections'), createObject())))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDBAccountName'), variables('name'), items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].key)]",
              "properties": {
                "resource": {
                  "id": "[items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].key]",
                  "indexes": "[tryGet(items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value, 'indexes')]",
                  "shardKey": "[tryGet(items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value, 'shardKey')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value, 'performance'), null()), null(), if(items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value.performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value.performance.throughput)), createObject('throughput', items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value.performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(items(coalesce(tryGet(variables('config'), 'collections'), createObject()))[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "dependsOn": [
                "cosmosDBAccount::mongodbDatabase"
              ]
            },
            "cosmosDBAccount::mongodbDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('name'))]",
              "properties": {
                "resource": {
                  "id": "[variables('name')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]"
            },
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_tables": {
      "copy": {
        "name": "cosmosDBAccount_tables",
        "count": "[length(items(parameters('tables')))]"
      },
      "condition": "[equals(parameters('backendApi'), 'table')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('tables'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "table": {
            "value": "[items(parameters('tables'))[copyIndex()]]"
          },
          "enableServerless": {
            "value": "[parameters('enableServerless')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "12678038480873940896"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "enableServerless": {
              "type": "bool"
            },
            "table": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[parameters('table').key]",
            "config": "[parameters('table').value]"
          },
          "resources": {
            "cosmosDBAccount::tables": {
              "type": "Microsoft.DocumentDB/databaseAccounts/tables",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('name'))]",
              "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "properties": {
                "resource": {
                  "id": "[variables('name')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
              }
            },
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_gremlinDatabases": {
      "copy": {
        "name": "cosmosDBAccount_gremlinDatabases",
        "count": "[length(items(parameters('gremlinDatabases')))]"
      },
      "condition": "[equals(parameters('backendApi'), 'gremlin')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('gremlinDatabases'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "database": {
            "value": "[items(parameters('gremlinDatabases'))[copyIndex()]]"
          },
          "enableServerless": {
            "value": "[parameters('enableServerless')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "5224610523140837583"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "enableServerless": {
              "type": "bool"
            },
            "database": {
              "type": "object"
            }
          },
          "variables": {
            "name": "[parameters('database').key]",
            "config": "[parameters('database').value]"
          },
          "resources": {
            "cosmosDBAccount::gremlinDatabase::gremlinDatabaseGraphs": {
              "copy": {
                "name": "gremlinDatabaseGraphs",
                "count": "[length(coalesce(tryGet(variables('config'), 'graphs'), createObject()))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosDBAccountName'), variables('name'), coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].key)]",
              "properties": {
                "resource": {
                  "id": "[coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].key]",
                  "analyticalStorageTtl": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'analyticalStorageTtl')]",
                  "conflictResolutionPolicy": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'conflictResolutionPolicy')]",
                  "defaultTtl": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'defaultTtl')]",
                  "indexingPolicy": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'indexingPolicy')]",
                  "partitionKey": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'partitionKey')]",
                  "uniqueKeyPolicy": "[tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'uniqueKeyPolicy')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'performance'), null()), null(), if(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value.performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value.performance.throughput)), createObject('throughput', coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value.performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(coalesce(tryGet(variables('config'), 'graphs'), createObject())[copyIndex()].value, 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "dependsOn": [
                "cosmosDBAccount::gremlinDatabase"
              ]
            },
            "cosmosDBAccount::gremlinDatabase": {
              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('name'))]",
              "properties": {
                "resource": {
                  "id": "[variables('name')]"
                },
                "options": "[if(parameters('enableServerless'), null(), if(equals(tryGet(variables('config'), 'performance'), null()), null(), if(variables('config').performance.enableThroughputAutoScale, createObject('autoscaleSettings', createObject('maxThroughput', variables('config').performance.throughput)), createObject('throughput', variables('config').performance.throughput))))]"
              },
              "tags": "[toObject(coalesce(tryGet(variables('config'), 'tags'), createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]"
            },
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_sqlRoles": {
      "copy": {
        "name": "cosmosDBAccount_sqlRoles",
        "count": "[length(items(parameters('sqlRoleDefinitions')))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[items(parameters('sqlRoleDefinitions'))[copyIndex()].key]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccountName": {
            "value": "[parameters('name')]"
          },
          "role": {
            "value": "[items(parameters('sqlRoleDefinitions'))[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "8420385602764146571"
            }
          },
          "parameters": {
            "cosmosDBAccountName": {
              "type": "string"
            },
            "role": {
              "type": "object"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "allScopes",
                "count": "[length(coalesce(tryGet(variables('roleConfig'), 'assignments'), createArray()))]",
                "input": "[coalesce(coalesce(tryGet(variables('roleConfig'), 'assignments'), createArray())[copyIndex('allScopes')].scope, '')]"
              }
            ],
            "roleName": "[parameters('role').key]",
            "roleConfig": "[parameters('role').value]",
            "assignableScopes": "[filter(variables('allScopes'), lambda('scope', equals(empty(lambdaVariables('scope')), false())))]"
          },
          "resources": {
            "cosmosDBAccount": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2023-04-15",
              "name": "[parameters('cosmosDBAccountName')]"
            },
            "sqlRoleDefinitions": {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), variables('roleName'))]",
              "properties": {
                "roleName": "[variables('roleName')]",
                "type": "[variables('roleConfig').roleType]",
                "assignableScopes": "[if(empty(variables('assignableScopes')), createArray(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBAccountName'))), variables('assignableScopes'))]",
                "permissions": "[if(equals(variables('roleConfig').roleType, 'BuiltInRole'), null(), tryGet(variables('roleConfig'), 'permissions'))]"
              }
            },
            "sqlRoleAssignments": {
              "copy": {
                "name": "sqlRoleAssignments",
                "count": "[length(tryGet(variables('roleConfig'), 'assignments'))]"
              },
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2023-04-15",
              "name": "[format('{0}/{1}', parameters('cosmosDBAccountName'), uniqueString(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBAccountName')), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDBAccountName'), variables('roleName')), tryGet(variables('roleConfig'), 'assignments')[copyIndex()].principalId))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDBAccountName'), variables('roleName'))]",
                "principalId": "[tryGet(variables('roleConfig'), 'assignments')[copyIndex()].principalId]",
                "scope": "[coalesce(tryGet(tryGet(variables('roleConfig'), 'assignments')[copyIndex()], 'scope'), reference('cosmosDBAccount', '2023-04-15', 'full'))]"
              },
              "dependsOn": [
                "sqlRoleDefinitions"
              ]
            }
          },
          "outputs": {
            "roleDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "The role definition ids of the created role definitions."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosDBAccountName'), variables('roleName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    },
    "cosmosDBAccount_privateEndpoints": {
      "copy": {
        "name": "cosmosDBAccount_privateEndpoints",
        "count": "[length(variables('privateEndpointsWithDefaults'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('privateEndpointsWithDefaults')[copyIndex()].name]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBAccount": {
            "value": "[reference('cosmosDBAccount', '2023-04-15', 'full')]"
          },
          "location": {
            "value": "[variables('primaryLocation')]"
          },
          "endpoint": {
            "value": "[variables('privateEndpointsWithDefaults')[copyIndex()]]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "1.10-experimental",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!",
            "_generator": {
              "name": "bicep",
              "version": "0.17.1.54307",
              "templateHash": "18148419903598715204"
            }
          },
          "parameters": {
            "cosmosDBAccount": {
              "type": "object"
            },
            "location": {
              "type": "string"
            },
            "endpoint": {
              "type": "object"
            }
          },
          "resources": {
            "privateEndpoint::privateDnsZoneGroup": {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/{1}', parameters('endpoint').name, 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "default",
                    "properties": {
                      "privateDnsZoneId": "[parameters('endpoint').privateDnsZoneId]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-07-01",
              "name": "[parameters('endpoint').name]",
              "location": "[parameters('location')]",
              "tags": "[toObject(coalesce(parameters('endpoint').tags, createArray()), lambda('tag', lambdaVariables('tag').key), lambda('tag', lambdaVariables('tag').value))]",
              "properties": {
                "privateLinkServiceConnections": "[if(parameters('endpoint').manualApprovalEnabled, null(), createArray(createObject('name', parameters('endpoint').name, 'properties', createObject('privateLinkServiceId', parameters('cosmosDBAccount'), 'groupIds', parameters('endpoint').groupIds))))]",
                "manualPrivateLinkServiceConnections": "[if(parameters('endpoint').manualApprovalEnabled, createArray(createObject('name', parameters('endpoint').name, 'properties', createObject('privateLinkServiceId', parameters('cosmosDBAccount'), 'groupIds', parameters('endpoint').groupIds))), null())]",
                "subnet": {
                  "id": "[parameters('endpoint').subnetId]"
                }
              }
            }
          }
        }
      },
      "dependsOn": [
        "cosmosDBAccount"
      ]
    }
  },
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB Account Resource ID"
      },
      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('name')))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Cosmos DB Account Resource Name"
      },
      "value": "[toLower(parameters('name'))]"
    },
    "systemAssignedIdentityPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "Object Id of system assigned managed identity for Cosmos DB account (if enabled)."
      },
      "value": "[if(contains(parameters('identityType'), 'SystemAssigned'), reference('cosmosDBAccount', '2023-04-15', 'full').identity.principalId, '')]"
    },
    "sqlRoleDefinitionIds": {
      "type": "array",
      "metadata": {
        "description": "Resource Ids of sql role definition resources created for this Cosmos DB account."
      },
      "copy": {
        "count": "[length(items(parameters('sqlRoleDefinitions')))]",
        "input": "[reference(format('cosmosDBAccount_sqlRoles[{0}]', copyIndex())).outputs.roleDefinitionId.value]"
      }
    }
  }
}