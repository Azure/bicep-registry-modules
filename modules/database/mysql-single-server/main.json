{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.2.56959",
      "templateHash": "9622396487505706949"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Deployment region name. Default is the location of the resource group."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Deployment tags. Default is empty map."
      }
    },
    "administratorLogin": {
      "type": "string",
      "metadata": {
        "description": "Required. The administrator username of the server. Can only be specified when the server is being created."
      }
    },
    "administratorLoginPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The administrator password of the server. Can only be specified when the server is being created."
      }
    },
    "backupRetentionDays": {
      "type": "int",
      "defaultValue": 35,
      "maxValue": 35,
      "minValue": 7,
      "metadata": {
        "description": "Optional. The number of days a backup is retained."
      }
    },
    "createMode": {
      "type": "string",
      "defaultValue": "Default",
      "allowedValues": [
        "Default",
        "GeoRestore",
        "PointInTimeRestore",
        "Replica"
      ],
      "metadata": {
        "description": "Optional. The mode to create a new server."
      }
    },
    "databases": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of databases to create on server."
      }
    },
    "serverConfigurations": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of server configurations to create on server."
      }
    },
    "infrastructureEncryption": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Status showing whether the server enabled infrastructure encryption.."
      }
    },
    "firewallRules": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of firewall rules to create on server."
      }
    },
    "privateEndpoints": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. List of privateEndpoints to create on mysql server."
      }
    },
    "geoRedundantBackup": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Enable or disable geo-redundant backups."
      }
    },
    "minimalTlsVersion": {
      "type": "string",
      "defaultValue": "TLS1_2",
      "allowedValues": [
        "TLS1_0",
        "TLS1_1",
        "TLS1_2",
        "TLSEnforcementDisabled"
      ],
      "metadata": {
        "description": "Optional. Enforce a minimal Tls version for the server."
      }
    },
    "restorePointInTime": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Restore point creation time (ISO8601 format), specifying the time to restore from."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Disabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this server."
      }
    },
    "serverName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the server."
      }
    },
    "skuName": {
      "type": "string",
      "defaultValue": "GP_Gen5_2",
      "metadata": {
        "description": "Optional.\tThe name of the sku, typically, tier + family + cores, e.g. B_Gen4_1, GP_Gen5_8."
      }
    },
    "sourceServerResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The source server resource id to restore from, e.g. \"/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DBforMySQL/flexibleServers/server1\" . It's required when \"createMode\" is \"GeoRestore\" or \"Replica\" or \"PointInTimeRestore\"."
      }
    },
    "sslEnforcement": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Enable ssl enforcement or not when connect to server."
      }
    },
    "storageAutogrow": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Auto grow of storage."
      }
    },
    "storageSizeGB": {
      "type": "int",
      "defaultValue": 32,
      "metadata": {
        "description": "Optional. The storage size of the server."
      }
    },
    "version": {
      "type": "string",
      "defaultValue": "8.0",
      "allowedValues": [
        "5.6",
        "5.7",
        "8.0"
      ],
      "metadata": {
        "description": "Optional. The version of the MySQL server."
      }
    },
    "roleAssignments": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Array of role assignment objects that contain the \"roleDefinitionIdOrName\" and \"principalId\" to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, provide either the display name of the role definition, or its fully qualified ID in the following format: \"/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11\""
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "varPrivateEndpoints",
        "count": "[length(parameters('privateEndpoints'))]",
        "input": {
          "name": "[format('{0}-{1}', parameters('serverName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name)]",
          "privateLinkServiceId": "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]",
          "groupIds": [
            "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupId]"
          ],
          "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
          "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZoneId'), createArray(createObject('name', 'default', 'zoneId', parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZoneId)), createArray())]",
          "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].manualApprovalEnabled, false())]"
        }
      }
    ]
  },
  "resources": [
    {
      "type": "Microsoft.DBforMySQL/servers",
      "apiVersion": "2017-12-01",
      "name": "[parameters('serverName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('skuName')]"
      },
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "createMode": "[parameters('createMode')]",
        "administratorLogin": "[parameters('administratorLogin')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "version": "[parameters('version')]",
        "minimalTlsVersion": "[parameters('minimalTlsVersion')]",
        "infrastructureEncryption": "[parameters('infrastructureEncryption')]",
        "sslEnforcement": "[parameters('sslEnforcement')]",
        "storageProfile": {
          "storageMB": "[mul(parameters('storageSizeGB'), 1024)]",
          "backupRetentionDays": "[parameters('backupRetentionDays')]",
          "geoRedundantBackup": "[parameters('geoRedundantBackup')]",
          "storageAutogrow": "[if(equals(parameters('createMode'), 'Replica'), null(), if(parameters('storageAutogrow'), 'Enabled', 'Disabled'))]"
        },
        "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
        "sourceServerId": "[if(not(equals(parameters('createMode'), 'Default')), parameters('sourceServerResourceId'), json('null'))]",
        "restorePointInTime": "[if(equals(parameters('createMode'), 'PointInTimeRestore'), parameters('restorePointInTime'), json('null'))]"
      }
    },
    {
      "copy": {
        "name": "mysqlServerFirewallRules",
        "count": "[length(parameters('firewallRules'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.DBforMySQL/servers/firewallRules",
      "apiVersion": "2017-12-01",
      "name": "[format('{0}/{1}', parameters('serverName'), parameters('firewallRules')[copyIndex()].name)]",
      "properties": {
        "startIpAddress": "[parameters('firewallRules')[copyIndex()].startIpAddress]",
        "endIpAddress": "[parameters('firewallRules')[copyIndex()].endIpAddress]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]"
      ]
    },
    {
      "copy": {
        "name": "mysqlServerDatabases",
        "count": "[length(parameters('databases'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.DBforMySQL/servers/databases",
      "apiVersion": "2017-12-01",
      "name": "[format('{0}/{1}', parameters('serverName'), parameters('databases')[copyIndex()].name)]",
      "properties": {
        "charset": "[if(contains(parameters('databases')[copyIndex()], 'charset'), parameters('databases')[copyIndex()].charset, 'utf8')]",
        "collation": "[if(contains(parameters('databases')[copyIndex()], 'collation'), parameters('databases')[copyIndex()].collation, 'utf8_general_ci')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]"
      ]
    },
    {
      "copy": {
        "name": "mysqlServerConfig",
        "count": "[length(parameters('serverConfigurations'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.DBforMySQL/servers/configurations",
      "apiVersion": "2017-12-01",
      "name": "[format('{0}/{1}', parameters('serverName'), parameters('serverConfigurations')[copyIndex()].name)]",
      "properties": {
        "value": "[parameters('serverConfigurations')[copyIndex()].value]",
        "source": "user-override"
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]",
        "mysqlServerFirewallRules"
      ]
    },
    {
      "copy": {
        "name": "MySQLDBAccount_rbac",
        "count": "[length(parameters('roleAssignments'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('mysqldb-rbac-{0}-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "description": "[if(contains(parameters('roleAssignments')[copyIndex()], 'description'), createObject('value', parameters('roleAssignments')[copyIndex()].description), createObject('value', ''))]",
          "principalIds": {
            "value": "[parameters('roleAssignments')[copyIndex()].principalIds]"
          },
          "roleDefinitionIdOrName": {
            "value": "[parameters('roleAssignments')[copyIndex()].roleDefinitionIdOrName]"
          },
          "principalType": "[if(contains(parameters('roleAssignments')[copyIndex()], 'principalType'), createObject('value', parameters('roleAssignments')[copyIndex()].principalType), createObject('value', ''))]",
          "serverName": {
            "value": "[parameters('serverName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "8183027780392786858"
            }
          },
          "parameters": {
            "description": {
              "type": "string",
              "defaultValue": ""
            },
            "principalIds": {
              "type": "array"
            },
            "principalType": {
              "type": "string",
              "defaultValue": ""
            },
            "roleDefinitionIdOrName": {
              "type": "string"
            },
            "serverName": {
              "type": "string"
            }
          },
          "variables": {
            "builtInRoleNames": {
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "SQL DB Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9b7fa17d-e63e-47b0-bb0a-15c516ac86ec')]",
              "SQL Managed Instance Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4939a1f6-9ae0-4e48-a1e0-f2cbe897382d')]",
              "SQL Server Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6d8ee4ec-f05a-4a1d-8b00-a9b17e38b437')]",
              "SQL Security Manager": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '056cd41c-7e88-42e1-933e-88ba6a50c9c3')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Managed Application Contributor Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
              "Managed Application Operator Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
              "Managed Applications Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]"
            }
          },
          "resources": [
            {
              "copy": {
                "name": "roleAssignment",
                "count": "[length(parameters('principalIds'))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DBforMySQL/servers/{0}', parameters('serverName'))]",
              "name": "[guid(parameters('serverName'), parameters('principalIds')[copyIndex()], parameters('roleDefinitionIdOrName'))]",
              "properties": {
                "description": "[parameters('description')]",
                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionIdOrName')))]",
                "principalId": "[parameters('principalIds')[copyIndex()]]",
                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]"
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}-private-endpoints', parameters('serverName'), uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "privateEndpoints": {
            "value": "[variables('varPrivateEndpoints')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.2.56959",
              "templateHash": "9050958236782304652"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "privateEndpoints": {
              "type": "array"
            }
          },
          "variables": {
            "copy": [
              {
                "name": "varPrivateEndpoints",
                "count": "[length(parameters('privateEndpoints'))]",
                "input": {
                  "name": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].name]",
                  "privateLinkServiceId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateLinkServiceId]",
                  "groupIds": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].groupIds]",
                  "subnetId": "[parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].subnetId]",
                  "privateDnsZones": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'privateDnsZones'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].privateDnsZones, createArray())]",
                  "customNetworkInterfaceName": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'customNetworkInterfaceName'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].customNetworkInterfaceName, null())]",
                  "manualApprovalEnabled": "[if(contains(parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')], 'manualApprovalEnabled'), parameters('privateEndpoints')[copyIndex('varPrivateEndpoints')].manualApprovalEnabled, false())]"
                }
              }
            ]
          },
          "resources": [
            {
              "copy": {
                "name": "privateEndpoint",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "privateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, null(), createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))))]",
                "manualPrivateLinkServiceConnections": "[if(variables('varPrivateEndpoints')[copyIndex()].manualApprovalEnabled, createArray(createObject('name', variables('varPrivateEndpoints')[copyIndex()].name, 'properties', createObject('privateLinkServiceId', variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId, 'groupIds', if(not(empty(variables('varPrivateEndpoints')[copyIndex()].groupIds)), variables('varPrivateEndpoints')[copyIndex()].groupIds, null())))), null())]",
                "subnet": {
                  "id": "[variables('varPrivateEndpoints')[copyIndex()].subnetId]"
                },
                "customNetworkInterfaceName": "[variables('varPrivateEndpoints')[copyIndex()].customNetworkInterfaceName]"
              }
            },
            {
              "copy": {
                "name": "privateDnsZoneGroup",
                "count": "[length(variables('varPrivateEndpoints'))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2022-05-01",
              "name": "[format('{0}/{1}', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)), 'default')]",
              "properties": {
                "copy": [
                  {
                    "name": "privateDnsZoneConfigs",
                    "count": "[length(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones)]",
                    "input": {
                      "name": "[if(contains(variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')], 'name'), variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].name, 'default')]",
                      "properties": {
                        "privateDnsZoneId": "[variables('varPrivateEndpoints')[copyIndex()].privateDnsZones[copyIndex('privateDnsZoneConfigs')].zoneId]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-{1}', variables('varPrivateEndpoints')[copyIndex()].name, uniqueString(variables('varPrivateEndpoints')[copyIndex()].name, variables('varPrivateEndpoints')[copyIndex()].subnetId, variables('varPrivateEndpoints')[copyIndex()].privateLinkServiceId)))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]"
      ]
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "MySQL Single Server Resource id"
      },
      "value": "[resourceId('Microsoft.DBforMySQL/servers', parameters('serverName'))]"
    },
    "fqdn": {
      "type": "string",
      "metadata": {
        "description": "MySQL Single Server fully Qualified Domain Name"
      },
      "value": "[reference(resourceId('Microsoft.DBforMySQL/servers', parameters('serverName')), '2017-12-01').fullyQualifiedDomainName]"
    }
  }
}