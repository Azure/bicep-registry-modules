{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.16.1.55165",
      "templateHash": "3023964117531376491"
    }
  },
  "parameters": {
    "secrets": {
      "type": "array",
      "metadata": {
        "description": "  Required.\n\n  Definition of secrets to be auto-rotated. Includes name of the CosmosDB, name of the KeyVault, name of the Secret, name of the Resource Group etc.\n  Example:\n  [\n    {\n      type: 'cosmosdb', // mandatory, can be 'cosmosdb', 'redis'\n      resourceName: 'cosmosdb-1',\n      resourceRg: 'resource-group-1', // optional, default to parameter \"resourceGroup().name\"\n      keyvaultRg: 'resource-group-1', // optional, default to parameter \"resourceGroup().name\"\n      keyvaultName: 'keyvault-1',\n      secretName: 'secret-1'\n    }\n  ]\n  It's unlikely that for a single CosmosDB both primary and secondary keys are stored as keyvault secrets, normally one is used and later alternated to the other. Thus for now multiple keys are not supported.\n  Note! Currently only support each CosmosDB having 1 secret.\n  "
      }
    },
    "analyticWorkspaceId": {
      "type": "string",
      "metadata": {
        "description": "Required. Resource ID of the log analytic workspace to be used by the function app."
      }
    },
    "functionStorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "Required. Storage account name for the function app."
      }
    },
    "functionStorageAccountRg": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the storage account, default to current resource group."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location to be used. Default to resource group's location."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to be added to the resources created by this module."
      }
    },
    "appServicePlanSku": {
      "type": "string",
      "defaultValue": "EP1",
      "allowedValues": [
        "EP1",
        "EP2",
        "EP3",
        "Y1"
      ],
      "metadata": {
        "description": "Optional. The type of App Service hosting plan. Premium must be used to access key vaults behind firewall. Default is EP1."
      }
    },
    "functionAppName": {
      "type": "string",
      "defaultValue": "[format('{0}-rotation-fnapp', resourceGroup().name)]",
      "metadata": {
        "description": "Optional. The name of the function app that you wish to create. Default is {resource group name}-rotation-fnapp."
      }
    },
    "isEnableVnet": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. True if vnet integration should be enabled. If set to false, the vnet related parameters will be ignored. Default to false."
      }
    },
    "functionAppSubnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the subnet to be assigned to function app. Leave empty if private network is not used."
      }
    },
    "isCreateFileShare": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. True if the file share needs to be created in the storage account, this file share will host the function app files. The function app name will be used as the file share name. Default to true. NOTE: This seems required if using deployment script to provision the contents of the function app, if the fileshare does not exist at the time of creation, the deployment will fail."
      }
    },
    "fileShareName": {
      "type": "string",
      "defaultValue": "[parameters('functionAppName')]",
      "metadata": {
        "description": "Optional. Name of the file share to be created, default to functionAppName."
      }
    },
    "isAssignStorageRole": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. True if this module should assigned the role defined by param 'storageRoleId' to the function app identity. Supports user assigned identity only. Default is false."
      }
    },
    "storageRoleId": {
      "type": "string",
      "defaultValue": "[resourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
      "metadata": {
        "description": "Optional. Id of role that should be assigned to the function identity for the storage account. Default to storage account contributor role ID."
      }
    },
    "isStoragePrivate": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. True if the storage on which the function will be created is accessible only from private network(vnet). Default to false."
      }
    },
    "functionAppIdentityType": {
      "type": "string",
      "defaultValue": "SystemAssigned",
      "allowedValues": [
        "UserAssigned",
        "SystemAssigned"
      ],
      "metadata": {
        "description": "Optional. Function app identity type. Default is SystemAssigned, which means the identity created with the function app will be used."
      }
    },
    "userAssignedIdentityName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Name of the user assigned identity used to execute the deployment script for uploading function app source code. Must be provided if NOT using MSDeploy option. If user assigned identity is chosen for the function app, this will also be the identity used. Only effective when 'functionAppIdentityType' is set to 'UserAssigned'."
      }
    },
    "userAssignedIdentityRg": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group name of the user assigned identity, default to current resource group."
      }
    },
    "deploymentScriptStorage": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Storage account name to be used by the deployment scripts. Deployment script by default create a temporary storage account during its execution but it is also possible to assign an existing storage instead."
      }
    },
    "deploymentScriptStorageRg": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group of the deployment script storage, if `deploymentScriptStorage`, this param will be ignored. Default to current resource group."
      }
    },
    "isGrantExecutorRole": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. True if the role with necessary permissions needed to execute the scripts for the function app is to be granted to the identity, either user assigned or system. Default to false."
      }
    },
    "isAssignResourceRole": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Depends on the resource type, whether to assign necessary role so that the identity can perform certain operations. E.g. for CosmosDB, granting function app permission to regenerate access key. Sometimes the user assigned identity is already assigned the roles so no need to do it again. Note! This param will be discarded if system assigned identity is used."
      }
    },
    "systemTopicName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. Event grid topic name, to which the keyvault near expiry event will be subscribed."
      }
    },
    "systemTopicRg": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Optional. Resource group name of the event topic, default to current group. Will be ignored if system topic name is not provided."
      }
    }
  },
  "variables": {
    "rotationFunctionNames": {
      "cosmosdb": "AKVCosmosDBRotation",
      "redis": "AKVRedisRotation"
    },
    "zipfile": "",
    "filename": "functionapp.zip",
    "suffix": "[uniqueString(parameters('functionAppName'))]",
    "websiteContirbutorRoleId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
    "deployZipScript": "#!/bin/bash\r\n\r\necho \"${ZIP_FILE}\" | base64 -d > $FILE_NAME\r\naz functionapp deploy --resource-group $RESOURCE_GROUP_NAME --name $FUNCTION_APP_NAME --src-path $FILE_NAME --type zip"
  },
  "resources": [
    {
      "condition": "[parameters('isEnableVnet')]",
      "type": "Microsoft.Web/sites/networkConfig",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', parameters('functionAppName'), 'virtualNetwork')]",
      "properties": {
        "subnetResourceId": "[parameters('functionAppSubnetId')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}/{1}', parameters('functionAppName'), 'appsettings')]",
      "properties": "[union(createObject('AzureWebJobsStorage', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('functionStorageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('functionStorageAccountRg')), 'Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-09-01').keys[0].value), 'AzureWebJobsDashboard', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('functionStorageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('functionStorageAccountRg')), 'Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-09-01').keys[0].value), 'WEBSITE_CONTENTSHARE', parameters('functionAppName'), 'WEBSITE_CONTENTAZUREFILECONNECTIONSTRING', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};', parameters('functionStorageAccountName'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('functionStorageAccountRg')), 'Microsoft.Storage/storageAccounts', parameters('functionStorageAccountName')), '2022-09-01').keys[0].value), 'FUNCTIONS_EXTENSION_VERSION', '~4', 'FUNCTIONS_WORKER_RUNTIME', 'powershell', 'APPINSIGHTS_INSTRUMENTATIONKEY', reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('functionAppName'))), '2020-02-02').InstrumentationKey, 'APPLICATIONINSIGHTS_CONNECTION_STRING', reference(resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('functionAppName'))), '2020-02-02').ConnectionString), union(if(parameters('isStoragePrivate'), createObject('WEBSITE_CONTENTOVERVNET', 1), createObject()), if(equals(parameters('functionAppIdentityType'), 'SystemAssigned'), createObject('IS_USER_ASSIGNED_IDENTITY', 'false'), createObject('IS_USER_ASSIGNED_IDENTITY', 'true', 'USER_ASSIGNED_IDENTITY_CLIENT_ID', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').clientId))))]",
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('functionAppName')))]",
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Web/sites/networkConfig', parameters('functionAppName'), 'virtualNetwork')]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "[parameters('appServicePlanSku')]"
      },
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      },
      "metadata": {
        "description": "Application service plan."
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[format('ai-{0}', parameters('functionAppName'))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "azfunc",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[parameters('analyticWorkspaceId')]",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      },
      "metadata": {
        "description": "Insight for the function app."
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2022-03-01",
      "name": "[parameters('functionAppName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "kind": "functionapp",
      "identity": {
        "type": "[parameters('functionAppIdentityType')]",
        "userAssignedIdentities": "[if(equals(parameters('functionAppIdentityType'), 'UserAssigned'), createObject(format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName'))), createObject()), null())]"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]",
        "httpsOnly": true,
        "clientAffinityEnabled": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]"
      ],
      "metadata": {
        "description": "Create the key rotation function app."
      }
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2020-10-01",
      "name": "[format('upload-site-files-{0}', variables('suffix'))]",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')))]": {}
        }
      },
      "properties": "[union(createObject('azCliVersion', '2.26.1', 'timeout', 'PT5M', 'retentionInterval', 'PT1H', 'scriptContent', variables('deployZipScript'), 'environmentVariables', createArray(createObject('name', 'ZIP_FILE', 'value', variables('zipfile')), createObject('name', 'FILE_NAME', 'value', variables('filename')), createObject('name', 'RESOURCE_GROUP_NAME', 'value', resourceGroup().name), createObject('name', 'FUNCTION_APP_NAME', 'value', parameters('functionAppName')))), if(equals(parameters('deploymentScriptStorage'), ''), createObject(), createObject('storageAccountSettings', createObject('storageAccountName', parameters('deploymentScriptStorage'), 'storageAccountKey', listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('deploymentScriptStorageRg')), 'Microsoft.Storage/storageAccounts', parameters('deploymentScriptStorage')), '2022-09-01').keys[0].value))))]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
        "[resourceId('Microsoft.Resources/deployments', format('grant-executor-role-{0}', variables('suffix')))]"
      ],
      "metadata": {
        "description": "Deploy function app files."
      }
    },
    {
      "condition": "[parameters('isCreateFileShare')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('create-fileshare-{0}', variables('suffix'))]",
      "resourceGroup": "[parameters('functionStorageAccountRg')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('functionStorageAccountName')]"
          },
          "fileShareName": {
            "value": "[parameters('fileShareName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "11949976737039574547"
            }
          },
          "parameters": {
            "storageAccountName": {
              "type": "string"
            },
            "fileShareName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('fileShareName'))]"
            }
          ]
        }
      }
    },
    {
      "condition": "[and(and(parameters('isAssignStorageRole'), equals(parameters('functionAppIdentityType'), 'UserAssigned')), not(equals(parameters('userAssignedIdentityName'), '')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('grant-storage-role-{0}', variables('suffix'))]",
      "resourceGroup": "[parameters('functionStorageAccountRg')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "storageAccountName": {
            "value": "[parameters('functionStorageAccountName')]"
          },
          "uaiPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
          },
          "storageRoleId": {
            "value": "[parameters('storageRoleId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "17609823540155968270"
            }
          },
          "parameters": {
            "storageRoleId": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "uaiPrincipalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageAccountName'))]",
              "name": "[guid(format('{0}-{1}-{2}-{3}', resourceGroup().name, parameters('storageAccountName'), parameters('uaiPrincipalId'), parameters('storageRoleId')))]",
              "properties": {
                "roleDefinitionId": "[parameters('storageRoleId')]",
                "principalId": "[parameters('uaiPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "metadata": {
                "description": "Assign executor role to identity"
              }
            }
          ]
        }
      },
      "metadata": {
        "description": "Grant the given role to identity for the storage account if needed."
      }
    },
    {
      "condition": "[parameters('isGrantExecutorRole')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('grant-executor-role-{0}', variables('suffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "scriptExecutorRoleId": {
            "value": "[variables('websiteContirbutorRoleId')]"
          },
          "uaiPrincipalId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "10367758215881762020"
            }
          },
          "parameters": {
            "scriptExecutorRoleId": {
              "type": "string"
            },
            "functionAppName": {
              "type": "string"
            },
            "uaiPrincipalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/sites/{0}', parameters('functionAppName'))]",
              "name": "[guid(format('{0}{1}{2}{3}', resourceGroup().name, parameters('functionAppName'), parameters('uaiPrincipalId'), parameters('scriptExecutorRoleId')))]",
              "properties": {
                "roleDefinitionId": "[parameters('scriptExecutorRoleId')]",
                "principalId": "[parameters('uaiPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "metadata": {
                "description": "Assign executor role to identity"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "metadata": {
        "description": "Assign executor role to identity"
      }
    },
    {
      "copy": {
        "name": "grantAccess",
        "count": "[length(parameters('secrets'))]"
      },
      "condition": "[or(equals(parameters('functionAppIdentityType'), 'SystemAssigned'), and(equals(parameters('functionAppIdentityType'), 'UserAssigned'), parameters('isAssignResourceRole')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('role-assignment-{0}-{1}', parameters('secrets')[copyIndex()].resourceName, variables('suffix'))]",
      "resourceGroup": "[if(contains(parameters('secrets')[copyIndex()], 'resourceRg'), parameters('secrets')[copyIndex()].resourceRg, resourceGroup().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "type": {
            "value": "[parameters('secrets')[copyIndex()].type]"
          },
          "resourceName": {
            "value": "[parameters('secrets')[copyIndex()].resourceName]"
          },
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "functionAppPrincipalId": "[if(equals(parameters('functionAppIdentityType'), 'SystemAssigned'), createObject('value', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2022-03-01', 'full').identity.principalId), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "1625903100551484893"
            }
          },
          "parameters": {
            "type": {
              "type": "string",
              "metadata": {
                "description": "Resource type"
              }
            },
            "resourceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the CosmosDB to who key should be rotated."
              }
            },
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "Name of the function app that rotates the key."
              }
            },
            "functionAppPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the function app that rotates the key."
              }
            }
          },
          "variables": {
            "dbManagerRoleId": "5bd9cd88-fe45-4216-938b-f97437e15450",
            "redisContributorRoleId": "e0f68234-74aa-48ed-b826-c38b57376e17"
          },
          "resources": [
            {
              "condition": "[equals(parameters('type'), 'cosmosdb')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('resourceName'))]",
              "name": "[guid(format('cosmosdb{0}{1}', parameters('resourceName'), parameters('functionAppName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('dbManagerRoleId'))]",
                "principalId": "[parameters('functionAppPrincipalId')]",
                "principalType": "ServicePrincipal"
              },
              "metadata": {
                "description": "Grant CosmosDB role to function app."
              }
            },
            {
              "condition": "[equals(parameters('type'), 'redis')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('resourceName'))]",
              "name": "[guid(format('redis{0}{1}', parameters('resourceName'), parameters('functionAppName')))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('redisContributorRoleId'))]",
                "principalId": "[parameters('functionAppPrincipalId')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', format('upload-site-files-{0}', variables('suffix')))]",
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "metadata": {
        "description": "Grant contributor role of the CosmosDB to the function app."
      }
    },
    {
      "copy": {
        "name": "addAccessPolicy",
        "count": "[length(items(reduce(parameters('secrets'), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').keyvaultName), if(contains(lambdaVariables('next'), 'keyvaultRg'), lambdaVariables('next').keyvaultRg, resourceGroup().name)))))))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ap-{0}-{1}', uniqueString(items(reduce(parameters('secrets'), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').keyvaultName), if(contains(lambdaVariables('next'), 'keyvaultRg'), lambdaVariables('next').keyvaultRg, resourceGroup().name))))))[copyIndex()].key), variables('suffix'))]",
      "resourceGroup": "[items(reduce(parameters('secrets'), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').keyvaultName), if(contains(lambdaVariables('next'), 'keyvaultRg'), lambdaVariables('next').keyvaultRg, resourceGroup().name))))))[copyIndex()].value]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "keyvaultName": {
            "value": "[items(reduce(parameters('secrets'), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), createObject(format('{0}', lambdaVariables('next').keyvaultName), if(contains(lambdaVariables('next'), 'keyvaultRg'), lambdaVariables('next').keyvaultRg, resourceGroup().name))))))[copyIndex()].key]"
          },
          "principalId": "[if(equals(parameters('functionAppIdentityType'), 'SystemAssigned'), createObject('value', reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')), '2022-03-01', 'full').identity.principalId), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('userAssignedIdentityRg')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentityName')), '2023-01-31').principalId))]"
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "1153151522379214321"
            }
          },
          "parameters": {
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the keyvault to whom the access policy should be created."
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Access policy principal ID"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/add', parameters('keyvaultName'))]",
              "properties": {
                "accessPolicies": [
                  {
                    "tenantId": "[subscription().tenantId]",
                    "objectId": "[parameters('principalId')]",
                    "permissions": {
                      "secrets": [
                        "Get",
                        "List",
                        "Set"
                      ]
                    }
                  }
                ]
              },
              "metadata": {
                "description": "Create access policy of the keyvault secrets for the function app"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', format('upload-site-files-{0}', variables('suffix')))]",
        "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
      ],
      "metadata": {
        "description": "Create access policy of the keyvault secrets for the function app"
      }
    },
    {
      "copy": {
        "name": "eventSubscription",
        "count": "[length(parameters('secrets'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[equals(parameters('systemTopicName'), '')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('kv-event-sub-{0}-{1}', uniqueString(format('{0}{1}', parameters('secrets')[copyIndex()].keyvaultName, parameters('secrets')[copyIndex()].secretName)), variables('suffix'))]",
      "resourceGroup": "[if(contains(parameters('secrets')[copyIndex()], 'keyvaultRg'), parameters('secrets')[copyIndex()].keyvaultRg, resourceGroup().name)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "functionAppRg": {
            "value": "[resourceGroup().name]"
          },
          "functionName": {
            "value": "[variables('rotationFunctionNames')[parameters('secrets')[copyIndex()].type]]"
          },
          "keyvaultName": {
            "value": "[parameters('secrets')[copyIndex()].keyvaultName]"
          },
          "secretName": {
            "value": "[parameters('secrets')[copyIndex()].secretName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "677282634227096997"
            }
          },
          "parameters": {
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "Name of the function app."
              }
            },
            "functionAppRg": {
              "type": "string",
              "metadata": {
                "description": "Resource name of the function app."
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the keyvault. This is used in the event subscription."
              }
            },
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Name of the keyvault secret."
              }
            },
            "functionName": {
              "type": "string",
              "metadata": {
                "description": "Name of the rotate function, used to subscript to the keyvault event."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventGrid/eventSubscriptions",
              "apiVersion": "2022-06-15",
              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('keyvaultName'))]",
              "name": "[format('{0}-{1}-{2}', parameters('functionAppName'), parameters('keyvaultName'), parameters('secretName'))]",
              "properties": {
                "destination": {
                  "endpointType": "AzureFunction",
                  "properties": {
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64,
                    "resourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('functionAppRg')), 'Microsoft.Web/sites/functions', split(format('{0}/{1}', parameters('functionAppName'), parameters('functionName')), '/')[0], split(format('{0}/{1}', parameters('functionAppName'), parameters('functionName')), '/')[1])]"
                  }
                },
                "filter": {
                  "subjectBeginsWith": "[parameters('secretName')]",
                  "subjectEndsWith": "[parameters('secretName')]",
                  "includedEventTypes": [
                    "Microsoft.KeyVault.SecretNearExpiry"
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "addAccessPolicy",
        "grantAccess"
      ],
      "metadata": {
        "description": "Create Keyvault event subscription and let the function app consume it."
      }
    },
    {
      "copy": {
        "name": "topicSubscription",
        "count": "[length(parameters('secrets'))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[not(equals(parameters('systemTopicName'), ''))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('topic-sub-{0}-{1}', uniqueString(format('{0}{1}', parameters('secrets')[copyIndex()].keyvaultName, parameters('secrets')[copyIndex()].secretName)), variables('suffix'))]",
      "resourceGroup": "[parameters('systemTopicRg')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "functionAppName": {
            "value": "[parameters('functionAppName')]"
          },
          "functionAppRg": {
            "value": "[resourceGroup().name]"
          },
          "functionName": {
            "value": "[variables('rotationFunctionNames')[parameters('secrets')[copyIndex()].type]]"
          },
          "keyvaultName": {
            "value": "[parameters('secrets')[copyIndex()].keyvaultName]"
          },
          "secretName": {
            "value": "[parameters('secrets')[copyIndex()].secretName]"
          },
          "systemTopicName": {
            "value": "[parameters('systemTopicName')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.16.1.55165",
              "templateHash": "8637633046468927374"
            }
          },
          "parameters": {
            "functionAppName": {
              "type": "string",
              "metadata": {
                "description": "Name of the function app."
              }
            },
            "functionAppRg": {
              "type": "string",
              "metadata": {
                "description": "Resource name of the function app."
              }
            },
            "keyvaultName": {
              "type": "string",
              "metadata": {
                "description": "Name of the keyvault. This is used in the event subscription."
              }
            },
            "secretName": {
              "type": "string",
              "metadata": {
                "description": "Name of the keyvault secret."
              }
            },
            "functionName": {
              "type": "string",
              "metadata": {
                "description": "Name of the rotate function, used to subscript to the keyvault event."
              }
            },
            "systemTopicName": {
              "type": "string",
              "metadata": {
                "description": "Name of the system topic for keyvault event subscription"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventGrid/systemTopics/eventSubscriptions",
              "apiVersion": "2022-06-15",
              "name": "[format('{0}/{1}', parameters('systemTopicName'), format('{0}-{1}-{2}', parameters('functionAppName'), parameters('keyvaultName'), parameters('secretName')))]",
              "properties": {
                "destination": {
                  "endpointType": "AzureFunction",
                  "properties": {
                    "maxEventsPerBatch": 1,
                    "preferredBatchSizeInKilobytes": 64,
                    "resourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('functionAppRg')), 'Microsoft.Web/sites/functions', split(format('{0}/{1}', parameters('functionAppName'), parameters('functionName')), '/')[0], split(format('{0}/{1}', parameters('functionAppName'), parameters('functionName')), '/')[1])]"
                  }
                },
                "filter": {
                  "subjectBeginsWith": "[parameters('secretName')]",
                  "subjectEndsWith": "[parameters('secretName')]",
                  "includedEventTypes": [
                    "Microsoft.KeyVault.SecretNearExpiry"
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deploymentScripts', format('upload-site-files-{0}', variables('suffix')))]"
      ],
      "metadata": {
        "description": "Create event subscription to the system topic and let the function app consume it."
      }
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "metadata": {
        "description": "ID of the function app created."
      },
      "value": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of the function app created."
      },
      "value": "[parameters('functionAppName')]"
    },
    "appInsightId": {
      "type": "string",
      "metadata": {
        "description": "ID of the App Insight created."
      },
      "value": "[resourceId('Microsoft.Insights/components', format('ai-{0}', parameters('functionAppName')))]"
    },
    "appInsightName": {
      "type": "string",
      "metadata": {
        "description": "Name of the App Insight created."
      },
      "value": "[format('ai-{0}', parameters('functionAppName'))]"
    },
    "serverFarmId": {
      "type": "string",
      "metadata": {
        "description": "ID of the server farm created."
      },
      "value": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppName'))]"
    },
    "serverFarmName": {
      "type": "string",
      "metadata": {
        "description": "Name of the server farm created."
      },
      "value": "[parameters('functionAppName')]"
    }
  }
}