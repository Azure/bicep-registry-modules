{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.15.31.15270",
      "templateHash": "15082155413559039166"
    }
  },
  "parameters": {
    "clusterName": {
      "type": "string",
      "defaultValue": "null",
      "metadata": {
        "description": "Optional. Name for the Event Hub cluster, Alphanumerics and hyphens characters, Start with letter, End with letter or number."
      }
    },
    "clusterCapacity": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Optional. The quantity of Event Hubs Cluster Capacity Units contained in this cluster."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "eventHubNamespaces": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The name of the event hub namespace to be created.\r\nBelow paramters you can pass while creating the Azure Event Hub namespace.\r\nsku: (Optional) Possible values are \"Basic\" or \"Standard\" or \"Premium\". Detault to 'Standard'.\r\ncapacity: (Optional) int, The Event Hubs throughput units for Basic or Standard tiers, where value should be 0 to 20 throughput units.The Event Hubs premium units for Premium tier, where value should be 0 to 10 premium units. Default to 1.\r\nzoneRedundant: (Optional) bool, Enabling this property creates a Standard Event Hubs Namespace in regions supported availability zones. Default to false.\r\nisAutoInflateEnabled: (Optional) bool,  Value that indicates whether AutoInflate is enabled for eventhub namespace. Only available for \"Standard\" sku. Default to false.\r\nmaximumThroughputUnits: (Optional) int, Upper limit of throughput units when AutoInflate is enabled, value should be within 0 to 20 throughput units. ( '0' if AutoInflateEnabled = true)\r\ndisableLocalAuth: (Optional) bool, This property disables SAS authentication for the Event Hubs namespace. Default to false.\r\nkafkaEnabled: (Optional) bool, Value that indicates whether Kafka is enabled for eventhub namespace. Default to true.\r\n"
      }
    },
    "eventHubs": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": " Optional. Name for the eventhub to be created.\r\nBelow paramters you can pass while the creating Azure Event Hub\r\nmessageRetentionInDays: (Optional) int, Number of days to retain the events for this Event Hub, value should be 1 to 7 days. Default to 1.\r\npartitionCount: (Optional) int, Number of partitions created for the Event Hub. Default to 2\r\neventHubNamespaceName: (Optional) string, Name of the Azure Event Hub Namespace\r\nstatus: (Optional) string, Enumerates the possible values for the status of the Event Hub. 'Active','Creating','Deleting','Disabled','ReceiveDisabled','Renaming','Restoring','SendDisabled','Unknown'. Default to 'Active'\r\n"
      }
    },
    "namespaceAuthorizationRules": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Authorization Rules for the Event Hub Namespace."
      }
    },
    "eventHubAuthorizationRules": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Authorization Rules for the Event Hub ."
      }
    },
    "consumerGroups": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. consumer groups for the Event Hub ."
      }
    },
    "disasterRecoveryConfigs": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The disaster recovery config for the namespace."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "varEventHubNamespaces",
        "count": "[length(items(parameters('eventHubNamespaces')))]",
        "input": {
          "eventHubNamespaceName": "[items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].key]",
          "sku": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'sku'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.sku, 'Standard')]",
          "capacity": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'capacity'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.capacity, 1)]",
          "zoneRedundant": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'zoneRedundant'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.zoneRedundant, false())]",
          "isAutoInflateEnabled": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'isAutoInflateEnabled'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.isAutoInflateEnabled, false())]",
          "maximumThroughputUnits": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'maximumThroughputUnits'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.maximumThroughputUnits, 0)]",
          "disableLocalAuth": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'disableLocalAuth'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.disableLocalAuth, false())]",
          "kafkaEnabled": "[if(contains(items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value, 'kafkaEnabled'), items(parameters('eventHubNamespaces'))[copyIndex('varEventHubNamespaces')].value.kafkaEnabled, true())]"
        }
      },
      {
        "name": "varNamespaceAuthorizationRules",
        "count": "[length(items(parameters('namespaceAuthorizationRules')))]",
        "input": {
          "eventHubNamespaceAuthorizationRuleName": "[items(parameters('namespaceAuthorizationRules'))[copyIndex('varNamespaceAuthorizationRules')].key]",
          "rights": "[if(contains(items(parameters('namespaceAuthorizationRules'))[copyIndex('varNamespaceAuthorizationRules')].value, 'rights'), items(parameters('namespaceAuthorizationRules'))[copyIndex('varNamespaceAuthorizationRules')].value.rights, createArray())]",
          "eventHubNamespaceName": "[items(parameters('namespaceAuthorizationRules'))[copyIndex('varNamespaceAuthorizationRules')].value.eventHubNamespaceName]"
        }
      },
      {
        "name": "varDisasterRecoveryConfigs",
        "count": "[length(items(parameters('disasterRecoveryConfigs')))]",
        "input": {
          "disasterRecoveryConfigname": "[items(parameters('disasterRecoveryConfigs'))[copyIndex('varDisasterRecoveryConfigs')].key]",
          "partnerNamespaceId": "[if(contains(items(parameters('disasterRecoveryConfigs'))[copyIndex('varDisasterRecoveryConfigs')].value, 'partnerNamespaceId'), items(parameters('disasterRecoveryConfigs'))[copyIndex('varDisasterRecoveryConfigs')].value.partnerNamespaceId, '')]",
          "eventHubNamespaceName": "[items(parameters('disasterRecoveryConfigs'))[copyIndex('varDisasterRecoveryConfigs')].value.eventHubNamespaceName]"
        }
      },
      {
        "name": "varEventHubs",
        "count": "[length(items(parameters('eventHubs')))]",
        "input": {
          "eventHubName": "[items(parameters('eventHubs'))[copyIndex('varEventHubs')].key]",
          "messageRetentionInDays": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'messageRetentionInDays'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.messageRetentionInDays, 1)]",
          "partitionCount": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'partitionCount'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.partitionCount, 2)]",
          "eventHubNamespaceName": "[items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.eventHubNamespaceName]",
          "status": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'status'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.status, 'Active')]",
          "captureDescriptionDestinationArchiveNameFormat": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionDestinationArchiveNameFormat'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionDestinationArchiveNameFormat, '{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}')]",
          "captureDescriptionDestinationBlobContainer": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionDestinationBlobContainer'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionDestinationBlobContainer, '')]",
          "captureDescriptionDestinationName": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionDestinationName'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionDestinationName, 'EventHubArchive.AzureBlockBlob')]",
          "captureDescriptionDestinationStorageAccountResourceId": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionDestinationStorageAccountResourceId'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionDestinationStorageAccountResourceId, '')]",
          "captureDescriptionEnabled": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionEnabled'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionEnabled, false())]",
          "captureDescriptionEncoding": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionEncoding'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionEncoding, 'Avro')]",
          "captureDescriptionIntervalInSeconds": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionIntervalInSeconds'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionIntervalInSeconds, 300)]",
          "captureDescriptionSizeLimitInBytes": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionSizeLimitInBytes'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionSizeLimitInBytes, 314572800)]",
          "captureDescriptionSkipEmptyArchives": "[if(contains(items(parameters('eventHubs'))[copyIndex('varEventHubs')].value, 'captureDescriptionSkipEmptyArchives'), items(parameters('eventHubs'))[copyIndex('varEventHubs')].value.captureDescriptionSkipEmptyArchives, false())]"
        }
      },
      {
        "name": "varEventHubAuthorizationRules",
        "count": "[length(items(parameters('eventHubAuthorizationRules')))]",
        "input": {
          "eventHubAuthorizationRuleName": "[items(parameters('eventHubAuthorizationRules'))[copyIndex('varEventHubAuthorizationRules')].key]",
          "rights": "[if(contains(items(parameters('eventHubAuthorizationRules'))[copyIndex('varEventHubAuthorizationRules')].value, 'rights'), items(parameters('eventHubAuthorizationRules'))[copyIndex('varEventHubAuthorizationRules')].value.rights, createArray())]",
          "eventHubNamespaceName": "[items(parameters('eventHubAuthorizationRules'))[copyIndex('varEventHubAuthorizationRules')].value.eventHubNamespaceName]",
          "eventHubName": "[items(parameters('eventHubAuthorizationRules'))[copyIndex('varEventHubAuthorizationRules')].value.eventHubName]"
        }
      },
      {
        "name": "varConsumerGroups",
        "count": "[length(items(parameters('consumerGroups')))]",
        "input": {
          "consumerGroupName": "[items(parameters('consumerGroups'))[copyIndex('varConsumerGroups')].key]",
          "eventHubNamespaceName": "[items(parameters('consumerGroups'))[copyIndex('varConsumerGroups')].value.eventHubNamespaceName]",
          "eventHubName": "[items(parameters('consumerGroups'))[copyIndex('varConsumerGroups')].value.eventHubName]",
          "userMetadata": "[if(contains(items(parameters('consumerGroups'))[copyIndex('varConsumerGroups')].value, 'userMetadata'), items(parameters('consumerGroups'))[copyIndex('varConsumerGroups')].value.userMetadata, '')]"
        }
      }
    ]
  },
  "resources": [
    {
      "condition": "[not(equals(parameters('clusterName'), 'null'))]",
      "type": "Microsoft.EventHub/clusters",
      "apiVersion": "2021-11-01",
      "name": "[parameters('clusterName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "sku": {
        "name": "Dedicated",
        "capacity": "[parameters('clusterCapacity')]"
      },
      "properties": {}
    },
    {
      "copy": {
        "name": "eventHubNamespace",
        "count": "[length(variables('varEventHubNamespaces'))]"
      },
      "condition": "[not(empty(parameters('eventHubNamespaces')))]",
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('varEventHubNamespaces')[copyIndex()].eventHubNamespaceName]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[variables('varEventHubNamespaces')[copyIndex()].sku]",
        "tier": "[variables('varEventHubNamespaces')[copyIndex()].sku]",
        "capacity": "[variables('varEventHubNamespaces')[copyIndex()].capacity]"
      },
      "properties": {
        "disableLocalAuth": "[variables('varEventHubNamespaces')[copyIndex()].disableLocalAuth]",
        "kafkaEnabled": "[variables('varEventHubNamespaces')[copyIndex()].kafkaEnabled]",
        "isAutoInflateEnabled": "[variables('varEventHubNamespaces')[copyIndex()].isAutoInflateEnabled]",
        "maximumThroughputUnits": "[if(variables('varEventHubNamespaces')[copyIndex()].isAutoInflateEnabled, variables('varEventHubNamespaces')[copyIndex()].maximumThroughputUnits, 0)]",
        "zoneRedundant": "[variables('varEventHubNamespaces')[copyIndex()].zoneRedundant]",
        "clusterArmId": "[if(not(equals(parameters('clusterName'), 'null')), resourceId('Microsoft.EventHub/clusters', parameters('clusterName')), null())]"
      },
      "tags": "[parameters('tags')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/clusters', parameters('clusterName'))]"
      ]
    },
    {
      "copy": {
        "name": "eventHubNamespace_authorizationRules",
        "count": "[length(variables('varNamespaceAuthorizationRules'))]"
      },
      "condition": "[not(empty(parameters('namespaceAuthorizationRules')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-EvhbNamespace-AuthRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[variables('varNamespaceAuthorizationRules')[copyIndex()].eventHubNamespaceName]"
          },
          "name": {
            "value": "[variables('varNamespaceAuthorizationRules')[copyIndex()].eventHubNamespaceAuthorizationRuleName]"
          },
          "rights": {
            "value": "[variables('varNamespaceAuthorizationRules')[copyIndex()].rights]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "839285984078692729"
            }
          },
          "parameters": {
            "namespaceName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "rights": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/authorizationRules",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "rights": "[parameters('rights')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "eventHubNamespace"
      ]
    },
    {
      "copy": {
        "name": "eventHubNamespace_disasterRecoveryConfigs",
        "count": "[length(variables('varDisasterRecoveryConfigs'))]"
      },
      "condition": "[not(empty(parameters('disasterRecoveryConfigs')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-EvhbNamespace-DisRecConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[variables('varDisasterRecoveryConfigs')[copyIndex()].eventHubNamespaceName]"
          },
          "name": {
            "value": "[variables('varDisasterRecoveryConfigs')[copyIndex()].disasterRecoveryConfigname]"
          },
          "partnerNamespaceId": {
            "value": "[variables('varDisasterRecoveryConfigs')[copyIndex()].partnerNamespaceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "17506546971128354478"
            }
          },
          "parameters": {
            "namespaceName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "partnerNamespaceId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/disasterRecoveryConfigs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": {
                "partnerNamespace": "[parameters('partnerNamespaceId')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "eventHubNamespace"
      ]
    },
    {
      "copy": {
        "name": "eventHubNamespace_eventHubs",
        "count": "[length(variables('varEventHubs'))]"
      },
      "condition": "[not(empty(parameters('eventHubs')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-EvhbNamespace-EventHub-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[variables('varEventHubs')[copyIndex()].eventHubNamespaceName]"
          },
          "name": {
            "value": "[variables('varEventHubs')[copyIndex()].eventHubName]"
          },
          "messageRetentionInDays": {
            "value": "[variables('varEventHubs')[copyIndex()].messageRetentionInDays]"
          },
          "partitionCount": {
            "value": "[variables('varEventHubs')[copyIndex()].partitionCount]"
          },
          "status": {
            "value": "[variables('varEventHubs')[copyIndex()].status]"
          },
          "captureDescriptionEnabled": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionEnabled]"
          },
          "captureDescriptionDestinationArchiveNameFormat": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionDestinationArchiveNameFormat]"
          },
          "captureDescriptionDestinationBlobContainer": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionDestinationBlobContainer]"
          },
          "captureDescriptionDestinationName": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionDestinationName]"
          },
          "captureDescriptionDestinationStorageAccountResourceId": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionDestinationStorageAccountResourceId]"
          },
          "captureDescriptionEncoding": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionEncoding]"
          },
          "captureDescriptionIntervalInSeconds": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionIntervalInSeconds]"
          },
          "captureDescriptionSizeLimitInBytes": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionSizeLimitInBytes]"
          },
          "captureDescriptionSkipEmptyArchives": {
            "value": "[variables('varEventHubs')[copyIndex()].captureDescriptionSkipEmptyArchives]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "7805667471948837542"
            }
          },
          "parameters": {
            "namespaceName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "messageRetentionInDays": {
              "type": "int",
              "defaultValue": 1
            },
            "partitionCount": {
              "type": "int",
              "defaultValue": 2
            },
            "status": {
              "type": "string",
              "defaultValue": "Active"
            },
            "captureDescriptionEnabled": {
              "type": "bool",
              "defaultValue": false
            },
            "captureDescriptionDestinationName": {
              "type": "string",
              "defaultValue": "EventHubArchive.AzureBlockBlob"
            },
            "captureDescriptionDestinationArchiveNameFormat": {
              "type": "string",
              "defaultValue": "{Namespace}/{EventHub}/{PartitionId}/{Year}/{Month}/{Day}/{Hour}/{Minute}/{Second}"
            },
            "captureDescriptionDestinationBlobContainer": {
              "type": "string",
              "defaultValue": ""
            },
            "captureDescriptionDestinationStorageAccountResourceId": {
              "type": "string",
              "defaultValue": ""
            },
            "captureDescriptionEncoding": {
              "type": "string",
              "defaultValue": "Avro"
            },
            "captureDescriptionIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300
            },
            "captureDescriptionSizeLimitInBytes": {
              "type": "int",
              "defaultValue": 314572800
            },
            "captureDescriptionSkipEmptyArchives": {
              "type": "bool",
              "defaultValue": false
            }
          },
          "variables": {
            "eventHubPropertiesSimple": {
              "messageRetentionInDays": "[parameters('messageRetentionInDays')]",
              "partitionCount": "[parameters('partitionCount')]",
              "status": "[parameters('status')]"
            },
            "eventHubPropertiesWithCapture": {
              "messageRetentionInDays": "[parameters('messageRetentionInDays')]",
              "partitionCount": "[parameters('partitionCount')]",
              "status": "[parameters('status')]",
              "captureDescription": {
                "destination": {
                  "name": "[parameters('captureDescriptionDestinationName')]",
                  "properties": {
                    "archiveNameFormat": "[parameters('captureDescriptionDestinationArchiveNameFormat')]",
                    "blobContainer": "[parameters('captureDescriptionDestinationBlobContainer')]",
                    "storageAccountResourceId": "[parameters('captureDescriptionDestinationStorageAccountResourceId')]"
                  }
                },
                "enabled": "[parameters('captureDescriptionEnabled')]",
                "encoding": "[parameters('captureDescriptionEncoding')]",
                "intervalInSeconds": "[parameters('captureDescriptionIntervalInSeconds')]",
                "sizeLimitInBytes": "[parameters('captureDescriptionSizeLimitInBytes')]",
                "skipEmptyArchives": "[parameters('captureDescriptionSkipEmptyArchives')]"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}', parameters('namespaceName'), parameters('name'))]",
              "properties": "[if(parameters('captureDescriptionEnabled'), variables('eventHubPropertiesWithCapture'), variables('eventHubPropertiesSimple'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "eventHubNamespace"
      ]
    },
    {
      "copy": {
        "name": "eventHub_authorizationRules",
        "count": "[length(variables('varEventHubAuthorizationRules'))]"
      },
      "condition": "[not(empty(parameters('eventHubAuthorizationRules')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-Evhub-AuthRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[variables('varEventHubAuthorizationRules')[copyIndex()].eventHubNamespaceName]"
          },
          "eventHubName": {
            "value": "[variables('varEventHubAuthorizationRules')[copyIndex()].eventHubName]"
          },
          "name": {
            "value": "[variables('varEventHubAuthorizationRules')[copyIndex()].eventHubAuthorizationRuleName]"
          },
          "rights": {
            "value": "[variables('varEventHubAuthorizationRules')[copyIndex()].rights]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "504898429823367626"
            }
          },
          "parameters": {
            "namespaceName": {
              "type": "string"
            },
            "eventHubName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "rights": {
              "type": "array",
              "defaultValue": []
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/authorizationRules",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
              "properties": {
                "rights": "[parameters('rights')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "eventHubNamespace_eventHubs"
      ]
    },
    {
      "copy": {
        "name": "eventHub_consumerGroup",
        "count": "[length(variables('varConsumerGroups'))]"
      },
      "condition": "[not(empty(parameters('consumerGroups')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "[format('{0}-ConsumerGroup-{1}', deployment().name, copyIndex())]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "namespaceName": {
            "value": "[variables('varConsumerGroups')[copyIndex()].eventHubNamespaceName]"
          },
          "eventHubName": {
            "value": "[variables('varConsumerGroups')[copyIndex()].eventHubName]"
          },
          "name": {
            "value": "[variables('varConsumerGroups')[copyIndex()].consumerGroupName]"
          },
          "userMetadata": {
            "value": "[variables('varConsumerGroups')[copyIndex()].userMetadata]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.15.31.15270",
              "templateHash": "13809606714854574129"
            }
          },
          "parameters": {
            "namespaceName": {
              "type": "string"
            },
            "eventHubName": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "userMetadata": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "resources": [
            {
              "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
              "apiVersion": "2021-11-01",
              "name": "[format('{0}/{1}/{2}', parameters('namespaceName'), parameters('eventHubName'), parameters('name'))]",
              "properties": {
                "userMetadata": "[if(not(empty(parameters('userMetadata'))), parameters('userMetadata'), null())]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "eventHubNamespace_eventHubs"
      ]
    }
  ],
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]",
      "metadata": {
        "description": "The resource group the Azure Event Hub was deployed into."
      }
    },
    "eventHubNamespaceDetails": {
      "type": "array",
      "copy": {
        "count": "[length(variables('varEventHubNamespaces'))]",
        "input": {
          "id": "[reference(variables('varEventHubNamespaces')[copyIndex()].eventHubNamespaceName, '2021-11-01', 'Full').resourceId]",
          "serviceBusEndpoint": "[reference(variables('varEventHubNamespaces')[copyIndex()].eventHubNamespaceName, '2021-11-01', 'Full').properties.serviceBusEndpoint]",
          "status": "[reference(variables('varEventHubNamespaces')[copyIndex()].eventHubNamespaceName, '2021-11-01', 'Full').properties.status]"
        }
      },
      "metadata": {
        "description": "Azure Event Hub namespace details."
      }
    }
  }
}