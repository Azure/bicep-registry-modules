{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "7041333731896478717"
    },
    "name": "Sub-vending",
    "description": "This module deploys a subscription to accelerate deployment of landing zones. For more information on how to use it, please visit this [Wiki](https://github.com/Azure/bicep-lz-vending/wiki).",
    "owner": "Azure/module-maintainers",
    "details": "These are the input parameters for the Bicep module: [`main.bicep`](./main.bicep)\n\nThis is the orchestration module that is used and called by a consumer of the module to deploy a Landing Zone Subscription and its associated resources, based on the parameter input values that are provided to it at deployment time.\n\n> For more information and examples please see the [wiki](https://github.com/Azure/bicep-lz-vending/wiki)"
  },
  "definitions": {
    "_1.constrainedDelegationTemplatesType": {
      "type": "object",
      "discriminator": {
        "propertyName": "templateName",
        "mapping": {
          "excludeRoles": {
            "$ref": "#/definitions/_1.excludeRolesType"
          },
          "constrainRoles": {
            "$ref": "#/definitions/_1.constrainRolesType"
          },
          "constrainRolesAndPrincipalTypes": {
            "$ref": "#/definitions/_1.constrainRolesAndPrincipalTypesType"
          },
          "constrainRolesAndPrincipals": {
            "$ref": "#/definitions/_1.constrainRolesAndPrincipalsType"
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "_1.constrainRolesAndPrincipalsType": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string",
          "allowedValues": [
            "constrainRolesAndPrincipals"
          ],
          "metadata": {
            "description": "Required. Name of the RBAC condition template."
          }
        },
        "rolesToAssign": {
          "type": "array",
          "metadata": {
            "description": "Required. The list of roles that are allowed to be assigned by the delegate."
          }
        },
        "principalsToAssignTo": {
          "type": "array",
          "metadata": {
            "description": "Required. The list of principals that are allowed to be assigned roles by the delegate."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "_1.constrainRolesAndPrincipalTypesType": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string",
          "allowedValues": [
            "constrainRolesAndPrincipalTypes"
          ],
          "metadata": {
            "description": "Required. Name of the RBAC condition template."
          }
        },
        "rolesToAssign": {
          "type": "array",
          "metadata": {
            "description": "Required. The list of roles that are allowed to be assigned by the delegate."
          }
        },
        "principleTypesToAssign": {
          "type": "array",
          "allowedValues": [
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "metadata": {
            "description": "Required. The list of principle types that are allowed to be assigned roles by the delegate."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "_1.constrainRolesType": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string",
          "allowedValues": [
            "constrainRoles"
          ],
          "metadata": {
            "description": "Required. Name of the RBAC condition template."
          }
        },
        "rolesToAssign": {
          "type": "array",
          "metadata": {
            "description": "Required. The list of roles that are allowed to be assigned by the delegate."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "_1.excludeRolesType": {
      "type": "object",
      "properties": {
        "templateName": {
          "type": "string",
          "allowedValues": [
            "excludeRoles"
          ],
          "metadata": {
            "description": "Required. Name of the RBAC condition template."
          }
        },
        "ExludededRoles": {
          "type": "array",
          "metadata": {
            "description": "Required. The list of roles that are not allowed to be assigned by the delegate."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "_1.roleAssignmentConditionType": {
      "type": "object",
      "properties": {
        "roleConditionType": {
          "$ref": "#/definitions/_1.constrainedDelegationTemplatesType",
          "nullable": true,
          "metadata": {
            "description": "Required. The type of template for the role assignment condition."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The version of the condition template."
          }
        },
        "delegationCode": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The code for a custom condition if no template is used. The user should supply their own custom code if the available templates are not matching their requirements. If a value is provided, this will overwrite any added template. All single quotes needs to be skipped using '."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the user, group, or service principal."
            }
          },
          "definition": {
            "type": "string",
            "metadata": {
              "description": "Required. The role definition ID or name."
            }
          },
          "relativeScope": {
            "type": "string",
            "metadata": {
              "description": "Required. The relative scope of the role assignment."
            }
          },
          "roleAssignmentCondition": {
            "$ref": "#/definitions/_1.roleAssignmentConditionType",
            "nullable": true,
            "metadata": {
              "description": "Optional. The condition for the role assignment."
            }
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/subResourceWrapper.bicep"
        }
      }
    }
  },
  "parameters": {
    "subscriptionAliasEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Whether to create a new Subscription using the Subscription Alias resource. If `false`, supply an existing Subscription''s ID in the parameter named `existingSubscriptionId` instead to deploy resources to an existing Subscription."
      }
    },
    "subscriptionDisplayName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 63,
      "metadata": {
        "description": "Optional. The name of the subscription alias. The string must be comprised of a-z, A-Z, 0-9, - and _. The maximum length is 63 characters.\n\nThe string must be comprised of `a-z`, `A-Z`, `0-9`, `-`, `_` and ` ` (space). The maximum length is 63 characters.\n\n> The value for this parameter and the parameter named `subscriptionAliasName` are usually set to the same value for simplicity. But they can be different if required for a reason.\n\n> **Not required when providing an existing Subscription ID via the parameter `existingSubscriptionId`**.\n"
      }
    },
    "subscriptionAliasName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 63,
      "metadata": {
        "description": "Optional. The name of the Subscription Alias, that will be created by this module.\n\nThe string must be comprised of `a-z`, `A-Z`, `0-9`, `-`, `_` and ` ` (space). The maximum length is 63 characters.\n\n> **Not required when providing an existing Subscription ID via the parameter `existingSubscriptionId`**.\n"
      }
    },
    "subscriptionBillingScope": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The Billing Scope for the new Subscription alias, that will be created by this module.\n\nA valid Billing Scope starts with `/providers/Microsoft.Billing/billingAccounts/` and is case sensitive.\n\n> **Not required when providing an existing Subscription ID via the parameter `existingSubscriptionId`**.\n"
      }
    },
    "subscriptionWorkload": {
      "type": "string",
      "defaultValue": "Production",
      "allowedValues": [
        "DevTest",
        "Production"
      ],
      "metadata": {
        "description": "Optional. The workload type can be either `Production` or `DevTest` and is case sensitive.\n\n> **Not required when providing an existing Subscription ID via the parameter `existingSubscriptionId`**.\n"
      }
    },
    "subscriptionTenantId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Optional. The Azure Active Directory Tenant ID (GUID) to which the Subscription should be attached to.\n\n> **Leave blank unless following this scenario only [Programmatically create MCA subscriptions across Azure Active Directory tenants](https://learn.microsoft.com/azure/cost-management-billing/manage/programmatically-create-subscription-microsoft-customer-agreement-across-tenants)**."
      }
    },
    "subscriptionOwnerId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Optional. The Azure Active Directory principals object ID (GUID) to whom should be the Subscription Owner.\n\n> **Leave blank unless following this scenario only [Programmatically create MCA subscriptions across Azure Active Directory tenants](https://learn.microsoft.com/azure/cost-management-billing/manage/programmatically-create-subscription-microsoft-customer-agreement-across-tenants)**."
      }
    },
    "existingSubscriptionId": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 36,
      "metadata": {
        "description": "Optional. An existing subscription ID. Use this when you do not want the module to create a new subscription. But do want to manage the management group membership. A subscription ID should be provided in the example format `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`."
      }
    },
    "subscriptionManagementGroupAssociationEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Whether to move the Subscription to the specified Management Group supplied in the parameter `subscriptionManagementGroupId`.\n"
      }
    },
    "subscriptionManagementGroupId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The destination Management Group ID for the new Subscription that will be created by this module (or the existing one provided in the parameter `existingSubscriptionId`).\n\n**IMPORTANT:** Do not supply the display name of the Management Group. The Management Group ID forms part of the Azure Resource ID. e.g., `/providers/Microsoft.Management/managementGroups/{managementGroupId}`.\n"
      }
    },
    "subscriptionTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. An object of Tag key & value pairs to be appended to a Subscription.\n\n> **NOTE:** Tags will only be overwritten if existing tag exists with same key as provided in this parameter; values provided here win.\n"
      }
    },
    "virtualNetworkEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether to create a Virtual Network or not.\n\nIf set to `true` ensure you also provide values for the following parameters at a minimum:\n\n- `virtualNetworkResourceGroupName`\n- `virtualNetworkResourceGroupLockEnabled`\n- `virtualNetworkLocation`\n- `virtualNetworkName`\n- `virtualNetworkAddressSpace`\n\n> Other parameters may need to be set based on other parameters that you enable that are listed above. Check each parameters documentation for further information.\n"
      }
    },
    "virtualNetworkResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 90,
      "metadata": {
        "description": "Optional. The name of the Resource Group to create the Virtual Network in that is created by this module.\n"
      }
    },
    "virtualNetworkResourceGroupTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. An object of Tag key & value pairs to be appended to the Resource Group that the Virtual Network is created in.\n\n> **NOTE:** Tags will only be overwritten if existing tag exists with same key as provided in this parameter; values provided here win.\n"
      }
    },
    "virtualNetworkResourceGroupLockEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables the deployment of a `CanNotDelete` resource locks to the Virtual Networks Resource Group that is created by this module.\n"
      }
    },
    "virtualNetworkLocation": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location of the virtual network. Use region shortnames e.g. `uksouth`, `eastus`, etc. Defaults to the region where the ARM/Bicep deployment is targeted to unless overridden.\n"
      }
    },
    "virtualNetworkName": {
      "type": "string",
      "defaultValue": "",
      "maxLength": 64,
      "metadata": {
        "description": "Optional. The name of the virtual network. The string must consist of a-z, A-Z, 0-9, -, _, and . (period) and be between 2 and 64 characters in length.\n"
      }
    },
    "virtualNetworkTags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. An object of tag key/value pairs to be set on the Virtual Network that is created.\n\n> **NOTE:** Tags will be overwritten on resource if any exist already.\n"
      }
    },
    "virtualNetworkAddressSpace": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The address space of the Virtual Network that will be created by this module, supplied as multiple CIDR blocks in an array, e.g. `[\"10.0.0.0/16\",\"172.16.0.0/12\"]`."
      }
    },
    "virtualNetworkDnsServers": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The custom DNS servers to use on the Virtual Network, e.g. `[\"10.4.1.4\", \"10.2.1.5\"]`. If left empty (default) then Azure DNS will be used for the Virtual Network.\n"
      }
    },
    "virtualNetworkDdosPlanResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of an existing DDoS Network Protection Plan that you wish to link to this Virtual Network.\n"
      }
    },
    "virtualNetworkPeeringEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether to enable peering/connection with the supplied hub Virtual Network or Virtual WAN Virtual Hub.\n"
      }
    },
    "hubNetworkResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the Virtual Network or Virtual WAN Hub in the hub to which the created Virtual Network, by this module, will be peered/connected to via Virtual Network Peering or a Virtual WAN Virtual Hub Connection.\n"
      }
    },
    "virtualNetworkUseRemoteGateways": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables the use of remote gateways in the specified hub virtual network.\n\n> **IMPORTANT:** If no gateways exist in the hub virtual network, set this to `false`, otherwise peering will fail to create.\n"
      }
    },
    "virtualNetworkVwanEnableInternetSecurity": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enables the ability for the Virtual WAN Hub Connection to learn the default route 0.0.0.0/0 from the Hub.\n"
      }
    },
    "virtualNetworkVwanAssociatedRouteTableResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the virtual hub route table to associate to the virtual hub connection (this virtual network). If left blank/empty the `defaultRouteTable` will be associated.\n"
      }
    },
    "virtualNetworkVwanPropagatedRouteTablesResourceIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of of objects of virtual hub route table resource IDs to propagate routes to. If left blank/empty the `defaultRouteTable` will be propagated to only.\n\nEach object must contain the following `key`:\n- `id` = The Resource ID of the Virtual WAN Virtual Hub Route Table IDs you wish to propagate too\n\n> **IMPORTANT:** If you provide any Route Tables in this array of objects you must ensure you include also the `defaultRouteTable` Resource ID as an object in the array as it is not added by default when a value is provided for this parameter.\n"
      }
    },
    "virtualNetworkVwanPropagatedLabels": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of virtual hub route table labels to propagate routes to. If left blank/empty the default label will be propagated to only.\n"
      }
    },
    "vHubRoutingIntentEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Indicates whether routing intent is enabled on the Virtual Hub within the Virtual WAN.\n"
      }
    },
    "roleAssignmentEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Whether to create role assignments or not. If true, supply the array of role assignment objects in the parameter called `roleAssignments`.\n"
      }
    },
    "roleAssignments": {
      "$ref": "#/definitions/roleAssignmentType",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. Supply an array of objects containing the details of the role assignments to create.\n\nEach object must contain the following `keys`:\n- `principalId` = The Object ID of the User, Group, SPN, Managed Identity to assign the RBAC role too.\n- `definition` = The Name of one of the pre-defined built-In RBAC Roles or a Resource ID of a Built-in or custom RBAC Role Definition as follows:\n  - You can only provide the RBAC role name of the pre-defined roles (Contributor, Owner, Reader, Role Based Access Control Administrator (Preview), and User Access Administrator). We only provide those roles as they are the most common ones to assign to a new subscription, also to reduce the template size and complexity in case we define each and every Built-in RBAC role.\n  - You can provide the Resource ID of a Built-in or custom RBAC Role Definition\n    - e.g. `/providers/Microsoft.Authorization/roleDefinitions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`\n- `relativeScope` = 2 options can be provided for input value:\n    1. `''` *(empty string)* = Make RBAC Role Assignment to Subscription scope\n    2. `'/resourceGroups/<RESOURCE GROUP NAME>'` = Make RBAC Role Assignment to specified Resource Group.\n"
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "deploymentScriptResourceGroupName": {
      "type": "string",
      "defaultValue": "[format('rsg-{0}-ds', deployment().location)]",
      "metadata": {
        "description": "Optional. The name of the resource group to create the deployment script for resource providers registration."
      }
    },
    "deploymentScriptName": {
      "type": "string",
      "defaultValue": "[format('ds-{0}', deployment().location)]",
      "metadata": {
        "description": "Optional. The name of the deployment script to register resource providers."
      }
    },
    "deploymentScriptManagedIdentityName": {
      "type": "string",
      "defaultValue": "[format('id-{0}', deployment().location)]",
      "metadata": {
        "description": "Optional. The name of the user managed identity for the resource providers registration deployment script."
      }
    },
    "deploymentScriptVirtualNetworkName": {
      "type": "string",
      "defaultValue": "[format('vnet-{0}', deployment().location)]",
      "maxLength": 64,
      "metadata": {
        "description": "Optional. The name of the private virtual network for the deployment script. The string must consist of a-z, A-Z, 0-9, -, _, and . (period) and be between 2 and 64 characters in length."
      }
    },
    "deploymentScriptNetworkSecurityGroupName": {
      "type": "string",
      "defaultValue": "[format('nsg-{0}', deployment().location)]",
      "metadata": {
        "description": "Optional. The name of the network security group for the deployment script private subnet."
      }
    },
    "virtualNetworkDeploymentScriptAddressPrefix": {
      "type": "string",
      "defaultValue": "192.168.0.0/24",
      "metadata": {
        "description": "Optional. The address prefix of the private virtual network for the deployment script."
      }
    },
    "deploymentScriptStorageAccountName": {
      "type": "string",
      "defaultValue": "[format('stgds{0}', substring(uniqueString(deployment().name, parameters('virtualNetworkLocation')), 0, 10))]",
      "metadata": {
        "description": "Optional. The name of the storage account for the deployment script."
      }
    },
    "deploymentScriptLocation": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location of the deployment script. Use region shortnames e.g. uksouth, eastus, etc."
      }
    },
    "resourceProviders": {
      "type": "object",
      "defaultValue": {
        "Microsoft.ApiManagement": [],
        "Microsoft.AppPlatform": [],
        "Microsoft.Authorization": [],
        "Microsoft.Automation": [],
        "Microsoft.AVS": [],
        "Microsoft.Blueprint": [],
        "Microsoft.BotService": [],
        "Microsoft.Cache": [],
        "Microsoft.Cdn": [],
        "Microsoft.CognitiveServices": [],
        "Microsoft.Compute": [],
        "Microsoft.ContainerInstance": [],
        "Microsoft.ContainerRegistry": [],
        "Microsoft.ContainerService": [],
        "Microsoft.CostManagement": [],
        "Microsoft.CustomProviders": [],
        "Microsoft.Databricks": [],
        "Microsoft.DataLakeAnalytics": [],
        "Microsoft.DataLakeStore": [],
        "Microsoft.DataMigration": [],
        "Microsoft.DataProtection": [],
        "Microsoft.DBforMariaDB": [],
        "Microsoft.DBforMySQL": [],
        "Microsoft.DBforPostgreSQL": [],
        "Microsoft.DesktopVirtualization": [],
        "Microsoft.Devices": [],
        "Microsoft.DevTestLab": [],
        "Microsoft.DocumentDB": [],
        "Microsoft.EventGrid": [],
        "Microsoft.EventHub": [],
        "Microsoft.HDInsight": [],
        "Microsoft.HealthcareApis": [],
        "Microsoft.GuestConfiguration": [],
        "Microsoft.KeyVault": [],
        "Microsoft.Kusto": [],
        "microsoft.insights": [],
        "Microsoft.Logic": [],
        "Microsoft.MachineLearningServices": [],
        "Microsoft.Maintenance": [],
        "Microsoft.ManagedIdentity": [],
        "Microsoft.ManagedServices": [],
        "Microsoft.Management": [],
        "Microsoft.Maps": [],
        "Microsoft.MarketplaceOrdering": [],
        "Microsoft.Media": [],
        "Microsoft.MixedReality": [],
        "Microsoft.Network": [],
        "Microsoft.NotificationHubs": [],
        "Microsoft.OperationalInsights": [],
        "Microsoft.OperationsManagement": [],
        "Microsoft.PolicyInsights": [],
        "Microsoft.PowerBIDedicated": [],
        "Microsoft.Relay": [],
        "Microsoft.RecoveryServices": [],
        "Microsoft.Resources": [],
        "Microsoft.Search": [],
        "Microsoft.Security": [],
        "Microsoft.SecurityInsights": [],
        "Microsoft.ServiceBus": [],
        "Microsoft.ServiceFabric": [],
        "Microsoft.Sql": [],
        "Microsoft.Storage": [],
        "Microsoft.StreamAnalytics": [],
        "Microsoft.TimeSeriesInsights": [],
        "Microsoft.Web": []
      },
      "metadata": {
        "description": "Optional. An object of resource providers and resource providers features to register. If left blank/empty, no resource providers will be registered.\n"
      }
    },
    "managementGroupAssociationDelayCount": {
      "type": "int",
      "defaultValue": 15,
      "metadata": {
        "description": "Optional. The number of blank ARM deployments to create sequentially to introduce a delay to the Subscription being moved to the target Management Group being, if set, to allow for background platform RBAC inheritance to occur."
      }
    }
  },
  "variables": {
    "existingSubscriptionIDEmptyCheck": "[if(empty(parameters('existingSubscriptionId')), 'No Subscription ID Provided', parameters('existingSubscriptionId'))]",
    "deploymentNames": {
      "createSubscription": "[take(format('lz-vend-sub-create-{0}-{1}', parameters('subscriptionAliasName'), uniqueString(parameters('subscriptionAliasName'), parameters('subscriptionDisplayName'), parameters('subscriptionBillingScope'), parameters('subscriptionWorkload'), deployment().name)), 64)]",
      "createSubscriptionResources": "[take(format('lz-vend-sub-res-create-{0}-{1}', parameters('subscriptionAliasName'), uniqueString(parameters('subscriptionAliasName'), parameters('subscriptionDisplayName'), parameters('subscriptionBillingScope'), parameters('subscriptionWorkload'), parameters('existingSubscriptionId'), deployment().name)), 64)]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.lz-subvending.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('virtualNetworkLocation')), 0, 4))]",
      "location": "[parameters('virtualNetworkLocation')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "createSubscription": {
      "condition": "[and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deploymentNames').createSubscription]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subscriptionBillingScope": {
            "value": "[parameters('subscriptionBillingScope')]"
          },
          "subscriptionAliasName": {
            "value": "[parameters('subscriptionAliasName')]"
          },
          "subscriptionDisplayName": {
            "value": "[parameters('subscriptionDisplayName')]"
          },
          "subscriptionWorkload": {
            "value": "[parameters('subscriptionWorkload')]"
          },
          "subscriptionTenantId": {
            "value": "[parameters('subscriptionTenantId')]"
          },
          "subscriptionOwnerId": {
            "value": "[parameters('subscriptionOwnerId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1611270751895734589"
            }
          },
          "parameters": {
            "subscriptionDisplayName": {
              "type": "string",
              "maxLength": 63,
              "metadata": {
                "description": "The name of the subscription alias. The string must be comprised of a-z, A-Z, 0-9, - and _. The maximum length is 63 characters."
              }
            },
            "subscriptionAliasName": {
              "type": "string",
              "maxLength": 63,
              "metadata": {
                "description": "The name of the subscription alias. The string must be comprised of a-z, A-Z, 0-9, -, _ and space. The maximum length is 63 characters."
              }
            },
            "subscriptionBillingScope": {
              "type": "string",
              "metadata": {
                "description": "The billing scope for the new subscription alias. A valid billing scope starts with `/providers/Microsoft.Billing/billingAccounts/` and is case sensitive."
              }
            },
            "subscriptionWorkload": {
              "type": "string",
              "defaultValue": "Production",
              "allowedValues": [
                "DevTest",
                "Production"
              ],
              "metadata": {
                "description": "The workload type can be either `Production` or `DevTest` and is case sensitive."
              }
            },
            "subscriptionTenantId": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 36,
              "metadata": {
                "description": "The Azure Active Directory Tenant ID (GUID) to which the Subscription should be attached to. Leave blank unless following this scenario only [Programmatically create MCA subscriptions across Azure Active Directory tenants](https://learn.microsoft.com/azure/cost-management-billing/manage/programmatically-create-subscription-microsoft-customer-agreement-across-tenants)."
              }
            },
            "subscriptionOwnerId": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 36,
              "metadata": {
                "description": "The Azure Active Directory principals object ID (GUID) to whom should be the Subscription Owner. Leave blank unless following this scenario only [Programmatically create MCA subscriptions across Azure Active Directory tenants](https://learn.microsoft.com/azure/cost-management-billing/manage/programmatically-create-subscription-microsoft-customer-agreement-across-tenants)."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Subscription/aliases",
              "apiVersion": "2021-10-01",
              "scope": "/",
              "name": "[parameters('subscriptionAliasName')]",
              "properties": {
                "workload": "[parameters('subscriptionWorkload')]",
                "displayName": "[parameters('subscriptionDisplayName')]",
                "billingScope": "[parameters('subscriptionBillingScope')]",
                "additionalProperties": "[if(and(not(empty(parameters('subscriptionTenantId'))), not(empty(parameters('subscriptionOwnerId')))), createObject('subscriptionTenantId', parameters('subscriptionTenantId'), 'subscriptionOwnerId', parameters('subscriptionOwnerId')), createObject())]"
              }
            }
          ],
          "outputs": {
            "subscriptionId": {
              "type": "string",
              "value": "[reference(tenantResourceId('Microsoft.Subscription/aliases', parameters('subscriptionAliasName')), '2021-10-01').subscriptionId]"
            },
            "subscriptionResourceId": {
              "type": "string",
              "value": "[format('/subscriptions/{0}', reference(tenantResourceId('Microsoft.Subscription/aliases', parameters('subscriptionAliasName')), '2021-10-01').subscriptionId)]"
            },
            "subscriptionAcceptOwnershipState": {
              "type": "string",
              "value": "[if(and(not(empty(parameters('subscriptionTenantId'))), not(empty(parameters('subscriptionOwnerId')))), reference(tenantResourceId('Microsoft.Subscription/aliases', parameters('subscriptionAliasName')), '2021-10-01').acceptOwnershipState, 'N/A')]"
            },
            "subscriptionAcceptOwnershipUrl": {
              "type": "string",
              "value": "[if(and(not(empty(parameters('subscriptionTenantId'))), not(empty(parameters('subscriptionOwnerId')))), reference(tenantResourceId('Microsoft.Subscription/aliases', parameters('subscriptionAliasName')), '2021-10-01').acceptOwnershipUrl, 'N/A')]"
            }
          }
        }
      }
    },
    "createSubscriptionResources": {
      "condition": "[or(parameters('subscriptionAliasEnabled'), not(empty(parameters('existingSubscriptionId'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deploymentNames').createSubscriptionResources]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "subscriptionId": "[if(and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId'))), createObject('value', reference('createSubscription').outputs.subscriptionId.value), createObject('value', parameters('existingSubscriptionId')))]",
          "managementGroupAssociationDelayCount": {
            "value": "[parameters('managementGroupAssociationDelayCount')]"
          },
          "subscriptionManagementGroupAssociationEnabled": {
            "value": "[parameters('subscriptionManagementGroupAssociationEnabled')]"
          },
          "subscriptionManagementGroupId": {
            "value": "[parameters('subscriptionManagementGroupId')]"
          },
          "subscriptionTags": {
            "value": "[parameters('subscriptionTags')]"
          },
          "virtualNetworkEnabled": {
            "value": "[parameters('virtualNetworkEnabled')]"
          },
          "virtualNetworkResourceGroupName": {
            "value": "[parameters('virtualNetworkResourceGroupName')]"
          },
          "virtualNetworkResourceGroupTags": {
            "value": "[parameters('virtualNetworkResourceGroupTags')]"
          },
          "virtualNetworkResourceGroupLockEnabled": {
            "value": "[parameters('virtualNetworkResourceGroupLockEnabled')]"
          },
          "virtualNetworkLocation": {
            "value": "[parameters('virtualNetworkLocation')]"
          },
          "virtualNetworkName": {
            "value": "[parameters('virtualNetworkName')]"
          },
          "virtualNetworkTags": {
            "value": "[parameters('virtualNetworkTags')]"
          },
          "virtualNetworkAddressSpace": {
            "value": "[parameters('virtualNetworkAddressSpace')]"
          },
          "virtualNetworkDnsServers": {
            "value": "[parameters('virtualNetworkDnsServers')]"
          },
          "virtualNetworkDdosPlanResourceId": {
            "value": "[parameters('virtualNetworkDdosPlanResourceId')]"
          },
          "virtualNetworkPeeringEnabled": {
            "value": "[parameters('virtualNetworkPeeringEnabled')]"
          },
          "hubNetworkResourceId": {
            "value": "[parameters('hubNetworkResourceId')]"
          },
          "virtualNetworkUseRemoteGateways": {
            "value": "[parameters('virtualNetworkUseRemoteGateways')]"
          },
          "virtualNetworkVwanEnableInternetSecurity": {
            "value": "[parameters('virtualNetworkVwanEnableInternetSecurity')]"
          },
          "virtualNetworkVwanAssociatedRouteTableResourceId": {
            "value": "[parameters('virtualNetworkVwanAssociatedRouteTableResourceId')]"
          },
          "virtualNetworkVwanPropagatedRouteTablesResourceIds": {
            "value": "[parameters('virtualNetworkVwanPropagatedRouteTablesResourceIds')]"
          },
          "virtualNetworkVwanPropagatedLabels": {
            "value": "[parameters('virtualNetworkVwanPropagatedLabels')]"
          },
          "vHubRoutingIntentEnabled": {
            "value": "[parameters('vHubRoutingIntentEnabled')]"
          },
          "roleAssignmentEnabled": {
            "value": "[parameters('roleAssignmentEnabled')]"
          },
          "roleAssignments": {
            "value": "[parameters('roleAssignments')]"
          },
          "deploymentScriptResourceGroupName": {
            "value": "[parameters('deploymentScriptResourceGroupName')]"
          },
          "deploymentScriptName": {
            "value": "[parameters('deploymentScriptName')]"
          },
          "deploymentScriptManagedIdentityName": {
            "value": "[parameters('deploymentScriptManagedIdentityName')]"
          },
          "resourceProviders": {
            "value": "[parameters('resourceProviders')]"
          },
          "deploymentScriptVirtualNetworkName": {
            "value": "[parameters('deploymentScriptVirtualNetworkName')]"
          },
          "deploymentScriptLocation": {
            "value": "[parameters('deploymentScriptLocation')]"
          },
          "deploymentScriptNetworkSecurityGroupName": {
            "value": "[parameters('deploymentScriptNetworkSecurityGroupName')]"
          },
          "virtualNetworkDeploymentScriptAddressPrefix": {
            "value": "[parameters('virtualNetworkDeploymentScriptAddressPrefix')]"
          },
          "deploymentScriptStorageAccountName": {
            "value": "[parameters('deploymentScriptStorageAccountName')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1508834239626613483"
            },
            "name": "`/subResourcesWrapper/deploy.bicep` Parameters",
            "description": "This module is used by the [`bicep-lz-vending`](https://aka.ms/sub-vending/bicep) module to help orchestrate the deployment",
            "details": "These are the input parameters for the Bicep module: [`deploy.bicep`](./deploy.bicep)\n\nThis is the sub-orchestration module that is used and called by the [`main.bicep`](../../../main.bicep)  module to deploy the resources into the subscription that has been created (or an existing one provided), based on the parameter input values that are provided to it at deployment time from the `main.bicep` orchestration module.\n\n> ⚠️ It is not intended for this module to be called outside of being a sub-orchestration module for the `main.bicep` module ⚠️"
          },
          "definitions": {
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the user, group, or service principal."
                    }
                  },
                  "definition": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role definition ID or name."
                    }
                  },
                  "relativeScope": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The relative scope of the role assignment."
                    }
                  },
                  "roleAssignmentCondition": {
                    "$ref": "#/definitions/roleAssignmentConditionType",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The condition for the role assignment."
                    }
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "constrainRolesType": {
              "type": "object",
              "properties": {
                "templateName": {
                  "type": "string",
                  "allowedValues": [
                    "constrainRoles"
                  ],
                  "metadata": {
                    "description": "Required. Name of the RBAC condition template."
                  }
                },
                "rolesToAssign": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. The list of roles that are allowed to be assigned by the delegate."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "constrainRolesAndPrincipalTypesType": {
              "type": "object",
              "properties": {
                "templateName": {
                  "type": "string",
                  "allowedValues": [
                    "constrainRolesAndPrincipalTypes"
                  ],
                  "metadata": {
                    "description": "Required. Name of the RBAC condition template."
                  }
                },
                "rolesToAssign": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. The list of roles that are allowed to be assigned by the delegate."
                  }
                },
                "principleTypesToAssign": {
                  "type": "array",
                  "allowedValues": [
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "metadata": {
                    "description": "Required. The list of principle types that are allowed to be assigned roles by the delegate."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "constrainRolesAndPrincipalsType": {
              "type": "object",
              "properties": {
                "templateName": {
                  "type": "string",
                  "allowedValues": [
                    "constrainRolesAndPrincipals"
                  ],
                  "metadata": {
                    "description": "Required. Name of the RBAC condition template."
                  }
                },
                "rolesToAssign": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. The list of roles that are allowed to be assigned by the delegate."
                  }
                },
                "principalsToAssignTo": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. The list of principals that are allowed to be assigned roles by the delegate."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "excludeRolesType": {
              "type": "object",
              "properties": {
                "templateName": {
                  "type": "string",
                  "allowedValues": [
                    "excludeRoles"
                  ],
                  "metadata": {
                    "description": "Required. Name of the RBAC condition template."
                  }
                },
                "ExludededRoles": {
                  "type": "array",
                  "metadata": {
                    "description": "Required. The list of roles that are not allowed to be assigned by the delegate."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "constrainedDelegationTemplatesType": {
              "type": "object",
              "discriminator": {
                "propertyName": "templateName",
                "mapping": {
                  "excludeRoles": {
                    "$ref": "#/definitions/excludeRolesType"
                  },
                  "constrainRoles": {
                    "$ref": "#/definitions/constrainRolesType"
                  },
                  "constrainRolesAndPrincipalTypes": {
                    "$ref": "#/definitions/constrainRolesAndPrincipalTypesType"
                  },
                  "constrainRolesAndPrincipals": {
                    "$ref": "#/definitions/constrainRolesAndPrincipalsType"
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "roleAssignmentConditionType": {
              "type": "object",
              "properties": {
                "roleConditionType": {
                  "$ref": "#/definitions/constrainedDelegationTemplatesType",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. The type of template for the role assignment condition."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the condition template."
                  }
                },
                "delegationCode": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The code for a custom condition if no template is used. The user should supply their own custom code if the available templates are not matching their requirements. If a value is provided, this will overwrite any added template. All single quotes needs to be skipped using '."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            }
          },
          "functions": [
            {
              "namespace": "__bicep",
              "members": {
                "generateCodeRolesType": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/constrainRolesType",
                      "name": "constrainRoles"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[format('((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/write''}})) OR (@Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{0}}}) AND ((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/delete''}}) OR (@Resource[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{1}}}))))', __bicep.joinArray(parameters('constrainRoles').rolesToAssign), __bicep.joinArray(parameters('constrainRoles').rolesToAssign))]"
                  },
                  "metadata": {
                    "description": "Generates the code for the \"Constrain Roles\" condition template.",
                    "__bicep_export!": true
                  }
                },
                "generateCodeRolesAndPrincipalsTypes": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/constrainRolesAndPrincipalTypesType",
                      "name": "constrainRolesAndPrincipalsTypes"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[format('((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/write''}}) OR (@Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{0}}} AND @Request[Microsoft.Authorization/roleAssignments:PrincipalType] ForAnyOfAnyValues:StringEqualsIgnoreCase {{{1}}})) AND ((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/delete''}})) OR (@Resource[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{2}}} AND @Resource[Microsoft.Authorization/roleAssignments:PrincipalType] ForAnyOfAnyValues:StringEqualsIgnoreCase {{{3}}})))', __bicep.joinArray(parameters('constrainRolesAndPrincipalsTypes').rolesToAssign), __bicep.joinArrayIgnoreCase(parameters('constrainRolesAndPrincipalsTypes').principleTypesToAssign), __bicep.joinArray(parameters('constrainRolesAndPrincipalsTypes').rolesToAssign), __bicep.joinArrayIgnoreCase(parameters('constrainRolesAndPrincipalsTypes').principleTypesToAssign))]"
                  },
                  "metadata": {
                    "description": "Generates the code for the \"Constrain Roles and Principal types\" condition template.",
                    "__bicep_export!": true
                  }
                },
                "generateCodeRolesAndPrincipals": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/constrainRolesAndPrincipalsType",
                      "name": "constrainRolesAndPrincipals"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[format('((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/write''}}) OR (@Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{0}}} AND @Request[Microsoft.Authorization/roleAssignments:PrincipalId] ForAnyOfAnyValues:GuidEquals {{{1}}})) AND ((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/delete''}})) OR (@Resource[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAnyValues:GuidEquals {{{2}}} AND @Resource[Microsoft.Authorization/roleAssignments:PrincipalId] ForAnyOfAnyValues:GuidEquals {{{3}}})))', __bicep.joinArray(parameters('constrainRolesAndPrincipals').rolesToAssign), __bicep.joinArray(parameters('constrainRolesAndPrincipals').principalsToAssignTo), __bicep.joinArray(parameters('constrainRolesAndPrincipals').rolesToAssign), __bicep.joinArray(parameters('constrainRolesAndPrincipals').principalsToAssignTo))]"
                  },
                  "metadata": {
                    "description": "Generates the code for the \"Constrain Roles and Principals\" condition template.",
                    "__bicep_export!": true
                  }
                },
                "generateCodeExcludeRoles": {
                  "parameters": [
                    {
                      "$ref": "#/definitions/excludeRolesType",
                      "name": "excludeRoles"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[format('((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/write''}}) OR ( @Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAllValues:GuidNotEquals {{{0}}})) AND ((!(ActionMatches{{''Microsoft.Authorization/roleAssignments/delete''}}) OR (@Request[Microsoft.Authorization/roleAssignments:RoleDefinitionId] ForAnyOfAllValues:GuidNotEquals {{{1}}}))))', __bicep.joinArray(parameters('excludeRoles').ExludededRoles), __bicep.joinArray(parameters('excludeRoles').ExludededRoles))]"
                  },
                  "metadata": {
                    "description": "Generates the code for the \"Exclude Roles\" condition template.",
                    "__bicep_export!": true
                  }
                },
                "joinArray": {
                  "parameters": [
                    {
                      "type": "array",
                      "name": "roles"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[replace(join(parameters('roles'), ','), '\"', '')]"
                  },
                  "metadata": {
                    "__bicep_export!": true
                  }
                },
                "joinArrayIgnoreCase": {
                  "parameters": [
                    {
                      "type": "array",
                      "name": "principalTypes"
                    }
                  ],
                  "output": {
                    "type": "string",
                    "value": "[format('''{0}''', replace(replace(join(parameters('principalTypes'), ','), '\"', ''''), ',', ''','''))]"
                  },
                  "metadata": {
                    "__bicep_export!": true
                  }
                }
              }
            }
          ],
          "parameters": {
            "subscriptionId": {
              "type": "string",
              "maxLength": 36
            },
            "subscriptionManagementGroupAssociationEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to move the subscription to the specified management group supplied in the pararmeter subscriptionManagementGroupId."
              }
            },
            "subscriptionManagementGroupId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The destination management group ID for the new subscription. Note: Do not supply the display name. The management group ID forms part of the Azure resource ID. e.g., `/providers/Microsoft.Management/managementGroups/{managementGroupId}`."
              }
            },
            "subscriptionTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "An object of tag key/value pairs to be appended to a subscription. NOTE: Tags will only be overwriten if existing tag exists with same key; values provided here win."
              }
            },
            "virtualNetworkEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether to create a virtual network or not."
              }
            },
            "virtualNetworkResourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 90,
              "metadata": {
                "description": "The name of the resource group to create the virtual network in."
              }
            },
            "virtualNetworkResourceGroupLockEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enables the deployment of a `CanNotDelete` resource locks to the virtual networks resource group."
              }
            },
            "virtualNetworkResourceGroupTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "An object of tag key/value pairs to be appended to the Resource Group that the Virtual Network is created in. NOTE: Tags will only be overwriten if existing tag exists with same key; values provided here win."
              }
            },
            "virtualNetworkLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location of the virtual network. Use region shortnames e.g. uksouth, eastus, etc."
              }
            },
            "virtualNetworkName": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 64,
              "metadata": {
                "description": "The name of the virtual network. The string must consist of a-z, A-Z, 0-9, -, _, and . (period) and be between 2 and 64 characters in length."
              }
            },
            "virtualNetworkTags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "An object of tag key/value pairs to be set on the Virtual Network that is created. NOTE: Tags will be overwritten on resoruce if any exist already."
              }
            },
            "virtualNetworkAddressSpace": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The address space of the virtual network, supplied as multiple CIDR blocks, e.g. `[\"10.0.0.0/16\",\"172.16.0.0/12\"]`"
              }
            },
            "virtualNetworkDnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "The custom DNS servers to use on the virtual network, e.g. `[\"10.4.1.4\", \"10.2.1.5\"]. If left empty (default) then Azure DNS will be used for the virtual network.`"
              }
            },
            "virtualNetworkDdosPlanResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resoruce ID of an existing DDoS Network Protection Plan that you wish to link to this virtual network."
              }
            },
            "virtualNetworkPeeringEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether to enable peering/connection with the supplied hub virtual network or virtual hub."
              }
            },
            "hubNetworkResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the virtual network or virtual wan hub in the hub to which the created virtual network will be peered/connected to via vitrual network peering or a vitrual hub connection."
              }
            },
            "virtualNetworkUseRemoteGateways": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enables the use of remote gateways in the spefcified hub virtual network. If no gateways exsit in the hub virtual network, set this to `false`, otherwise peering will fail to create. Set this to `false` for virtual wan hub connections."
              }
            },
            "virtualNetworkVwanEnableInternetSecurity": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enables the ability for the Virtual WAN Hub Connection to learn the default route 0.0.0.0/0 from the Hub."
              }
            },
            "virtualNetworkVwanAssociatedRouteTableResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the virtual hub route table to associate to the virtual hub connection (this virtual network). If left blank/empty default route table will be associated."
              }
            },
            "virtualNetworkVwanPropagatedRouteTablesResourceIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of virtual hub route table resource IDs to propogate routes to. If left blank/empty default route table will be propogated to only."
              }
            },
            "virtualNetworkVwanPropagatedLabels": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "An array of virtual hub route table labels to propogate routes to. If left blank/empty default label will be propogated to only."
              }
            },
            "vHubRoutingIntentEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Indicates whether routing intent is enabled on the Virtual HUB within the virtual WAN."
              }
            },
            "roleAssignmentEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Whether to create role assignments or not. If true, supply the array of role assignment objects in the parameter called `roleAssignments`."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "defaultValue": [],
              "metadata": {
                "description": "Supply an array of objects containing the details of the role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Disable telemetry collection by this module. For more information on the telemetry collected by this module, that is controlled by this parameter, see this page in the wiki: [Telemetry Tracking Using Customer Usage Attribution (PID)](https://github.com/Azure/bicep-lz-vending/wiki/Telemetry)"
              }
            },
            "deploymentScriptResourceGroupName": {
              "type": "string",
              "maxLength": 90,
              "metadata": {
                "description": "The name of the resource group to create the deployment script for resource providers registration."
              }
            },
            "deploymentScriptLocation": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location of the deployment script. Use region shortnames e.g. uksouth, eastus, etc."
              }
            },
            "deploymentScriptName": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployment script to register resource providers"
              }
            },
            "deploymentScriptVirtualNetworkName": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 64,
              "metadata": {
                "description": "The name of the private virtual network for the deployment script. The string must consist of a-z, A-Z, 0-9, -, _, and . (period) and be between 2 and 64 characters in length."
              }
            },
            "deploymentScriptNetworkSecurityGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The name of the network security group for the deployment script private subnet."
              }
            },
            "virtualNetworkDeploymentScriptAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The address prefix of the private virtual network for the deployment script."
              }
            },
            "resourceProviders": {
              "type": "object",
              "defaultValue": {
                "Microsoft.ApiManagement": [],
                "Microsoft.AppPlatform": [],
                "Microsoft.Authorization": [],
                "Microsoft.Automation": [],
                "Microsoft.AVS": [],
                "Microsoft.Blueprint": [],
                "Microsoft.BotService": [],
                "Microsoft.Cache": [],
                "Microsoft.Cdn": [],
                "Microsoft.CognitiveServices": [],
                "Microsoft.Compute": [],
                "Microsoft.ContainerInstance": [],
                "Microsoft.ContainerRegistry": [],
                "Microsoft.ContainerService": [],
                "Microsoft.CostManagement": [],
                "Microsoft.CustomProviders": [],
                "Microsoft.Databricks": [],
                "Microsoft.DataLakeAnalytics": [],
                "Microsoft.DataLakeStore": [],
                "Microsoft.DataMigration": [],
                "Microsoft.DataProtection": [],
                "Microsoft.DBforMariaDB": [],
                "Microsoft.DBforMySQL": [],
                "Microsoft.DBforPostgreSQL": [],
                "Microsoft.DesktopVirtualization": [],
                "Microsoft.Devices": [],
                "Microsoft.DevTestLab": [],
                "Microsoft.DocumentDB": [],
                "Microsoft.EventGrid": [],
                "Microsoft.EventHub": [],
                "Microsoft.HDInsight": [],
                "Microsoft.HealthcareApis": [],
                "Microsoft.GuestConfiguration": [],
                "Microsoft.KeyVault": [],
                "Microsoft.Kusto": [],
                "microsoft.insights": [],
                "Microsoft.Logic": [],
                "Microsoft.MachineLearningServices": [],
                "Microsoft.Maintenance": [],
                "Microsoft.ManagedIdentity": [],
                "Microsoft.ManagedServices": [],
                "Microsoft.Management": [],
                "Microsoft.Maps": [],
                "Microsoft.MarketplaceOrdering": [],
                "Microsoft.Media": [],
                "Microsoft.MixedReality": [],
                "Microsoft.Network": [],
                "Microsoft.NotificationHubs": [],
                "Microsoft.OperationalInsights": [],
                "Microsoft.OperationsManagement": [],
                "Microsoft.PolicyInsights": [],
                "Microsoft.PowerBIDedicated": [],
                "Microsoft.Relay": [],
                "Microsoft.RecoveryServices": [],
                "Microsoft.Resources": [],
                "Microsoft.Search": [],
                "Microsoft.Security": [],
                "Microsoft.SecurityInsights": [],
                "Microsoft.ServiceBus": [],
                "Microsoft.ServiceFabric": [],
                "Microsoft.Sql": [],
                "Microsoft.Storage": [],
                "Microsoft.StreamAnalytics": [],
                "Microsoft.TimeSeriesInsights": [],
                "Microsoft.Web": []
              },
              "metadata": {
                "description": "An object of resource providers and resource providers features to register. If left blank/empty, no resource providers will be registered.\n}`"
              }
            },
            "deploymentScriptManagedIdentityName": {
              "type": "string",
              "metadata": {
                "description": "The name of the user managed identity for the resource providers registration deployment script."
              }
            },
            "deploymentScriptStorageAccountName": {
              "type": "string",
              "metadata": {
                "description": "The name of the storage account for the deployment script."
              }
            },
            "managementGroupAssociationDelayCount": {
              "type": "int",
              "defaultValue": 15,
              "metadata": {
                "description": "Optional. The number of blank ARM deployments to create sequentially to introduce a delay to the Subscription being moved to the target Management Group being, if set, to allow for background platform RBAC inheritance to occur."
              }
            }
          },
          "variables": {
            "$fxv#0": "Param(\n    [string]$subscriptionId,\n    [string]$resourceProviders\n)\n\n$ErrorActionPreference = 'SilentlyContinue'\n# Selecting the right subscription\nSelect-AzSubscription -SubscriptionId $subscriptionId\n\n# Defining variables\n$providers = $resourceProviders | ConvertFrom-Json -AsHashtable\n$failedProviders = ''\n$failedFeatures = ''\n$DeploymentScriptOutputs = @{}\n\n##############################################\n## Registering resource providers and features\n##############################################\n\nif ($providers.Count -gt 0) {\n    foreach ($provider in $providers.keys) {\n        try {\n            # Registering resource providers\n            $providerStatus = (Get-AzResourceProvider -ListAvailable | Where-Object ProviderNamespace -EQ $provider).registrationState\n            # Check if the providered is registered\n            if ($providerStatus -eq 'NotRegistered') {\n                Write-Output \"`n Registering the '$provider' provider\"\n                if (Register-AzResourceProvider -ProviderNamespace $provider) {\n                    Write-Output \"`n The registration for provider'$provider' has started successfully\"\n                } else {\n                    Write-Output \"`n The '$provider' provider has not been registered successfully\"\n                    $failedProviders += \",$provider\"\n                }\n            } elseif ($providerStatus -eq 'Registering') {\n                Write-Output \"`n The '$provider' provider is in registering state\"\n                $failedProviders += \",$provider\"\n            } elseif ( $null -eq $providerStatus) {\n                Write-Output \"`n There was a problem registering the '$provider' provider. Please make sure this provider namespace is valid\"\n                $failedProviders += \",$provider\"\n            }\n\n            if ($failedProviders.length -gt 0) {\n                $output = $failedProviders.substring(1)\n            } else {\n                $output = 'No failures'\n            }\n            $DeploymentScriptOutputs['failedProvidersRegistrations'] = $output\n        } catch {\n            Write-Output \"`n There was a problem registering the '$provider' provider. Please make sure this provider namespace is valid\"\n            $failedProviders += \",$provider\"\n            if ($failedProviders.length -gt 0) {\n                $output = $failedProviders.substring(1)\n            }\n            $DeploymentScriptOutputs['failedProvidersRegistrations'] = $output\n        }\n        # Registering resource providers features\n        $features = $providers[$provider]\n        if ($features.length -gt 0) {\n            foreach ($feature in $features) {\n                try {\n                    # Define variables\n                    $featureStatus = (Get-AzProviderFeature -ListAvailable | Where-Object FeatureName -EQ $feature).RegistrationState\n                    # Check if the feature is registered\n                    if ($featureStatus -eq 'NotRegistered' -or $featureStatus -eq 'Unregistered') {\n                        Write-Output \"`n Registering the '$feature' feature\"\n                        if (Register-AzProviderFeature -FeatureName $feature -ProviderNamespace $provider) {\n                            Write-Output \"`n The The registration for feature '$feature' has started successfully\"\n                        } else {\n                            Write-Output \"`n The '$feature' feature has not been registered successfully\"\n                            $failedFeatures += \",$feature\"\n                        }\n                    } elseif ($null -eq $featureStatus) {\n                        Write-Output \"`n The '$feature' feature doesn't exist.\"\n                        $failedFeatures += \",$feature\"\n                    }\n                    if ($failedFeatures.length -gt 0) {\n                        $output = $failedFeatures.substring(1)\n                    } else {\n                        $output = 'No failures'\n                    }\n                    $DeploymentScriptOutputs['failedFeaturesRegistrations'] = $output\n                } catch {\n                    Write-Output \"`n There was a problem registering the '$feature' feature. Please make sure this feature name is valid\"\n                    $failedFeatures += \",$feature\"\n                    if ($failedFeatures.length -gt 0) {\n                        $output = $failedFeatures.substring(1)\n                    }\n                    $DeploymentScriptOutputs['failedFeaturesRegistrations'] = $output\n                }\n            }\n        } else {\n            $output = 'No failures'\n            $DeploymentScriptOutputs['failedFeaturesRegistrations'] = $output\n        }\n    }\n} else {\n    Write-Output \"`n No providers or features to register\"\n}\n",
            "deploymentNames": {
              "moveSubscriptionToManagementGroupDelay": "[take(format('lz-vend-move-sub-delay-{0}', uniqueString(parameters('subscriptionId'), parameters('subscriptionManagementGroupId'), deployment().name)), 64)]",
              "moveSubscriptionToManagementGroup": "[take(format('lz-vend-move-sub-{0}', uniqueString(parameters('subscriptionId'), parameters('subscriptionManagementGroupId'), deployment().name)), 64)]",
              "tagSubscription": "[take(format('lz-vend-tag-sub-{0}', uniqueString(parameters('subscriptionId'), deployment().name)), 64)]",
              "createResourceGroupForLzNetworking": "[take(format('lz-vend-rsg-create-{0}', uniqueString(parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkLocation'), deployment().name)), 64)]",
              "tagResoruceGroupForLzNetworking": "[take(format('lz-vend-tag-rsg-{0}', uniqueString(parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkLocation'), deployment().name)), 64)]",
              "createLzVnet": "[take(format('lz-vend-vnet-create-{0}', uniqueString(parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkLocation'), parameters('virtualNetworkName'), deployment().name)), 64)]",
              "createLzVirtualWanConnection": "[take(format('lz-vend-vhc-create-{0}', uniqueString(parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkLocation'), parameters('virtualNetworkName'), variables('virtualHubResourceIdChecked'), deployment().name)), 64)]",
              "createLzRoleAssignmentsSub": "[take(format('lz-vend-rbac-sub-create-{0}', uniqueString(parameters('subscriptionId'), deployment().name)), 64)]",
              "createLzRoleAssignmentsRsgsSelf": "[take(format('lz-vend-rbac-rsg-self-create-{0}', uniqueString(parameters('subscriptionId'), deployment().name)), 64)]",
              "createLzRoleAssignmentsRsgsNotSelf": "[take(format('lz-vend-rbac-rsg-nself-create-{0}', uniqueString(parameters('subscriptionId'), deployment().name)), 64)]",
              "createResourceGroupForDeploymentScript": "[take(format('lz-vend-rsg-ds-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptLocation'), deployment().name)), 64)]",
              "registerResourceProviders": "[take(format('lz-vend-ds-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptName'), deployment().name)), 64)]",
              "createDeploymentScriptManagedIdentity": "[take(format('lz-vend-ds-msi-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), deployment().name)), 64)]",
              "createRoleAssignmentsDeploymentScript": "[take(format('lz-vend-ds-rbac-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptManagedIdentityName'), deployment().name)), 64)]",
              "createRoleAssignmentsDeploymentScriptStorageAccount": "[take(format('lz-vend-stg-rbac-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptManagedIdentityName'), deployment().name)), 64)]",
              "createdsVnet": "[take(format('lz-vend-ds-vnet-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptLocation'), parameters('deploymentScriptVirtualNetworkName'), deployment().name)), 64)]",
              "createDsNsg": "[take(format('lz-vend-ds-nsg-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptLocation'), parameters('deploymentScriptNetworkSecurityGroupName'), deployment().name)), 64)]",
              "createDsStorageAccount": "[take(format('lz-vend-ds-stg-create-{0}', uniqueString(parameters('subscriptionId'), parameters('deploymentScriptResourceGroupName'), parameters('deploymentScriptLocation'), parameters('deploymentScriptStorageAccountName'), deployment().name)), 64)]"
            },
            "roleAssignmentsSubscription": "[filter(parameters('roleAssignments'), lambda('assignment', not(contains(lambdaVariables('assignment').relativeScope, '/resourceGroups/'))))]",
            "roleAssignmentsResourceGroups": "[filter(parameters('roleAssignments'), lambda('assignment', contains(lambdaVariables('assignment').relativeScope, '/resourceGroups/')))]",
            "roleAssignmentsResourceGroupSelf": "[filter(variables('roleAssignmentsResourceGroups'), lambda('assignment', contains(lambdaVariables('assignment').relativeScope, format('/resourceGroups/{0}', parameters('virtualNetworkResourceGroupName')))))]",
            "roleAssignmentsResourceGroupNotSelf": "[filter(variables('roleAssignmentsResourceGroups'), lambda('assignment', not(contains(lambdaVariables('assignment').relativeScope, format('/resourceGroups/{0}', parameters('virtualNetworkResourceGroupName'))))))]",
            "virtualHubResourceIdChecked": "[if(and(not(empty(parameters('hubNetworkResourceId'))), contains(parameters('hubNetworkResourceId'), '/providers/Microsoft.Network/virtualHubs/')), parameters('hubNetworkResourceId'), '')]",
            "hubVirtualNetworkResourceIdChecked": "[if(and(not(empty(parameters('hubNetworkResourceId'))), contains(parameters('hubNetworkResourceId'), '/providers/Microsoft.Network/virtualNetworks/')), parameters('hubNetworkResourceId'), '')]",
            "virtualWanHubName": "[if(not(empty(variables('virtualHubResourceIdChecked'))), split(variables('virtualHubResourceIdChecked'), '/')[8], '')]",
            "virtualWanHubSubscriptionId": "[if(not(empty(variables('virtualHubResourceIdChecked'))), split(variables('virtualHubResourceIdChecked'), '/')[2], '')]",
            "virtualWanHubResourceGroupName": "[if(not(empty(variables('virtualHubResourceIdChecked'))), split(variables('virtualHubResourceIdChecked'), '/')[4], '')]",
            "virtualWanHubConnectionName": "[format('vhc-{0}-{1}', parameters('virtualNetworkName'), substring(guid(variables('virtualHubResourceIdChecked'), parameters('virtualNetworkName'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkLocation'), parameters('subscriptionId')), 0, 5))]",
            "virtualWanHubConnectionAssociatedRouteTable": "[if(not(empty(parameters('virtualNetworkVwanAssociatedRouteTableResourceId'))), parameters('virtualNetworkVwanAssociatedRouteTableResourceId'), format('{0}/hubRouteTables/defaultRouteTable', variables('virtualHubResourceIdChecked')))]",
            "virutalWanHubDefaultRouteTableId": {
              "id": "[format('{0}/hubRouteTables/defaultRouteTable', variables('virtualHubResourceIdChecked'))]"
            },
            "virtualWanHubConnectionPropogatedRouteTables": "[if(not(empty(parameters('virtualNetworkVwanPropagatedRouteTablesResourceIds'))), parameters('virtualNetworkVwanPropagatedRouteTablesResourceIds'), array(variables('virutalWanHubDefaultRouteTableId')))]",
            "virtualWanHubConnectionPropogatedLabels": "[if(not(empty(parameters('virtualNetworkVwanPropagatedLabels'))), parameters('virtualNetworkVwanPropagatedLabels'), createArray('default'))]",
            "resourceProvidersFormatted": "[replace(string(parameters('resourceProviders')), '\"', '\\\"')]"
          },
          "resources": {
            "moveSubscriptionToManagementGroupDelay": {
              "copy": {
                "name": "moveSubscriptionToManagementGroupDelay",
                "count": "[length(range(0, parameters('managementGroupAssociationDelayCount')))]",
                "mode": "serial",
                "batchSize": 1
              },
              "condition": "[and(parameters('subscriptionManagementGroupAssociationEnabled'), not(empty(parameters('subscriptionManagementGroupId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('{0}-{1}', variables('deploymentNames').moveSubscriptionToManagementGroupDelay, copyIndex())]",
              "location": "[parameters('virtualNetworkLocation')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": []
                }
              }
            },
            "moveSubscriptionToManagementGroup": {
              "condition": "[and(parameters('subscriptionManagementGroupAssociationEnabled'), not(empty(parameters('subscriptionManagementGroupId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').moveSubscriptionToManagementGroup]",
              "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('subscriptionManagementGroupId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subscriptionManagementGroupId": {
                    "value": "[parameters('subscriptionManagementGroupId')]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15074465703139369012"
                    }
                  },
                  "parameters": {
                    "subscriptionManagementGroupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The destination management group ID for the new subscription. Note: Do not supply the display name. The management group ID forms part of the Azure resource ID e.g., `/providers/Microsoft.Management/managementGroups/{managementGroupId}`."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID of the Subscription to move to the target Management Group"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Management/managementGroups/subscriptions",
                      "apiVersion": "2021-04-01",
                      "scope": "/",
                      "name": "[format('{0}/{1}', parameters('subscriptionManagementGroupId'), parameters('subscriptionId'))]"
                    }
                  ]
                }
              },
              "dependsOn": [
                "moveSubscriptionToManagementGroupDelay"
              ]
            },
            "tagSubscription": {
              "condition": "[not(empty(parameters('subscriptionTags')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').tagSubscription]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "onlyUpdate": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('subscriptionTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15410141635305926698"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "5472979603320584709"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "11343593259864722989"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      },
                                      "value": "[coalesce(tryGet(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), createObject())]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the tags resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "The applied tags."
                              },
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "13884963778440627255"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "4428652978548820109"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      },
                                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), createObject())]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the tags resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              },
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "The applied tags."
                              },
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the tags resource."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.name.value)]"
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "The applied tags."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.tags.value)]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.resourceId.value)]"
                    }
                  }
                }
              }
            },
            "createResourceGroupForLzNetworking": {
              "condition": "[and(and(parameters('virtualNetworkEnabled'), not(empty(parameters('virtualNetworkLocation')))), not(empty(parameters('virtualNetworkResourceGroupName'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createResourceGroupForLzNetworking]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('virtualNetworkResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('virtualNetworkLocation')]"
                  },
                  "lock": "[if(parameters('virtualNetworkResourceGroupLockEnabled'), createObject('value', createObject('kind', 'CanNotDelete', 'name', 'CanNotDelete')), createObject('value', null()))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "15569531708310544555"
                    },
                    "name": "Resource Groups",
                    "description": "This module deploys a Resource Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "resourceGroup": {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "3101694150158706009"
                            }
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Resource Group."
                              }
                            }
                          },
                          "resources": {
                            "resourceGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    },
                    "resourceGroup_roleAssignments": {
                      "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleAssignments": {
                            "value": "[parameters('roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8717205010771951354"
                            }
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                              "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                              "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "resourceGroup_roleAssignments": {
                              "copy": {
                                "name": "resourceGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(resourceGroup().id, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      },
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "tagResourceGroup": {
              "condition": "[and(and(and(parameters('virtualNetworkEnabled'), not(empty(parameters('virtualNetworkLocation')))), not(empty(parameters('virtualNetworkResourceGroupName')))), not(empty(parameters('virtualNetworkResourceGroupTags'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').tagResoruceGroupForLzNetworking]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('virtualNetworkResourceGroupName')]"
                  },
                  "onlyUpdate": {
                    "value": true
                  },
                  "tags": {
                    "value": "[parameters('virtualNetworkResourceGroupTags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15410141635305926698"
                    }
                  },
                  "parameters": {
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                      }
                    },
                    "onlyUpdate": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the tags to. If no Resource Group name is provided, and Subscription ID is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().id]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the tags to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided tags to the subscription."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Tags-Sub', deployment().name)]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "5472979603320584709"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "11343593259864722989"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      },
                                      "value": "[coalesce(tryGet(reference(subscriptionResourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), createObject())]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the tags resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "The applied tags."
                              },
                              "value": "[if(parameters('onlyUpdate'), union(reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Resources/tags', parameters('name'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Tags-RG', deployment().name)]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "onlyUpdate": {
                            "value": "[parameters('onlyUpdate')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "13884963778440627255"
                            }
                          },
                          "parameters": {
                            "tags": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Tags for the resource group. If not provided, removes existing tags."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the tags resource."
                              }
                            },
                            "onlyUpdate": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Instead of overwriting the existing tags, combine them with the new tags."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Resources/tags",
                              "apiVersion": "2019-10-01",
                              "name": "[parameters('name')]",
                              "properties": {
                                "tags": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                              },
                              "dependsOn": [
                                "[resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name))]"
                              ]
                            },
                            {
                              "condition": "[parameters('onlyUpdate')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-ReadTags', deployment().name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.30.23.60470",
                                      "templateHash": "4428652978548820109"
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the tags resource."
                                      }
                                    }
                                  },
                                  "resources": [],
                                  "outputs": {
                                    "existingTags": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Tags currently applied to the subscription level"
                                      },
                                      "value": "[coalesce(tryGet(reference(resourceId('Microsoft.Resources/tags', parameters('name')), '2019-10-01'), 'tags'), createObject())]"
                                    }
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the tags resource."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the applied tags."
                              },
                              "value": "[resourceId('Microsoft.Resources/tags', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the tags were applied to."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "description": "The applied tags."
                              },
                              "value": "[if(parameters('onlyUpdate'), union(reference(resourceId('Microsoft.Resources/deployments', format('{0}-ReadTags', deployment().name)), '2022-09-01').outputs.existingTags.value, parameters('tags')), parameters('tags'))]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the tags resource."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.name.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.name.value)]"
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "description": "The applied tags."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.tags.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.tags.value)]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the applied tags."
                      },
                      "value": "[if(and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-Tags-RG', deployment().name)), '2022-09-01').outputs.resourceId.value, reference(subscriptionResourceId('Microsoft.Resources/deployments', format('{0}-Tags-Sub', deployment().name)), '2022-09-01').outputs.resourceId.value)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createResourceGroupForLzNetworking"
              ]
            },
            "createLzVnet": {
              "condition": "[and(and(and(and(parameters('virtualNetworkEnabled'), not(empty(parameters('virtualNetworkName')))), not(empty(parameters('virtualNetworkAddressSpace')))), not(empty(parameters('virtualNetworkLocation')))), not(empty(parameters('virtualNetworkResourceGroupName'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createLzVnet]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('virtualNetworkResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('virtualNetworkName')]"
                  },
                  "tags": {
                    "value": "[parameters('virtualNetworkTags')]"
                  },
                  "location": {
                    "value": "[parameters('virtualNetworkLocation')]"
                  },
                  "addressPrefixes": {
                    "value": "[parameters('virtualNetworkAddressSpace')]"
                  },
                  "dnsServers": {
                    "value": "[parameters('virtualNetworkDnsServers')]"
                  },
                  "ddosProtectionPlanResourceId": {
                    "value": "[parameters('virtualNetworkDdosPlanResourceId')]"
                  },
                  "peerings": "[if(and(and(and(and(and(and(parameters('virtualNetworkEnabled'), parameters('virtualNetworkPeeringEnabled')), not(empty(variables('hubVirtualNetworkResourceIdChecked')))), not(empty(parameters('virtualNetworkName')))), not(empty(parameters('virtualNetworkAddressSpace')))), not(empty(parameters('virtualNetworkLocation')))), not(empty(parameters('virtualNetworkResourceGroupName')))), createObject('value', createArray(createObject('remoteVirtualNetworkResourceId', variables('hubVirtualNetworkResourceIdChecked'), 'allowForwardedTraffic', true(), 'allowVirtualNetworkAccess', true(), 'allowGatewayTransit', false(), 'useRemoteGateways', parameters('virtualNetworkUseRemoteGateways'), 'remotePeeringEnabled', parameters('virtualNetworkPeeringEnabled'), 'remotePeeringAllowForwardedTraffic', true(), 'remotePeeringAllowVirtualNetworkAccess', true(), 'remotePeeringAllowGatewayTransit', true(), 'remotePeeringUseRemoteGateways', false()))), createObject('value', null()))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12023193036665775110"
                    },
                    "name": "Virtual Networks",
                    "description": "This module deploys a Virtual Network (vNet).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "peeringType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                          }
                        },
                        "remoteVirtualNetworkResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                          }
                        },
                        "allowForwardedTraffic": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                          }
                        },
                        "allowGatewayTransit": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                          }
                        },
                        "allowVirtualNetworkAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                          }
                        },
                        "doNotVerifyRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                          }
                        },
                        "useRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                          }
                        },
                        "remotePeeringEnabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Deploy the outbound and the inbound peering."
                          }
                        },
                        "remotePeeringName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                          }
                        },
                        "remotePeeringAllowForwardedTraffic": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                          }
                        },
                        "remotePeeringAllowGatewayTransit": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                          }
                        },
                        "remotePeeringAllowVirtualNetworkAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                          }
                        },
                        "remotePeeringDoNotVerifyRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                          }
                        },
                        "remotePeeringUseRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                          }
                        }
                      }
                    },
                    "subnetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Name of the subnet resource."
                          }
                        },
                        "addressPrefix": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                          }
                        },
                        "addressPrefixes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                          }
                        },
                        "applicationGatewayIPConfigurations": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application gateway IP configurations of virtual network resource."
                          }
                        },
                        "delegation": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The delegation to enable on the subnet."
                          }
                        },
                        "natGatewayResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                          }
                        },
                        "networkSecurityGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the network security group to assign to the subnet."
                          }
                        },
                        "privateEndpointNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled",
                            "NetworkSecurityGroupEnabled",
                            "RouteTableEnabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                          }
                        },
                        "privateLinkServiceNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "routeTableResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the route table to assign to the subnet."
                          }
                        },
                        "serviceEndpointPolicies": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of service endpoint policies."
                          }
                        },
                        "serviceEndpoints": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The service endpoints to enable on the subnet."
                          }
                        },
                        "defaultOutboundAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                          }
                        },
                        "sharingScope": {
                          "type": "string",
                          "allowedValues": [
                            "DelegatedServices",
                            "Tenant"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                          }
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Virtual Network (vNet)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "virtualNetworkBgpCommunity": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The BGP community associated with the virtual network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/subnetType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "peerings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/peeringType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network Peering configurations."
                      }
                    },
                    "vnetEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                      }
                    },
                    "vnetEncryptionEnforcement": {
                      "type": "string",
                      "defaultValue": "AllowUnencrypted",
                      "allowedValues": [
                        "AllowUnencrypted",
                        "DropUnencrypted"
                      ],
                      "metadata": {
                        "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                      }
                    },
                    "flowTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "maxValue": 30,
                      "metadata": {
                        "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "enableVmProtection": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                        "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                        "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                        "enableVmProtection": "[parameters('enableVmProtection')]"
                      }
                    },
                    "virtualNetwork_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_diagnosticSettings": {
                      "copy": {
                        "name": "virtualNetwork_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_roleAssignments": {
                      "copy": {
                        "name": "virtualNetwork_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_subnets": {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                          },
                          "addressPrefixes": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                          },
                          "applicationGatewayIPConfigurations": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                          },
                          "delegation": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                          },
                          "natGatewayResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                          },
                          "networkSecurityGroupResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                          },
                          "privateEndpointNetworkPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                          },
                          "privateLinkServiceNetworkPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "routeTableResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                          },
                          "serviceEndpointPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                          },
                          "serviceEndpoints": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                          },
                          "defaultOutboundAccess": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                          },
                          "sharingScope": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "6411714881793832751"
                            },
                            "name": "Virtual Network Subnets",
                            "description": "This module deploys a Virtual Network Subnet.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Requird. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegation": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The delegation to enable on the subnet."
                              }
                            },
                            "natGatewayResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                "NetworkSecurityGroupEnabled",
                                "RouteTableEnabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                              }
                            },
                            "defaultOutboundAccess": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                              }
                            },
                            "sharingScope": {
                              "type": "string",
                              "allowedValues": [
                                "DelegatedServices",
                                "Tenant"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                              }
                            },
                            "applicationGatewayIPConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "virtualNetwork": {
                              "existing": true,
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('virtualNetworkName')]"
                            },
                            "subnet": {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "serviceEndpoints",
                                    "count": "[length(parameters('serviceEndpoints'))]",
                                    "input": {
                                      "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                    }
                                  }
                                ],
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                "sharingScope": "[parameters('sharingScope')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "subnet_roleAssignments": {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "subnet"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              },
                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              },
                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_local": {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                          },
                          "allowGatewayTransit": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                          },
                          "useRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "345394220621166229"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork",
                        "virtualNetwork_subnets"
                      ]
                    },
                    "virtualNetwork_peering_remote": {
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                      },
                      "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
                      "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                          },
                          "allowGatewayTransit": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                          },
                          "useRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "345394220621166229"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork",
                        "virtualNetwork_subnets"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network."
                      },
                      "value": "[parameters('name')]"
                    },
                    "subnetNames": {
                      "type": "array",
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetwork', '2024-01-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createResourceGroupForLzNetworking"
              ]
            },
            "createLzVirtualWanConnection": {
              "condition": "[and(and(and(and(and(and(and(and(parameters('virtualNetworkEnabled'), parameters('virtualNetworkPeeringEnabled')), not(empty(variables('virtualHubResourceIdChecked')))), not(empty(parameters('virtualNetworkName')))), not(empty(parameters('virtualNetworkAddressSpace')))), not(empty(parameters('virtualNetworkLocation')))), not(empty(parameters('virtualNetworkResourceGroupName')))), not(empty(variables('virtualWanHubResourceGroupName')))), not(empty(variables('virtualWanHubSubscriptionId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createLzVirtualWanConnection]",
              "subscriptionId": "[variables('virtualWanHubSubscriptionId')]",
              "resourceGroup": "[variables('virtualWanHubResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('virtualWanHubConnectionName')]"
                  },
                  "virtualHubName": {
                    "value": "[variables('virtualWanHubName')]"
                  },
                  "remoteVirtualNetworkId": {
                    "value": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}', parameters('subscriptionId'), parameters('virtualNetworkResourceGroupName'), parameters('virtualNetworkName'))]"
                  },
                  "enableInternetSecurity": {
                    "value": "[parameters('virtualNetworkVwanEnableInternetSecurity')]"
                  },
                  "routingConfiguration": "[if(not(parameters('vHubRoutingIntentEnabled')), createObject('value', createObject('associatedRouteTable', createObject('id', variables('virtualWanHubConnectionAssociatedRouteTable')), 'propagatedRouteTables', createObject('ids', variables('virtualWanHubConnectionPropogatedRouteTables'), 'labels', variables('virtualWanHubConnectionPropogatedLabels')))), createObject('value', createObject()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "15250207882926040999"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The connection name."
                      }
                    },
                    "virtualHubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual hub. Required if the template is used in a standalone deployment."
                      }
                    },
                    "enableInternetSecurity": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable internet security."
                      }
                    },
                    "remoteVirtualNetworkId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the virtual network to link to."
                      }
                    },
                    "routingConfiguration": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Routing Configuration indicating the associated and propagated route tables for this connection."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualHubName'), parameters('name'))]",
                      "properties": {
                        "enableInternetSecurity": "[parameters('enableInternetSecurity')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkId')]"
                        },
                        "routingConfiguration": "[if(not(empty(parameters('routingConfiguration'))), parameters('routingConfiguration'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual hub connection was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual hub connection."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', parameters('virtualHubName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual hub connection."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createLzVnet",
                "createResourceGroupForLzNetworking"
              ]
            },
            "createLzRoleAssignmentsSub": {
              "copy": {
                "name": "createLzRoleAssignmentsSub",
                "count": "[length(variables('roleAssignmentsSubscription'))]"
              },
              "condition": "[and(parameters('roleAssignmentEnabled'), not(empty(variables('roleAssignmentsSubscription'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-{1}', variables('deploymentNames').createLzRoleAssignmentsSub, uniqueString(variables('roleAssignmentsSubscription')[copyIndex()].principalId, variables('roleAssignmentsSubscription')[copyIndex()].definition, variables('roleAssignmentsSubscription')[copyIndex()].relativeScope)), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('virtualNetworkLocation')]"
                  },
                  "principalId": {
                    "value": "[variables('roleAssignmentsSubscription')[copyIndex()].principalId]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[variables('roleAssignmentsSubscription')[copyIndex()].definition]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "conditionVersion": "[if(not(empty(coalesce(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), createObject()))), createObject('value', coalesce(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'conditionVersion'), '2.0')), createObject('value', null()))]",
                  "condition": "[if(empty(coalesce(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), createObject())), createObject('value', null()), if(and(equals(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRoles'), empty(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesType(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipalTypes'), empty(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipalsTypes(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipals'), empty(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipals(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'excludeRoles'), empty(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeExcludeRoles(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(not(empty(tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', tryGet(tryGet(variables('roleAssignmentsSubscription')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode')), createObject('value', null())))))))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4097241605548087035"
                    },
                    "name": "Role Assignments (All scopes)",
                    "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      },
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "managementGroupId": {
                            "value": "[parameters('managementGroupId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8906093264527258150"
                            },
                            "name": "Role Assignments (Management Group scope)",
                            "description": "This module deploys a Role Assignment at a Management Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "managementGroupId": {
                              "type": "string",
                              "defaultValue": "[managementGroup().name]",
                              "metadata": {
                                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "707244099707019442"
                            },
                            "name": "Role Assignments (Subscription scope)",
                            "description": "This module deploys a Role Assignment at a Subscription scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "subscriptionName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[subscription().displayName]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[subscription().id]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14591941439222880522"
                            },
                            "name": "Role Assignments (Resource Group scope)",
                            "description": "This module deploys a Role Assignment at a Resource Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceGroup().id]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
                    }
                  }
                }
              }
            },
            "createLzRoleAssignmentsRsgsSelf": {
              "copy": {
                "name": "createLzRoleAssignmentsRsgsSelf",
                "count": "[length(variables('roleAssignmentsResourceGroupSelf'))]"
              },
              "condition": "[and(parameters('roleAssignmentEnabled'), not(empty(variables('roleAssignmentsResourceGroupSelf'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-{1}', variables('deploymentNames').createLzRoleAssignmentsRsgsSelf, uniqueString(variables('roleAssignmentsResourceGroupSelf')[copyIndex()].principalId, variables('roleAssignmentsResourceGroupSelf')[copyIndex()].definition, variables('roleAssignmentsResourceGroupSelf')[copyIndex()].relativeScope)), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('virtualNetworkLocation')]"
                  },
                  "principalId": {
                    "value": "[variables('roleAssignmentsResourceGroupSelf')[copyIndex()].principalId]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[variables('roleAssignmentsResourceGroupSelf')[copyIndex()].definition]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[split(variables('roleAssignmentsResourceGroupSelf')[copyIndex()].relativeScope, '/')[2]]"
                  },
                  "conditionVersion": "[if(not(empty(coalesce(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), createObject()))), createObject('value', coalesce(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'conditionVersion'), '2.0')), createObject('value', null()))]",
                  "condition": "[if(empty(coalesce(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), createObject())), createObject('value', null()), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRoles'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesType(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipalTypes'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipalsTypes(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipals'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipals(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'excludeRoles'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeExcludeRoles(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(not(empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', tryGet(tryGet(variables('roleAssignmentsResourceGroupSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode')), createObject('value', null())))))))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4097241605548087035"
                    },
                    "name": "Role Assignments (All scopes)",
                    "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      },
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "managementGroupId": {
                            "value": "[parameters('managementGroupId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8906093264527258150"
                            },
                            "name": "Role Assignments (Management Group scope)",
                            "description": "This module deploys a Role Assignment at a Management Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "managementGroupId": {
                              "type": "string",
                              "defaultValue": "[managementGroup().name]",
                              "metadata": {
                                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "707244099707019442"
                            },
                            "name": "Role Assignments (Subscription scope)",
                            "description": "This module deploys a Role Assignment at a Subscription scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "subscriptionName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[subscription().displayName]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[subscription().id]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14591941439222880522"
                            },
                            "name": "Role Assignments (Resource Group scope)",
                            "description": "This module deploys a Role Assignment at a Resource Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceGroup().id]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createResourceGroupForLzNetworking"
              ]
            },
            "createLzRoleAssignmentsRsgsNotSelf": {
              "copy": {
                "name": "createLzRoleAssignmentsRsgsNotSelf",
                "count": "[length(variables('roleAssignmentsResourceGroupNotSelf'))]"
              },
              "condition": "[and(parameters('roleAssignmentEnabled'), not(empty(variables('roleAssignmentsResourceGroupNotSelf'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-{1}', variables('deploymentNames').createLzRoleAssignmentsRsgsNotSelf, uniqueString(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].principalId, variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].definition, variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].relativeScope)), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('virtualNetworkLocation')]"
                  },
                  "principalId": {
                    "value": "[variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].principalId]"
                  },
                  "roleDefinitionIdOrName": {
                    "value": "[variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].definition]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[split(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()].relativeScope, '/')[2]]"
                  },
                  "conditionVersion": "[if(not(empty(coalesce(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), createObject()))), createObject('value', coalesce(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'conditionVersion'), '2.0')), createObject('value', null()))]",
                  "condition": "[if(empty(coalesce(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), createObject())), createObject('value', null()), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRoles'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesType(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipalTypes'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipalsTypes(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'constrainRolesAndPrincipals'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeRolesAndPrincipals(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(and(equals(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType', 'templateName'), 'excludeRoles'), empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', __bicep.generateCodeExcludeRoles(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'roleConditionType'))), if(not(empty(tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode'))), createObject('value', tryGet(tryGet(variables('roleAssignmentsResourceGroupNotSelf')[copyIndex()], 'roleAssignmentCondition'), 'delegationCode')), createObject('value', null())))))))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4097241605548087035"
                    },
                    "name": "Role Assignments (All scopes)",
                    "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      },
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "managementGroupId": {
                            "value": "[parameters('managementGroupId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8906093264527258150"
                            },
                            "name": "Role Assignments (Management Group scope)",
                            "description": "This module deploys a Role Assignment at a Management Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "managementGroupId": {
                              "type": "string",
                              "defaultValue": "[managementGroup().name]",
                              "metadata": {
                                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "707244099707019442"
                            },
                            "name": "Role Assignments (Subscription scope)",
                            "description": "This module deploys a Role Assignment at a Subscription scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "subscriptionName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[subscription().displayName]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[subscription().id]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14591941439222880522"
                            },
                            "name": "Role Assignments (Resource Group scope)",
                            "description": "This module deploys a Role Assignment at a Resource Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceGroup().id]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
                    }
                  }
                }
              }
            },
            "createResourceGroupForDeploymentScript": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createResourceGroupForDeploymentScript]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('deploymentScriptResourceGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "15569531708310544555"
                    },
                    "name": "Resource Groups",
                    "description": "This module deploys a Resource Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "resourceGroup": {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "3101694150158706009"
                            }
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Resource Group."
                              }
                            }
                          },
                          "resources": {
                            "resourceGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    },
                    "resourceGroup_roleAssignments": {
                      "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleAssignments": {
                            "value": "[parameters('roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8717205010771951354"
                            }
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                              "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                              "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "resourceGroup_roleAssignments": {
                              "copy": {
                                "name": "resourceGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(resourceGroup().id, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      },
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "createManagedIdentityForDeploymentScript": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createDeploymentScriptManagedIdentity]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('deploymentScriptResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "name": {
                    "value": "[parameters('deploymentScriptManagedIdentityName')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "8316967256052237432"
                    },
                    "name": "User Assigned Identities",
                    "description": "This module deploys a User Assigned Identity.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "federatedIdentityCredentialsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the federated identity credential."
                            }
                          },
                          "audiences": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. The list of audiences that can appear in the issued token."
                            }
                          },
                          "issuer": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The URL of the issuer to be trusted."
                            }
                          },
                          "subject": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The identifier of the external identity."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "federatedIdentityCredentials": {
                      "$ref": "#/definitions/federatedIdentityCredentialsType",
                      "metadata": {
                        "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "userAssignedIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "userAssignedIdentity_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_roleAssignments": {
                      "copy": {
                        "name": "userAssignedIdentity_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_federatedIdentityCredentials": {
                      "copy": {
                        "name": "userAssignedIdentity_federatedIdentityCredentials",
                        "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('name')]"
                          },
                          "audiences": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                          },
                          "issuer": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                          },
                          "subject": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "663270811232806628"
                            },
                            "name": "User Assigned Identity Federated Identity Credential",
                            "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "userAssignedIdentityName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "audiences": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                              }
                            },
                            "subject": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                              "properties": {
                                "audiences": "[parameters('audiences')]",
                                "issuer": "[parameters('issuer')]",
                                "subject": "[parameters('subject')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the federated identity credential."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the federated identity credential."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the federated identity credential was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID (object ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The client ID (application ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').clientId]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createResourceGroupForDeploymentScript"
              ]
            },
            "createRoleAssignmentsDeploymentScript": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}', variables('deploymentNames').createRoleAssignmentsDeploymentScript), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "principalId": "[if(not(empty(parameters('resourceProviders'))), createObject('value', reference('createManagedIdentityForDeploymentScript').outputs.principalId.value), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "Contributor"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4097241605548087035"
                    },
                    "name": "Role Assignments (All scopes)",
                    "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      },
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "managementGroupId": {
                            "value": "[parameters('managementGroupId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8906093264527258150"
                            },
                            "name": "Role Assignments (Management Group scope)",
                            "description": "This module deploys a Role Assignment at a Management Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "managementGroupId": {
                              "type": "string",
                              "defaultValue": "[managementGroup().name]",
                              "metadata": {
                                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "707244099707019442"
                            },
                            "name": "Role Assignments (Subscription scope)",
                            "description": "This module deploys a Role Assignment at a Subscription scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "subscriptionName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[subscription().displayName]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[subscription().id]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14591941439222880522"
                            },
                            "name": "Role Assignments (Resource Group scope)",
                            "description": "This module deploys a Role Assignment at a Resource Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceGroup().id]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createManagedIdentityForDeploymentScript"
              ]
            },
            "createRoleAssignmentsDeploymentScriptStorageAccount": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}', variables('deploymentNames').createRoleAssignmentsDeploymentScriptStorageAccount), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "principalId": "[if(not(empty(parameters('resourceProviders'))), createObject('value', reference('createManagedIdentityForDeploymentScript').outputs.principalId.value), createObject('value', ''))]",
                  "roleDefinitionIdOrName": {
                    "value": "/providers/Microsoft.Authorization/roleDefinitions/69566ab7-960f-475b-8e7c-b3118f30c6bd"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('deploymentScriptResourceGroupName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "4097241605548087035"
                    },
                    "name": "Role Assignments (All scopes)",
                    "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location deployment metadata."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": [
                    {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      },
                      "location": "[parameters('location')]"
                    },
                    {
                      "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "managementGroupId": {
                            "value": "[parameters('managementGroupId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8906093264527258150"
                            },
                            "name": "Role Assignments (Management Group scope)",
                            "description": "This module deploys a Role Assignment at a Management Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "managementGroupId": {
                              "type": "string",
                              "defaultValue": "[managementGroup().name]",
                              "metadata": {
                                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "/providers/Microsoft.Authorization/roleDefinitions/8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "/providers/Microsoft.Authorization/roleDefinitions/36243c78-bf99-498c-9df9-86d9f8d28608",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "707244099707019442"
                            },
                            "name": "Role Assignments (Subscription scope)",
                            "description": "This module deploys a Role Assignment at a Subscription scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "subscriptionName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[subscription().displayName]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[subscription().id]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[parameters('subscriptionId')]",
                      "resourceGroup": "[parameters('resourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionIdOrName": {
                            "value": "[parameters('roleDefinitionIdOrName')]"
                          },
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "subscriptionId": {
                            "value": "[parameters('subscriptionId')]"
                          },
                          "resourceGroupName": {
                            "value": "[parameters('resourceGroupName')]"
                          },
                          "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                          "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                          "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                          "conditionVersion": {
                            "value": "[parameters('conditionVersion')]"
                          },
                          "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14591941439222880522"
                            },
                            "name": "Role Assignments (Resource Group scope)",
                            "description": "This module deploys a Role Assignment at a Resource Group scope.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "roleDefinitionIdOrName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "subscriptionId": {
                              "type": "string",
                              "defaultValue": "[subscription().subscriptionId]",
                              "metadata": {
                                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of the role assignment."
                              }
                            },
                            "delegatedManagedIdentityResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. ID of the delegated managed identity resource."
                              }
                            },
                            "condition": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                              }
                            },
                            "conditionVersion": {
                              "type": "string",
                              "defaultValue": "2.0",
                              "allowedValues": [
                                "2.0"
                              ],
                              "metadata": {
                                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            },
                            "roleDefinitionIdVar": "[if(contains(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), variables('builtInRoleNames')[parameters('roleDefinitionIdOrName')], parameters('roleDefinitionIdOrName'))]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                              "properties": {
                                "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                                "principalId": "[parameters('principalId')]",
                                "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "scope": {
                              "type": "string",
                              "metadata": {
                                "description": "The scope this Role Assignment applies to."
                              },
                              "value": "[resourceGroup().id]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createManagedIdentityForDeploymentScript"
              ]
            },
            "createDsNsg": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createDsNsg]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('deploymentScriptResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('deploymentScriptNetworkSecurityGroupName')]"
                  },
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "6301580350266878984"
                    },
                    "name": "Network Security Groups",
                    "description": "This module deploys a Network security Group (NSG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "securityRulesType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the security rule."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "access": {
                                "type": "string",
                                "allowedValues": [
                                  "Allow",
                                  "Deny"
                                ],
                                "metadata": {
                                  "description": "Required. Whether network traffic is allowed or denied."
                                }
                              },
                              "description": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The description of the security rule."
                                }
                              },
                              "destinationAddressPrefix": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                }
                              },
                              "destinationAddressPrefixes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                }
                              },
                              "destinationApplicationSecurityGroupResourceIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The resource IDs of the application security groups specified as destination."
                                }
                              },
                              "destinationPortRange": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                }
                              },
                              "destinationPortRanges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The destination port ranges."
                                }
                              },
                              "direction": {
                                "type": "string",
                                "allowedValues": [
                                  "Inbound",
                                  "Outbound"
                                ],
                                "metadata": {
                                  "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                }
                              },
                              "priority": {
                                "type": "int",
                                "minValue": 100,
                                "maxValue": 4096,
                                "metadata": {
                                  "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                }
                              },
                              "protocol": {
                                "type": "string",
                                "allowedValues": [
                                  "*",
                                  "Ah",
                                  "Esp",
                                  "Icmp",
                                  "Tcp",
                                  "Udp"
                                ],
                                "metadata": {
                                  "description": "Required. Network protocol this rule applies to."
                                }
                              },
                              "sourceAddressPrefix": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                }
                              },
                              "sourceAddressPrefixes": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The CIDR or source IP ranges."
                                }
                              },
                              "sourceApplicationSecurityGroupResourceIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The resource IDs of the application security groups specified as source."
                                }
                              },
                              "sourcePortRange": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                }
                              },
                              "sourcePortRanges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The source port ranges."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. The properties of the security rule."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "$ref": "#/definitions/securityRulesType",
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkSecurityGroup": {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                            "input": {
                              "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                              "properties": {
                                "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                                "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                                "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                                "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                                "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                                "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                                "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                                "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                                "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                                "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                                "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                                "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                                "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                                "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                                "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                              }
                            }
                          }
                        ],
                        "flushConnection": "[parameters('flushConnection')]"
                      }
                    },
                    "networkSecurityGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_diagnosticSettings": {
                      "copy": {
                        "name": "networkSecurityGroup_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_roleAssignments": {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createResourceGroupForDeploymentScript"
              ]
            },
            "createDsStorageAccount": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createDsStorageAccount]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('deploymentScriptResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "name": {
                    "value": "[parameters('deploymentScriptStorageAccountName')]"
                  },
                  "kind": {
                    "value": "StorageV2"
                  },
                  "skuName": {
                    "value": "Standard_LRS"
                  },
                  "networkAcls": {
                    "value": {
                      "bypass": "AzureServices",
                      "defaultAction": "Deny",
                      "virtualNetworkRules": [
                        {
                          "action": "Allow",
                          "id": "[if(not(empty(parameters('resourceProviders'))), reference('createDsVnet').outputs.subnetResourceIds.value[0], null())]"
                        }
                      ]
                    }
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "3958760216991467865"
                    },
                    "name": "Storage Accounts",
                    "description": "This module deploys a Storage Account.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "networkAclsType": {
                      "type": "object",
                      "properties": {
                        "resourceAccessRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tenantId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of the tenant in which the resource resides in."
                                }
                              },
                              "resourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                          }
                        },
                        "bypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "AzureServices, Logging",
                            "AzureServices, Logging, Metrics",
                            "AzureServices, Metrics",
                            "Logging",
                            "Logging, Metrics",
                            "Metrics",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the virtual network rules."
                          }
                        },
                        "ipRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the IP ACL rules."
                          }
                        },
                        "defaultAction": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                          }
                        }
                      }
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "service": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Manual PrivateLink Service Connections."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint ip address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private ip addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private ip address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customerManagedKeyType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. If used must also be specified in `managedIdentities.userAssignedResourceIds`. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Storage Account. Must be lower-case."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_GRS",
                        "Standard_RAGRS",
                        "Standard_ZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "Standard_GZRS",
                        "Standard_RAGZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name."
                      }
                    },
                    "accessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "allowedValues": [
                        "Premium",
                        "Hot",
                        "Cool"
                      ],
                      "metadata": {
                        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
                      }
                    },
                    "largeFileSharesState": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
                      }
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      }
                    },
                    "defaultToOAuthAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
                      }
                    },
                    "allowSharedKeyAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "$ref": "#/definitions/networkAclsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "allowCrossTenantReplication": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allow or disallow cross AAD tenant object replication."
                      }
                    },
                    "customDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
                      }
                    },
                    "customDomainUseSubDomainName": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
                      }
                    },
                    "dnsEndpointType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "AzureDnsZone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "allowedValues": [
                        "TLS1_0",
                        "TLS1_1",
                        "TLS1_2"
                      ],
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage."
                      }
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
                      }
                    },
                    "enableSftp": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "localUsers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Local users to deploy for SFTP authentication."
                      }
                    },
                    "isLocalUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables local users feature, if set to true."
                      }
                    },
                    "enableNfsV3": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "allowedCopyScope": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "AAD",
                        "PrivateLink"
                      ],
                      "metadata": {
                        "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "",
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyType",
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "sasExpirationPeriod": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
                      }
                    },
                    "keyType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Account",
                        "Service"
                      ],
                      "metadata": {
                        "description": "Optional. The keyType to use with Queue & Table services."
                      }
                    }
                  },
                  "variables": {
                    "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
                      "dependsOn": [
                        "cMKKeyVault"
                      ]
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.9.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-02-01",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                    },
                    "storageAccount": {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                        "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                        "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                        "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
                        "customDomain": {
                          "name": "[parameters('customDomainName')]",
                          "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
                        },
                        "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
                        "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
                        "encryption": "[union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), parameters('customerManagedKey').keyVersion, last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/')))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject()))]",
                        "accessTier": "[if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null())]",
                        "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
                        "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                        "isHnsEnabled": "[if(parameters('enableHierarchicalNamespace'), parameters('enableHierarchicalNamespace'), null())]",
                        "isSftpEnabled": "[parameters('enableSftp')]",
                        "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
                        "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
                        "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                        "networkAcls": "[if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'))]",
                        "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                        "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                        "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                      },
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKUserAssignedIdentity"
                      ]
                    },
                    "storageAccount_diagnosticSettings": {
                      "copy": {
                        "name": "storageAccount_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_roleAssignments": {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_privateEndpoints": {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-StorageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4120048060064073955"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "11244630631275470040"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_managementPolicies": {
                      "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[coalesce(parameters('managementPolicyRules'), createArray())]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "9473195527943694039"
                            },
                            "name": "Storage Account Management Policies",
                            "description": "This module deploys a Storage Account Management Policy.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2023-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount",
                        "storageAccount_blobServices"
                      ]
                    },
                    "storageAccount_localUsers": {
                      "copy": {
                        "name": "storageAccount_localUsers",
                        "count": "[length(parameters('localUsers'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('localUsers')[copyIndex()].name]"
                          },
                          "hasSshKey": {
                            "value": "[parameters('localUsers')[copyIndex()].hasSshKey]"
                          },
                          "hasSshPassword": {
                            "value": "[parameters('localUsers')[copyIndex()].hasSshPassword]"
                          },
                          "permissionScopes": {
                            "value": "[parameters('localUsers')[copyIndex()].permissionScopes]"
                          },
                          "hasSharedKey": {
                            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'hasSharedKey')]"
                          },
                          "homeDirectory": {
                            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'homeDirectory')]"
                          },
                          "sshAuthorizedKeys": {
                            "value": "[tryGet(parameters('localUsers')[copyIndex()], 'sshAuthorizedKeys')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "14968464858285923305"
                            },
                            "name": "Storage Account Local Users",
                            "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "sshAuthorizedKeysType": {
                              "type": "secureObject",
                              "properties": {
                                "secureList": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "description": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Description used to store the function/usage of the key."
                                        }
                                      },
                                      "key": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Optional. The list of SSH authorized keys."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the local user used for SFTP Authentication."
                              }
                            },
                            "hasSharedKey": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                              }
                            },
                            "hasSshKey": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                              }
                            },
                            "hasSshPassword": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                              }
                            },
                            "homeDirectory": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The local user home directory."
                              }
                            },
                            "permissionScopes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The permission scopes of the local user."
                              }
                            },
                            "sshAuthorizedKeys": {
                              "$ref": "#/definitions/sshAuthorizedKeysType",
                              "metadata": {
                                "description": "Optional. The local user SSH authorized keys for SFTP."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "localUsers": {
                              "type": "Microsoft.Storage/storageAccounts/localUsers",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "hasSharedKey": "[parameters('hasSharedKey')]",
                                "hasSshKey": "[parameters('hasSshKey')]",
                                "hasSshPassword": "[parameters('hasSshPassword')]",
                                "homeDirectory": "[parameters('homeDirectory')]",
                                "permissionScopes": "[parameters('permissionScopes')]",
                                "sshAuthorizedKeys": "[tryGet(parameters('sshAuthorizedKeys'), 'secureList')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed local user."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed local user."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed local user."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_blobServices": {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": {
                            "value": "[tryGet(parameters('blobServices'), 'containers')]"
                          },
                          "automaticSnapshotPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                          },
                          "changeFeedEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                          },
                          "changeFeedRetentionInDays": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                          },
                          "containerDeleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                          },
                          "containerDeleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                          },
                          "containerDeleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                          },
                          "defaultServiceVersion": {
                            "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                          },
                          "deleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "deleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                          },
                          "deleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                          },
                          "isVersioningEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                          },
                          "lastAccessTimeTrackingPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                          },
                          "restorePolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                          },
                          "restorePolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "2306287879023715578"
                            },
                            "name": "Storage Account blob Services",
                            "description": "This module deploys a Storage Account Blob Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "changeFeedEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                              }
                            },
                            "changeFeedRetentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 146000,
                              "metadata": {
                                "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                              }
                            },
                            "containerDeleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                              }
                            },
                            "containerDeleteRetentionPolicyDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted item should be retained."
                              }
                            },
                            "containerDeleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies CORS rules for the Blob service. You can include up to five CorsRule elements in the request. If no CorsRule elements are included in the request body, all CORS rules will be deleted, and CORS will be disabled for the Blob service."
                              }
                            },
                            "defaultServiceVersion": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                              }
                            },
                            "deleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob soft delete."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                              }
                            },
                            "deleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "isVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                              }
                            },
                            "lastAccessTimeTrackingPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                              }
                            },
                            "restorePolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                              }
                            },
                            "restorePolicyDays": {
                              "type": "int",
                              "defaultValue": 6,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "blobServices": {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                                "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                                "containerDeleteRetentionPolicy": {
                                  "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                                },
                                "cors": {
                                  "corsRules": "[parameters('corsRules')]"
                                },
                                "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                                },
                                "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                                "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2022-09-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                                "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "blobServices_diagnosticSettings": {
                              "copy": {
                                "name": "blobServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "blobServices"
                              ]
                            },
                            "blobServices_container": {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(coalesce(parameters('containers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                  },
                                  "defaultEncryptionScope": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                                  },
                                  "denyEncryptionScopeOverride": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                                  },
                                  "enableNfsV3AllSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                                  },
                                  "enableNfsV3RootSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                                  },
                                  "immutableStorageWithVersioningEnabled": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "publicAccess": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "immutabilityPolicyProperties": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "7045309160947869799"
                                    },
                                    "name": "Storage Account Blob Containers",
                                    "description": "This module deploys a Storage Account Blob Container.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage container to deploy."
                                      }
                                    },
                                    "defaultEncryptionScope": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Default the container to use specified encryption scope for all writes."
                                      }
                                    },
                                    "denyEncryptionScopeOverride": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Block override of encryption scope from the container default."
                                      }
                                    },
                                    "enableNfsV3AllSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 all squash on blob container."
                                      }
                                    },
                                    "enableNfsV3RootSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 root squash on blob container."
                                      }
                                    },
                                    "immutableStorageWithVersioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. A name-value pair to associate with the container as metadata."
                                      }
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::blobServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "container": {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "properties": {
                                        "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                                        "denyEncryptionScopeOverride": "[if(equals(parameters('denyEncryptionScopeOverride'), true()), parameters('denyEncryptionScopeOverride'), null())]",
                                        "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                        "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                        "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                        "metadata": "[parameters('metadata')]",
                                        "publicAccess": "[parameters('publicAccess')]"
                                      },
                                      "dependsOn": [
                                        "storageAccount::blobServices"
                                      ]
                                    },
                                    "container_roleAssignments": {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "container"
                                      ]
                                    },
                                    "immutabilityPolicy": {
                                      "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('immutabilityPolicyName')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                          },
                                          "allowProtectedAppendWrites": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                          },
                                          "allowProtectedAppendWritesAll": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "2543276032744560941"
                                            },
                                            "name": "Storage Account Blob Container Immutability Policies",
                                            "description": "This module deploys a Storage Account Blob Container Immutability Policy.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            },
                                            "allowProtectedAppendWritesAll": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                                "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              },
                                              "value": "default"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "container",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_fileServices": {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                          },
                          "protocolSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                          },
                          "shareDeleteRetentionPolicy": {
                            "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                          },
                          "shares": {
                            "value": "[tryGet(parameters('fileServices'), 'shares')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7463227074634701879"
                            },
                            "name": "Storage Account File Share Services",
                            "description": "This module deploys a Storage Account File Share Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Protocol settings for file service."
                              }
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              },
                              "metadata": {
                                "description": "Optional. The service properties for soft delete."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "fileServices": {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "fileServices_diagnosticSettings": {
                              "copy": {
                                "name": "fileServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "fileServices"
                              ]
                            },
                            "fileServices_shares": {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(coalesce(parameters('shares'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                                  },
                                  "accessTier": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2023-04-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                                  },
                                  "enabledProtocols": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                                  },
                                  "rootSquash": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                                  },
                                  "shareQuota": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1342480740201032357"
                                    },
                                    "name": "Storage Account File Shares",
                                    "description": "This module deploys a Storage Account File Share.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "accessTier": {
                                      "type": "string",
                                      "defaultValue": "TransactionOptimized",
                                      "allowedValues": [
                                        "Premium",
                                        "Hot",
                                        "Cool",
                                        "TransactionOptimized"
                                      ],
                                      "metadata": {
                                        "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                                      }
                                    },
                                    "shareQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      }
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::fileService": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]",
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "fileShare": {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "accessTier": "[parameters('accessTier')]",
                                        "shareQuota": "[parameters('shareQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      },
                                      "dependsOn": [
                                        "storageAccount::fileService"
                                      ]
                                    },
                                    "fileShare_roleAssignments": {
                                      "condition": "[not(empty(parameters('roleAssignments')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Share-Rbac', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "fileShareResourceId": {
                                            "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                          },
                                          "roleAssignments": {
                                            "value": "[parameters('roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.28.1.47646",
                                              "templateHash": "8779226603522513073"
                                            }
                                          },
                                          "parameters": {
                                            "roleAssignments": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "fileShareResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of the file share to assign the roles to."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "$fxv#0": {
                                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                              "contentVersion": "1.0.0.0",
                                              "parameters": {
                                                "scope": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The scope to deploy the role assignment to."
                                                  }
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The name of the role assignment."
                                                  }
                                                },
                                                "roleDefinitionId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role definition Id to assign."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User",
                                                    ""
                                                  ],
                                                  "defaultValue": "",
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "defaultValue": "",
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "defaultValue": "",
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "defaultValue": "2.0",
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "defaultValue": "",
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "resources": [
                                                {
                                                  "type": "Microsoft.Authorization/roleAssignments",
                                                  "apiVersion": "2022-04-01",
                                                  "scope": "[[parameters('scope')]",
                                                  "name": "[[parameters('name')]",
                                                  "properties": {
                                                    "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                                    "principalId": "[[parameters('principalId')]",
                                                    "description": "[[parameters('description')]",
                                                    "principalType": "[[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                    "condition": "[[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                    "conditionVersion": "[[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                    "delegatedManagedIdentityResourceId": "[[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                                  }
                                                }
                                              ]
                                            },
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": [
                                            {
                                              "copy": {
                                                "name": "fileShare_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2021-04-01",
                                              "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "expressionEvaluationOptions": {
                                                  "scope": "Outer"
                                                },
                                                "template": "[variables('$fxv#0')]",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[replace(parameters('fileShareResourceId'), '/shares/', '/fileShares/')]"
                                                  },
                                                  "name": {
                                                    "value": "[guid(parameters('fileShareResourceId'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, 'tyfa')]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]"
                                                  },
                                                  "principalId": {
                                                    "value": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]"
                                                  },
                                                  "principalType": {
                                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                                  },
                                                  "description": {
                                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]"
                                                  },
                                                  "condition": {
                                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]"
                                                  },
                                                  "conditionVersion": {
                                                    "value": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]"
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "value": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "fileShare"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "fileServices",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_queueServices": {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                          },
                          "queues": {
                            "value": "[tryGet(parameters('queueServices'), 'queues')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "10678250016540336570"
                            },
                            "name": "Storage Account Queue Services",
                            "description": "This module deploys a Storage Account Queue Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "queueServices": {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {},
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "queueServices_diagnosticSettings": {
                              "copy": {
                                "name": "queueServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "queueServices"
                              ]
                            },
                            "queueServices_queues": {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(coalesce(parameters('queues'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "13487964166280180730"
                                    },
                                    "name": "Storage Account Queues",
                                    "description": "This module deploys a Storage Account Queue.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Required. A name-value pair that represents queue metadata."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::queueServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "queue": {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      },
                                      "dependsOn": [
                                        "storageAccount::queueServices"
                                      ]
                                    },
                                    "queue_roleAssignments": {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_tableServices": {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                          },
                          "tables": {
                            "value": "[tryGet(parameters('tableServices'), 'tables')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "16839054392438941735"
                            },
                            "name": "Storage Account Table Services",
                            "description": "This module deploys a Storage Account Table Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "tableServices": {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {},
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "tableServices_diagnosticSettings": {
                              "copy": {
                                "name": "tableServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "tableServices"
                              ]
                            },
                            "tableServices_tables": {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()].name]"
                                  },
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "3177845984945141330"
                                    },
                                    "name": "Storage Account Table",
                                    "description": "This module deploys a Storage Account Table.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::tableServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "dependsOn": [
                                        "storageAccount::tableServices"
                                      ]
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      },
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('storageAccount', '2022-09-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('storageAccount', '2022-09-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createDsVnet",
                "createRoleAssignmentsDeploymentScriptStorageAccount"
              ]
            },
            "createDsVnet": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').createdsVnet]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('deploymentScriptResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('deploymentScriptVirtualNetworkName')]"
                  },
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "[parameters('virtualNetworkDeploymentScriptAddressPrefix')]"
                    ]
                  },
                  "subnets": "[if(not(empty(parameters('resourceProviders'))), createObject('value', createArray(createObject('addressPrefix', if(not(empty(parameters('resourceProviders'))), cidrSubnet(parameters('virtualNetworkDeploymentScriptAddressPrefix'), 24, 0), null()), 'name', 'ds-subnet-001', 'networkSecurityGroupResourceId', if(not(empty(parameters('resourceProviders'))), reference('createDsNsg').outputs.resourceId.value, null()), 'serviceEndpoints', createArray('Microsoft.Storage'), 'delegation', 'Microsoft.ContainerInstance/containerGroups'))), createObject('value', null()))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "12023193036665775110"
                    },
                    "name": "Virtual Networks",
                    "description": "This module deploys a Virtual Network (vNet).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "peeringType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                          }
                        },
                        "remoteVirtualNetworkResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                          }
                        },
                        "allowForwardedTraffic": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                          }
                        },
                        "allowGatewayTransit": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                          }
                        },
                        "allowVirtualNetworkAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                          }
                        },
                        "doNotVerifyRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                          }
                        },
                        "useRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                          }
                        },
                        "remotePeeringEnabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Deploy the outbound and the inbound peering."
                          }
                        },
                        "remotePeeringName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                          }
                        },
                        "remotePeeringAllowForwardedTraffic": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                          }
                        },
                        "remotePeeringAllowGatewayTransit": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                          }
                        },
                        "remotePeeringAllowVirtualNetworkAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                          }
                        },
                        "remotePeeringDoNotVerifyRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                          }
                        },
                        "remotePeeringUseRemoteGateways": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                          }
                        }
                      }
                    },
                    "subnetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Name of the subnet resource."
                          }
                        },
                        "addressPrefix": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                          }
                        },
                        "addressPrefixes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                          }
                        },
                        "applicationGatewayIPConfigurations": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application gateway IP configurations of virtual network resource."
                          }
                        },
                        "delegation": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The delegation to enable on the subnet."
                          }
                        },
                        "natGatewayResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                          }
                        },
                        "networkSecurityGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the network security group to assign to the subnet."
                          }
                        },
                        "privateEndpointNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled",
                            "NetworkSecurityGroupEnabled",
                            "RouteTableEnabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                          }
                        },
                        "privateLinkServiceNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "routeTableResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the route table to assign to the subnet."
                          }
                        },
                        "serviceEndpointPolicies": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of service endpoint policies."
                          }
                        },
                        "serviceEndpoints": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The service endpoints to enable on the subnet."
                          }
                        },
                        "defaultOutboundAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                          }
                        },
                        "sharingScope": {
                          "type": "string",
                          "allowedValues": [
                            "DelegatedServices",
                            "Tenant"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                          }
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Virtual Network (vNet)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "virtualNetworkBgpCommunity": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The BGP community associated with the virtual network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/subnetType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "peerings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/peeringType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Virtual Network Peering configurations."
                      }
                    },
                    "vnetEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                      }
                    },
                    "vnetEncryptionEnforcement": {
                      "type": "string",
                      "defaultValue": "AllowUnencrypted",
                      "allowedValues": [
                        "AllowUnencrypted",
                        "DropUnencrypted"
                      ],
                      "metadata": {
                        "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                      }
                    },
                    "flowTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "maxValue": 30,
                      "metadata": {
                        "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "enableVmProtection": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.5.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                        "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                        "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                        "enableVmProtection": "[parameters('enableVmProtection')]"
                      }
                    },
                    "virtualNetwork_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_diagnosticSettings": {
                      "copy": {
                        "name": "virtualNetwork_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_roleAssignments": {
                      "copy": {
                        "name": "virtualNetwork_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_subnets": {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                          },
                          "addressPrefixes": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                          },
                          "applicationGatewayIPConfigurations": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                          },
                          "delegation": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                          },
                          "natGatewayResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                          },
                          "networkSecurityGroupResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                          },
                          "privateEndpointNetworkPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                          },
                          "privateLinkServiceNetworkPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "routeTableResourceId": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                          },
                          "serviceEndpointPolicies": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                          },
                          "serviceEndpoints": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                          },
                          "defaultOutboundAccess": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                          },
                          "sharingScope": {
                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "6411714881793832751"
                            },
                            "name": "Virtual Network Subnets",
                            "description": "This module deploys a Virtual Network Subnet.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.1.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Requird. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegation": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The delegation to enable on the subnet."
                              }
                            },
                            "natGatewayResourceId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                "NetworkSecurityGroupEnabled",
                                "RouteTableEnabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                              }
                            },
                            "defaultOutboundAccess": {
                              "type": "bool",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                              }
                            },
                            "sharingScope": {
                              "type": "string",
                              "allowedValues": [
                                "DelegatedServices",
                                "Tenant"
                              ],
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                              }
                            },
                            "applicationGatewayIPConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "virtualNetwork": {
                              "existing": true,
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('virtualNetworkName')]"
                            },
                            "subnet": {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "serviceEndpoints",
                                    "count": "[length(parameters('serviceEndpoints'))]",
                                    "input": {
                                      "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                    }
                                  }
                                ],
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                "sharingScope": "[parameters('sharingScope')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "subnet_roleAssignments": {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "subnet"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              },
                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              },
                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_local": {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                          },
                          "allowGatewayTransit": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                          },
                          "useRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "345394220621166229"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork",
                        "virtualNetwork_subnets"
                      ]
                    },
                    "virtualNetwork_peering_remote": {
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                      },
                      "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
                      "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                          },
                          "remoteVirtualNetworkResourceId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                          },
                          "allowForwardedTraffic": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                          },
                          "allowGatewayTransit": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                          },
                          "allowVirtualNetworkAccess": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                          },
                          "doNotVerifyRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                          },
                          "useRemoteGateways": {
                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "345394220621166229"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork",
                        "virtualNetwork_subnets"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network."
                      },
                      "value": "[parameters('name')]"
                    },
                    "subnetNames": {
                      "type": "array",
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetwork', '2024-01-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createDsNsg"
              ]
            },
            "registerResourceProviders": {
              "condition": "[not(empty(parameters('resourceProviders')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('deploymentNames').registerResourceProviders]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('deploymentScriptResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('deploymentScriptName')]"
                  },
                  "kind": {
                    "value": "AzurePowerShell"
                  },
                  "azPowerShellVersion": {
                    "value": "3.0"
                  },
                  "cleanupPreference": {
                    "value": "Always"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "location": {
                    "value": "[parameters('deploymentScriptLocation')]"
                  },
                  "retentionInterval": {
                    "value": "P1D"
                  },
                  "timeout": {
                    "value": "PT1H"
                  },
                  "runOnce": {
                    "value": true
                  },
                  "managedIdentities": "[if(not(empty(parameters('resourceProviders'))), createObject('value', createObject('userAssignedResourcesIds', createArray(reference('createManagedIdentityForDeploymentScript').outputs.resourceId.value))), createObject('value', null()))]",
                  "storageAccountResourceId": "[if(not(empty(parameters('resourceProviders'))), createObject('value', reference('createDsStorageAccount').outputs.resourceId.value), createObject('value', null()))]",
                  "subnetResourceIds": "[if(not(empty(parameters('resourceProviders'))), createObject('value', reference('createDsVnet').outputs.subnetResourceIds.value), createObject('value', null()))]",
                  "arguments": {
                    "value": "[format('-resourceProviders ''{0}'' -resourceProvidersFeatures -subscriptionId {1}', variables('resourceProvidersFormatted'), parameters('subscriptionId'))]"
                  },
                  "scriptContent": {
                    "value": "[variables('$fxv#0')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "148060868388125113"
                    },
                    "name": "Deployment Scripts",
                    "description": "This module deploys Deployment Scripts.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "userAssignedResourcesIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "environmentVariableType": {
                      "type": "secureObject",
                      "properties": {
                        "secureList": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "secureValue": {
                                "type": "string",
                                "nullable": true
                              },
                              "value": {
                                "type": "string",
                                "nullable": true
                              }
                            }
                          },
                          "metadata": {
                            "description": "Optional. The list of environment variables to pass over to the deployment script."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 90,
                      "metadata": {
                        "description": "Required. Name of the Deployment Script."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "AzureCLI",
                        "AzurePowerShell"
                      ],
                      "metadata": {
                        "description": "Required. Specifies the Kind of the Deployment Script."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "azPowerShellVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure PowerShell module version to be used. See a list of supported Azure PowerShell versions: https://mcr.microsoft.com/v2/azuredeploymentscripts-powershell/tags/list."
                      }
                    },
                    "azCliVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Azure CLI module version to be used. See a list of supported Azure CLI versions: https://mcr.microsoft.com/v2/azure-cli/tags/list."
                      }
                    },
                    "scriptContent": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Script body. Max length: 32000 characters. To run an external script, use primaryScriptURI instead."
                      }
                    },
                    "primaryScriptUri": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Uri for the external script. This is the entry point for the external script. To run an internal script, use the scriptContent parameter instead."
                      }
                    },
                    "environmentVariables": {
                      "$ref": "#/definitions/environmentVariableType",
                      "metadata": {
                        "description": "Optional. The environment variables to pass over to the script. The list is passed as an object with a key name \"secureList\" and the value is the list of environment variables (array). The list must have a 'name' and a 'value' or a 'secretValue' property for each object."
                      }
                    },
                    "supportingScriptUris": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of supporting files for the external script (defined in primaryScriptUri). Does not work with internal scripts (code defined in scriptContent)."
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of subnet IDs to use for the container group. This is required if you want to run the deployment script in a private network. When using a private network, the `Storage File Data Privileged Contributor` role needs to be assigned to the user-assigned managed identity and the deployment principal needs to have permissions to list the storage account keys. Also, Shared-Keys must not be disabled on the used storage account [ref](https://learn.microsoft.com/en-us/azure/azure-resource-manager/bicep/deployment-script-vnet)."
                      }
                    },
                    "arguments": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Command-line arguments to pass to the script. Arguments are separated by spaces."
                      }
                    },
                    "retentionInterval": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Interval for which the service retains the script resource after it reaches a terminal state. Resource will be deleted when this duration expires. Duration is based on ISO 8601 pattern (for example P7D means one week)."
                      }
                    },
                    "baseTime": {
                      "type": "string",
                      "defaultValue": "[utcNow('yyyy-MM-dd-HH-mm-ss')]",
                      "metadata": {
                        "description": "Generated. Do not provide a value! This date value is used to make sure the script run every time the template is deployed."
                      }
                    },
                    "runOnce": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When set to false, script will run every time the template is deployed. When set to true, the script will only run once."
                      }
                    },
                    "cleanupPreference": {
                      "type": "string",
                      "defaultValue": "Always",
                      "allowedValues": [
                        "Always",
                        "OnSuccess",
                        "OnExpiration"
                      ],
                      "metadata": {
                        "description": "Optional. The clean up preference when the script execution gets in a terminal state. Specify the preference on when to delete the deployment script resources. The default value is Always, which means the deployment script resources are deleted despite the terminal state (Succeeded, Failed, canceled)."
                      }
                    },
                    "containerGroupName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Container group name, if not specified then the name will get auto-generated. Not specifying a 'containerGroupName' indicates the system to generate a unique name which might end up flagging an Azure Policy as non-compliant. Use 'containerGroupName' when you have an Azure Policy that expects a specific naming convention or when you want to fully control the name. 'containerGroupName' property must be between 1 and 63 characters long, must contain only lowercase letters, numbers, and dashes and it cannot start or end with a dash and consecutive dashes are not allowed."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the storage account to use for this deployment script. If none is provided, the deployment script uses a temporary, managed storage account."
                      }
                    },
                    "timeout": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Maximum allowed script execution time specified in ISO 8601 format. Default value is PT1H - 1 hour; 'PT30M' - 30 minutes; 'P5D' - 5 days; 'P1Y' 1 year."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "subnetIds",
                        "count": "[length(coalesce(parameters('subnetResourceIds'), createArray()))]",
                        "input": {
                          "id": "[coalesce(parameters('subnetResourceIds'), createArray())[copyIndex('subnetIds')]]"
                        }
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "containerSettings": {
                      "containerGroupName": "[parameters('containerGroupName')]",
                      "subnetIds": "[if(not(empty(coalesce(variables('subnetIds'), createArray()))), variables('subnetIds'), null())]"
                    },
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourcesIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourcesIds'), createObject()))), 'UserAssigned', null()), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
                  },
                  "resources": {
                    "storageAccount": {
                      "condition": "[not(empty(parameters('storageAccountResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-04-01",
                      "subscriptionId": "[split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '//'), '/')[2]]",
                      "resourceGroup": "[split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '////'), '/')[4]]",
                      "name": "[last(split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), 'dummyAccount'), '/'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.resources-deploymentscript.{0}.{1}', replace('0.2.3', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "deploymentScript": {
                      "type": "Microsoft.Resources/deploymentScripts",
                      "apiVersion": "2023-08-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "azPowerShellVersion": "[if(equals(parameters('kind'), 'AzurePowerShell'), parameters('azPowerShellVersion'), null())]",
                        "azCliVersion": "[if(equals(parameters('kind'), 'AzureCLI'), parameters('azCliVersion'), null())]",
                        "containerSettings": "[if(not(empty(variables('containerSettings'))), variables('containerSettings'), null())]",
                        "storageAccountSettings": "[if(not(empty(parameters('storageAccountResourceId'))), if(not(empty(parameters('storageAccountResourceId'))), createObject('storageAccountKey', if(empty(parameters('subnetResourceIds')), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '//'), '/')[2], split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), '////'), '/')[4]), 'Microsoft.Storage/storageAccounts', last(split(if(not(empty(parameters('storageAccountResourceId'))), parameters('storageAccountResourceId'), 'dummyAccount'), '/'))), '2023-01-01').keys[0].value, null()), 'storageAccountName', last(split(parameters('storageAccountResourceId'), '/'))), null()), null())]",
                        "arguments": "[parameters('arguments')]",
                        "environmentVariables": "[if(not(equals(parameters('environmentVariables'), null())), parameters('environmentVariables').secureList, createArray())]",
                        "scriptContent": "[if(not(empty(parameters('scriptContent'))), parameters('scriptContent'), null())]",
                        "primaryScriptUri": "[if(not(empty(parameters('primaryScriptUri'))), parameters('primaryScriptUri'), null())]",
                        "supportingScriptUris": "[if(not(empty(parameters('supportingScriptUris'))), parameters('supportingScriptUris'), null())]",
                        "cleanupPreference": "[parameters('cleanupPreference')]",
                        "forceUpdateTag": "[if(parameters('runOnce'), resourceGroup().name, parameters('baseTime'))]",
                        "retentionInterval": "[parameters('retentionInterval')]",
                        "timeout": "[parameters('timeout')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "deploymentScript_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "deploymentScript"
                      ]
                    },
                    "deploymentScript_roleAssignments": {
                      "copy": {
                        "name": "deploymentScript_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Resources/deploymentScripts/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Resources/deploymentScripts', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "deploymentScript"
                      ]
                    },
                    "deploymentScriptLogs": {
                      "existing": true,
                      "type": "Microsoft.Resources/deploymentScripts/logs",
                      "apiVersion": "2023-08-01",
                      "name": "[format('{0}/{1}', parameters('name'), 'default')]",
                      "dependsOn": [
                        "deploymentScript"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployment script."
                      },
                      "value": "[resourceId('Microsoft.Resources/deploymentScripts', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the deployment script was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployment script."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('deploymentScript', '2023-08-01', 'full').location]"
                    },
                    "outputs": {
                      "type": "object",
                      "metadata": {
                        "description": "The output of the deployment script."
                      },
                      "value": "[if(contains(reference('deploymentScript'), 'outputs'), reference('deploymentScript').outputs, createObject())]"
                    },
                    "deploymentScriptLogs": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The logs of the deployment script."
                      },
                      "value": "[split(reference('deploymentScriptLogs').log, '\n')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "createDsStorageAccount",
                "createDsVnet",
                "createManagedIdentityForDeploymentScript"
              ]
            }
          },
          "outputs": {
            "failedProviders": {
              "type": "string",
              "value": "[if(not(empty(parameters('resourceProviders'))), reference('registerResourceProviders').outputs.outputs.value.failedProvidersRegistrations, '')]"
            },
            "failedFeatures": {
              "type": "string",
              "value": "[if(not(empty(parameters('resourceProviders'))), reference('registerResourceProviders').outputs.outputs.value.failedFeaturesRegistrations, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "createSubscription"
      ]
    }
  },
  "outputs": {
    "subscriptionId": {
      "type": "string",
      "metadata": {
        "description": "The Subscription ID that has been created or provided."
      },
      "value": "[if(and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId'))), reference('createSubscription').outputs.subscriptionId.value, if(contains(variables('existingSubscriptionIDEmptyCheck'), 'No Subscription ID Provided'), variables('existingSubscriptionIDEmptyCheck'), format('{0}', parameters('existingSubscriptionId'))))]"
    },
    "subscriptionResourceId": {
      "type": "string",
      "metadata": {
        "description": "The Subscription Resource ID that has been created or provided."
      },
      "value": "[if(and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId'))), reference('createSubscription').outputs.subscriptionResourceId.value, if(contains(variables('existingSubscriptionIDEmptyCheck'), 'No Subscription ID Provided'), variables('existingSubscriptionIDEmptyCheck'), format('/subscriptions/{0}', parameters('existingSubscriptionId'))))]"
    },
    "subscriptionAcceptOwnershipState": {
      "type": "string",
      "metadata": {
        "description": "The Subscription Owner State. Only used when creating MCA Subscriptions across tenants."
      },
      "value": "[if(and(and(and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId'))), not(empty(parameters('subscriptionTenantId')))), not(empty(parameters('subscriptionOwnerId')))), reference('createSubscription').outputs.subscriptionAcceptOwnershipState.value, 'N/A')]"
    },
    "subscriptionAcceptOwnershipUrl": {
      "type": "string",
      "metadata": {
        "description": "The Subscription Ownership URL. Only used when creating MCA Subscriptions across tenants."
      },
      "value": "[if(and(and(and(parameters('subscriptionAliasEnabled'), empty(parameters('existingSubscriptionId'))), not(empty(parameters('subscriptionTenantId')))), not(empty(parameters('subscriptionOwnerId')))), reference('createSubscription').outputs.subscriptionAcceptOwnershipUrl.value, 'N/A')]"
    },
    "failedResourceProviders": {
      "type": "string",
      "metadata": {
        "description": "The resource providers that failed to register."
      },
      "value": "[if(not(empty(parameters('resourceProviders'))), reference('createSubscriptionResources').outputs.failedProviders.value, '')]"
    },
    "failedResourceProvidersFeatures": {
      "type": "string",
      "metadata": {
        "description": "The resource providers features that failed to register."
      },
      "value": "[if(not(empty(parameters('resourceProviders'))), reference('createSubscriptionResources').outputs.failedFeatures.value, '')]"
    }
  }
}