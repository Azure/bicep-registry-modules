{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "16535725536619244187"
    },
    "name": "Container Apps Landing Zone Accelerator",
    "description": "This Azure Container Apps pattern module represents an Azure Container Apps deployment aligned with the cloud adoption framework",
    "owner": "Azure/module-maintainers"
  },
  "parameters": {
    "workloadName": {
      "type": "string",
      "defaultValue": "aca-lza",
      "minLength": 2,
      "maxLength": 10,
      "metadata": {
        "description": "Optional. The name of the workload that is being deployed. Up to 10 characters long."
      }
    },
    "hubVirtualNetworkResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the hub virtual network. If set, the spoke virtual network will be peered with the hub virtual network. Default is empty."
      }
    },
    "bastionResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource ID of the bastion host. If set, the spoke virtual network will be peered with the hub virtual network and the bastion host will be allowed to connect to the jump box. Default is empty."
      }
    },
    "networkApplianceIpAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. If set, the spoke virtual network will be peered with the hub virtual network and egres traffic will be routed through the network appliance. Default is empty."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags related to the Azure Container Apps deployment. Default is empty."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "test",
      "maxLength": 8,
      "metadata": {
        "description": "Optional. The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long. Default is \"test\"."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location of the Azure Container Apps deployment. Default is the location of the deployment location."
      }
    },
    "vmSize": {
      "type": "string",
      "metadata": {
        "description": "Required. The size of the virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "metadata": {
        "description": "Optional. The storage account type to use for the jump box. Defaults to Standard_LRS."
      }
    },
    "vmAdminUsername": {
      "type": "string",
      "metadata": {
        "description": "Required. The username to use for the virtual machine."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The password to use for the virtual machine."
      }
    },
    "vmLinuxSshAuthorizedKey": {
      "type": "securestring",
      "metadata": {
        "description": "Required. The SSH public key to use for the virtual machine."
      }
    },
    "vmAuthenticationType": {
      "type": "string",
      "defaultValue": "password",
      "allowedValues": [
        "sshPublicKey",
        "password"
      ],
      "metadata": {
        "description": "Optional. Type of authentication to use on the Virtual Machine. SSH key is recommended. Default is \"password\"."
      }
    },
    "vmJumpboxOSType": {
      "type": "string",
      "defaultValue": "none",
      "allowedValues": [
        "linux",
        "windows",
        "none"
      ],
      "metadata": {
        "description": "Optional. The operating system type of the virtual machine. Default is \"none\" which results in no VM deployment. Default is \"none\"."
      }
    },
    "vmJumpBoxSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. CIDR to use for the virtual machine subnet."
      }
    },
    "spokeResourceGroupName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template. Default is empty."
      }
    },
    "spokeVNetAddressPrefixes": {
      "type": "array",
      "metadata": {
        "description": "Required. CIDR of the Spoke Virtual Network."
      }
    },
    "spokeInfraSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. CIDR of the Spoke Infrastructure Subnet."
      }
    },
    "spokePrivateEndpointsSubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. CIDR of the Spoke Private Endpoints Subnet."
      }
    },
    "spokeApplicationGatewaySubnetAddressPrefix": {
      "type": "string",
      "metadata": {
        "description": "Required. CIDR of the Spoke Application Gateway Subnet."
      }
    },
    "enableApplicationInsights": {
      "type": "bool",
      "metadata": {
        "description": "Required. Enable or disable the createion of Application Insights."
      }
    },
    "enableDaprInstrumentation": {
      "type": "bool",
      "metadata": {
        "description": "Required. Enable or disable Dapr Application Instrumentation Key used for Dapr telemetry. If Application Insights is not enabled, this parameter is ignored."
      }
    },
    "applicationGatewayFqdn": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The FQDN of the Application Gateway. Required and must match if the TLS Certificate is provided. Default is empty."
      }
    },
    "base64Certificate": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The base64 encoded certificate to use for Application Gateway certificate. If this is provided, the certificate will be added to the Key Vault and assigned to the Application Gateway listener. Default is empty."
      }
    },
    "applicationGatewayCertificateKeyName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the certificate key to use for Application Gateway certificate."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "deployZoneRedundantResources": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false. Default is true."
      }
    },
    "exposeContainerAppsWith": {
      "type": "string",
      "defaultValue": "applicationGateway",
      "allowedValues": [
        "applicationGateway",
        "frontDoor"
      ],
      "metadata": {
        "description": "Optional. Specify the way container apps is going to be exposed. Options are applicationGateway or frontDoor. Default is \"applicationGateway\"."
      }
    },
    "deploySampleApplication": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Deploy sample application to the container apps environment. Default is false."
      }
    },
    "enableDdosProtection": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. DDoS protection mode. see https://learn.microsoft.com/azure/ddos-protection/ddos-protection-sku-comparison#skus. Default is \"false\"."
      }
    }
  },
  "variables": {
    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
    "namingRules": "[json(variables('$fxv#0'))]",
    "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-spoke-{2}-{3}', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
  },
  "resources": [
    {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.ptn.acalza-hostingenvironment.{0}', substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('sharedNamingDeployment-{0}', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "uniqueId": {
            "value": "[uniqueString(reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeResourceGroupName.value)]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "4794676376542080363"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workloard that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all Resources."
              }
            },
            "uniqueId": {
              "type": "string",
              "metadata": {
                "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
              }
            }
          },
          "variables": {
            "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
            "naming": "[json(variables('$fxv#0'))]",
            "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
            "resourceTypeToken": "RES_TYPE",
            "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
            "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
            "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
            "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
            "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
            "resourceNames": {
              "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
              "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
              "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
              "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
              "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
              "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
              "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
              "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
              "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
              "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
              "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
              "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
              "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
              "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
              "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
              "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
              "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
              "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
              "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
              "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
              "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
              "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
              "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
              "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
              "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
              "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
              "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
              "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
              "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
              "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
              "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
              "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
              "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
              "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
              "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
              "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
              "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
              "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
              "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
              "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
              "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
              "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
              "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
              "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
            }
          },
          "resources": [],
          "outputs": {
            "resourcesNames": {
              "type": "object",
              "value": "[variables('resourceNames')]"
            },
            "resourceTypeAbbreviations": {
              "type": "object",
              "value": "[variables('resourceTypeAbbreviations')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]"
      ],
      "metadata": {
        "description": "User-configured naming rules"
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('spoke-{0}-deployment', deployment().name), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "spokeResourceGroupName": {
            "value": "[variables('rgSpokeName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "bastionResourceId": {
            "value": "[parameters('bastionResourceId')]"
          },
          "spokeApplicationGatewaySubnetAddressPrefix": {
            "value": "[parameters('spokeApplicationGatewaySubnetAddressPrefix')]"
          },
          "spokeInfraSubnetAddressPrefix": {
            "value": "[parameters('spokeInfraSubnetAddressPrefix')]"
          },
          "spokePrivateEndpointsSubnetAddressPrefix": {
            "value": "[parameters('spokePrivateEndpointsSubnetAddressPrefix')]"
          },
          "spokeVNetAddressPrefixes": {
            "value": "[parameters('spokeVNetAddressPrefixes')]"
          },
          "networkApplianceIpAddress": {
            "value": "[parameters('networkApplianceIpAddress')]"
          },
          "vmSize": {
            "value": "[parameters('vmSize')]"
          },
          "vmZone": "[if(parameters('deployZoneRedundantResources'), createObject('value', 2), createObject('value', 0))]",
          "storageAccountType": {
            "value": "[parameters('storageAccountType')]"
          },
          "vmAdminUsername": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "vmLinuxSshAuthorizedKey": {
            "value": "[parameters('vmLinuxSshAuthorizedKey')]"
          },
          "vmJumpboxOSType": {
            "value": "[parameters('vmJumpboxOSType')]"
          },
          "vmJumpBoxSubnetAddressPrefix": {
            "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
          },
          "vmAuthenticationType": {
            "value": "[parameters('vmAuthenticationType')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16961623286769564475"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "The location where the resources will be created. This should be the same region as the hub."
              }
            },
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "Optional. The name of the resource group to create the resources in. If set, it overrides the name generated by the template."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deplotment telemetry."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "bastionResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of the bastion host."
              }
            },
            "spokeVNetAddressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "CIDR of the spoke virtual network. For most landing zone implementations, the spoke network would have been created by your platform team."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "defaultValue": "snet-infra",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke infrastructure. If set, it overrides the name generated by the template."
              }
            },
            "spokeInfraSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke infrastructure subnet."
              }
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "defaultValue": "snet-pep",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke private endpoints. If set, it overrides the name generated by the template."
              }
            },
            "spokePrivateEndpointsSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke private endpoints subnet."
              }
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "defaultValue": "snet-agw",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the spoke application gateway. If set, it overrides the name generated by the template."
              }
            },
            "spokeApplicationGatewaySubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR of the spoke Application Gateway subnet. If the value is empty, this subnet will not be created."
              }
            },
            "networkApplianceIpAddress": {
              "type": "string",
              "metadata": {
                "description": "The IP address of the network appliance (e.g. firewall) that will be used to route traffic to the internet."
              }
            },
            "vmSize": {
              "type": "string",
              "metadata": {
                "description": "The size of the jump box virtual machine to create. See https://learn.microsoft.com/azure/virtual-machines/sizes for more information."
              }
            },
            "vmZone": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The zone to create the jump box in. Defaults to 0."
              }
            },
            "storageAccountType": {
              "type": "string",
              "defaultValue": "Standard_LRS",
              "metadata": {
                "description": "Optional. The storage account type to use for the jump box. Defaults to Standard_LRS."
              }
            },
            "vmAdminUsername": {
              "type": "string",
              "metadata": {
                "description": "The username to use for the jump box."
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "The password to use for the jump box."
              }
            },
            "vmLinuxSshAuthorizedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The SSH public key to use for the jump box. Only relevant for Linux."
              }
            },
            "vmJumpboxOSType": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "linux",
                "windows",
                "none"
              ],
              "metadata": {
                "description": "The OS of the jump box virtual machine to create. If set to \"none\", no jump box will be created."
              }
            },
            "vmSubnetName": {
              "type": "string",
              "defaultValue": "snet-jumpbox",
              "metadata": {
                "description": "Optional. The name of the subnet to create for the jump box. If set, it overrides the name generated by the template."
              }
            },
            "vmJumpBoxSubnetAddressPrefix": {
              "type": "string",
              "metadata": {
                "description": "CIDR to use for the jump box subnet."
              }
            },
            "vmAuthenticationType": {
              "type": "string",
              "defaultValue": "password",
              "allowedValues": [
                "sshPublicKey",
                "password"
              ],
              "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
              }
            }
          },
          "variables": {
            "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
            "locationVar": "[if(equals(parameters('location'), 'francecentral'), 'centralfrance', parameters('location'))]",
            "namingRules": "[json(variables('$fxv#0'))]",
            "rgSpokeName": "[if(not(empty(parameters('spokeResourceGroupName'))), parameters('spokeResourceGroupName'), format('{0}-{1}-{2}-{3}-spoke', variables('namingRules').resourceTypeAbbreviations.resourceGroup, parameters('workloadName'), parameters('environment'), variables('namingRules').regionAbbreviations[toLower(parameters('location'))]))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('rg-{0}', deployment().name), 64)]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('rgSpokeName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6727498516867168543"
                    },
                    "name": "Resource Groups",
                    "description": "This module deploys a Resource Group.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Resource Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location of the Resource Group. It uses the deployment's location when not provided."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the storage account resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.resources-resourcegroup.{0}.{1}', replace('0.2.3', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "resourceGroup": {
                      "type": "Microsoft.Resources/resourceGroups",
                      "apiVersion": "2021-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {}
                    },
                    "resourceGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-Lock', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "lock": {
                            "value": "[parameters('lock')]"
                          },
                          "name": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "7668050384482764751"
                            }
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Resource Group."
                              }
                            }
                          },
                          "resources": {
                            "resourceGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    },
                    "resourceGroup_roleAssignments": {
                      "condition": "[not(empty(coalesce(parameters('roleAssignments'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-RG-RoleAssignments', uniqueString(deployment().name, parameters('location')))]",
                      "resourceGroup": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleAssignments": {
                            "value": "[parameters('roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "3156241559834375483"
                            }
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Quota Request Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Tag Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4a9ae827-6dc8-4573-8ac7-8239d42aa03f')]",
                              "Template Spec Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c9b6475-caf0-4164-b5a1-2142a7116f4b')]",
                              "Template Spec Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '392ae280-861d-42bd-9ea5-08ee6d83b80e')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "resourceGroup_roleAssignments": {
                              "copy": {
                                "name": "resourceGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "name": "[guid(resourceGroup().id, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "resourceGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the resource group."
                      },
                      "value": "[subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('resourceGroup', '2021-04-01', 'full').location]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('spokeNamingDeployment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('rg-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4794676376542080363"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('rg-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vnetSpoke-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vnetSpoke]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "addressPrefixes": {
                    "value": "[parameters('spokeVNetAddressPrefixes')]"
                  },
                  "subnets": "[if(not(equals(parameters('vmJumpboxOSType'), 'none')), createObject('value', concat(if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, 'routeTableResourceId', if(and(not(empty(parameters('hubVNetId'))), not(empty(parameters('networkApplianceIpAddress')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments')))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)), createArray(createObject('name', parameters('spokeApplicationGatewaySubnetName'), 'addressPrefix', parameters('spokeApplicationGatewaySubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value))), createArray(createObject('name', parameters('spokeInfraSubnetName'), 'addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, 'routeTableResourceId', if(and(not(empty(parameters('hubVNetId'))), not(empty(parameters('networkApplianceIpAddress')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments')))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value))), createArray(createObject('name', parameters('vmSubnetName'), 'addressPrefix', parameters('vmJumpBoxSubnetAddressPrefix'))))), if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), createObject('value', concat(createArray(createObject('name', parameters('spokeInfraSubnetName'), 'addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, 'routeTableResourceId', if(and(not(empty(parameters('hubVNetId'))), not(empty(parameters('networkApplianceIpAddress')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments')))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)), createArray(createObject('name', parameters('spokeApplicationGatewaySubnetName'), 'addressPrefix', parameters('spokeApplicationGatewaySubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)))), createObject('value', createArray(createObject('name', parameters('spokeInfraSubnetName'), 'addressPrefix', parameters('spokeInfraSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, 'routeTableResourceId', if(and(not(empty(parameters('hubVNetId'))), not(empty(parameters('networkApplianceIpAddress')))), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value, null()), 'delegations', createArray(createObject('name', 'envdelegation', 'properties', createObject('serviceName', 'Microsoft.App/environments')))), createObject('name', parameters('spokePrivateEndpointsSubnetName'), 'addressPrefix', parameters('spokePrivateEndpointsSubnetAddressPrefix'), 'networkSecurityGroupResourceId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value)))))]",
                  "peerings": "[if(not(empty(parameters('hubVNetId'))), createObject('value', createArray(createObject('allowForwardedTraffic', true(), 'allowGatewayTransit', false(), 'allowVirtualNetworkAccess', true(), 'remotePeeringAllowForwardedTraffic', true(), 'remotePeeringAllowVirtualNetworkAccess', true(), 'remotePeeringEnabled', true(), 'remotePeeringName', 'spokeToHub', 'remoteVirtualNetworkId', parameters('hubVNetId'), 'useRemoteGateways', false()))), createObject('value', null()))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "18408205474040416108"
                    },
                    "name": "Virtual Networks",
                    "description": "This module deploys a Virtual Network (vNet).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Virtual Network (vNet)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. An Array of 1 or more IP Address Prefixes for the Virtual Network."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                      }
                    },
                    "dnsServers": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. DNS Servers associated to the Virtual Network."
                      }
                    },
                    "ddosProtectionPlanResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                      }
                    },
                    "peerings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Virtual Network Peerings configurations."
                      }
                    },
                    "vnetEncryption": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                      }
                    },
                    "vnetEncryptionEnforcement": {
                      "type": "string",
                      "defaultValue": "AllowUnencrypted",
                      "allowedValues": [
                        "AllowUnencrypted",
                        "DropUnencrypted"
                      ],
                      "metadata": {
                        "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                      }
                    },
                    "flowTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 0,
                      "maxValue": 30,
                      "metadata": {
                        "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.1.6', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "subnets",
                            "count": "[length(parameters('subnets'))]",
                            "input": {
                              "name": "[parameters('subnets')[copyIndex('subnets')].name]",
                              "properties": {
                                "addressPrefix": "[parameters('subnets')[copyIndex('subnets')].addressPrefix]",
                                "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'addressPrefixes'), parameters('subnets')[copyIndex('subnets')].addressPrefixes, createArray())]",
                                "applicationGatewayIPConfigurations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'applicationGatewayIPConfigurations'), parameters('subnets')[copyIndex('subnets')].applicationGatewayIPConfigurations, createArray())]",
                                "delegations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'delegations'), parameters('subnets')[copyIndex('subnets')].delegations, createArray())]",
                                "ipAllocations": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'ipAllocations'), parameters('subnets')[copyIndex('subnets')].ipAllocations, createArray())]",
                                "natGateway": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'natGatewayResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].natGatewayResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].natGatewayResourceId), null())]",
                                "networkSecurityGroup": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'networkSecurityGroupResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].networkSecurityGroupResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].networkSecurityGroupResourceId), null())]",
                                "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateEndpointNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateEndpointNetworkPolicies, null())]",
                                "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'privateLinkServiceNetworkPolicies'), parameters('subnets')[copyIndex('subnets')].privateLinkServiceNetworkPolicies, null())]",
                                "routeTable": "[if(and(contains(parameters('subnets')[copyIndex('subnets')], 'routeTableResourceId'), not(empty(parameters('subnets')[copyIndex('subnets')].routeTableResourceId))), createObject('id', parameters('subnets')[copyIndex('subnets')].routeTableResourceId), null())]",
                                "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpoints'), parameters('subnets')[copyIndex('subnets')].serviceEndpoints, createArray())]",
                                "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex('subnets')], 'serviceEndpointPolicies'), parameters('subnets')[copyIndex('subnets')].serviceEndpointPolicies, createArray())]"
                              }
                            }
                          }
                        ],
                        "addressSpace": {
                          "addressPrefixes": "[parameters('addressPrefixes')]"
                        },
                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                        "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                        "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]"
                      }
                    },
                    "virtualNetwork_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_diagnosticSettings": {
                      "copy": {
                        "name": "virtualNetwork_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_roleAssignments": {
                      "copy": {
                        "name": "virtualNetwork_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_subnets": {
                      "copy": {
                        "name": "virtualNetwork_subnets",
                        "count": "[length(parameters('subnets'))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "virtualNetworkName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('subnets')[copyIndex()].name]"
                          },
                          "addressPrefix": {
                            "value": "[parameters('subnets')[copyIndex()].addressPrefix]"
                          },
                          "addressPrefixes": "[if(contains(parameters('subnets')[copyIndex()], 'addressPrefixes'), createObject('value', parameters('subnets')[copyIndex()].addressPrefixes), createObject('value', createArray()))]",
                          "applicationGatewayIPConfigurations": "[if(contains(parameters('subnets')[copyIndex()], 'applicationGatewayIPConfigurations'), createObject('value', parameters('subnets')[copyIndex()].applicationGatewayIPConfigurations), createObject('value', createArray()))]",
                          "delegations": "[if(contains(parameters('subnets')[copyIndex()], 'delegations'), createObject('value', parameters('subnets')[copyIndex()].delegations), createObject('value', createArray()))]",
                          "ipAllocations": "[if(contains(parameters('subnets')[copyIndex()], 'ipAllocations'), createObject('value', parameters('subnets')[copyIndex()].ipAllocations), createObject('value', createArray()))]",
                          "natGatewayResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'natGatewayResourceId'), createObject('value', parameters('subnets')[copyIndex()].natGatewayResourceId), createObject('value', ''))]",
                          "networkSecurityGroupResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('subnets')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                          "privateEndpointNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateEndpointNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateEndpointNetworkPolicies), createObject('value', ''))]",
                          "privateLinkServiceNetworkPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'privateLinkServiceNetworkPolicies'), createObject('value', parameters('subnets')[copyIndex()].privateLinkServiceNetworkPolicies), createObject('value', ''))]",
                          "roleAssignments": "[if(contains(parameters('subnets')[copyIndex()], 'roleAssignments'), createObject('value', parameters('subnets')[copyIndex()].roleAssignments), createObject('value', createArray()))]",
                          "routeTableResourceId": "[if(contains(parameters('subnets')[copyIndex()], 'routeTableResourceId'), createObject('value', parameters('subnets')[copyIndex()].routeTableResourceId), createObject('value', ''))]",
                          "serviceEndpointPolicies": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpointPolicies'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpointPolicies), createObject('value', createArray()))]",
                          "serviceEndpoints": "[if(contains(parameters('subnets')[copyIndex()], 'serviceEndpoints'), createObject('value', parameters('subnets')[copyIndex()].serviceEndpoints), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "17306638026226376877"
                            },
                            "name": "Virtual Network Subnets",
                            "description": "This module deploys a Virtual Network Subnet.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Optional. The Name of the subnet resource."
                              }
                            },
                            "virtualNetworkName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The address prefix for the subnet."
                              }
                            },
                            "networkSecurityGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                              }
                            },
                            "routeTableResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                              }
                            },
                            "serviceEndpoints": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The service endpoints to enable on the subnet."
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The delegations to enable on the subnet."
                              }
                            },
                            "natGatewayResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                              }
                            },
                            "privateEndpointNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                              }
                            },
                            "privateLinkServiceNetworkPolicies": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "Disabled",
                                "Enabled",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet."
                              }
                            },
                            "applicationGatewayIPConfigurations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                              }
                            },
                            "ipAllocations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of IpAllocation which reference this subnet."
                              }
                            },
                            "serviceEndpointPolicies": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of service endpoint policies."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "virtualNetwork": {
                              "existing": true,
                              "type": "Microsoft.Network/virtualNetworks",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('virtualNetworkName')]"
                            },
                            "subnet": {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                "serviceEndpoints": "[parameters('serviceEndpoints')]",
                                "delegations": "[parameters('delegations')]",
                                "privateEndpointNetworkPolicies": "[if(not(empty(parameters('privateEndpointNetworkPolicies'))), parameters('privateEndpointNetworkPolicies'), null())]",
                                "privateLinkServiceNetworkPolicies": "[if(not(empty(parameters('privateLinkServiceNetworkPolicies'))), parameters('privateLinkServiceNetworkPolicies'), null())]",
                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                "ipAllocations": "[parameters('ipAllocations')]",
                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]"
                              },
                              "dependsOn": [
                                "virtualNetwork"
                              ]
                            },
                            "subnet_roleAssignments": {
                              "copy": {
                                "name": "subnet_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "subnet"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                            },
                            "subnetAddressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "The address prefix for the subnet."
                              },
                              "value": "[reference('subnet').addressPrefix]"
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "List of address prefixes for the subnet."
                              },
                              "value": "[if(not(empty(parameters('addressPrefixes'))), reference('subnet').addressPrefixes, createArray())]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_local": {
                      "copy": {
                        "name": "virtualNetwork_peering_local",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[parameters('name')]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[parameters('peerings')[copyIndex()].remoteVirtualNetworkId]"
                          },
                          "name": "[if(contains(parameters('peerings')[copyIndex()], 'name'), createObject('value', parameters('peerings')[copyIndex()].name), createObject('value', format('{0}-{1}', parameters('name'), last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('peerings')[copyIndex()], 'allowForwardedTraffic'), createObject('value', parameters('peerings')[copyIndex()].allowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('peerings')[copyIndex()], 'allowGatewayTransit'), createObject('value', parameters('peerings')[copyIndex()].allowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('peerings')[copyIndex()], 'allowVirtualNetworkAccess'), createObject('value', parameters('peerings')[copyIndex()].allowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'doNotVerifyRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].doNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'useRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].useRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "17624189975510507274"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "virtualNetwork_peering_remote": {
                      "copy": {
                        "name": "virtualNetwork_peering_remote",
                        "count": "[length(parameters('peerings'))]"
                      },
                      "condition": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringEnabled'), equals(parameters('peerings')[copyIndex()].remotePeeringEnabled, true()), false())]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')[2]]",
                      "resourceGroup": "[split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "localVnetName": {
                            "value": "[last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/'))]"
                          },
                          "remoteVirtualNetworkId": {
                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                          },
                          "name": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringName'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringName), createObject('value', format('{0}-{1}', last(split(parameters('peerings')[copyIndex()].remoteVirtualNetworkId, '/')), parameters('name'))))]",
                          "allowForwardedTraffic": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowForwardedTraffic'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowForwardedTraffic), createObject('value', true()))]",
                          "allowGatewayTransit": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowGatewayTransit'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowGatewayTransit), createObject('value', false()))]",
                          "allowVirtualNetworkAccess": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringAllowVirtualNetworkAccess), createObject('value', true()))]",
                          "doNotVerifyRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringDoNotVerifyRemoteGateways), createObject('value', true()))]",
                          "useRemoteGateways": "[if(contains(parameters('peerings')[copyIndex()], 'remotePeeringUseRemoteGateways'), createObject('value', parameters('peerings')[copyIndex()].remotePeeringUseRemoteGateways), createObject('value', false()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "17624189975510507274"
                            },
                            "name": "Virtual Network Peerings",
                            "description": "This module deploys a Virtual Network Peering.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The Name of Vnet Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                              }
                            },
                            "localVnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                              }
                            },
                            "remoteVirtualNetworkId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                              }
                            },
                            "allowForwardedTraffic": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                              }
                            },
                            "allowGatewayTransit": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                              }
                            },
                            "allowVirtualNetworkAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                              }
                            },
                            "doNotVerifyRemoteGateways": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                              }
                            },
                            "useRemoteGateways": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                              "apiVersion": "2023-04-01",
                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                              "properties": {
                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                "remoteVirtualNetwork": {
                                  "id": "[parameters('remoteVirtualNetworkId')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the virtual network peering was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the virtual network peering."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the virtual network peering."
                              },
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network."
                      },
                      "value": "[parameters('name')]"
                    },
                    "subnetNames": {
                      "type": "array",
                      "metadata": {
                        "description": "The names of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[parameters('subnets')[copyIndex()].name]"
                      }
                    },
                    "subnetResourceIds": {
                      "type": "array",
                      "metadata": {
                        "description": "The resource IDs of the deployed subnets."
                      },
                      "copy": {
                        "count": "[length(parameters('subnets'))]",
                        "input": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('name'), parameters('subnets')[copyIndex()].name)]"
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetwork', '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('egressLockdownUdr-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgAppGw-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('nsgPep-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The spoke virtual network in which the workload will run from. This virtual network would normally already be provisioned by your subscription vending process, and only the subnets would need to be configured."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('logAnalyticsWs-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.logAnalyticsWorkspace]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "6354173151975740736"
                    },
                    "name": "Log Analytics Workspaces",
                    "description": "This module deploys a Log Analytics Workspace.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "PerGB2018",
                      "allowedValues": [
                        "CapacityReservation",
                        "Free",
                        "LACluster",
                        "PerGB2018",
                        "PerNode",
                        "Premium",
                        "Standalone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the SKU."
                      }
                    },
                    "skuCapacityReservationLevel": {
                      "type": "int",
                      "defaultValue": 100,
                      "minValue": 100,
                      "maxValue": 5000,
                      "metadata": {
                        "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                      }
                    },
                    "storageInsightsConfigs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of storage accounts to be read by the workspace."
                      }
                    },
                    "linkedServices": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of services to be linked."
                      }
                    },
                    "linkedStorageAccounts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                      }
                    },
                    "savedSearches": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Kusto Query Language searches to save."
                      }
                    },
                    "dataExports": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data export instances to be deployed."
                      }
                    },
                    "dataSources": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW data sources to configure."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. LAW custom tables to be deployed."
                      }
                    },
                    "gallerySolutions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                      }
                    },
                    "dataRetention": {
                      "type": "int",
                      "defaultValue": 365,
                      "minValue": 0,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. Number of days data will be retained for."
                      }
                    },
                    "dailyQuotaGb": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "metadata": {
                        "description": "Optional. The workspace daily quota for ingestion."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Log Analytics query."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                      }
                    },
                    "useResourcePermissions": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "forceCmkForQuery": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.3.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {
                          "searchVersion": 1,
                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                        },
                        "sku": {
                          "name": "[parameters('skuName')]",
                          "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                        },
                        "retentionInDays": "[parameters('dataRetention')]",
                        "workspaceCapping": {
                          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                        },
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                      },
                      "identity": "[variables('identity')]"
                    },
                    "logAnalyticsWorkspace_diagnosticSettings": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_roleAssignments": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_storageInsightConfigs": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_storageInsightConfigs",
                        "count": "[length(parameters('storageInsightsConfigs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'containers'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].containers), createObject('value', createArray()))]",
                          "tables": "[if(contains(parameters('storageInsightsConfigs')[copyIndex()], 'tables'), createObject('value', parameters('storageInsightsConfigs')[copyIndex()].tables), createObject('value', createArray()))]",
                          "storageAccountResourceId": {
                            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4862843187650272248"
                            },
                            "name": "Log Analytics Workspace Storage Insight Configs",
                            "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The name of the storage insights config."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Azure Resource Manager ID of the storage account resource."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the blob containers that the workspace should read."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The names of the Azure tables that the workspace should read."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2022-09-01",
                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                            },
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "storageinsightconfig": {
                              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "containers": "[parameters('containers')]",
                                "tables": "[parameters('tables')]",
                                "storageAccount": {
                                  "id": "[parameters('storageAccountResourceId')]",
                                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                }
                              },
                              "dependsOn": [
                                "storageAccount",
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed storage insights configuration."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the storage insight configuration is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the storage insights configuration."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_linkedServices": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedServices",
                        "count": "[length(parameters('linkedServices'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedServices')[copyIndex()].name]"
                          },
                          "resourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'resourceId'), createObject('value', parameters('linkedServices')[copyIndex()].resourceId), createObject('value', ''))]",
                          "writeAccessResourceId": "[if(contains(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId'), createObject('value', parameters('linkedServices')[copyIndex()].writeAccessResourceId), createObject('value', ''))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "14301767156435143002"
                            },
                            "name": "Log Analytics Workspace Linked Services",
                            "description": "This module deploys a Log Analytics Workspace Linked Service.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            },
                            "writeAccessResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "linkedService": {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resourceId": "[parameters('resourceId')]",
                                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed linked service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed linked service."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the linked service is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_linkedStorageAccounts": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                        "count": "[length(parameters('linkedStorageAccounts'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                          },
                          "resourceId": {
                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "6713282874166856483"
                            },
                            "name": "Log Analytics Workspace Linked Storage Accounts",
                            "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "allowedValues": [
                                "Query",
                                "Alerts",
                                "CustomLogs",
                                "AzureWatson"
                              ],
                              "metadata": {
                                "description": "Required. Name of the link."
                              }
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "storageAccountIds": [
                                  "[parameters('resourceId')]"
                                ]
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed linked storage account."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed linked storage account."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the linked storage account is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_savedSearches": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_savedSearches",
                        "count": "[length(parameters('savedSearches'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                          },
                          "etag": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                          },
                          "displayName": {
                            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                          },
                          "category": {
                            "value": "[parameters('savedSearches')[copyIndex()].category]"
                          },
                          "query": {
                            "value": "[parameters('savedSearches')[copyIndex()].query]"
                          },
                          "functionAlias": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                          },
                          "functionParameters": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                          },
                          "version": {
                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "17950009471823327560"
                            },
                            "name": "Log Analytics Workspace Saved Searches",
                            "description": "This module deploys a Log Analytics Workspace Saved Search.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the saved search."
                              }
                            },
                            "displayName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Display name for the search."
                              }
                            },
                            "category": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Query category."
                              }
                            },
                            "query": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Kusto Query to be stored."
                              }
                            },
                            "tags": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "functionAlias": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The function alias if query serves as a function."
                              }
                            },
                            "functionParameters": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                              }
                            },
                            "version": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The version number of the query language."
                              }
                            },
                            "etag": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "savedSearch": {
                              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "properties": {
                                "etag": "[parameters('etag')]",
                                "tags": "[coalesce(parameters('tags'), createArray())]",
                                "displayName": "[parameters('displayName')]",
                                "category": "[parameters('category')]",
                                "query": "[parameters('query')]",
                                "functionAlias": "[parameters('functionAlias')]",
                                "functionParameters": "[parameters('functionParameters')]",
                                "version": "[parameters('version')]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed saved search."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the saved search is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed saved search."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace",
                        "logAnalyticsWorkspace_linkedStorageAccounts"
                      ]
                    },
                    "logAnalyticsWorkspace_dataExports": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataExports",
                        "count": "[length(parameters('dataExports'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "workspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataExports')[copyIndex()].name]"
                          },
                          "destination": "[if(contains(parameters('dataExports')[copyIndex()], 'destination'), createObject('value', parameters('dataExports')[copyIndex()].destination), createObject('value', createObject()))]",
                          "enable": "[if(contains(parameters('dataExports')[copyIndex()], 'enable'), createObject('value', parameters('dataExports')[copyIndex()].enable), createObject('value', false()))]",
                          "tableNames": "[if(contains(parameters('dataExports')[copyIndex()], 'tableNames'), createObject('value', parameters('dataExports')[copyIndex()].tableNames), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "12543023571728523937"
                            },
                            "name": "Log Analytics Workspace Data Exports",
                            "description": "This module deploys a Log Analytics Workspace Data Export.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 4,
                              "maxLength": 63,
                              "metadata": {
                                "description": "Required. The data export rule name."
                              }
                            },
                            "workspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                              }
                            },
                            "destination": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Destination properties."
                              }
                            },
                            "enable": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Active when enabled."
                              }
                            },
                            "tableNames": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                              "properties": {
                                "destination": "[parameters('destination')]",
                                "enable": "[parameters('enable')]",
                                "tableNames": "[parameters('tableNames')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the data export."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the data export."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the data export was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_dataSources": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_dataSources",
                        "count": "[length(parameters('dataSources'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('dataSources')[copyIndex()].name]"
                          },
                          "kind": {
                            "value": "[parameters('dataSources')[copyIndex()].kind]"
                          },
                          "linkedResourceId": "[if(contains(parameters('dataSources')[copyIndex()], 'linkedResourceId'), createObject('value', parameters('dataSources')[copyIndex()].linkedResourceId), createObject('value', ''))]",
                          "eventLogName": "[if(contains(parameters('dataSources')[copyIndex()], 'eventLogName'), createObject('value', parameters('dataSources')[copyIndex()].eventLogName), createObject('value', ''))]",
                          "eventTypes": "[if(contains(parameters('dataSources')[copyIndex()], 'eventTypes'), createObject('value', parameters('dataSources')[copyIndex()].eventTypes), createObject('value', createArray()))]",
                          "objectName": "[if(contains(parameters('dataSources')[copyIndex()], 'objectName'), createObject('value', parameters('dataSources')[copyIndex()].objectName), createObject('value', ''))]",
                          "instanceName": "[if(contains(parameters('dataSources')[copyIndex()], 'instanceName'), createObject('value', parameters('dataSources')[copyIndex()].instanceName), createObject('value', ''))]",
                          "intervalSeconds": "[if(contains(parameters('dataSources')[copyIndex()], 'intervalSeconds'), createObject('value', parameters('dataSources')[copyIndex()].intervalSeconds), createObject('value', 60))]",
                          "counterName": "[if(contains(parameters('dataSources')[copyIndex()], 'counterName'), createObject('value', parameters('dataSources')[copyIndex()].counterName), createObject('value', ''))]",
                          "state": "[if(contains(parameters('dataSources')[copyIndex()], 'state'), createObject('value', parameters('dataSources')[copyIndex()].state), createObject('value', ''))]",
                          "syslogName": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogName'), createObject('value', parameters('dataSources')[copyIndex()].syslogName), createObject('value', ''))]",
                          "syslogSeverities": "[if(contains(parameters('dataSources')[copyIndex()], 'syslogSeverities'), createObject('value', parameters('dataSources')[copyIndex()].syslogSeverities), createObject('value', createArray()))]",
                          "performanceCounters": "[if(contains(parameters('dataSources')[copyIndex()], 'performanceCounters'), createObject('value', parameters('dataSources')[copyIndex()].performanceCounters), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "14032975851567807564"
                            },
                            "name": "Log Analytics Workspace Datasources",
                            "description": "This module deploys a Log Analytics Workspace Data Source.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "AzureActivityLog",
                              "allowedValues": [
                                "AzureActivityLog",
                                "WindowsEvent",
                                "WindowsPerformanceCounter",
                                "IISLogs",
                                "LinuxSyslog",
                                "LinuxSyslogCollection",
                                "LinuxPerformanceObject",
                                "LinuxPerformanceCollection"
                              ],
                              "metadata": {
                                "description": "Required. The kind of the DataSource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to configure in the resource."
                              }
                            },
                            "linkedResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of the resource to be linked."
                              }
                            },
                            "eventLogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                              }
                            },
                            "eventTypes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                              }
                            },
                            "objectName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "instanceName": {
                              "type": "string",
                              "defaultValue": "*",
                              "metadata": {
                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "intervalSeconds": {
                              "type": "int",
                              "defaultValue": 60,
                              "metadata": {
                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                              }
                            },
                            "performanceCounters": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                              }
                            },
                            "counterName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                              }
                            },
                            "state": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                              }
                            },
                            "syslogName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                              }
                            },
                            "syslogSeverities": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                              }
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                            },
                            "dataSource": {
                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                              "apiVersion": "2020-08-01",
                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                              "kind": "[parameters('kind')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed data source."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the data source is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed data source."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_tables": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_tables",
                        "count": "[length(parameters('tables'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "workspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[parameters('tables')[copyIndex()].name]"
                          },
                          "plan": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                          },
                          "schema": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                          },
                          "retentionInDays": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                          },
                          "totalRetentionInDays": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                          },
                          "restoredLogs": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                          },
                          "searchResults": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4932423807790181892"
                            },
                            "name": "Log Analytics Workspace Tables",
                            "description": "This module deploys a Log Analytics Workspace Table.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the table."
                              }
                            },
                            "workspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                              }
                            },
                            "plan": {
                              "type": "string",
                              "defaultValue": "Analytics",
                              "allowedValues": [
                                "Basic",
                                "Analytics"
                              ],
                              "metadata": {
                                "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                              }
                            },
                            "restoredLogs": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Restore parameters."
                              }
                            },
                            "retentionInDays": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "maxValue": 730,
                              "metadata": {
                                "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                              }
                            },
                            "schema": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Table's schema."
                              }
                            },
                            "searchResults": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Parameters of the search job that initiated this table."
                              }
                            },
                            "totalRetentionInDays": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "maxValue": 2555,
                              "metadata": {
                                "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "workspace": {
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2022-10-01",
                              "name": "[parameters('workspaceName')]"
                            },
                            "table": {
                              "type": "Microsoft.OperationalInsights/workspaces/tables",
                              "apiVersion": "2022-10-01",
                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                              "properties": {
                                "plan": "[parameters('plan')]",
                                "restoredLogs": "[parameters('restoredLogs')]",
                                "retentionInDays": "[parameters('retentionInDays')]",
                                "schema": "[parameters('schema')]",
                                "searchResults": "[parameters('searchResults')]",
                                "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                              },
                              "dependsOn": [
                                "workspace"
                              ]
                            },
                            "table_roleAssignments": {
                              "copy": {
                                "name": "table_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "table"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the table."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the table."
                              },
                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the table was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "logAnalyticsWorkspace_solutions": {
                      "copy": {
                        "name": "logAnalyticsWorkspace_solutions",
                        "count": "[length(parameters('gallerySolutions'))]"
                      },
                      "condition": "[not(empty(parameters('gallerySolutions')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceName": {
                            "value": "[parameters('name')]"
                          },
                          "product": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'product'), createObject('value', parameters('gallerySolutions')[copyIndex()].product), createObject('value', 'OMSGallery'))]",
                          "publisher": "[if(contains(parameters('gallerySolutions')[copyIndex()], 'publisher'), createObject('value', parameters('gallerySolutions')[copyIndex()].publisher), createObject('value', 'Microsoft'))]",
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.23.1.45101",
                              "templateHash": "18444780972506374592"
                            },
                            "name": "Operations Management Solutions",
                            "description": "This module deploys an Operations Management Solution.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                              }
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "product": {
                              "type": "string",
                              "defaultValue": "OMSGallery",
                              "metadata": {
                                "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                              }
                            },
                            "publisher": {
                              "type": "string",
                              "defaultValue": "Microsoft",
                              "metadata": {
                                "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                            "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.OperationsManagement/solutions",
                              "apiVersion": "2015-11-01-preview",
                              "name": "[variables('solutionName')]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                              },
                              "plan": {
                                "name": "[variables('solutionName')]",
                                "promotionCode": "",
                                "product": "[variables('solutionProduct')]",
                                "publisher": "[parameters('publisher')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed solution."
                              },
                              "value": "[variables('solutionName')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed solution."
                              },
                              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group where the solution is deployed."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed log analytics workspace."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed log analytics workspace."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed log analytics workspace."
                      },
                      "value": "[parameters('name')]"
                    },
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The ID associated with the workspace."
                      },
                      "value": "[reference('logAnalyticsWorkspace').customerId]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The log sink for Azure Diagnostics"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgContainerAppsEnvironment-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironmentNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_UDP",
                        "properties": {
                          "description": "internal AKS secure connection between underlying nodes and control plane..",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "[format('AzureCloud.{0}', variables('locationVar'))]",
                          "destinationPortRange": "1194",
                          "access": "Allow",
                          "priority": 100,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "Allow_Internal_AKS_Connection_Between_Nodes_And_Control_Plane_TCP",
                        "properties": {
                          "description": "internal AKS secure connection between underlying nodes and control plane..",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "[format('AzureCloud.{0}', variables('locationVar'))]",
                          "destinationPortRange": "9000",
                          "access": "Allow",
                          "priority": 110,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "Allow_Azure_Monitor",
                        "properties": {
                          "description": "Allows outbound calls to Azure Monitor.",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "[format('AzureCloud.{0}', variables('locationVar'))]",
                          "destinationPortRange": "443",
                          "access": "Allow",
                          "priority": 120,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "Allow_Outbound_443",
                        "properties": {
                          "description": "Allowing all outbound on port 443 provides a way to allow all FQDN based outbound dependencies that don't have a static IP",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "443",
                          "access": "Allow",
                          "priority": 130,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "Allow_NTP_Server",
                        "properties": {
                          "description": "NTP server",
                          "protocol": "Udp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "123",
                          "access": "Allow",
                          "priority": 140,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "Allow_Container_Apps_control_plane",
                        "properties": {
                          "description": "Container Apps control plane",
                          "protocol": "Tcp",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRanges": [
                            "5671",
                            "5672"
                          ],
                          "access": "Allow",
                          "priority": 150,
                          "direction": "Outbound"
                        }
                      },
                      {
                        "name": "deny-hop-outbound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRanges": [
                            "3389",
                            "22"
                          ],
                          "access": "Deny",
                          "priority": 200,
                          "direction": "Outbound",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "destinationAddressPrefix": "*"
                        }
                      }
                    ]
                  },
                  "diagnosticSettings": {
                    "value": [
                      {
                        "name": "logAnalyticsSettings",
                        "workspaceResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "8543584719514494080"
                    },
                    "name": "Network Security Groups",
                    "description": "This module deploys a Network security Group (NSG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkSecurityGroup": {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ],
                        "flushConnection": "[parameters('flushConnection')]"
                      }
                    },
                    "networkSecurityGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_diagnosticSettings": {
                      "copy": {
                        "name": "networkSecurityGroup_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_roleAssignments": {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_securityRules": {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "17252857850318600622"
                            },
                            "name": "Network Security Group (NSG) Security Rules",
                            "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the security rule."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Network security group rules for the Container Apps cluster."
              }
            },
            {
              "condition": "[not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgAppGw-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "HealthProbes",
                        "properties": {
                          "description": "allow HealthProbes from gateway Manager.",
                          "protocol": "*",
                          "sourceAddressPrefix": "GatewayManager",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "65200-65535",
                          "access": "Allow",
                          "priority": 100,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "Allow_TLS",
                        "properties": {
                          "description": "allow https incoming connections",
                          "protocol": "*",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "443",
                          "access": "Allow",
                          "priority": 110,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "Allow_HTTP",
                        "properties": {
                          "description": "allow http incoming connections",
                          "protocol": "*",
                          "sourceAddressPrefix": "*",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "80",
                          "access": "Allow",
                          "priority": 120,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "Allow_AzureLoadBalancer",
                        "properties": {
                          "description": "allow AzureLoadBalancer incoming connections",
                          "protocol": "*",
                          "sourceAddressPrefix": "AzureLoadBalancer",
                          "sourcePortRange": "*",
                          "destinationAddressPrefix": "*",
                          "destinationPortRange": "80",
                          "access": "Allow",
                          "priority": 130,
                          "direction": "Inbound"
                        }
                      },
                      {
                        "name": "allow-all-outbound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRange": "*",
                          "access": "Allow",
                          "priority": 210,
                          "direction": "Outbound",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "destinationAddressPrefix": "*"
                        }
                      }
                    ]
                  },
                  "diagnosticSettings": {
                    "value": [
                      {
                        "name": "logAnalyticsSettings",
                        "workspaceResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "8543584719514494080"
                    },
                    "name": "Network Security Groups",
                    "description": "This module deploys a Network security Group (NSG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkSecurityGroup": {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ],
                        "flushConnection": "[parameters('flushConnection')]"
                      }
                    },
                    "networkSecurityGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_diagnosticSettings": {
                      "copy": {
                        "name": "networkSecurityGroup_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_roleAssignments": {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_securityRules": {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "17252857850318600622"
                            },
                            "name": "Network Security Group (NSG) Security Rules",
                            "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the security rule."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "NSG Rules for the Application Gateway."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('nsgPep-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.pepNsg]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "securityRules": {
                    "value": [
                      {
                        "name": "deny-hop-outbound",
                        "properties": {
                          "protocol": "*",
                          "sourcePortRange": "*",
                          "destinationPortRanges": [
                            "3389",
                            "22"
                          ],
                          "access": "Deny",
                          "priority": 200,
                          "direction": "Outbound",
                          "sourceAddressPrefix": "VirtualNetwork",
                          "destinationAddressPrefix": "*"
                        }
                      }
                    ]
                  },
                  "diagnosticSettings": {
                    "value": [
                      {
                        "name": "logAnalyticsSettings",
                        "workspaceResourceId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "8543584719514494080"
                    },
                    "name": "Network Security Groups",
                    "description": "This module deploys a Network security Group (NSG).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Network Security Group."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "securityRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                      }
                    },
                    "flushConnection": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the NSG resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "networkSecurityGroup": {
                      "type": "Microsoft.Network/networkSecurityGroups",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "securityRules",
                            "count": "[length(parameters('securityRules'))]",
                            "input": {
                              "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                              "properties": {
                                "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                              }
                            }
                          }
                        ],
                        "flushConnection": "[parameters('flushConnection')]"
                      }
                    },
                    "networkSecurityGroup_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_diagnosticSettings": {
                      "copy": {
                        "name": "networkSecurityGroup_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_roleAssignments": {
                      "copy": {
                        "name": "networkSecurityGroup_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    },
                    "networkSecurityGroup_securityRules": {
                      "copy": {
                        "name": "networkSecurityGroup_securityRules",
                        "count": "[length(parameters('securityRules'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('securityRules')[copyIndex()].name]"
                          },
                          "networkSecurityGroupName": {
                            "value": "[parameters('name')]"
                          },
                          "protocol": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                          },
                          "access": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                          },
                          "priority": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                          },
                          "direction": {
                            "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                          },
                          "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                          "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                          "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                          "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                          "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                          "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                          "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                          "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                          "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                          "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                          "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "17252857850318600622"
                            },
                            "name": "Network Security Group (NSG) Security Rules",
                            "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the security rule."
                              }
                            },
                            "networkSecurityGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                              }
                            },
                            "access": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "maxLength": 140,
                              "metadata": {
                                "description": "Optional. A description for this rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "metadata": {
                                "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroups": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The application security group specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                              "properties": {
                                "access": "[parameters('access')]",
                                "description": "[parameters('description')]",
                                "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                "destinationPortRange": "[parameters('destinationPortRange')]",
                                "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                "direction": "[parameters('direction')]",
                                "priority": "[parameters('priority')]",
                                "protocol": "[parameters('protocol')]",
                                "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                "sourcePortRange": "[parameters('sourcePortRange')]",
                                "sourcePortRanges": "[parameters('sourcePortRanges')]"
                              }
                            }
                          ],
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the security rule was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the security rule."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the security rule."
                              },
                              "value": "[parameters('name')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "networkSecurityGroup"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the network security group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the network security group."
                      },
                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the network security group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "NSG Rules for the private enpoint subnet."
              }
            },
            {
              "condition": "[and(not(empty(parameters('hubVNetId'))), not(empty(parameters('networkApplianceIpAddress'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('egressLockdownUdr-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.routeTable]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "routes": {
                    "value": [
                      {
                        "name": "defaultEgressLockdown",
                        "properties": {
                          "addressPrefix": "0.0.0.0/0",
                          "nextHopType": "VirtualAppliance",
                          "nextHopIpAddress": "[parameters('networkApplianceIpAddress')]"
                        }
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.25.53.49325",
                      "templateHash": "4697655308606864167"
                    },
                    "name": "Route Tables",
                    "description": "This module deploys a User Defined Route Table (UDR).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "routeType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Name of the route."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "nextHopType": {
                                "type": "string",
                                "allowedValues": [
                                  "Internet",
                                  "None",
                                  "VirtualAppliance",
                                  "VirtualNetworkGateway",
                                  "VnetLocal"
                                ],
                                "metadata": {
                                  "description": "Required. The type of Azure hop the packet should be sent to."
                                }
                              },
                              "addressPrefix": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The destination CIDR to which the route applies."
                                }
                              },
                              "hasBgpOverride": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A value indicating whether this route overrides overlapping BGP routes regardless of LPM."
                                }
                              },
                              "nextHopIpAddress": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of the route."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name given for the hub route table."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "routes": {
                      "$ref": "#/definitions/routeType",
                      "metadata": {
                        "description": "Optional. An array of routes to be established within the hub route table."
                      }
                    },
                    "disableBgpRoutePropagation": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Switch to disable BGP route propagation."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[take(format('46d3xbcp.res.network-routetable.{0}.{1}', replace('0.2.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "routeTable": {
                      "type": "Microsoft.Network/routeTables",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "routes": "[parameters('routes')]",
                        "disableBgpRoutePropagation": "[parameters('disableBgpRoutePropagation')]"
                      }
                    },
                    "routeTable_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "routeTable"
                      ]
                    },
                    "routeTable_roleAssignments": {
                      "copy": {
                        "name": "routeTable_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/routeTables/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/routeTables', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "routeTable"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the route table was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the route table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the route table."
                      },
                      "value": "[resourceId('Microsoft.Network/routeTables', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('routeTable', '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The Route Table deployment"
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'linux')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-linux-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "bastionResourceId": {
                    "value": "[parameters('bastionResourceId')]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSshPublicKey": {
                    "value": "[parameters('vmLinuxSshAuthorizedKey')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmZone": {
                    "value": "[parameters('vmZone')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('storageAccountType')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  },
                  "vmAuthenticationType": {
                    "value": "[parameters('vmAuthenticationType')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "15037342818970325221"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS"
                    },
                    "vmZone": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "bastionResourceId": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "vmSshPublicKey": {
                      "type": "securestring"
                    },
                    "vmAuthenticationType": {
                      "type": "string",
                      "defaultValue": "password",
                      "allowedValues": [
                        "sshPublicKey",
                        "password"
                      ],
                      "metadata": {
                        "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deplotment telemetry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment'), '2022-09-01').outputs.resourceId.value]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Maintenance/maintenanceConfigurations",
                      "apiVersion": "2023-10-01-preview",
                      "name": "[format('dep-mc-{0}', parameters('vmName'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "extensionProperties": {
                          "InGuestPatchMode": "User"
                        },
                        "maintenanceScope": "InGuestPatch",
                        "maintenanceWindow": {
                          "startDateTime": "2024-06-16 00:00",
                          "duration": "03:55",
                          "timeZone": "W. Europe Standard Time",
                          "recurEvery": "1Day"
                        },
                        "visibility": "Custom",
                        "installPatches": {
                          "rebootSetting": "IfRequired",
                          "linuxParameters": {
                            "classificationsToInclude": [
                              "Critical",
                              "Security"
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmNetworkSecurityDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmNetworkSecurityGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "securityRules": "[if(not(empty(parameters('bastionResourceId'))), createObject('value', createArray(createObject('name', 'allow-bastion-inbound', 'properties', createObject('description', 'Allow inbound traffic from Bastion to the JumpBox', 'protocol', '*', 'sourceAddressPrefix', 'Bastion', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')))), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "8543584719514494080"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('securityRules'))]",
                                    "input": {
                                      "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                        "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                        "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                        "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                        "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                        "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                        "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                        "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                        "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                        "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                        "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                        "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                        "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                        "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_securityRules": {
                              "copy": {
                                "name": "networkSecurityGroup_securityRules",
                                "count": "[length(parameters('securityRules'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('securityRules')[copyIndex()].name]"
                                  },
                                  "networkSecurityGroupName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "protocol": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                                  },
                                  "access": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                                  },
                                  "priority": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                                  },
                                  "direction": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                                  },
                                  "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                                  "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                                  "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                                  "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                                  "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                                  "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                                  "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                                  "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                                  "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                                  "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                                  "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "17252857850318600622"
                                    },
                                    "name": "Network Security Group (NSG) Security Rules",
                                    "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the security rule."
                                      }
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "access": {
                                      "type": "string",
                                      "defaultValue": "Deny",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "maxLength": 140,
                                      "metadata": {
                                        "description": "Optional. A description for this rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                                      "properties": {
                                        "access": "[parameters('access')]",
                                        "description": "[parameters('description')]",
                                        "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                        "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                        "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                        "destinationPortRange": "[parameters('destinationPortRange')]",
                                        "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                        "direction": "[parameters('direction')]",
                                        "priority": "[parameters('priority')]",
                                        "protocol": "[parameters('protocol')]",
                                        "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                        "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                        "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                        "sourcePortRange": "[parameters('sourcePortRange')]",
                                        "sourcePortRanges": "[parameters('sourcePortRanges')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the security rule was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the security rule."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the security rule."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "osType": {
                            "value": "Linux"
                          },
                          "computerName": {
                            "value": "[parameters('vmName')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('vmAdminUsername')]"
                          },
                          "adminPassword": "[if(equals(parameters('vmAuthenticationType'), 'password'), createObject('value', parameters('vmAdminPassword')), createObject('value', null()))]",
                          "disablePasswordAuthentication": "[if(equals(parameters('vmAuthenticationType'), 'password'), createObject('value', false()), createObject('value', true()))]",
                          "encryptionAtHost": {
                            "value": false
                          },
                          "enableAutomaticUpdates": {
                            "value": true
                          },
                          "patchMode": {
                            "value": "AutomaticByPlatform"
                          },
                          "bypassPlatformSafetyChecksOnUserSchedule": {
                            "value": true
                          },
                          "maintenanceConfigurationResourceId": {
                            "value": "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]"
                          },
                          "publicKeys": "[if(equals(parameters('vmAuthenticationType'), 'sshPublicKey'), createObject('value', createArray(createObject('keyData', parameters('vmSshPublicKey'), 'path', format('/home/{0}/.ssh/authorized_keys', parameters('vmAdminUsername'))))), createObject('value', createArray()))]",
                          "nicConfigurations": {
                            "value": [
                              {
                                "name": "[parameters('vmNetworkInterfaceName')]",
                                "enableAcceleratedNetworking": false,
                                "ipConfigurations": [
                                  {
                                    "name": "ipConfig01",
                                    "privateIPAllocationMethod": "Dynamic",
                                    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                                  }
                                ]
                              }
                            ]
                          },
                          "osDisk": {
                            "value": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage",
                              "deleteOption": "Delete",
                              "diskSizeGB": 128,
                              "managedDisk": {
                                "storageAccountType": "[parameters('storageAccountType')]"
                              }
                            }
                          },
                          "zone": {
                            "value": "[parameters('vmZone')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmSize')]"
                          },
                          "imageReference": {
                            "value": {
                              "publisher": "canonical",
                              "offer": "0001-com-ubuntu-server-focal",
                              "sku": "20_04-lts-gen2",
                              "version": "latest"
                            }
                          },
                          "extensionMonitoringAgentConfig": {
                            "value": {
                              "enabled": true,
                              "tags": "[parameters('tags')]",
                              "monitoringWorkspaceResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7195052428088092384"
                            },
                            "name": "Virtual Machines",
                            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "osDiskType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The disk name."
                                  }
                                },
                                "diskSizeGB": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                  }
                                },
                                "createOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Attach",
                                    "Empty",
                                    "FromImage"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies how the virtual machine should be created."
                                  }
                                },
                                "deleteOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Delete",
                                    "Detach"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                  }
                                },
                                "caching": {
                                  "type": "string",
                                  "allowedValues": [
                                    "None",
                                    "ReadOnly",
                                    "ReadWrite"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the caching requirements."
                                  }
                                },
                                "managedDisk": {
                                  "type": "object",
                                  "properties": {
                                    "storageAccountType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "PremiumV2_LRS",
                                        "Premium_LRS",
                                        "Premium_ZRS",
                                        "StandardSSD_LRS",
                                        "StandardSSD_ZRS",
                                        "Standard_LRS",
                                        "UltraSSD_LRS"
                                      ],
                                      "metadata": {
                                        "description": "Required. Specifies the storage account type for the managed disk."
                                      }
                                    },
                                    "diskEncryptionSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The managed disk parameters."
                                  }
                                }
                              }
                            },
                            "dataDisksType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The disk name."
                                    }
                                  },
                                  "lun": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the logical unit number of the data disk."
                                    }
                                  },
                                  "diskSizeGB": {
                                    "type": "int",
                                    "metadata": {
                                      "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                    }
                                  },
                                  "createOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Attach",
                                      "Empty",
                                      "FromImage"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies how the virtual machine should be created."
                                    }
                                  },
                                  "deleteOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Delete",
                                      "Detach"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                    }
                                  },
                                  "caching": {
                                    "type": "string",
                                    "allowedValues": [
                                      "None",
                                      "ReadOnly",
                                      "ReadWrite"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the caching requirements."
                                    }
                                  },
                                  "managedDisk": {
                                    "type": "object",
                                    "properties": {
                                      "storageAccountType": {
                                        "type": "string",
                                        "allowedValues": [
                                          "PremiumV2_LRS",
                                          "Premium_LRS",
                                          "Premium_ZRS",
                                          "StandardSSD_LRS",
                                          "StandardSSD_ZRS",
                                          "Standard_LRS",
                                          "UltraSSD_LRS"
                                        ],
                                        "metadata": {
                                          "description": "Required. Specifies the storage account type for the managed disk."
                                        }
                                      },
                                      "diskEncryptionSetResourceId": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The managed disk parameters."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
                              }
                            },
                            "computerName": {
                              "type": "string",
                              "defaultValue": "[parameters('name')]",
                              "metadata": {
                                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the size for the VMs."
                              }
                            },
                            "encryptionAtHost": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "securityType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "secureBootEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "vTpmEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "imageReference": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                              }
                            },
                            "plan": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                              }
                            },
                            "osDisk": {
                              "$ref": "#/definitions/osDiskType",
                              "metadata": {
                                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "dataDisks": {
                              "$ref": "#/definitions/dataDisksType",
                              "metadata": {
                                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "ultraSSDEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                              }
                            },
                            "adminUsername": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Administrator username."
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                              }
                            },
                            "customData": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                              }
                            },
                            "certificatesToBeInstalled": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                              }
                            },
                            "priority": {
                              "type": "string",
                              "defaultValue": "Regular",
                              "allowedValues": [
                                "Regular",
                                "Low",
                                "Spot"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the priority for the virtual machine."
                              }
                            },
                            "enableEvictionPolicy": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                              }
                            },
                            "maxPriceForLowPriorityVm": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                              }
                            },
                            "dedicatedHostId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                              }
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "RHEL_BYOS",
                                "SLES_BYOS",
                                "Windows_Client",
                                "Windows_Server",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
                              }
                            },
                            "publicKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                              }
                            },
                            "bootDiagnostics": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                              }
                            },
                            "bootDiagnosticStorageAccountName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                              }
                            },
                            "bootDiagnosticStorageAccountUri": {
                              "type": "string",
                              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                              "metadata": {
                                "description": "Optional. Storage account boot diagnostic base URI."
                              }
                            },
                            "proximityPlacementGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a proximity placement group."
                              }
                            },
                            "virtualMachineScaleSetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
                              }
                            },
                            "availabilitySetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                              }
                            },
                            "galleryApplications": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
                              }
                            },
                            "zone": {
                              "type": "int",
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "metadata": {
                                "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                              }
                            },
                            "nicConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Configures NICs and PIPs."
                              }
                            },
                            "backupVaultName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Recovery service vault name to add VMs to backup."
                              }
                            },
                            "backupVaultResourceGroup": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                              }
                            },
                            "backupPolicyName": {
                              "type": "string",
                              "defaultValue": "DefaultPolicy",
                              "metadata": {
                                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                              }
                            },
                            "autoShutdownConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for auto-shutdown."
                              }
                            },
                            "maintenanceConfigurationResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource Id of a maintenance configuration for this VM."
                              }
                            },
                            "allowExtensionOperations": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                              }
                            },
                            "extensionDomainJoinPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                              }
                            },
                            "extensionDomainJoinConfig": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAadJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
                              }
                            },
                            "extensionAntiMalwareConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionDependencyAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNetworkWatcherAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAzureDiskEncryptionConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                              }
                            },
                            "extensionDSCConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionCustomScriptConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false,
                                "fileData": []
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNvidiaGpuDriverWindows": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionHostPoolRegistration": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "extensionGuestConfigurationExtension": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "guestConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
                              }
                            },
                            "extensionCustomScriptProtectedSetting": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "extensionGuestConfigurationExtensionProtectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "baseTime": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]",
                              "metadata": {
                                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                              }
                            },
                            "sasTokenValidityLength": {
                              "type": "string",
                              "defaultValue": "PT8H",
                              "metadata": {
                                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                              }
                            },
                            "osType": {
                              "type": "string",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Required. The chosen OS type."
                              }
                            },
                            "disablePasswordAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether password authentication should be disabled."
                              }
                            },
                            "provisionVMAgent": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                              }
                            },
                            "enableAutomaticUpdates": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                              }
                            },
                            "patchMode": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "AutomaticByOS",
                                "Manual",
                                "ImageDefault",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                              }
                            },
                            "bypassPlatformSafetyChecksOnUserSchedule": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enables customer to schedule patching without accidental upgrades."
                              }
                            },
                            "rebootSetting": {
                              "type": "string",
                              "defaultValue": "IfRequired",
                              "allowedValues": [
                                "Always",
                                "IfRequired",
                                "Never",
                                "Unknown"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
                              }
                            },
                            "patchAssessmentMode": {
                              "type": "string",
                              "defaultValue": "ImageDefault",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "ImageDefault"
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                              }
                            },
                            "additionalUnattendContent": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
                              }
                            },
                            "winRM": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "publicKeysFormatted",
                                "count": "[length(parameters('publicKeys'))]",
                                "input": {
                                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                }
                              }
                            ],
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                              "ssh": {
                                "publicKeys": "[variables('publicKeysFormatted')]"
                              },
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
                            },
                            "windowsConfiguration": {
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
                              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                            },
                            "accountSasProperties": {
                              "signedServices": "b",
                              "signedPermission": "r",
                              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                              "signedResourceTypes": "o",
                              "signedProtocol": "https"
                            },
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                              "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                              "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                              "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                              "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "vm": {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
                              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "securityProfile": {
                                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                  "securityType": "[parameters('securityType')]",
                                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                },
                                "storageProfile": {
                                  "copy": [
                                    {
                                      "name": "dataDisks",
                                      "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
                                      "input": {
                                        "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                                        "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))]",
                                        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].diskSizeGB]",
                                        "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty')]",
                                        "deleteOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                                        "caching": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                                        "managedDisk": {
                                          "storageAccountType": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                          "diskEncryptionSet": {
                                            "id": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSetResourceId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "imageReference": "[parameters('imageReference')]",
                                  "osDisk": {
                                    "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
                                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                                    "managedDisk": {
                                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                                      "diskEncryptionSet": {
                                        "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
                                      }
                                    }
                                  }
                                },
                                "additionalCapabilities": {
                                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('computerName')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                  "secrets": "[parameters('certificatesToBeInstalled')]",
                                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                  "copy": [
                                    {
                                      "name": "networkInterfaces",
                                      "count": "[length(parameters('nicConfigurations'))]",
                                      "input": {
                                        "properties": {
                                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                        },
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].name, format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix)))]"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                  }
                                },
                                "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
                                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                                "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
                                "priority": "[parameters('priority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                              },
                              "dependsOn": [
                                "vm_nic"
                              ]
                            },
                            "vm_configurationAssignment": {
                              "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
                              "type": "Microsoft.Maintenance/configurationAssignments",
                              "apiVersion": "2023-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[format('{0}assignment', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
                                "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_configurationProfileAssignment": {
                              "condition": "[not(empty(parameters('configurationProfile')))]",
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2022-05-04",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_autoShutdownConfiguration": {
                              "condition": "[not(empty(parameters('autoShutdownConfig')))]",
                              "type": "Microsoft.DevTestLab/schedules",
                              "apiVersion": "2018-09-15",
                              "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "status": "[if(contains(parameters('autoShutdownConfig'), 'status'), parameters('autoShutdownConfig').status, 'Disabled')]",
                                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "taskType": "ComputeVmShutdownTask",
                                "dailyRecurrence": {
                                  "time": "[if(contains(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), parameters('autoShutdownConfig').dailyRecurrenceTime, '19:00')]"
                                },
                                "timeZoneId": "[if(contains(parameters('autoShutdownConfig'), 'timeZone'), parameters('autoShutdownConfig').timeZone, 'UTC')]",
                                "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), createObject('status', if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), parameters('autoShutdownConfig').notificationStatus, 'Disabled'), 'emailRecipient', if(contains(parameters('autoShutdownConfig'), 'notificationEmail'), parameters('autoShutdownConfig').notificationEmail, ''), 'notificationLocale', if(contains(parameters('autoShutdownConfig'), 'notificationLocale'), parameters('autoShutdownConfig').notificationLocale, 'en'), 'webhookUrl', if(contains(parameters('autoShutdownConfig'), 'notificationWebhookUrl'), parameters('autoShutdownConfig').notificationWebhookUrl, ''), 'timeInMinutes', if(contains(parameters('autoShutdownConfig'), 'notificationTimeInMinutes'), parameters('autoShutdownConfig').notificationTimeInMinutes, 30)), null())]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_logAnalyticsWorkspace": {
                              "condition": "[not(empty(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "subscriptionId": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))]"
                            },
                            "AzureWindowsBaseline": {
                              "condition": "[not(empty(parameters('guestConfiguration')))]",
                              "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
                              "apiVersion": "2020-06-25",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "AzureWindowsBaseline",
                              "location": "[parameters('location')]",
                              "properties": {
                                "guestConfiguration": "[parameters('guestConfiguration')]"
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            },
                            "vm_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_roleAssignments": {
                              "copy": {
                                "name": "vm_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_nic": {
                              "copy": {
                                "name": "vm_nic",
                                "count": "[length(parameters('nicConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "networkInterfaceName": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'name'), createObject('value', parameters('nicConfigurations')[copyIndex()].name), createObject('value', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)))]",
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false()))]",
                                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                                  "ipConfigurations": {
                                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "6185170122493883924"
                                    }
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "networkInterfaceName": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    },
                                    "ipConfigurations": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": []
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the Network Interface."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "networkInterface_publicIPAddresses": {
                                      "copy": {
                                        "name": "networkInterface_publicIPAddresses",
                                        "count": "[length(parameters('ipConfigurations'))]"
                                      },
                                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'name'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.name), createObject('value', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIpNameSuffix)))]",
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "idleTimeoutInMinutes": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'idleTimeoutInMinutes')]"
                                          },
                                          "ddosSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'ddosSettings')]"
                                          },
                                          "dnsSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'dnsSettings')]"
                                          },
                                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAllocationMethod), createObject('value', 'Static'))]",
                                          "publicIpPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPPrefixResourceId), createObject('value', ''))]",
                                          "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.roleAssignments), createObject('value', createArray()))]",
                                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuName), createObject('value', 'Standard'))]",
                                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuTier), createObject('value', 'Regional'))]",
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.zones), createObject('value', createArray(1, 2, 3)))]",
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.27.1.19265",
                                              "templateHash": "10356333973104369631"
                                            },
                                            "name": "Public IP Addresses",
                                            "description": "This module deploys a Public IP Address.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "",
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              }
                                            },
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Public IP Address."
                                              }
                                            },
                                            "publicIpPrefixResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                              }
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string",
                                              "defaultValue": "Static",
                                              "allowedValues": [
                                                "Dynamic",
                                                "Static"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The public IP address allocation method."
                                              }
                                            },
                                            "zones": {
                                              "type": "array",
                                              "items": {
                                                "type": "int"
                                              },
                                              "defaultValue": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "allowedValues": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "metadata": {
                                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                              }
                                            },
                                            "publicIPAddressVersion": {
                                              "type": "string",
                                              "defaultValue": "IPv4",
                                              "allowedValues": [
                                                "IPv4",
                                                "IPv6"
                                              ],
                                              "metadata": {
                                                "description": "Optional. IP address version."
                                              }
                                            },
                                            "dnsSettings": {
                                              "$ref": "#/definitions/dnsSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DNS settings of the public IP address."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "skuName": {
                                              "type": "string",
                                              "defaultValue": "Standard",
                                              "allowedValues": [
                                                "Basic",
                                                "Standard"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Name of a public IP address SKU."
                                              }
                                            },
                                            "skuTier": {
                                              "type": "string",
                                              "defaultValue": "Regional",
                                              "allowedValues": [
                                                "Global",
                                                "Regional"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Tier of a public IP address SKU."
                                              }
                                            },
                                            "ddosSettings": {
                                              "$ref": "#/definitions/ddosSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "idleTimeoutInMinutes": {
                                              "type": "int",
                                              "defaultValue": 4,
                                              "metadata": {
                                                "description": "Optional. The idle timeout of the public IP address."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "publicIpAddress": {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2023-09-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                              "properties": {
                                                "ddosSettings": "[parameters('ddosSettings')]",
                                                "dnsSettings": "[parameters('dnsSettings')]",
                                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                "ipTags": null
                                              }
                                            },
                                            "publicIpAddress_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_roleAssignments": {
                                              "copy": {
                                                "name": "publicIpAddress_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_diagnosticSettings": {
                                              "copy": {
                                                "name": "publicIpAddress_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the public IP address was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              },
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                            },
                                            "ipAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The public IP address of the public IP address resource."
                                              },
                                              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('publicIpAddress', '2023-09-01', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkInterface": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('networkInterfaceName')]"
                                          },
                                          "ipConfigurations": {
                                            "copy": [
                                              {
                                                "name": "value",
                                                "count": "[length(parameters('ipConfigurations'))]",
                                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), resourceId('Microsoft.Network/publicIPAddresses', if(contains(parameters('ipConfigurations')[copyIndex('value')].pipConfiguration, 'name'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.name, format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.publicIpNameSuffix))), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                              }
                                            ]
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[parameters('diagnosticSettings')]"
                                          },
                                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                          "enableAcceleratedNetworking": {
                                            "value": "[parameters('enableAcceleratedNetworking')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[parameters('enableTelemetry')]"
                                          },
                                          "enableIPForwarding": {
                                            "value": "[parameters('enableIPForwarding')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                          "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "1612343535299711142"
                                            },
                                            "name": "Network Interface",
                                            "description": "This module deploys a Network Interface.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the network interface."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource tags."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "enableIPForwarding": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                              }
                                            },
                                            "enableAcceleratedNetworking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the network interface is accelerated networking enabled."
                                              }
                                            },
                                            "dnsServers": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                                              }
                                            },
                                            "auxiliaryMode": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Floating",
                                                "MaxConnections",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "auxiliarySku": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "A1",
                                                "A2",
                                                "A4",
                                                "A8",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "disableTcpStateTracking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. A list of IPConfigurations of the network interface."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkInterface": {
                                              "type": "Microsoft.Network/networkInterfaces",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "ipConfigurations",
                                                    "count": "[length(parameters('ipConfigurations'))]",
                                                    "input": {
                                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                                      "properties": {
                                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                        "subnet": {
                                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                        },
                                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                              }
                                            },
                                            "networkInterface_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_diagnosticSettings": {
                                              "copy": {
                                                "name": "networkInterface_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_roleAssignments": {
                                              "copy": {
                                                "name": "networkInterface_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed resource."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed resource."
                                              },
                                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed resource."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('networkInterface', '2023-04-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "networkInterface_publicIPAddresses"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "vm_aadJoinExtension": {
                              "condition": "[parameters('extensionAadJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AADLogin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.ActiveDirectory"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_domainJoinExtension": {
                              "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DomainJoin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Compute"
                                  },
                                  "type": {
                                    "value": "JsonADDomainExtension"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "Password": "[parameters('extensionDomainJoinPassword')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_aadJoinExtension"
                              ]
                            },
                            "vm_microsoftAntiMalwareExtension": {
                              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftAntiMalware"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": {
                                    "value": "IaaSAntimalware"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_domainJoinExtension"
                              ]
                            },
                            "vm_azureMonitorAgentExtension": {
                              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureMonitorAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitor"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
                                  "typeHandlerVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
                                  },
                                  "autoUpgradeMinorVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                  },
                                  "enableAutomaticUpgrade": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                  },
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), reference('vm_logAnalyticsWorkspace').customerId, '')]",
                                      "GCS_AUTO_CONFIG": "[if(equals(parameters('osType'), 'Linux'), true(), null())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2], split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_logAnalyticsWorkspace",
                                "vm_microsoftAntiMalwareExtension"
                              ]
                            },
                            "vm_dependencyAgentExtension": {
                              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DependencyAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.10'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "settings": {
                                    "value": {
                                      "enableAMA": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAMA'), parameters('extensionDependencyAgentConfig').enableAMA, true())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureMonitorAgentExtension"
                              ]
                            },
                            "vm_networkWatcherAgentExtension": {
                              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NetworkWatcherAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.NetworkWatcher"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_dependencyAgentExtension"
                              ]
                            },
                            "vm_desiredStateConfigurationExtension": {
                              "condition": "[parameters('extensionDSCConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DesiredStateConfiguration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Powershell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_networkWatcherAgentExtension"
                              ]
                            },
                            "vm_customScriptExtension": {
                              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "CustomScriptExtension"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "fileUris",
                                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                        }
                                      ]
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_desiredStateConfigurationExtension"
                              ]
                            },
                            "vm_azureDiskEncryptionExtension": {
                              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureDiskEncryption"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_customScriptExtension"
                              ]
                            },
                            "vm_nvidiaGpuDriverWindowsExtension": {
                              "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.HpcCompute"
                                  },
                                  "type": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureDiskEncryptionExtension"
                              ]
                            },
                            "vm_hostPoolRegistrationExtension": {
                              "condition": "[parameters('extensionHostPoolRegistration').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "HostPoolRegistration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.PowerShell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), createObject('value', parameters('extensionHostPoolRegistration').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionHostPoolRegistration').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionHostPoolRegistration').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
                                      "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
                                      "properties": {
                                        "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                                        "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                                        "aadJoin": true
                                      },
                                      "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
                                    }
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_nvidiaGpuDriverWindowsExtension"
                              ]
                            },
                            "vm_azureGuestConfigurationExtension": {
                              "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.GuestConfiguration"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionGuestConfigurationExtension').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), createObject('value', parameters('extensionGuestConfigurationExtension').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject('value', parameters('extensionGuestConfigurationExtension').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_hostPoolRegistrationExtension"
                              ]
                            },
                            "vm_backup": {
                              "condition": "[not(empty(parameters('backupVaultName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                  },
                                  "protectedItemType": {
                                    "value": "Microsoft.Compute/virtualMachines"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('backupVaultName')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "4311417160342913977"
                                    },
                                    "name": "Recovery Service Vaults Protection Container Protected Item",
                                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource."
                                      }
                                    },
                                    "protectionContainerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ],
                                      "metadata": {
                                        "description": "Required. The backup item type."
                                      }
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ID of the backup policy with which this item is backed up."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource to back up."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the protected item was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the protected item."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the protected item."
                                      },
                                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the VM."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the VM."
                              },
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the VM was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('vm', '2023-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('vm', '2023-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Linux virtual machine deployment to act as a jump box."
              }
            },
            {
              "condition": "[equals(parameters('vmJumpboxOSType'), 'windows')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('vm-windows-{0}', deployment().name), 64)]",
              "resourceGroup": "[variables('rgSpokeName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "vmName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
                  },
                  "bastionResourceId": {
                    "value": "[parameters('bastionResourceId')]"
                  },
                  "vmAdminUsername": {
                    "value": "[parameters('vmAdminUsername')]"
                  },
                  "vmAdminPassword": {
                    "value": "[parameters('vmAdminPassword')]"
                  },
                  "vmSize": {
                    "value": "[parameters('vmSize')]"
                  },
                  "vmZone": {
                    "value": "[parameters('vmZone')]"
                  },
                  "storageAccountType": {
                    "value": "[parameters('storageAccountType')]"
                  },
                  "vmVnetName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value]"
                  },
                  "vmSubnetName": {
                    "value": "[parameters('vmSubnetName')]"
                  },
                  "vmSubnetAddressPrefix": {
                    "value": "[parameters('vmJumpBoxSubnetAddressPrefix')]"
                  },
                  "vmNetworkInterfaceName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNic]"
                  },
                  "vmNetworkSecurityGroupName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBoxNsg]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "8661291685866182643"
                    }
                  },
                  "parameters": {
                    "vmName": {
                      "type": "string"
                    },
                    "vmSize": {
                      "type": "string"
                    },
                    "storageAccountType": {
                      "type": "string",
                      "defaultValue": "Standard_LRS"
                    },
                    "vmWindowsOSVersion": {
                      "type": "string",
                      "defaultValue": "2016-Datacenter"
                    },
                    "vmZone": {
                      "type": "int",
                      "defaultValue": 0
                    },
                    "vmVnetName": {
                      "type": "string"
                    },
                    "vmSubnetName": {
                      "type": "string"
                    },
                    "vmSubnetAddressPrefix": {
                      "type": "string"
                    },
                    "vmNetworkSecurityGroupName": {
                      "type": "string"
                    },
                    "vmNetworkInterfaceName": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    },
                    "bastionResourceId": {
                      "type": "string"
                    },
                    "vmAdminUsername": {
                      "type": "string"
                    },
                    "vmAdminPassword": {
                      "type": "securestring"
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deplotment telemetry."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName'))]",
                      "properties": {
                        "addressPrefix": "[parameters('vmSubnetAddressPrefix')]",
                        "networkSecurityGroup": {
                          "id": "[reference(resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment'), '2022-09-01').outputs.resourceId.value]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', 'vmNetworkSecurityDeployment')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Maintenance/maintenanceConfigurations",
                      "apiVersion": "2023-10-01-preview",
                      "name": "[format('dep-mc-{0}', parameters('vmName'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "extensionProperties": {
                          "InGuestPatchMode": "User"
                        },
                        "maintenanceScope": "InGuestPatch",
                        "maintenanceWindow": {
                          "startDateTime": "2024-06-16 00:00",
                          "duration": "03:55",
                          "timeZone": "W. Europe Standard Time",
                          "recurEvery": "1Day"
                        },
                        "visibility": "Custom",
                        "installPatches": {
                          "rebootSetting": "IfRequired",
                          "windowsParameters": {
                            "classificationsToInclude": [
                              "Critical",
                              "Security"
                            ]
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmNetworkSecurityDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmNetworkSecurityGroupName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "securityRules": "[if(not(empty(parameters('bastionResourceId'))), createObject('value', createArray(createObject('name', 'allow-bastion-inbound', 'properties', createObject('description', 'Allow inbound traffic from Bastion to the JumpBox', 'protocol', '*', 'sourceAddressPrefix', 'Bastion', 'sourcePortRange', '*', 'destinationAddressPrefix', '*', 'destinationPortRange', '*', 'access', 'Allow', 'priority', 100, 'direction', 'Inbound')))), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "8543584719514494080"
                            },
                            "name": "Network Security Groups",
                            "description": "This module deploys a Network security Group (NSG).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Network Security Group."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "securityRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                              }
                            },
                            "flushConnection": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the NSG resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "networkSecurityGroup": {
                              "type": "Microsoft.Network/networkSecurityGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "securityRules",
                                    "count": "[length(parameters('securityRules'))]",
                                    "input": {
                                      "name": "[parameters('securityRules')[copyIndex('securityRules')].name]",
                                      "properties": {
                                        "protocol": "[parameters('securityRules')[copyIndex('securityRules')].properties.protocol]",
                                        "access": "[parameters('securityRules')[copyIndex('securityRules')].properties.access]",
                                        "priority": "[parameters('securityRules')[copyIndex('securityRules')].properties.priority]",
                                        "direction": "[parameters('securityRules')[copyIndex('securityRules')].properties.direction]",
                                        "description": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'description'), parameters('securityRules')[copyIndex('securityRules')].properties.description, '')]",
                                        "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRange, '')]",
                                        "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourcePortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.sourcePortRanges, createArray())]",
                                        "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRange'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRange, '')]",
                                        "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationPortRanges'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationPortRanges, createArray())]",
                                        "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefix, '')]",
                                        "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefix, '')]",
                                        "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceAddressPrefixes, createArray())]",
                                        "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationAddressPrefixes, createArray())]",
                                        "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.sourceApplicationSecurityGroups, createArray())]",
                                        "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroups'), parameters('securityRules')[copyIndex('securityRules')].properties.destinationApplicationSecurityGroups, createArray())]"
                                      }
                                    }
                                  }
                                ],
                                "flushConnection": "[parameters('flushConnection')]"
                              }
                            },
                            "networkSecurityGroup_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_diagnosticSettings": {
                              "copy": {
                                "name": "networkSecurityGroup_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_roleAssignments": {
                              "copy": {
                                "name": "networkSecurityGroup_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            },
                            "networkSecurityGroup_securityRules": {
                              "copy": {
                                "name": "networkSecurityGroup_securityRules",
                                "count": "[length(parameters('securityRules'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-NetworkSecurityGroup-SecurityRule-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('securityRules')[copyIndex()].name]"
                                  },
                                  "networkSecurityGroupName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "protocol": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.protocol]"
                                  },
                                  "access": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.access]"
                                  },
                                  "priority": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.priority]"
                                  },
                                  "direction": {
                                    "value": "[parameters('securityRules')[copyIndex()].properties.direction]"
                                  },
                                  "description": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'description'), createObject('value', parameters('securityRules')[copyIndex()].properties.description), createObject('value', ''))]",
                                  "sourcePortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRange), createObject('value', ''))]",
                                  "sourcePortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourcePortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourcePortRanges), createObject('value', createArray()))]",
                                  "destinationPortRange": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRange'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRange), createObject('value', ''))]",
                                  "destinationPortRanges": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationPortRanges'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationPortRanges), createObject('value', createArray()))]",
                                  "sourceAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefix), createObject('value', ''))]",
                                  "destinationAddressPrefix": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefix'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefix), createObject('value', ''))]",
                                  "sourceAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceAddressPrefixes), createObject('value', createArray()))]",
                                  "destinationAddressPrefixes": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationAddressPrefixes'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationAddressPrefixes), createObject('value', createArray()))]",
                                  "sourceApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'sourceApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.sourceApplicationSecurityGroups), createObject('value', createArray()))]",
                                  "destinationApplicationSecurityGroups": "[if(contains(parameters('securityRules')[copyIndex()].properties, 'destinationApplicationSecurityGroups'), createObject('value', parameters('securityRules')[copyIndex()].properties.destinationApplicationSecurityGroups), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "17252857850318600622"
                                    },
                                    "name": "Network Security Group (NSG) Security Rules",
                                    "description": "This module deploys a Network Security Group (NSG) Security Rule.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the security rule."
                                      }
                                    },
                                    "networkSecurityGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent network security group to deploy the security rule into. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "access": {
                                      "type": "string",
                                      "defaultValue": "Deny",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "maxLength": 140,
                                      "metadata": {
                                        "description": "Optional. A description for this rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroups": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The application security group specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/networkSecurityGroups/securityRules",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('networkSecurityGroupName'), parameters('name'))]",
                                      "properties": {
                                        "access": "[parameters('access')]",
                                        "description": "[parameters('description')]",
                                        "destinationAddressPrefix": "[parameters('destinationAddressPrefix')]",
                                        "destinationAddressPrefixes": "[parameters('destinationAddressPrefixes')]",
                                        "destinationApplicationSecurityGroups": "[parameters('destinationApplicationSecurityGroups')]",
                                        "destinationPortRange": "[parameters('destinationPortRange')]",
                                        "destinationPortRanges": "[parameters('destinationPortRanges')]",
                                        "direction": "[parameters('direction')]",
                                        "priority": "[parameters('priority')]",
                                        "protocol": "[parameters('protocol')]",
                                        "sourceAddressPrefix": "[parameters('sourceAddressPrefix')]",
                                        "sourceAddressPrefixes": "[parameters('sourceAddressPrefixes')]",
                                        "sourceApplicationSecurityGroups": "[parameters('sourceApplicationSecurityGroups')]",
                                        "sourcePortRange": "[parameters('sourcePortRange')]",
                                        "sourcePortRanges": "[parameters('sourcePortRanges')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the security rule was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the security rule."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups/securityRules', parameters('networkSecurityGroupName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the security rule."
                                      },
                                      "value": "[parameters('name')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "networkSecurityGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the network security group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the network security group."
                              },
                              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the network security group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vmDeployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('vmName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "osType": {
                            "value": "Windows"
                          },
                          "computerName": {
                            "value": "[parameters('vmName')]"
                          },
                          "adminUsername": {
                            "value": "[parameters('vmAdminUsername')]"
                          },
                          "adminPassword": {
                            "value": "[parameters('vmAdminPassword')]"
                          },
                          "encryptionAtHost": {
                            "value": false
                          },
                          "enableAutomaticUpdates": {
                            "value": true
                          },
                          "patchMode": {
                            "value": "AutomaticByPlatform"
                          },
                          "bypassPlatformSafetyChecksOnUserSchedule": {
                            "value": true
                          },
                          "maintenanceConfigurationResourceId": {
                            "value": "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]"
                          },
                          "nicConfigurations": {
                            "value": [
                              {
                                "name": "[parameters('vmNetworkInterfaceName')]",
                                "enableAcceleratedNetworking": false,
                                "ipConfigurations": [
                                  {
                                    "name": "ipconfig1",
                                    "privateIPAllocationMethod": "Dynamic",
                                    "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                                  }
                                ]
                              }
                            ]
                          },
                          "osDisk": {
                            "value": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage",
                              "deleteOption": "Delete",
                              "diskSizeGB": 128,
                              "managedDisk": {
                                "storageAccountType": "[parameters('storageAccountType')]"
                              }
                            }
                          },
                          "zone": {
                            "value": "[parameters('vmZone')]"
                          },
                          "vmSize": {
                            "value": "[parameters('vmSize')]"
                          },
                          "imageReference": {
                            "value": {
                              "publisher": "MicrosoftWindowsServer",
                              "offer": "WindowsServer",
                              "sku": "[parameters('vmWindowsOSVersion')]",
                              "version": "latest"
                            }
                          },
                          "extensionMonitoringAgentConfig": {
                            "value": {
                              "enabled": true,
                              "tags": "[parameters('tags')]",
                              "monitoringWorkspaceResourceId": "[parameters('logAnalyticsWorkspaceResourceId')]"
                            }
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "7195052428088092384"
                            },
                            "name": "Virtual Machines",
                            "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "osDiskType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The disk name."
                                  }
                                },
                                "diskSizeGB": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                  }
                                },
                                "createOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Attach",
                                    "Empty",
                                    "FromImage"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies how the virtual machine should be created."
                                  }
                                },
                                "deleteOption": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Delete",
                                    "Detach"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                  }
                                },
                                "caching": {
                                  "type": "string",
                                  "allowedValues": [
                                    "None",
                                    "ReadOnly",
                                    "ReadWrite"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the caching requirements."
                                  }
                                },
                                "managedDisk": {
                                  "type": "object",
                                  "properties": {
                                    "storageAccountType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "PremiumV2_LRS",
                                        "Premium_LRS",
                                        "Premium_ZRS",
                                        "StandardSSD_LRS",
                                        "StandardSSD_ZRS",
                                        "Standard_LRS",
                                        "UltraSSD_LRS"
                                      ],
                                      "metadata": {
                                        "description": "Required. Specifies the storage account type for the managed disk."
                                      }
                                    },
                                    "diskEncryptionSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The managed disk parameters."
                                  }
                                }
                              }
                            },
                            "dataDisksType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The disk name."
                                    }
                                  },
                                  "lun": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the logical unit number of the data disk."
                                    }
                                  },
                                  "diskSizeGB": {
                                    "type": "int",
                                    "metadata": {
                                      "description": "Required. Specifies the size of an empty data disk in gigabytes."
                                    }
                                  },
                                  "createOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Attach",
                                      "Empty",
                                      "FromImage"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies how the virtual machine should be created."
                                    }
                                  },
                                  "deleteOption": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Delete",
                                      "Detach"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                    }
                                  },
                                  "caching": {
                                    "type": "string",
                                    "allowedValues": [
                                      "None",
                                      "ReadOnly",
                                      "ReadWrite"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specifies the caching requirements."
                                    }
                                  },
                                  "managedDisk": {
                                    "type": "object",
                                    "properties": {
                                      "storageAccountType": {
                                        "type": "string",
                                        "allowedValues": [
                                          "PremiumV2_LRS",
                                          "Premium_LRS",
                                          "Premium_ZRS",
                                          "StandardSSD_LRS",
                                          "StandardSSD_ZRS",
                                          "Standard_LRS",
                                          "UltraSSD_LRS"
                                        ],
                                        "metadata": {
                                          "description": "Required. Specifies the storage account type for the managed disk."
                                        }
                                      },
                                      "diskEncryptionSetResourceId": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. The managed disk parameters."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
                              }
                            },
                            "computerName": {
                              "type": "string",
                              "defaultValue": "[parameters('name')]",
                              "metadata": {
                                "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
                              }
                            },
                            "vmSize": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Specifies the size for the VMs."
                              }
                            },
                            "encryptionAtHost": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "securityType": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the SecurityType of the virtual machine. It is set as TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "secureBootEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "vTpmEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                              }
                            },
                            "imageReference": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                              }
                            },
                            "plan": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                              }
                            },
                            "osDisk": {
                              "$ref": "#/definitions/osDiskType",
                              "metadata": {
                                "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "dataDisks": {
                              "$ref": "#/definitions/dataDisksType",
                              "metadata": {
                                "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                              }
                            },
                            "ultraSSDEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                              }
                            },
                            "adminUsername": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Administrator username."
                              }
                            },
                            "adminPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                              }
                            },
                            "customData": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                              }
                            },
                            "certificatesToBeInstalled": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                              }
                            },
                            "priority": {
                              "type": "string",
                              "defaultValue": "Regular",
                              "allowedValues": [
                                "Regular",
                                "Low",
                                "Spot"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the priority for the virtual machine."
                              }
                            },
                            "enableEvictionPolicy": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies the eviction policy for the low priority virtual machine. Will result in 'Deallocate' eviction policy."
                              }
                            },
                            "maxPriceForLowPriorityVm": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                              }
                            },
                            "dedicatedHostId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                              }
                            },
                            "licenseType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "RHEL_BYOS",
                                "SLES_BYOS",
                                "Windows_Client",
                                "Windows_Server",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
                              }
                            },
                            "publicKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                              }
                            },
                            "bootDiagnostics": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                              }
                            },
                            "bootDiagnosticStorageAccountName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                              }
                            },
                            "bootDiagnosticStorageAccountUri": {
                              "type": "string",
                              "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                              "metadata": {
                                "description": "Optional. Storage account boot diagnostic base URI."
                              }
                            },
                            "proximityPlacementGroupResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a proximity placement group."
                              }
                            },
                            "virtualMachineScaleSetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
                              }
                            },
                            "availabilitySetResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                              }
                            },
                            "galleryApplications": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
                              }
                            },
                            "zone": {
                              "type": "int",
                              "allowedValues": [
                                0,
                                1,
                                2,
                                3
                              ],
                              "metadata": {
                                "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                              }
                            },
                            "nicConfigurations": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Configures NICs and PIPs."
                              }
                            },
                            "backupVaultName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Recovery service vault name to add VMs to backup."
                              }
                            },
                            "backupVaultResourceGroup": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().name]",
                              "metadata": {
                                "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                              }
                            },
                            "backupPolicyName": {
                              "type": "string",
                              "defaultValue": "DefaultPolicy",
                              "metadata": {
                                "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                              }
                            },
                            "autoShutdownConfig": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for auto-shutdown."
                              }
                            },
                            "maintenanceConfigurationResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource Id of a maintenance configuration for this VM."
                              }
                            },
                            "allowExtensionOperations": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                              }
                            },
                            "extensionDomainJoinPassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                              }
                            },
                            "extensionDomainJoinConfig": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAadJoinConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
                              }
                            },
                            "extensionAntiMalwareConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionMonitoringAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionDependencyAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNetworkWatcherAgentConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionAzureDiskEncryptionConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                              }
                            },
                            "extensionDSCConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionCustomScriptConfig": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false,
                                "fileData": []
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionNvidiaGpuDriverWindows": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
                              }
                            },
                            "extensionHostPoolRegistration": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "extensionGuestConfigurationExtension": {
                              "type": "object",
                              "defaultValue": {
                                "enabled": false
                              },
                              "metadata": {
                                "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                              }
                            },
                            "guestConfiguration": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
                              }
                            },
                            "extensionCustomScriptProtectedSetting": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "extensionGuestConfigurationExtensionProtectedSettings": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. An object that contains the extension specific protected settings."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "baseTime": {
                              "type": "string",
                              "defaultValue": "[utcNow('u')]",
                              "metadata": {
                                "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                              }
                            },
                            "sasTokenValidityLength": {
                              "type": "string",
                              "defaultValue": "PT8H",
                              "metadata": {
                                "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                              }
                            },
                            "osType": {
                              "type": "string",
                              "allowedValues": [
                                "Windows",
                                "Linux"
                              ],
                              "metadata": {
                                "description": "Required. The chosen OS type."
                              }
                            },
                            "disablePasswordAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Specifies whether password authentication should be disabled."
                              }
                            },
                            "provisionVMAgent": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                              }
                            },
                            "enableAutomaticUpdates": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                              }
                            },
                            "patchMode": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "AutomaticByOS",
                                "Manual",
                                "ImageDefault",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                              }
                            },
                            "bypassPlatformSafetyChecksOnUserSchedule": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enables customer to schedule patching without accidental upgrades."
                              }
                            },
                            "rebootSetting": {
                              "type": "string",
                              "defaultValue": "IfRequired",
                              "allowedValues": [
                                "Always",
                                "IfRequired",
                                "Never",
                                "Unknown"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
                              }
                            },
                            "patchAssessmentMode": {
                              "type": "string",
                              "defaultValue": "ImageDefault",
                              "allowedValues": [
                                "AutomaticByPlatform",
                                "ImageDefault"
                              ],
                              "metadata": {
                                "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                              }
                            },
                            "timeZone": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                              }
                            },
                            "additionalUnattendContent": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
                              }
                            },
                            "winRM": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell. - WinRMConfiguration object."
                              }
                            },
                            "configurationProfile": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "publicKeysFormatted",
                                "count": "[length(parameters('publicKeys'))]",
                                "input": {
                                  "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                  "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                }
                              }
                            ],
                            "linuxConfiguration": {
                              "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                              "ssh": {
                                "publicKeys": "[variables('publicKeysFormatted')]"
                              },
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
                            },
                            "windowsConfiguration": {
                              "provisionVMAgent": "[parameters('provisionVMAgent')]",
                              "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                              "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
                              "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                              "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), parameters('additionalUnattendContent'))]",
                              "winRM": "[if(not(empty(parameters('winRM'))), createObject('listeners', parameters('winRM')), null())]"
                            },
                            "accountSasProperties": {
                              "signedServices": "b",
                              "signedPermission": "r",
                              "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                              "signedResourceTypes": "o",
                              "signedProtocol": "https"
                            },
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                              "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                              "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                              "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                              "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                              "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                              "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                              "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                              "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                              "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                              "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                              "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                              "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "vm": {
                              "type": "Microsoft.Compute/virtualMachines",
                              "apiVersion": "2023-09-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
                              "plan": "[if(not(empty(parameters('plan'))), parameters('plan'), null())]",
                              "properties": {
                                "hardwareProfile": {
                                  "vmSize": "[parameters('vmSize')]"
                                },
                                "securityProfile": {
                                  "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                  "securityType": "[parameters('securityType')]",
                                  "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                },
                                "storageProfile": {
                                  "copy": [
                                    {
                                      "name": "dataDisks",
                                      "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
                                      "input": {
                                        "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                                        "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))]",
                                        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].diskSizeGB]",
                                        "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty')]",
                                        "deleteOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete')]",
                                        "caching": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly')]",
                                        "managedDisk": {
                                          "storageAccountType": "[coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.storageAccountType]",
                                          "diskEncryptionSet": {
                                            "id": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSetResourceId')]"
                                          }
                                        }
                                      }
                                    }
                                  ],
                                  "imageReference": "[parameters('imageReference')]",
                                  "osDisk": {
                                    "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
                                    "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                                    "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                                    "diskSizeGB": "[parameters('osDisk').diskSizeGB]",
                                    "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                                    "managedDisk": {
                                      "storageAccountType": "[parameters('osDisk').managedDisk.storageAccountType]",
                                      "diskEncryptionSet": {
                                        "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
                                      }
                                    }
                                  }
                                },
                                "additionalCapabilities": {
                                  "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]"
                                },
                                "osProfile": {
                                  "computerName": "[parameters('computerName')]",
                                  "adminUsername": "[parameters('adminUsername')]",
                                  "adminPassword": "[parameters('adminPassword')]",
                                  "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                  "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                  "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                  "secrets": "[parameters('certificatesToBeInstalled')]",
                                  "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                },
                                "networkProfile": {
                                  "copy": [
                                    {
                                      "name": "networkInterfaces",
                                      "count": "[length(parameters('nicConfigurations'))]",
                                      "input": {
                                        "properties": {
                                          "deleteOption": "[if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].deleteOption, 'Delete')]",
                                          "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                        },
                                        "id": "[resourceId('Microsoft.Network/networkInterfaces', if(contains(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].name, format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex('networkInterfaces')].nicSuffix)))]"
                                      }
                                    }
                                  ]
                                },
                                "diagnosticsProfile": {
                                  "bootDiagnostics": {
                                    "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                                    "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                  }
                                },
                                "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
                                "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                                "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                                "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
                                "priority": "[parameters('priority')]",
                                "evictionPolicy": "[if(parameters('enableEvictionPolicy'), 'Deallocate', null())]",
                                "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
                                "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                                "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]"
                              },
                              "dependsOn": [
                                "vm_nic"
                              ]
                            },
                            "vm_configurationAssignment": {
                              "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
                              "type": "Microsoft.Maintenance/configurationAssignments",
                              "apiVersion": "2023-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[format('{0}assignment', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
                                "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_configurationProfileAssignment": {
                              "condition": "[not(empty(parameters('configurationProfile')))]",
                              "type": "Microsoft.Automanage/configurationProfileAssignments",
                              "apiVersion": "2022-05-04",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "default",
                              "properties": {
                                "configurationProfile": "[parameters('configurationProfile')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_autoShutdownConfiguration": {
                              "condition": "[not(empty(parameters('autoShutdownConfig')))]",
                              "type": "Microsoft.DevTestLab/schedules",
                              "apiVersion": "2018-09-15",
                              "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": {
                                "status": "[if(contains(parameters('autoShutdownConfig'), 'status'), parameters('autoShutdownConfig').status, 'Disabled')]",
                                "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                "taskType": "ComputeVmShutdownTask",
                                "dailyRecurrence": {
                                  "time": "[if(contains(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), parameters('autoShutdownConfig').dailyRecurrenceTime, '19:00')]"
                                },
                                "timeZoneId": "[if(contains(parameters('autoShutdownConfig'), 'timeZone'), parameters('autoShutdownConfig').timeZone, 'UTC')]",
                                "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), createObject('status', if(contains(parameters('autoShutdownConfig'), 'notificationStatus'), parameters('autoShutdownConfig').notificationStatus, 'Disabled'), 'emailRecipient', if(contains(parameters('autoShutdownConfig'), 'notificationEmail'), parameters('autoShutdownConfig').notificationEmail, ''), 'notificationLocale', if(contains(parameters('autoShutdownConfig'), 'notificationLocale'), parameters('autoShutdownConfig').notificationLocale, 'en'), 'webhookUrl', if(contains(parameters('autoShutdownConfig'), 'notificationWebhookUrl'), parameters('autoShutdownConfig').notificationWebhookUrl, ''), 'timeInMinutes', if(contains(parameters('autoShutdownConfig'), 'notificationTimeInMinutes'), parameters('autoShutdownConfig').notificationTimeInMinutes, 30)), null())]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_logAnalyticsWorkspace": {
                              "condition": "[not(empty(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "subscriptionId": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2]]",
                              "resourceGroup": "[split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]]",
                              "name": "[last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))]"
                            },
                            "AzureWindowsBaseline": {
                              "condition": "[not(empty(parameters('guestConfiguration')))]",
                              "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
                              "apiVersion": "2020-06-25",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "AzureWindowsBaseline",
                              "location": "[parameters('location')]",
                              "properties": {
                                "guestConfiguration": "[parameters('guestConfiguration')]"
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            },
                            "vm_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_roleAssignments": {
                              "copy": {
                                "name": "vm_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_nic": {
                              "copy": {
                                "name": "vm_nic",
                                "count": "[length(parameters('nicConfigurations'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "networkInterfaceName": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'name'), createObject('value', parameters('nicConfigurations')[copyIndex()].name), createObject('value', format('{0}{1}', parameters('name'), parameters('nicConfigurations')[copyIndex()].nicSuffix)))]",
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "enableIPForwarding": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableIPForwarding), createObject('value', false()))]",
                                  "enableAcceleratedNetworking": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), createObject('value', parameters('nicConfigurations')[copyIndex()].enableAcceleratedNetworking), createObject('value', true()))]",
                                  "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(parameters('nicConfigurations')[copyIndex()].dnsServers)), createObject('value', parameters('nicConfigurations')[copyIndex()].dnsServers), createObject('value', createArray())), createObject('value', createArray()))]",
                                  "networkSecurityGroupResourceId": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), createObject('value', parameters('nicConfigurations')[copyIndex()].networkSecurityGroupResourceId), createObject('value', ''))]",
                                  "ipConfigurations": {
                                    "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "6185170122493883924"
                                    }
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "networkInterfaceName": {
                                      "type": "string"
                                    },
                                    "virtualMachineName": {
                                      "type": "string"
                                    },
                                    "ipConfigurations": {
                                      "type": "array"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableIPForwarding": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "enableAcceleratedNetworking": {
                                      "type": "bool",
                                      "defaultValue": false
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "defaultValue": []
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the Network Interface."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "networkInterface_publicIPAddresses": {
                                      "copy": {
                                        "name": "networkInterface_publicIPAddresses",
                                        "count": "[length(parameters('ipConfigurations'))]"
                                      },
                                      "condition": "[contains(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'name'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.name), createObject('value', format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIpNameSuffix)))]",
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "idleTimeoutInMinutes": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'idleTimeoutInMinutes')]"
                                          },
                                          "ddosSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'ddosSettings')]"
                                          },
                                          "dnsSettings": {
                                            "value": "[tryGet(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'dnsSettings')]"
                                          },
                                          "publicIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAddressVersion'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAddressVersion), createObject('value', 'IPv4'))]",
                                          "publicIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPAllocationMethod'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPAllocationMethod), createObject('value', 'Static'))]",
                                          "publicIpPrefixResourceId": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'publicIPPrefixResourceId'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.publicIPPrefixResourceId), createObject('value', ''))]",
                                          "roleAssignments": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'roleAssignments'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.roleAssignments), createObject('value', createArray()))]",
                                          "skuName": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuName'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuName), createObject('value', 'Standard'))]",
                                          "skuTier": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'skuTier'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.skuTier), createObject('value', 'Regional'))]",
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "zones": "[if(contains(parameters('ipConfigurations')[copyIndex()].pipConfiguration, 'zones'), createObject('value', parameters('ipConfigurations')[copyIndex()].pipConfiguration.zones), createObject('value', createArray(1, 2, 3)))]",
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.27.1.19265",
                                              "templateHash": "10356333973104369631"
                                            },
                                            "name": "Public IP Addresses",
                                            "description": "This module deploys a Public IP Address.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "",
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              }
                                            },
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Public IP Address."
                                              }
                                            },
                                            "publicIpPrefixResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                              }
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string",
                                              "defaultValue": "Static",
                                              "allowedValues": [
                                                "Dynamic",
                                                "Static"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The public IP address allocation method."
                                              }
                                            },
                                            "zones": {
                                              "type": "array",
                                              "items": {
                                                "type": "int"
                                              },
                                              "defaultValue": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "allowedValues": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "metadata": {
                                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                              }
                                            },
                                            "publicIPAddressVersion": {
                                              "type": "string",
                                              "defaultValue": "IPv4",
                                              "allowedValues": [
                                                "IPv4",
                                                "IPv6"
                                              ],
                                              "metadata": {
                                                "description": "Optional. IP address version."
                                              }
                                            },
                                            "dnsSettings": {
                                              "$ref": "#/definitions/dnsSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DNS settings of the public IP address."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "skuName": {
                                              "type": "string",
                                              "defaultValue": "Standard",
                                              "allowedValues": [
                                                "Basic",
                                                "Standard"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Name of a public IP address SKU."
                                              }
                                            },
                                            "skuTier": {
                                              "type": "string",
                                              "defaultValue": "Regional",
                                              "allowedValues": [
                                                "Global",
                                                "Regional"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Tier of a public IP address SKU."
                                              }
                                            },
                                            "ddosSettings": {
                                              "$ref": "#/definitions/ddosSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "idleTimeoutInMinutes": {
                                              "type": "int",
                                              "defaultValue": 4,
                                              "metadata": {
                                                "description": "Optional. The idle timeout of the public IP address."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "publicIpAddress": {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2023-09-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                              "properties": {
                                                "ddosSettings": "[parameters('ddosSettings')]",
                                                "dnsSettings": "[parameters('dnsSettings')]",
                                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                "ipTags": null
                                              }
                                            },
                                            "publicIpAddress_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_roleAssignments": {
                                              "copy": {
                                                "name": "publicIpAddress_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_diagnosticSettings": {
                                              "copy": {
                                                "name": "publicIpAddress_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the public IP address was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              },
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                            },
                                            "ipAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The public IP address of the public IP address resource."
                                              },
                                              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('publicIpAddress', '2023-09-01', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkInterface": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-NetworkInterface', deployment().name)]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('networkInterfaceName')]"
                                          },
                                          "ipConfigurations": {
                                            "copy": [
                                              {
                                                "name": "value",
                                                "count": "[length(parameters('ipConfigurations'))]",
                                                "input": "[createObject('name', if(not(empty(parameters('ipConfigurations')[copyIndex('value')].name)), parameters('ipConfigurations')[copyIndex('value')].name, null()), 'primary', equals(copyIndex('value'), 0), 'privateIPAllocationMethod', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('value')].privateIPAllocationMethod, null()), null()), 'privateIPAddress', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('value')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('value')].privateIPAddress, null()), null()), 'publicIPAddressResourceId', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), resourceId('Microsoft.Network/publicIPAddresses', if(contains(parameters('ipConfigurations')[copyIndex('value')].pipConfiguration, 'name'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.name, format('{0}{1}', parameters('virtualMachineName'), parameters('ipConfigurations')[copyIndex('value')].pipConfiguration.publicIpNameSuffix))), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerBackendAddressPools, null()), 'applicationSecurityGroups', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('value')].applicationSecurityGroups, null()), 'applicationGatewayBackendAddressPools', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('value')].applicationGatewayBackendAddressPools, null()), 'gatewayLoadBalancer', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('value')].gatewayLoadBalancer, null()), 'loadBalancerInboundNatRules', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('value')].loadBalancerInboundNatRules, null()), 'privateIPAddressVersion', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('value')].privateIPAddressVersion, null()), 'virtualNetworkTaps', if(contains(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('value')].virtualNetworkTaps, null()))]"
                                              }
                                            ]
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[parameters('diagnosticSettings')]"
                                          },
                                          "dnsServers": "[if(not(empty(parameters('dnsServers'))), createObject('value', parameters('dnsServers')), createObject('value', createArray()))]",
                                          "enableAcceleratedNetworking": {
                                            "value": "[parameters('enableAcceleratedNetworking')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[parameters('enableTelemetry')]"
                                          },
                                          "enableIPForwarding": {
                                            "value": "[parameters('enableIPForwarding')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                          "roleAssignments": "[if(not(empty(parameters('roleAssignments'))), createObject('value', parameters('roleAssignments')), createObject('value', createArray()))]"
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "1612343535299711142"
                                            },
                                            "name": "Network Interface",
                                            "description": "This module deploys a Network Interface.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the network interface."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource tags."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "enableIPForwarding": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                              }
                                            },
                                            "enableAcceleratedNetworking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If the network interface is accelerated networking enabled."
                                              }
                                            },
                                            "dnsServers": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                                              }
                                            },
                                            "auxiliaryMode": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Floating",
                                                "MaxConnections",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "auxiliarySku": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "A1",
                                                "A2",
                                                "A4",
                                                "A8",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                              }
                                            },
                                            "disableTcpStateTracking": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                              }
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "Required. A list of IPConfigurations of the network interface."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.2.4', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkInterface": {
                                              "type": "Microsoft.Network/networkInterfaces",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "ipConfigurations",
                                                    "count": "[length(parameters('ipConfigurations'))]",
                                                    "input": {
                                                      "name": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].name, format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                                      "properties": {
                                                        "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                        "privateIPAllocationMethod": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAllocationMethod, null()), null())]",
                                                        "privateIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress'), if(not(empty(parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress)), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddress, null()), null())]",
                                                        "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId, null())), createObject('id', parameters('ipConfigurations')[copyIndex('ipConfigurations')].publicIPAddressResourceId), null()), null())]",
                                                        "subnet": {
                                                          "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                        },
                                                        "loadBalancerBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerBackendAddressPools, null())]",
                                                        "applicationSecurityGroups": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationSecurityGroups, null())]",
                                                        "applicationGatewayBackendAddressPools": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].applicationGatewayBackendAddressPools, null())]",
                                                        "gatewayLoadBalancer": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].gatewayLoadBalancer, null())]",
                                                        "loadBalancerInboundNatRules": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].loadBalancerInboundNatRules, null())]",
                                                        "privateIPAddressVersion": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].privateIPAddressVersion, null())]",
                                                        "virtualNetworkTaps": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps'), parameters('ipConfigurations')[copyIndex('ipConfigurations')].virtualNetworkTaps, null())]"
                                                      }
                                                    }
                                                  }
                                                ],
                                                "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                                "auxiliarySku": "[parameters('auxiliarySku')]",
                                                "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                                "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                                "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                                "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                              }
                                            },
                                            "networkInterface_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_diagnosticSettings": {
                                              "copy": {
                                                "name": "networkInterface_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            },
                                            "networkInterface_roleAssignments": {
                                              "copy": {
                                                "name": "networkInterface_roleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                              "name": "[guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                              "properties": {
                                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "networkInterface"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed resource."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed resource."
                                              },
                                              "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed resource."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('networkInterface', '2023-04-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "networkInterface_publicIPAddresses"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "vm_aadJoinExtension": {
                              "condition": "[parameters('extensionAadJoinConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AADLogin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.ActiveDirectory"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAadJoinConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAadJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAadJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionAadJoinConfig'), 'settings'), createObject('value', parameters('extensionAadJoinConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm"
                              ]
                            },
                            "vm_domainJoinExtension": {
                              "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DomainJoin"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Compute"
                                  },
                                  "type": {
                                    "value": "JsonADDomainExtension"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDomainJoinConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDomainJoinConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDomainJoinConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionDomainJoinConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "Password": "[parameters('extensionDomainJoinPassword')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_aadJoinExtension"
                              ]
                            },
                            "vm_microsoftAntiMalwareExtension": {
                              "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "MicrosoftAntiMalware"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": {
                                    "value": "IaaSAntimalware"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAntiMalwareConfig').typeHandlerVersion), createObject('value', '1.3'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAntiMalwareConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAntiMalwareConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": "[parameters('extensionAntiMalwareConfig').settings]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_domainJoinExtension"
                              ]
                            },
                            "vm_azureMonitorAgentExtension": {
                              "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureMonitorAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitor"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
                                  "typeHandlerVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
                                  },
                                  "autoUpgradeMinorVersion": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                  },
                                  "enableAutomaticUpgrade": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                  },
                                  "settings": {
                                    "value": {
                                      "workspaceId": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), reference('vm_logAnalyticsWorkspace').customerId, '')]",
                                      "GCS_AUTO_CONFIG": "[if(equals(parameters('osType'), 'Linux'), true(), null())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": {
                                      "workspaceKey": "[if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '//'), '/')[2], split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, '////'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(if(not(empty(coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'monitoringWorkspaceId'), ''))), parameters('extensionMonitoringAgentConfig').monitoringWorkspaceId, 'law'), '/'))), '2021-06-01').primarySharedKey, '')]"
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_logAnalyticsWorkspace",
                                "vm_microsoftAntiMalwareExtension"
                              ]
                            },
                            "vm_dependencyAgentExtension": {
                              "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DependencyAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDependencyAgentConfig').typeHandlerVersion), createObject('value', '9.10'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDependencyAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDependencyAgentConfig').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "settings": {
                                    "value": {
                                      "enableAMA": "[if(contains(parameters('extensionDependencyAgentConfig'), 'enableAMA'), parameters('extensionDependencyAgentConfig').enableAMA, true())]"
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureMonitorAgentExtension"
                              ]
                            },
                            "vm_networkWatcherAgentExtension": {
                              "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NetworkWatcherAgent"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.NetworkWatcher"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNetworkWatcherAgentConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_dependencyAgentExtension"
                              ]
                            },
                            "vm_desiredStateConfigurationExtension": {
                              "condition": "[parameters('extensionDSCConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "DesiredStateConfiguration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Powershell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionDSCConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionDSCConfig').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionDSCConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionDSCConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": "[if(contains(parameters('extensionDSCConfig'), 'settings'), createObject('value', parameters('extensionDSCConfig').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": "[if(contains(parameters('extensionDSCConfig'), 'protectedSettings'), createObject('value', parameters('extensionDSCConfig').protectedSettings), createObject('value', createObject()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_networkWatcherAgentExtension"
                              ]
                            },
                            "vm_customScriptExtension": {
                              "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "CustomScriptExtension"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionCustomScriptConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.10'), createObject('value', '2.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionCustomScriptConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionCustomScriptConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "copy": [
                                        {
                                          "name": "fileUris",
                                          "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                          "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                        }
                                      ]
                                    }
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_desiredStateConfigurationExtension"
                              ]
                            },
                            "vm_azureDiskEncryptionExtension": {
                              "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "AzureDiskEncryption"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.Azure.Security"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '2.2'), createObject('value', '1.1')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), createObject('value', parameters('extensionAzureDiskEncryptionConfig').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
                                  },
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_customScriptExtension"
                              ]
                            },
                            "vm_nvidiaGpuDriverWindowsExtension": {
                              "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.HpcCompute"
                                  },
                                  "type": {
                                    "value": "NvidiaGpuDriverWindows"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').typeHandlerVersion), createObject('value', '1.4'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionNvidiaGpuDriverWindows').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureDiskEncryptionExtension"
                              ]
                            },
                            "vm_hostPoolRegistrationExtension": {
                              "condition": "[parameters('extensionHostPoolRegistration').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "HostPoolRegistration"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.PowerShell"
                                  },
                                  "type": {
                                    "value": "DSC"
                                  },
                                  "typeHandlerVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), createObject('value', parameters('extensionHostPoolRegistration').typeHandlerVersion), createObject('value', '2.77'))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionHostPoolRegistration').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionHostPoolRegistration').enableAutomaticUpgrade), createObject('value', false()))]",
                                  "settings": {
                                    "value": {
                                      "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
                                      "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
                                      "properties": {
                                        "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                                        "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                                        "aadJoin": true
                                      },
                                      "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
                                    }
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_nvidiaGpuDriverWindowsExtension"
                              ]
                            },
                            "vm_azureGuestConfigurationExtension": {
                              "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualMachineName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "publisher": {
                                    "value": "Microsoft.GuestConfiguration"
                                  },
                                  "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
                                  "typeHandlerVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').typeHandlerVersion), if(equals(parameters('osType'), 'Windows'), createObject('value', '1.0'), createObject('value', '1.0')))]",
                                  "autoUpgradeMinorVersion": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), createObject('value', parameters('extensionGuestConfigurationExtension').autoUpgradeMinorVersion), createObject('value', true()))]",
                                  "enableAutomaticUpgrade": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), createObject('value', parameters('extensionGuestConfigurationExtension').enableAutomaticUpgrade), createObject('value', true()))]",
                                  "forceUpdateTag": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), createObject('value', parameters('extensionGuestConfigurationExtension').forceUpdateTag), createObject('value', '1.0'))]",
                                  "settings": "[if(contains(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject('value', parameters('extensionGuestConfigurationExtension').settings), createObject('value', createObject()))]",
                                  "supressFailures": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
                                  },
                                  "protectedSettings": {
                                    "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "15287507275706455668"
                                    },
                                    "name": "Virtual Machine Extensions",
                                    "description": "This module deploys a Virtual Machine Extension.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "virtualMachineName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine extension."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. The location the extension is deployed to."
                                      }
                                    },
                                    "publisher": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the extension handler publisher."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                      }
                                    },
                                    "typeHandlerVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the version of the script handler."
                                      }
                                    },
                                    "autoUpgradeMinorVersion": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                      }
                                    },
                                    "forceUpdateTag": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                      }
                                    },
                                    "settings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific settings."
                                      }
                                    },
                                    "protectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Any object that contains the extension specific protected settings."
                                      }
                                    },
                                    "supressFailures": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                      }
                                    },
                                    "enableAutomaticUpgrade": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "virtualMachine": {
                                      "existing": true,
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2022-11-01",
                                      "name": "[parameters('virtualMachineName')]"
                                    },
                                    "extension": {
                                      "type": "Microsoft.Compute/virtualMachines/extensions",
                                      "apiVersion": "2022-11-01",
                                      "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "publisher": "[parameters('publisher')]",
                                        "type": "[parameters('type')]",
                                        "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                        "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                        "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                        "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                        "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                        "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                        "suppressFailures": "[parameters('supressFailures')]"
                                      },
                                      "dependsOn": [
                                        "virtualMachine"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the extension."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the extension."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the extension was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('extension', '2022-11-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_hostPoolRegistrationExtension"
                              ]
                            },
                            "vm_backup": {
                              "condition": "[not(empty(parameters('backupVaultName')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                              "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "policyId": {
                                    "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                  },
                                  "protectedItemType": {
                                    "value": "Microsoft.Compute/virtualMachines"
                                  },
                                  "protectionContainerName": {
                                    "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                  },
                                  "recoveryVaultName": {
                                    "value": "[parameters('backupVaultName')]"
                                  },
                                  "sourceResourceId": {
                                    "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "4311417160342913977"
                                    },
                                    "name": "Recovery Service Vaults Protection Container Protected Item",
                                    "description": "This module deploys a Recovery Services Vault Protection Container Protected Item.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the resource."
                                      }
                                    },
                                    "protectionContainerName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "recoveryVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "protectedItemType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "AzureFileShareProtectedItem",
                                        "AzureVmWorkloadSAPAseDatabase",
                                        "AzureVmWorkloadSAPHanaDatabase",
                                        "AzureVmWorkloadSQLDatabase",
                                        "DPMProtectedItem",
                                        "GenericProtectedItem",
                                        "MabFileFolderProtectedItem",
                                        "Microsoft.ClassicCompute/virtualMachines",
                                        "Microsoft.Compute/virtualMachines",
                                        "Microsoft.Sql/servers/databases"
                                      ],
                                      "metadata": {
                                        "description": "Required. The backup item type."
                                      }
                                    },
                                    "policyId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. ID of the backup policy with which this item is backed up."
                                      }
                                    },
                                    "sourceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the resource to back up."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "protectedItemType": "[parameters('protectedItemType')]",
                                        "policyId": "[parameters('policyId')]",
                                        "sourceResourceId": "[parameters('sourceResourceId')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Resource Group the protected item was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the protected item."
                                      },
                                      "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the protected item."
                                      },
                                      "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "vm",
                                "vm_azureGuestConfigurationExtension"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the VM."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the VM."
                              },
                              "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the VM was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('vm', '2023-09-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('vm', '2023-09-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', format('dep-mc-{0}', parameters('vmName')))]",
                        "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[0], split(format('{0}/{1}', parameters('vmVnetName'), parameters('vmSubnetName')), '/')[1])]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64))]",
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "An optional Windows virtual machine deployment to act as a jump box."
              }
            }
          ],
          "outputs": {
            "spokeResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke resource group."
              },
              "value": "[take(format('rg-{0}', deployment().name), 64)]"
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke virtual network."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value)]"
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke virtual network."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value]"
            },
            "spokeInfraSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke infrastructure subnet."
              },
              "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value, parameters('spokeInfraSubnetName'))]"
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke infrastructure subnet."
              },
              "value": "[parameters('spokeInfraSubnetName')]"
            },
            "spokePrivateEndpointsSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke private endpoints subnet."
              },
              "value": "[parameters('spokePrivateEndpointsSubnetName')]"
            },
            "spokeApplicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the spoke Application Gateway subnet. This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Network/virtualNetworks/subnets', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('vnetSpoke-{0}', deployment().name), 64)), '2022-09-01').outputs.name.value, parameters('spokeApplicationGatewaySubnetName')), '')]"
            },
            "spokeApplicationGatewaySubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the spoke Application Gateway subnet.  This is '' if the subnet was not created."
              },
              "value": "[if(not(empty(parameters('spokeApplicationGatewaySubnetAddressPrefix'))), parameters('spokeApplicationGatewaySubnetName'), '')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Log Analytics Workspace."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('logAnalyticsWs-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceId.value]"
            },
            "vmJumpBoxName": {
              "type": "string",
              "metadata": {
                "description": "The name of the jump box virtual machine."
              },
              "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('spokeNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.vmJumpBox]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('supportingServices-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "spokePrivateEndpointSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "spokeVNetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
          },
          "hubVNetId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "4540495316729936890"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deployment telemetry."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing spoke virtual network to which the private endpoint will be connected."
              }
            },
            "spokePrivateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing subnet in the spoke virtual to which the private endpoint will be connected."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the diagnostic log analytics workspace. If left empty, no diagnostics settings will be defined."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4794676376542080363"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('containerRegistryModule-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerRegistryName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistry]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "containerRegistryPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryPep]"
                  },
                  "containerRegistryUserAssignedIdentityName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerRegistryUserAssignedIdentity]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "deployZoneRedundantResources": {
                    "value": "[parameters('deployZoneRedundantResources')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "1772796700946624265"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deplotment telemetry."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "containerRegistryPrivateEndpointName": {
                      "type": "string",
                      "defaultValue": "acr-pep",
                      "metadata": {
                        "description": "Optional. The name of the private endpoint to be created for Azure Container Registry. If left empty, it defaults to \"<resourceName>-pep"
                      }
                    },
                    "containerRegistryUserAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity to be created to pull image from Azure Container Registry."
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the diagnostic log analytics workspace."
                      }
                    },
                    "deployZoneRedundantResources": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
                      }
                    }
                  },
                  "variables": {
                    "acrDnsZoneName": "privatelink.azurecr.io",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "containerRegistryPullRoleGuid": "7f951dda-4ed3-4680-a7ca-43fe172d538d",
                    "virtualNetworkLinks": "[concat(createArray(createObject('virtualNetworkResourceId', parameters('spokeVNetId'), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetId'))), createArray(createObject('virtualNetworkResourceId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('containerRegistryUserAssignedIdentityName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('containerRegistryUserAssignedIdentityName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "998408512764899332"
                            },
                            "name": "User Assigned Identities",
                            "description": "This module deploys a User Assigned Identity.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "federatedIdentityCredentialsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the federated identity credential."
                                    }
                                  },
                                  "audiences": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. The list of audiences that can appear in the issued token."
                                    }
                                  },
                                  "issuer": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The URL of the issuer to be trusted."
                                    }
                                  },
                                  "subject": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The identifier of the external identity."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the User Assigned Identity."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "federatedIdentityCredentials": {
                              "$ref": "#/definitions/federatedIdentityCredentialsType",
                              "metadata": {
                                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "userAssignedIdentity": {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "userAssignedIdentity_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_roleAssignments": {
                              "copy": {
                                "name": "userAssignedIdentity_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_federatedIdentityCredentials": {
                              "copy": {
                                "name": "userAssignedIdentity_federatedIdentityCredentials",
                                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                                  },
                                  "userAssignedIdentityName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "audiences": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                                  },
                                  "issuer": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                                  },
                                  "subject": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "4317497001099502136"
                                    },
                                    "name": "User Assigned Identity Federated Identity Credential",
                                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "userAssignedIdentityName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "audiences": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                                      }
                                    },
                                    "subject": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                                      "apiVersion": "2023-01-31",
                                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                                      "properties": {
                                        "audiences": "[parameters('audiences')]",
                                        "issuer": "[parameters('issuer')]",
                                        "subject": "[parameters('subject')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the federated identity credential."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the federated identity credential."
                                      },
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the federated identity credential was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the user assigned identity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the user assigned identity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID (object ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The client ID (application ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').clientId]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the user assigned identity was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('acrDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('acrDnsZoneName')]"
                          },
                          "location": {
                            "value": "global"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('virtualNetworkLinks')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "11412633288570781407"
                            },
                            "name": "Private DNS Zones",
                            "description": "This module deploys a Private DNS zone.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv4Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv4 address of this A record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of A records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aaaaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aaaaRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv6Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv6 address of this AAAA record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of AAAA records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "cnameType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "cnameRecord": {
                                    "type": "object",
                                    "properties": {
                                      "cname": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The canonical name of the CNAME record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The CNAME record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "mxType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "mxRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "exchange": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The domain name of the mail host for this MX record."
                                          }
                                        },
                                        "preference": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The preference value for this MX record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of MX records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ptrType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "ptrRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ptrdname": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The PTR target domain name for this PTR record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of PTR records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "soaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "soaRecord": {
                                    "type": "object",
                                    "properties": {
                                      "email": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The email contact for this SOA record."
                                        }
                                      },
                                      "expireTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The expire time for this SOA record."
                                        }
                                      },
                                      "host": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The domain name of the authoritative name server for this SOA record."
                                        }
                                      },
                                      "minimumTtl": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                        }
                                      },
                                      "refreshTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The refresh value for this SOA record."
                                        }
                                      },
                                      "retryTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The retry time for this SOA record."
                                        }
                                      },
                                      "serialNumber": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The serial number for this SOA record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The SOA record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "srvType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "srvRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "priority": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The priority value for this SRV record."
                                          }
                                        },
                                        "weight": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The weight value for this SRV record."
                                          }
                                        },
                                        "port": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The port value for this SRV record."
                                          }
                                        },
                                        "target": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The target domain name for this SRV record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of SRV records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "txtType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "txtRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. The text value of this TXT record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of TXT records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Private DNS zone name."
                              }
                            },
                            "a": {
                              "$ref": "#/definitions/aType",
                              "metadata": {
                                "description": "Optional. Array of A records."
                              }
                            },
                            "aaaa": {
                              "$ref": "#/definitions/aaaaType",
                              "metadata": {
                                "description": "Optional. Array of AAAA records."
                              }
                            },
                            "cname": {
                              "$ref": "#/definitions/cnameType",
                              "metadata": {
                                "description": "Optional. Array of CNAME records."
                              }
                            },
                            "mx": {
                              "$ref": "#/definitions/mxType",
                              "metadata": {
                                "description": "Optional. Array of MX records."
                              }
                            },
                            "ptr": {
                              "$ref": "#/definitions/ptrType",
                              "metadata": {
                                "description": "Optional. Array of PTR records."
                              }
                            },
                            "soa": {
                              "$ref": "#/definitions/soaType",
                              "metadata": {
                                "description": "Optional. Array of SOA records."
                              }
                            },
                            "srv": {
                              "$ref": "#/definitions/srvType",
                              "metadata": {
                                "description": "Optional. Array of SRV records."
                              }
                            },
                            "txt": {
                              "$ref": "#/definitions/txtType",
                              "metadata": {
                                "description": "Optional. Array of TXT records."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateDnsZone": {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "privateDnsZone_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_roleAssignments": {
                              "copy": {
                                "name": "privateDnsZone_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_A": {
                              "copy": {
                                "name": "privateDnsZone_A",
                                "count": "[length(coalesce(parameters('a'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                                  },
                                  "aRecords": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8657463061873174631"
                                    },
                                    "name": "Private DNS Zone A record",
                                    "description": "This module deploys a Private DNS Zone A record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the A record."
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of A records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "A": {
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aRecords": "[parameters('aRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "A_roleAssignments": {
                                      "copy": {
                                        "name": "A_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "A"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed A record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed A record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed A record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_AAAA": {
                              "copy": {
                                "name": "privateDnsZone_AAAA",
                                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                                  },
                                  "aaaaRecords": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1725749611610769138"
                                    },
                                    "name": "Private DNS Zone AAAA record",
                                    "description": "This module deploys a Private DNS Zone AAAA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AAAA record."
                                      }
                                    },
                                    "aaaaRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of AAAA records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "AAAA": {
                                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aaaaRecords": "[parameters('aaaaRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "AAAA_roleAssignments": {
                                      "copy": {
                                        "name": "AAAA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "AAAA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed AAAA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed AAAA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed AAAA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_CNAME": {
                              "copy": {
                                "name": "privateDnsZone_CNAME",
                                "count": "[length(coalesce(parameters('cname'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                                  },
                                  "cnameRecord": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "12750497126800708872"
                                    },
                                    "name": "Private DNS Zone CNAME record",
                                    "description": "This module deploys a Private DNS Zone CNAME record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CNAME record."
                                      }
                                    },
                                    "cnameRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A CNAME record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "CNAME": {
                                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "cnameRecord": "[parameters('cnameRecord')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "CNAME_roleAssignments": {
                                      "copy": {
                                        "name": "CNAME_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "CNAME"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed CNAME record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed CNAME record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed CNAME record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_MX": {
                              "copy": {
                                "name": "privateDnsZone_MX",
                                "count": "[length(coalesce(parameters('mx'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "mxRecords": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "13512848802819943036"
                                    },
                                    "name": "Private DNS Zone MX record",
                                    "description": "This module deploys a Private DNS Zone MX record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the MX record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "mxRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of MX records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "MX": {
                                      "type": "Microsoft.Network/privateDnsZones/MX",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "mxRecords": "[parameters('mxRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "MX_roleAssignments": {
                                      "copy": {
                                        "name": "MX_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "MX"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed MX record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed MX record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed MX record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_PTR": {
                              "copy": {
                                "name": "privateDnsZone_PTR",
                                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ptrRecords": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "5069219418696231980"
                                    },
                                    "name": "Private DNS Zone PTR record",
                                    "description": "This module deploys a Private DNS Zone PTR record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the PTR record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ptrRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of PTR records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "PTR": {
                                      "type": "Microsoft.Network/privateDnsZones/PTR",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ptrRecords": "[parameters('ptrRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "PTR_roleAssignments": {
                                      "copy": {
                                        "name": "PTR_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "PTR"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed PTR record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed PTR record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed PTR record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SOA": {
                              "copy": {
                                "name": "privateDnsZone_SOA",
                                "count": "[length(coalesce(parameters('soa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "soaRecord": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8649693365938652763"
                                    },
                                    "name": "Private DNS Zone SOA record",
                                    "description": "This module deploys a Private DNS Zone SOA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SOA record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "soaRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A SOA record."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SOA": {
                                      "type": "Microsoft.Network/privateDnsZones/SOA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "soaRecord": "[parameters('soaRecord')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SOA_roleAssignments": {
                                      "copy": {
                                        "name": "SOA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SOA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SOA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SOA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SOA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SRV": {
                              "copy": {
                                "name": "privateDnsZone_SRV",
                                "count": "[length(coalesce(parameters('srv'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "srvRecords": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1580431299497536987"
                                    },
                                    "name": "Private DNS Zone SRV record",
                                    "description": "This module deploys a Private DNS Zone SRV record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SRV record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "srvRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of SRV records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SRV": {
                                      "type": "Microsoft.Network/privateDnsZones/SRV",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "srvRecords": "[parameters('srvRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SRV_roleAssignments": {
                                      "copy": {
                                        "name": "SRV_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SRV"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SRV record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SRV record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SRV record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_TXT": {
                              "copy": {
                                "name": "privateDnsZone_TXT",
                                "count": "[length(coalesce(parameters('txt'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "txtRecords": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1628766837655887758"
                                    },
                                    "name": "Private DNS Zone TXT record",
                                    "description": "This module deploys a Private DNS Zone TXT record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the TXT record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "txtRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of TXT records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "TXT": {
                                      "type": "Microsoft.Network/privateDnsZones/TXT",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]",
                                        "txtRecords": "[parameters('txtRecords')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "TXT_roleAssignments": {
                                      "copy": {
                                        "name": "TXT_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "TXT"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed TXT record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed TXT record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed TXT record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_virtualNetworkLinks": {
                              "copy": {
                                "name": "privateDnsZone_virtualNetworkLinks",
                                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                                  },
                                  "virtualNetworkResourceId": {
                                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                                  },
                                  "registrationEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8423159394395901832"
                                    },
                                    "name": "Private DNS Zone Virtual Network Link",
                                    "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the virtual network link."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "global",
                                      "metadata": {
                                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "registrationEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                      }
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Link to another virtual network resource ID."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "virtualNetworkLink": {
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "registrationEnabled": "[parameters('registrationEnabled')]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed virtual network link."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed virtual network link."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed virtual network link."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private DNS zone was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private DNS zone."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private DNS zone."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('containerRegistry-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('containerRegistryName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "acrSku": {
                            "value": "Premium"
                          },
                          "publicNetworkAccess": {
                            "value": "Disabled"
                          },
                          "acrAdminUserEnabled": {
                            "value": false
                          },
                          "networkRuleBypassOptions": {
                            "value": "AzureServices"
                          },
                          "zoneRedundancy": "[if(parameters('deployZoneRedundantResources'), createObject('value', 'Enabled'), createObject('value', 'Disabled'))]",
                          "trustPolicyStatus": {
                            "value": "enabled"
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "name": "acr-log-analytics",
                                "logCategoriesAndGroups": [
                                  {
                                    "categoryGroup": "allLogs"
                                  }
                                ],
                                "metricCategories": [
                                  {
                                    "category": "AllMetrics"
                                  }
                                ],
                                "workspaceResourceId": "[parameters('diagnosticWorkspaceId')]"
                              }
                            ]
                          },
                          "privateEndpoints": {
                            "value": [
                              {
                                "name": "[parameters('containerRegistryPrivateEndpointName')]",
                                "privateDnsZoneResourceIds": [
                                  "[reference(resourceId('Microsoft.Resources/deployments', format('acrDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                                ],
                                "subnetResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                              }
                            ]
                          },
                          "quarantinePolicyStatus": {
                            "value": "enabled"
                          },
                          "roleAssignments": {
                            "value": [
                              {
                                "principalId": "[reference(resourceId('Microsoft.Resources/deployments', parameters('containerRegistryUserAssignedIdentityName')), '2022-09-01').outputs.principalId.value]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionIdOrName": "[variables('containerRegistryPullRoleGuid')]"
                              }
                            ]
                          },
                          "softDeletePolicyDays": {
                            "value": 7
                          },
                          "softDeletePolicyStatus": {
                            "value": "disabled"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "16326657109833349577"
                            },
                            "name": "Azure Container Registries (ACR)",
                            "description": "This module deploys an Azure Container Registry (ACR).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                    }
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customerManagedKeyType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Required. Name of your Azure Container Registry."
                              }
                            },
                            "acrAdminUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable admin user that have push / pull permission to the registry."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "acrSku": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of your Azure container registry."
                              }
                            },
                            "exportPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the export policy is enabled or not."
                              }
                            },
                            "quarantinePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the quarantine policy is enabled or not. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "trustPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the trust policy is enabled or not. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "retentionPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                              }
                            },
                            "retentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 15,
                              "metadata": {
                                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                              }
                            },
                            "azureADAuthenticationAsArmPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                              }
                            },
                            "softDeletePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Soft Delete policy status. Default is disabled."
                              }
                            },
                            "softDeletePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                              }
                            },
                            "dataEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "networkRuleBypassOptions": {
                              "type": "string",
                              "defaultValue": "AzureServices",
                              "allowedValues": [
                                "AzureServices",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                              }
                            },
                            "networkRuleSetDefaultAction": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. The default action of allow or deny when no other rules match."
                              }
                            },
                            "networkRuleSetIpRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            },
                            "replications": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All replications to create."
                              }
                            },
                            "webhooks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All webhooks to create."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "anonymousPullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyType",
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "cacheRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of Cache Rules. Note: This is a preview feature ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache#cache-for-acr-preview))."
                              }
                            }
                          },
                          "variables": {
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
                              "dependsOn": [
                                "cMKKeyVault"
                              ]
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.containerregistry-registry.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                            },
                            "registry": {
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('acrSku')]"
                              },
                              "properties": {
                                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyIdentifier', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null())]",
                                "policies": {
                                  "azureADAuthenticationAsArmPolicy": {
                                    "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                                  },
                                  "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                                  "quarantinePolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('quarantinePolicyStatus')), null())]",
                                  "trustPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('type', 'Notary', 'status', parameters('trustPolicyStatus')), null())]",
                                  "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                                  "softDeletePolicy": {
                                    "retentionDays": "[parameters('softDeletePolicyDays')]",
                                    "status": "[parameters('softDeletePolicyStatus')]"
                                  }
                                },
                                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                                "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                                "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                              },
                              "dependsOn": [
                                "cMKKeyVault",
                                "cMKUserAssignedIdentity"
                              ]
                            },
                            "registry_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_diagnosticSettings": {
                              "copy": {
                                "name": "registry_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_roleAssignments": {
                              "copy": {
                                "name": "registry_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_replications": {
                              "copy": {
                                "name": "registry_replications",
                                "count": "[length(coalesce(parameters('replications'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Replication-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].location]"
                                  },
                                  "regionEndpointEnabled": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'regionEndpointEnabled')]"
                                  },
                                  "zoneRedundancy": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'zoneRedundancy')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "13769087012819677314"
                                    },
                                    "name": "Azure Container Registry (ACR) Replications",
                                    "description": "This module deploys an Azure Container Registry (ACR) Replication.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the replication."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "regionEndpointEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Specifies whether the replication regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications."
                                      }
                                    },
                                    "zoneRedundancy": {
                                      "type": "string",
                                      "defaultValue": "Disabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "replication": {
                                      "type": "Microsoft.ContainerRegistry/registries/replications",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "regionEndpointEnabled": "[parameters('regionEndpointEnabled')]",
                                        "zoneRedundancy": "[parameters('zoneRedundancy')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/replications', parameters('registryName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('replication', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_cacheRules": {
                              "copy": {
                                "name": "registry_cacheRules",
                                "count": "[length(coalesce(parameters('cacheRules'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sourceRepository": {
                                    "value": "[coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'name'), replace(replace(coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository, '/', '-'), '.', '-'))]"
                                  },
                                  "targetRepository": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'targetRepository'), coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository)]"
                                  },
                                  "credentialSetResourceId": {
                                    "value": "[tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "9456138761658214484"
                                    },
                                    "name": "Container Registries Cache",
                                    "description": "Cache for Azure Container Registry (Preview) feature allows users to cache container images in a private container registry. Cache for ACR, is a preview feature available in Basic, Standard, and Premium service tiers ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache)).",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[replace(replace(parameters('sourceRepository'), '/', '-'), '.', '-')]",
                                      "metadata": {
                                        "description": "Optional. The name of the cache rule. Will be dereived from the source repository name if not defined."
                                      }
                                    },
                                    "sourceRepository": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Source repository pulled from upstream."
                                      }
                                    },
                                    "targetRepository": {
                                      "type": "string",
                                      "defaultValue": "[parameters('sourceRepository')]",
                                      "metadata": {
                                        "description": "Optional. Target repository specified in docker pull command. E.g.: docker pull myregistry.azurecr.io/{targetRepository}:{tag}."
                                      }
                                    },
                                    "credentialSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the credential store which is associated with the cache rule."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "cacheRule": {
                                      "type": "Microsoft.ContainerRegistry/registries/cacheRules",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "properties": {
                                        "sourceRepository": "[parameters('sourceRepository')]",
                                        "targetRepository": "[parameters('targetRepository')]",
                                        "credentialSetResourceId": "[parameters('credentialSetResourceId')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the Cache Rule."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Cache Rule."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Cache Rule."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/cacheRules', parameters('registryName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_webhooks": {
                              "copy": {
                                "name": "registry_webhooks",
                                "count": "[length(coalesce(parameters('webhooks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Webhook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                                  },
                                  "action": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'action'), createArray('chart_delete', 'chart_push', 'delete', 'push', 'quarantine'))]"
                                  },
                                  "customHeaders": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'customHeaders')]"
                                  },
                                  "scope": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'scope')]"
                                  },
                                  "status": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'status')]"
                                  },
                                  "serviceUri": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].serviceUri]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "708950816969162319"
                                    },
                                    "name": "Azure Container Registry (ACR) Webhooks",
                                    "description": "This module deploys an Azure Container Registry (ACR) Webhook.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}webhook', parameters('registryName'))]",
                                      "minLength": 5,
                                      "maxLength": 50,
                                      "metadata": {
                                        "description": "Optional. The name of the registry webhook."
                                      }
                                    },
                                    "serviceUri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The service URI for the webhook to post notifications."
                                      }
                                    },
                                    "status": {
                                      "type": "string",
                                      "defaultValue": "enabled",
                                      "allowedValues": [
                                        "disabled",
                                        "enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The status of the webhook at the time the operation was called."
                                      }
                                    },
                                    "action": {
                                      "type": "array",
                                      "defaultValue": [
                                        "chart_delete",
                                        "chart_push",
                                        "delete",
                                        "push",
                                        "quarantine"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The list of actions that trigger the webhook to post notifications."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "customHeaders": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom headers that will be added to the webhook notifications."
                                      }
                                    },
                                    "scope": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "webhook": {
                                      "type": "Microsoft.ContainerRegistry/registries/webhooks",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "actions": "[parameters('action')]",
                                        "customHeaders": "[parameters('customHeaders')]",
                                        "scope": "[parameters('scope')]",
                                        "serviceUri": "[parameters('serviceUri')]",
                                        "status": "[parameters('status')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the webhook."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/webhooks', parameters('registryName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the webhook."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Azure container registry."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "actions": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The actions of the webhook."
                                      },
                                      "value": "[reference('webhook').actions]"
                                    },
                                    "status": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The status of the webhook."
                                      },
                                      "value": "[reference('webhook').status]"
                                    },
                                    "provistioningState": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The provisioning state of the webhook."
                                      },
                                      "value": "[reference('webhook').provisioningState]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('webhook', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_privateEndpoints": {
                              "copy": {
                                "name": "registry_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-registry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroupName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "4120048060064073955"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroupName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                      }
                                    },
                                    "privateDnsZoneResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                          },
                                          "privateDNSResourceIds": {
                                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "11244630631275470040"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDNSResourceIds": {
                                              "type": "array",
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigs",
                                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                                "input": {
                                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Azure container registry."
                              },
                              "value": "[parameters('name')]"
                            },
                            "loginServer": {
                              "type": "string",
                              "metadata": {
                                "description": "The reference to the Azure container registry."
                              },
                              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Azure container registry."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('registry', '2023-06-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('registry', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('acrDnsZoneDeployment-{0}', uniqueString(resourceGroup().id)))]",
                        "[resourceId('Microsoft.Resources/deployments', parameters('containerRegistryUserAssignedIdentityName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "containerRegistryId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.name.value]"
                    },
                    "containerRegistryLoginServer": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the container registry login server."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistry-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.loginServer.value]"
                    },
                    "containerRegistryUserAssignedIdentityId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('containerRegistryUserAssignedIdentityName')), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Container Registry, where all workload images should be pulled from."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('keyVault-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVault]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "spokeVNetId": {
                    "value": "[parameters('spokeVNetId')]"
                  },
                  "hubVNetId": {
                    "value": "[parameters('hubVNetId')]"
                  },
                  "spokePrivateEndpointSubnetName": {
                    "value": "[parameters('spokePrivateEndpointSubnetName')]"
                  },
                  "keyVaultPrivateEndpointName": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.keyVaultPep]"
                  },
                  "diagnosticWorkspaceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "16272877246531333695"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Key Vault."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Whether to enable deplotment telemetry."
                      }
                    },
                    "hubVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Hub Virtual Network."
                      }
                    },
                    "spokeVNetId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VNet to which the private endpoint will be connected."
                      }
                    },
                    "spokePrivateEndpointSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the subnet in the VNet to which the private endpoint will be connected."
                      }
                    },
                    "keyVaultPrivateEndpointName": {
                      "type": "string",
                      "defaultValue": "keyvault-pep",
                      "metadata": {
                        "description": "Optional. The name of the private endpoint to be created for Key Vault. If left empty, it defaults to \"<resourceName>-pep"
                      }
                    },
                    "diagnosticWorkspaceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace."
                      }
                    },
                    "diagnosticSettingsName": {
                      "type": "string",
                      "defaultValue": "keyvault-diagnosticSettings",
                      "metadata": {
                        "description": "Optional. The name of the diagnostic setting, if deployed. If left empty, it defaults to \"<resourceName>-diagnosticSettings\"."
                      }
                    }
                  },
                  "variables": {
                    "vaultDnsZoneName": "privatelink.vaultcore.azure.net",
                    "spokeVNetIdTokens": "[split(parameters('spokeVNetId'), '/')]",
                    "spokeSubscriptionId": "[variables('spokeVNetIdTokens')[2]]",
                    "spokeResourceGroupName": "[variables('spokeVNetIdTokens')[4]]",
                    "spokeVNetName": "[variables('spokeVNetIdTokens')[8]]",
                    "virtualNetworkLinks": "[concat(createArray(createObject('virtualNetworkResourceId', parameters('spokeVNetId'), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetId'))), createArray(createObject('virtualNetworkResourceId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[variables('vaultDnsZoneName')]"
                          },
                          "location": {
                            "value": "global"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "virtualNetworkLinks": {
                            "value": "[variables('virtualNetworkLinks')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "11412633288570781407"
                            },
                            "name": "Private DNS Zones",
                            "description": "This module deploys a Private DNS zone.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv4Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv4 address of this A record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of A records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "aaaaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "aaaaRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ipv6Address": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The IPv6 address of this AAAA record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of AAAA records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "cnameType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "cnameRecord": {
                                    "type": "object",
                                    "properties": {
                                      "cname": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The canonical name of the CNAME record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The CNAME record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "mxType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "mxRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "exchange": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The domain name of the mail host for this MX record."
                                          }
                                        },
                                        "preference": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The preference value for this MX record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of MX records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ptrType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "ptrRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "ptrdname": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The PTR target domain name for this PTR record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of PTR records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "soaType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "soaRecord": {
                                    "type": "object",
                                    "properties": {
                                      "email": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The email contact for this SOA record."
                                        }
                                      },
                                      "expireTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The expire time for this SOA record."
                                        }
                                      },
                                      "host": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The domain name of the authoritative name server for this SOA record."
                                        }
                                      },
                                      "minimumTtl": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                        }
                                      },
                                      "refreshTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The refresh value for this SOA record."
                                        }
                                      },
                                      "retryTime": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The retry time for this SOA record."
                                        }
                                      },
                                      "serialNumber": {
                                        "type": "int",
                                        "metadata": {
                                          "description": "Required. The serial number for this SOA record."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The SOA record in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "srvType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "srvRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "priority": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The priority value for this SRV record."
                                          }
                                        },
                                        "weight": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The weight value for this SRV record."
                                          }
                                        },
                                        "port": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The port value for this SRV record."
                                          }
                                        },
                                        "target": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The target domain name for this SRV record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of SRV records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "txtType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the record."
                                    }
                                  },
                                  "metadata": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The metadata of the record."
                                    }
                                  },
                                  "ttl": {
                                    "type": "int",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The TTL of the record."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "txtRecords": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "value": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. The text value of this TXT record."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The list of TXT records in the record set."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Private DNS zone name."
                              }
                            },
                            "a": {
                              "$ref": "#/definitions/aType",
                              "metadata": {
                                "description": "Optional. Array of A records."
                              }
                            },
                            "aaaa": {
                              "$ref": "#/definitions/aaaaType",
                              "metadata": {
                                "description": "Optional. Array of AAAA records."
                              }
                            },
                            "cname": {
                              "$ref": "#/definitions/cnameType",
                              "metadata": {
                                "description": "Optional. Array of CNAME records."
                              }
                            },
                            "mx": {
                              "$ref": "#/definitions/mxType",
                              "metadata": {
                                "description": "Optional. Array of MX records."
                              }
                            },
                            "ptr": {
                              "$ref": "#/definitions/ptrType",
                              "metadata": {
                                "description": "Optional. Array of PTR records."
                              }
                            },
                            "soa": {
                              "$ref": "#/definitions/soaType",
                              "metadata": {
                                "description": "Optional. Array of SOA records."
                              }
                            },
                            "srv": {
                              "$ref": "#/definitions/srvType",
                              "metadata": {
                                "description": "Optional. Array of SRV records."
                              }
                            },
                            "txt": {
                              "$ref": "#/definitions/txtType",
                              "metadata": {
                                "description": "Optional. Array of TXT records."
                              }
                            },
                            "virtualNetworkLinks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateDnsZone": {
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "privateDnsZone_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_roleAssignments": {
                              "copy": {
                                "name": "privateDnsZone_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_A": {
                              "copy": {
                                "name": "privateDnsZone_A",
                                "count": "[length(coalesce(parameters('a'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                                  },
                                  "aRecords": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8657463061873174631"
                                    },
                                    "name": "Private DNS Zone A record",
                                    "description": "This module deploys a Private DNS Zone A record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the A record."
                                      }
                                    },
                                    "aRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of A records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "A": {
                                      "type": "Microsoft.Network/privateDnsZones/A",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aRecords": "[parameters('aRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "A_roleAssignments": {
                                      "copy": {
                                        "name": "A_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "A"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed A record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed A record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed A record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_AAAA": {
                              "copy": {
                                "name": "privateDnsZone_AAAA",
                                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                                  },
                                  "aaaaRecords": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1725749611610769138"
                                    },
                                    "name": "Private DNS Zone AAAA record",
                                    "description": "This module deploys a Private DNS Zone AAAA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AAAA record."
                                      }
                                    },
                                    "aaaaRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of AAAA records in the record set."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "AAAA": {
                                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "aaaaRecords": "[parameters('aaaaRecords')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "AAAA_roleAssignments": {
                                      "copy": {
                                        "name": "AAAA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "AAAA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed AAAA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed AAAA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed AAAA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_CNAME": {
                              "copy": {
                                "name": "privateDnsZone_CNAME",
                                "count": "[length(coalesce(parameters('cname'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                                  },
                                  "cnameRecord": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "12750497126800708872"
                                    },
                                    "name": "Private DNS Zone CNAME record",
                                    "description": "This module deploys a Private DNS Zone CNAME record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CNAME record."
                                      }
                                    },
                                    "cnameRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A CNAME record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "CNAME": {
                                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "cnameRecord": "[parameters('cnameRecord')]",
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "CNAME_roleAssignments": {
                                      "copy": {
                                        "name": "CNAME_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "CNAME"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed CNAME record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed CNAME record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed CNAME record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_MX": {
                              "copy": {
                                "name": "privateDnsZone_MX",
                                "count": "[length(coalesce(parameters('mx'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "mxRecords": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "13512848802819943036"
                                    },
                                    "name": "Private DNS Zone MX record",
                                    "description": "This module deploys a Private DNS Zone MX record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the MX record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "mxRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of MX records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "MX": {
                                      "type": "Microsoft.Network/privateDnsZones/MX",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "mxRecords": "[parameters('mxRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "MX_roleAssignments": {
                                      "copy": {
                                        "name": "MX_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "MX"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed MX record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed MX record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed MX record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_PTR": {
                              "copy": {
                                "name": "privateDnsZone_PTR",
                                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "ptrRecords": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "5069219418696231980"
                                    },
                                    "name": "Private DNS Zone PTR record",
                                    "description": "This module deploys a Private DNS Zone PTR record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the PTR record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ptrRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of PTR records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "PTR": {
                                      "type": "Microsoft.Network/privateDnsZones/PTR",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ptrRecords": "[parameters('ptrRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "PTR_roleAssignments": {
                                      "copy": {
                                        "name": "PTR_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "PTR"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed PTR record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed PTR record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed PTR record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SOA": {
                              "copy": {
                                "name": "privateDnsZone_SOA",
                                "count": "[length(coalesce(parameters('soa'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "soaRecord": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8649693365938652763"
                                    },
                                    "name": "Private DNS Zone SOA record",
                                    "description": "This module deploys a Private DNS Zone SOA record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SOA record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "soaRecord": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A SOA record."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SOA": {
                                      "type": "Microsoft.Network/privateDnsZones/SOA",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "soaRecord": "[parameters('soaRecord')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SOA_roleAssignments": {
                                      "copy": {
                                        "name": "SOA_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SOA"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SOA record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SOA record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SOA record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_SRV": {
                              "copy": {
                                "name": "privateDnsZone_SRV",
                                "count": "[length(coalesce(parameters('srv'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "srvRecords": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1580431299497536987"
                                    },
                                    "name": "Private DNS Zone SRV record",
                                    "description": "This module deploys a Private DNS Zone SRV record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the SRV record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "srvRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of SRV records in the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "SRV": {
                                      "type": "Microsoft.Network/privateDnsZones/SRV",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "srvRecords": "[parameters('srvRecords')]",
                                        "ttl": "[parameters('ttl')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "SRV_roleAssignments": {
                                      "copy": {
                                        "name": "SRV_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "SRV"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed SRV record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed SRV record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed SRV record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_TXT": {
                              "copy": {
                                "name": "privateDnsZone_TXT",
                                "count": "[length(coalesce(parameters('txt'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "txtRecords": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                                  },
                                  "ttl": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "1628766837655887758"
                                    },
                                    "name": "Private DNS Zone TXT record",
                                    "description": "This module deploys a Private DNS Zone TXT record.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the TXT record."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The metadata attached to the record set."
                                      }
                                    },
                                    "ttl": {
                                      "type": "int",
                                      "defaultValue": 3600,
                                      "metadata": {
                                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                                      }
                                    },
                                    "txtRecords": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The list of TXT records in the record set."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "TXT": {
                                      "type": "Microsoft.Network/privateDnsZones/TXT",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]",
                                        "ttl": "[parameters('ttl')]",
                                        "txtRecords": "[parameters('txtRecords')]"
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    },
                                    "TXT_roleAssignments": {
                                      "copy": {
                                        "name": "TXT_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "TXT"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed TXT record."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed TXT record."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed TXT record."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "privateDnsZone_virtualNetworkLinks": {
                              "copy": {
                                "name": "privateDnsZone_virtualNetworkLinks",
                                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateDnsZoneName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                                  },
                                  "virtualNetworkResourceId": {
                                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                                  },
                                  "registrationEnabled": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.28.1.47646",
                                      "templateHash": "8423159394395901832"
                                    },
                                    "name": "Private DNS Zone Virtual Network Link",
                                    "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateDnsZoneName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                                      "metadata": {
                                        "description": "Optional. The name of the virtual network link."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "global",
                                      "metadata": {
                                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "registrationEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                                      }
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Link to another virtual network resource ID."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "privateDnsZone": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateDnsZones",
                                      "apiVersion": "2020-06-01",
                                      "name": "[parameters('privateDnsZoneName')]"
                                    },
                                    "virtualNetworkLink": {
                                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                                      "apiVersion": "2020-06-01",
                                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "registrationEnabled": "[parameters('registrationEnabled')]",
                                        "virtualNetwork": {
                                          "id": "[parameters('virtualNetworkResourceId')]"
                                        }
                                      },
                                      "dependsOn": [
                                        "privateDnsZone"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed virtual network link."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed virtual network link."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed virtual network link."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private DNS zone was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private DNS zone."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private DNS zone."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('vault-{0}', uniqueString(resourceGroup().id))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('keyVaultName')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "sku": {
                            "value": "standard"
                          },
                          "networkAcls": {
                            "value": {
                              "bypass": "AzureServices",
                              "defaultAction": "Deny"
                            }
                          },
                          "enableSoftDelete": {
                            "value": true
                          },
                          "softDeleteRetentionInDays": {
                            "value": 7
                          },
                          "enablePurgeProtection": {
                            "value": null
                          },
                          "publicNetworkAccess": {
                            "value": "Disabled"
                          },
                          "enableRbacAuthorization": {
                            "value": true
                          },
                          "enableVaultForDeployment": {
                            "value": true
                          },
                          "privateEndpoints": {
                            "value": [
                              {
                                "name": "[parameters('keyVaultPrivateEndpointName')]",
                                "privateDnsZoneResourceIds": [
                                  "[reference(resourceId('Microsoft.Resources/deployments', format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                                ],
                                "subnetResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('spokeSubscriptionId'), variables('spokeResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', variables('spokeVNetName'), parameters('spokePrivateEndpointSubnetName'))]"
                              }
                            ]
                          },
                          "diagnosticSettings": {
                            "value": [
                              {
                                "name": "[parameters('diagnosticSettingsName')]",
                                "workspaceResourceId": "[parameters('diagnosticWorkspaceId')]",
                                "logCategoriesAndGroups": [
                                  {
                                    "categoryGroup": "allLogs"
                                  }
                                ],
                                "metricCategories": [
                                  {
                                    "category": "AllMetrics"
                                  }
                                ]
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "4424685997744462747"
                            },
                            "name": "Key Vaults",
                            "description": "This module deploys a Key Vault.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "privateLinkServiceConnectionName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private link connection to create."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                    }
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                                    }
                                  },
                                  "isManualConnection": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. If Manual Private Link Connection is required."
                                    }
                                  },
                                  "manualConnectionRequestMessage": {
                                    "type": "string",
                                    "nullable": true,
                                    "maxLength": 140,
                                    "metadata": {
                                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  },
                                  "resourceGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "accessPoliciesType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tenantId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                    }
                                  },
                                  "objectId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                    }
                                  },
                                  "applicationId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application ID of the client making request on behalf of a principal."
                                    }
                                  },
                                  "permissions": {
                                    "type": "object",
                                    "properties": {
                                      "keys": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "decrypt",
                                          "delete",
                                          "encrypt",
                                          "get",
                                          "getrotationpolicy",
                                          "import",
                                          "list",
                                          "purge",
                                          "recover",
                                          "release",
                                          "restore",
                                          "rotate",
                                          "setrotationpolicy",
                                          "sign",
                                          "unwrapKey",
                                          "update",
                                          "verify",
                                          "wrapKey"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to keys."
                                        }
                                      },
                                      "secrets": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "get",
                                          "list",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "set"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to secrets."
                                        }
                                      },
                                      "certificates": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "create",
                                          "delete",
                                          "deleteissuers",
                                          "get",
                                          "getissuers",
                                          "import",
                                          "list",
                                          "listissuers",
                                          "managecontacts",
                                          "manageissuers",
                                          "purge",
                                          "recover",
                                          "restore",
                                          "setissuers",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to certificates."
                                        }
                                      },
                                      "storage": {
                                        "type": "array",
                                        "allowedValues": [
                                          "all",
                                          "backup",
                                          "delete",
                                          "deletesas",
                                          "get",
                                          "getsas",
                                          "list",
                                          "listsas",
                                          "purge",
                                          "recover",
                                          "regeneratekey",
                                          "restore",
                                          "set",
                                          "setsas",
                                          "update"
                                        ],
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Permissions to storage accounts."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "secretsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the secret."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource tags."
                                    }
                                  },
                                  "attributes": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines whether the secret is enabled or disabled."
                                        }
                                      },
                                      "exp": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines when the secret will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      },
                                      "nbf": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. If set, defines the date from which onwards the secret becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains attributes of the secret."
                                    }
                                  },
                                  "contentType": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The content type of the secret."
                                    }
                                  },
                                  "value": {
                                    "type": "securestring",
                                    "metadata": {
                                      "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "keysType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the key."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource tags."
                                    }
                                  },
                                  "attributes": {
                                    "type": "object",
                                    "properties": {
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines whether the key is enabled or disabled."
                                        }
                                      },
                                      "exp": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      },
                                      "nbf": {
                                        "type": "int",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Contains attributes of the key."
                                    }
                                  },
                                  "curveName": {
                                    "type": "string",
                                    "allowedValues": [
                                      "P-256",
                                      "P-256K",
                                      "P-384",
                                      "P-521"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The elliptic curve name. Only works if \"keySize\" equals \"EC\" or \"EC-HSM\". Default is \"P-256\"."
                                    }
                                  },
                                  "keyOps": {
                                    "type": "array",
                                    "allowedValues": [
                                      "decrypt",
                                      "encrypt",
                                      "import",
                                      "release",
                                      "sign",
                                      "unwrapKey",
                                      "verify",
                                      "wrapKey"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The allowed operations on this key."
                                    }
                                  },
                                  "keySize": {
                                    "type": "int",
                                    "allowedValues": [
                                      2048,
                                      3072,
                                      4096
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The key size in bits. Only works if \"keySize\" equals \"RSA\" or \"RSA-HSM\". Default is \"4096\"."
                                    }
                                  },
                                  "kty": {
                                    "type": "string",
                                    "allowedValues": [
                                      "EC",
                                      "EC-HSM",
                                      "RSA",
                                      "RSA-HSM"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The type of the key. Default is \"EC\"."
                                    }
                                  },
                                  "releasePolicy": {
                                    "type": "object",
                                    "properties": {
                                      "contentType": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Content type and version of key release policy."
                                        }
                                      },
                                      "data": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Blob encoding the policy rules under which the key can be released."
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Key release policy."
                                    }
                                  },
                                  "rotationPolicy": {
                                    "$ref": "#/definitions/rotationPoliciesType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Key rotation policy."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "rotationPoliciesType": {
                              "type": "object",
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "expiryTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The attributes of key rotation policy."
                                  }
                                },
                                "lifetimeActions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Notify",
                                              "Rotate"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The type of action."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The action of key rotation policy lifetimeAction."
                                        }
                                      },
                                      "trigger": {
                                        "type": "object",
                                        "properties": {
                                          "timeAfterCreate": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          },
                                          "timeBeforeExpiry": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The trigger of key rotation policy lifetimeAction."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lifetimeActions for key rotation action."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Key Vault. Must be globally unique."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "accessPolicies": {
                              "$ref": "#/definitions/accessPoliciesType",
                              "metadata": {
                                "description": "Optional. All access policies to create."
                              }
                            },
                            "secrets": {
                              "$ref": "#/definitions/secretsType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All secrets to create."
                              }
                            },
                            "keys": {
                              "$ref": "#/definitions/keysType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All keys to create."
                              }
                            },
                            "enableVaultForDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                              }
                            },
                            "enableVaultForTemplateDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for a template deployment."
                              }
                            },
                            "enableVaultForDiskEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                              }
                            },
                            "enableSoftDelete": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 90,
                              "metadata": {
                                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
                              }
                            },
                            "enableRbacAuthorization": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                              }
                            },
                            "createMode": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                              }
                            },
                            "enablePurgeProtection": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "premium",
                              "allowedValues": [
                                "premium",
                                "standard"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the SKU for the vault."
                              }
                            },
                            "networkAcls": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Certificate User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.6.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "keyVault": {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                                "createMode": "[parameters('createMode')]",
                                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                                "tenantId": "[subscription().tenantId]",
                                "accessPolicies": "[variables('formattedAccessPolicies')]",
                                "sku": {
                                  "name": "[parameters('sku')]",
                                  "family": "A"
                                },
                                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                              }
                            },
                            "keyVault_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_diagnosticSettings": {
                              "copy": {
                                "name": "keyVault_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_roleAssignments": {
                              "copy": {
                                "name": "keyVault_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_accessPolicies": {
                              "condition": "[not(empty(parameters('accessPolicies')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "accessPolicies": {
                                    "value": "[parameters('accessPolicies')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "13379419349517171769"
                                    },
                                    "name": "Key Vault Access Policies",
                                    "description": "This module deploys a Key Vault Access Policy.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "accessPoliciesType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "tenantId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                            }
                                          },
                                          "objectId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                            }
                                          },
                                          "applicationId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Application ID of the client making request on behalf of a principal."
                                            }
                                          },
                                          "permissions": {
                                            "type": "object",
                                            "properties": {
                                              "keys": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "create",
                                                  "decrypt",
                                                  "delete",
                                                  "encrypt",
                                                  "get",
                                                  "getrotationpolicy",
                                                  "import",
                                                  "list",
                                                  "purge",
                                                  "recover",
                                                  "release",
                                                  "restore",
                                                  "rotate",
                                                  "setrotationpolicy",
                                                  "sign",
                                                  "unwrapKey",
                                                  "update",
                                                  "verify",
                                                  "wrapKey"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to keys."
                                                }
                                              },
                                              "secrets": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "delete",
                                                  "get",
                                                  "list",
                                                  "purge",
                                                  "recover",
                                                  "restore",
                                                  "set"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to secrets."
                                                }
                                              },
                                              "certificates": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "create",
                                                  "delete",
                                                  "deleteissuers",
                                                  "get",
                                                  "getissuers",
                                                  "import",
                                                  "list",
                                                  "listissuers",
                                                  "managecontacts",
                                                  "manageissuers",
                                                  "purge",
                                                  "recover",
                                                  "restore",
                                                  "setissuers",
                                                  "update"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to certificates."
                                                }
                                              },
                                              "storage": {
                                                "type": "array",
                                                "allowedValues": [
                                                  "all",
                                                  "backup",
                                                  "delete",
                                                  "deletesas",
                                                  "get",
                                                  "getsas",
                                                  "list",
                                                  "listsas",
                                                  "purge",
                                                  "recover",
                                                  "regeneratekey",
                                                  "restore",
                                                  "set",
                                                  "setsas",
                                                  "update"
                                                ],
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Permissions to storage accounts."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "accessPolicies": {
                                      "$ref": "#/definitions/accessPoliciesType",
                                      "metadata": {
                                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedAccessPolicies",
                                        "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                        "input": {
                                          "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                          "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                          "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                          "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "policies": {
                                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                                      "properties": {
                                        "accessPolicies": "[variables('formattedAccessPolicies')]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the access policies assignment was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the access policies assignment."
                                      },
                                      "value": "add"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the access policies assignment."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_secrets": {
                              "copy": {
                                "name": "keyVault_secrets",
                                "count": "[length(coalesce(parameters('secrets'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].name]"
                                  },
                                  "value": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].value]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesEnabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesExp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributesNbf')]"
                                  },
                                  "contentType": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'contentType')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "5636875941217257115"
                                    },
                                    "name": "Key Vault Secrets",
                                    "description": "This module deploys a Key Vault Secret.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "contentType": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The content type of the secret."
                                      }
                                    },
                                    "value": {
                                      "type": "securestring",
                                      "metadata": {
                                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "secret": {
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "contentType": "[parameters('contentType')]",
                                        "attributes": {
                                          "enabled": "[parameters('attributesEnabled')]",
                                          "exp": "[parameters('attributesExp')]",
                                          "nbf": "[parameters('attributesNbf')]"
                                        },
                                        "value": "[parameters('value')]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    },
                                    "secret_roleAssignments": {
                                      "copy": {
                                        "name": "secret_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "secret"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the secret."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the secret."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the secret was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_keys": {
                              "copy": {
                                "name": "keyVault_keys",
                                "count": "[length(coalesce(parameters('keys'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesEnabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesExp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributesNbf')]"
                                  },
                                  "curveName": "[if(and(not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA')), not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM'))), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')), createObject('value', null()))]",
                                  "keyOps": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                                  },
                                  "keySize": "[if(or(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA'), equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM')), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize'), 4096)), createObject('value', null()))]",
                                  "releasePolicy": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'releasePolicy'), createObject())]"
                                  },
                                  "kty": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "rotationPolicy": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "2556304156587722941"
                                    },
                                    "name": "Key Vault Keys",
                                    "description": "This module deploys a Key Vault Key.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the key."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "curveName": {
                                      "type": "string",
                                      "defaultValue": "P-256",
                                      "allowedValues": [
                                        "P-256",
                                        "P-256K",
                                        "P-384",
                                        "P-521"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The elliptic curve name."
                                      }
                                    },
                                    "keyOps": {
                                      "type": "array",
                                      "nullable": true,
                                      "allowedValues": [
                                        "decrypt",
                                        "encrypt",
                                        "import",
                                        "sign",
                                        "unwrapKey",
                                        "verify",
                                        "wrapKey"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Array of JsonWebKeyOperation."
                                      }
                                    },
                                    "keySize": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                                      }
                                    },
                                    "kty": {
                                      "type": "string",
                                      "defaultValue": "EC",
                                      "allowedValues": [
                                        "EC",
                                        "EC-HSM",
                                        "RSA",
                                        "RSA-HSM"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The type of the key."
                                      }
                                    },
                                    "releasePolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key release policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "rotationPolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key rotation policy properties object."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "key": {
                                      "type": "Microsoft.KeyVault/vaults/keys",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "attributes": {
                                          "enabled": "[parameters('attributesEnabled')]",
                                          "exp": "[parameters('attributesExp')]",
                                          "nbf": "[parameters('attributesNbf')]"
                                        },
                                        "curveName": "[parameters('curveName')]",
                                        "keyOps": "[parameters('keyOps')]",
                                        "keySize": "[parameters('keySize')]",
                                        "kty": "[parameters('kty')]",
                                        "rotationPolicy": "[coalesce(parameters('rotationPolicy'), createObject())]",
                                        "release_policy": "[coalesce(parameters('releasePolicy'), createObject())]"
                                      },
                                      "dependsOn": [
                                        "keyVault"
                                      ]
                                    },
                                    "key_roleAssignments": {
                                      "copy": {
                                        "name": "key_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "key"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the key."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the key."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the key was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_privateEndpoints": {
                              "copy": {
                                "name": "keyVault_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroupName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "4120048060064073955"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroupName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                      }
                                    },
                                    "privateDnsZoneResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                          },
                                          "privateDNSResourceIds": {
                                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.25.53.49325",
                                              "templateHash": "11244630631275470040"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDNSResourceIds": {
                                              "type": "array",
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigs",
                                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                                "input": {
                                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key vault."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key vault was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key vault."
                              },
                              "value": "[parameters('name')]"
                            },
                            "uri": {
                              "type": "string",
                              "metadata": {
                                "description": "The URI of the key vault."
                              },
                              "value": "[reference('keyVault').vaultUri]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Resources/deployments', format('keyvaultDnsZoneDeployment-{0}', uniqueString(resourceGroup().id)))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyVaultId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key vault."
                      },
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.name.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('supportingServicesNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Key Vault used to hold items like TLS certs and application secrets that your workload will need."
              }
            }
          ],
          "outputs": {
            "containerRegistryId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistryModule-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryId.value]"
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Container Registry."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistryModule-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryName.value]"
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "metadata": {
                "description": "The name of the container registry login server."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistryModule-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryLoginServer.value]"
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user-assigned managed identity for the Azure Container Registry to be able to pull images from it."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('containerRegistryModule-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
            },
            "keyVaultResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultId.value]"
            },
            "keyVaultName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Key Vault."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('keyVault-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.keyVaultName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "hubVNetId": {
            "value": "[parameters('hubVirtualNetworkResourceId')]"
          },
          "spokeVNetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
          },
          "spokeInfraSubnetName": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
          },
          "enableApplicationInsights": {
            "value": "[parameters('enableApplicationInsights')]"
          },
          "enableDaprInstrumentation": {
            "value": "[parameters('enableDaprInstrumentation')]"
          },
          "containerRegistryUserAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17883690966843525174"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deplotment telemetry."
              }
            },
            "hubVNetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing hub virtual network."
              }
            },
            "spokeVNetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke virtual network."
              }
            },
            "spokeInfraSubnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the existing spoke infrastructure subnet."
              }
            },
            "enableApplicationInsights": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable the createion of Application Insights."
              }
            },
            "enableDaprInstrumentation": {
              "type": "bool",
              "metadata": {
                "description": "Enable or disable Dapr application instrumentation using Application Insights. If enableApplicationInsights is false, this parameter is ignored."
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The resource id of an existing Azure Log Analytics Workspace."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user-assigned managed identity for the Azure Container Registry to be able to pull images from it."
              }
            }
          },
          "variables": {
            "workProfileName": "general-purpose",
            "virtualNetworkLinks": "[concat(createArray(createObject('virtualNetworkResourceId', resourceId('Microsoft.Network/virtualNetworks', parameters('spokeVNetName')), 'registrationEnabled', false())), if(not(empty(parameters('hubVNetId'))), createArray(createObject('virtualNetworkResourceId', parameters('hubVNetId'), 'registrationEnabled', false())), createArray()))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('acaNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4794676376542080363"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "condition": "[parameters('enableApplicationInsights')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationInsights]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "workspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "15992072010754675807"
                    },
                    "name": "Application Insights",
                    "description": "This component deploys an Application Insights instance.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Insights."
                      }
                    },
                    "applicationType": {
                      "type": "string",
                      "defaultValue": "web",
                      "allowedValues": [
                        "web",
                        "other"
                      ],
                      "metadata": {
                        "description": "Optional. Application type."
                      }
                    },
                    "workspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                      }
                    },
                    "disableIpMasking": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Disable IP masking. Default value is set to true."
                      }
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
                      }
                    },
                    "forceCustomerStorageForProfiler": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Force users to create their own storage account for profiler and debugger."
                      }
                    },
                    "linkedStorageAccountResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Linked storage account resource ID."
                      }
                    },
                    "publicNetworkAccessForIngestion": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                      }
                    },
                    "publicNetworkAccessForQuery": {
                      "type": "string",
                      "defaultValue": "Enabled",
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": 365,
                      "allowedValues": [
                        30,
                        60,
                        90,
                        120,
                        180,
                        270,
                        365,
                        550,
                        730
                      ],
                      "metadata": {
                        "description": "Optional. Retention period in days."
                      }
                    },
                    "samplingPercentage": {
                      "type": "int",
                      "defaultValue": 100,
                      "minValue": 0,
                      "maxValue": 100,
                      "metadata": {
                        "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "appInsights": {
                      "type": "Microsoft.Insights/components",
                      "apiVersion": "2020-02-02",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "kind": "[parameters('kind')]",
                      "properties": {
                        "Application_Type": "[parameters('applicationType')]",
                        "DisableIpMasking": "[parameters('disableIpMasking')]",
                        "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                        "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                        "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                        "RetentionInDays": "[parameters('retentionInDays')]",
                        "SamplingPercentage": "[parameters('samplingPercentage')]"
                      }
                    },
                    "appInsights_roleAssignments": {
                      "copy": {
                        "name": "appInsights_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "appInsights"
                      ]
                    },
                    "appInsights_diagnosticSettings": {
                      "copy": {
                        "name": "appInsights_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "appInsights"
                      ]
                    },
                    "linkedStorageAccount": {
                      "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "appInsightsName": {
                            "value": "[parameters('name')]"
                          },
                          "storageAccountResourceId": {
                            "value": "[parameters('linkedStorageAccountResourceId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "11213930862679606021"
                            },
                            "name": "Application Insights Linked Storage Account",
                            "description": "This component deploys an Application Insights Linked Storage Account.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "appInsightsName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                              }
                            },
                            "storageAccountResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Linked storage account resource ID."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "microsoft.insights/components/linkedStorageAccounts",
                              "apiVersion": "2020-03-01-preview",
                              "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                              "properties": {
                                "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Linked Storage Account."
                              },
                              "value": "ServiceProfiler"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Linked Storage Account."
                              },
                              "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the agent pool was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "appInsights"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application insights component."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application insights component."
                      },
                      "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the application insights component was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "applicationId": {
                      "type": "string",
                      "metadata": {
                        "description": "The application ID of the application insights component."
                      },
                      "value": "[reference('appInsights').AppId]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('appInsights', '2020-02-02', 'full').location]"
                    },
                    "instrumentationKey": {
                      "type": "string",
                      "metadata": {
                        "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
                      },
                      "value": "[reference('appInsights').InstrumentationKey]"
                    },
                    "connectionString": {
                      "type": "string",
                      "metadata": {
                        "description": "Application Insights Connection String."
                      },
                      "value": "[reference('appInsights').ConnectionString]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('acaNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "Azure Application Insights, the workload' log & metric sink and APM tool"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkspaceId')]"
                  },
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.containerAppsEnvironment]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "internal": {
                    "value": true
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[parameters('containerRegistryUserAssignedIdentityId')]"
                      ]
                    }
                  },
                  "daprAIInstrumentationKey": "[if(and(parameters('enableDaprInstrumentation'), parameters('enableApplicationInsights')), createObject('value', reference(resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.instrumentationKey.value), createObject('value', null()))]",
                  "infrastructureSubnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('spokeVNetName'), parameters('spokeInfraSubnetName'))]"
                  },
                  "workloadProfiles": {
                    "value": [
                      {
                        "maximumCount": 3,
                        "minimumCount": 0,
                        "name": "[variables('workProfileName')]",
                        "workloadProfileType": "D4"
                      }
                    ]
                  },
                  "zoneRedundant": {
                    "value": "[parameters('deployZoneRedundantResources')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "13001855178530816021"
                    },
                    "name": "App ManagedEnvironments",
                    "description": "This module deploys an App Managed Environment (also known as a Container App Environment).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container Apps Managed Environment."
                      }
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Existing Log Analytics Workspace resource ID. Note: This value is not required as per the resource type. However, not providing it currently causes an issue that is tracked [here](https://github.com/Azure/bicep/issues/9990)."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "logsDestination": {
                      "type": "string",
                      "defaultValue": "log-analytics",
                      "metadata": {
                        "description": "Optional. Logs destination."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "daprAIConnectionString": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
                      }
                    },
                    "daprAIInstrumentationKey": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
                      }
                    },
                    "dockerBridgeCidr": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "infrastructureSubnetId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "internal": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "platformReservedCidr": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
                      }
                    },
                    "platformReservedDnsIP": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether or not this Managed Environment is zone-redundant."
                      }
                    },
                    "certificatePassword": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Password of the certificate used by the custom domain."
                      }
                    },
                    "certificateValue": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
                      }
                    },
                    "dnsSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. DNS suffix for the environment domain."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "workloadProfiles": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    },
                    "infrastructureResourceGroupName": {
                      "type": "string",
                      "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
                      "metadata": {
                        "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                      "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                      "name": "[last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))]"
                    },
                    "managedEnvironment": {
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2023-11-02-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "appLogsConfiguration": {
                          "destination": "[parameters('logsDestination')]",
                          "logAnalyticsConfiguration": {
                            "customerId": "[reference('logAnalyticsWorkspace').customerId]",
                            "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))), '2021-06-01').primarySharedKey]"
                          }
                        },
                        "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                        "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                        "customDomainConfiguration": {
                          "certificatePassword": "[parameters('certificatePassword')]",
                          "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                          "dnsSuffix": "[parameters('dnsSuffix')]"
                        },
                        "vnetConfiguration": {
                          "internal": "[parameters('internal')]",
                          "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('infrastructureSubnetId'), null())]",
                          "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('dockerBridgeCidr'), null())]",
                          "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedCidr'), null())]",
                          "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedDnsIP'), null())]"
                        },
                        "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                        "zoneRedundant": "[parameters('zoneRedundant')]",
                        "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
                      },
                      "dependsOn": [
                        "logAnalyticsWorkspace"
                      ]
                    },
                    "managedEnvironment_roleAssignments": {
                      "copy": {
                        "name": "managedEnvironment_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "managedEnvironment"
                      ]
                    },
                    "managedEnvironment_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "managedEnvironment"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Managed Environment was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('managedEnvironment', '2023-11-02-preview', 'full').location]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Managed Environment."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Managed Environment."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('managedEnvironment', '2023-11-02-preview', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "defaultDomain": {
                      "type": "string",
                      "metadata": {
                        "description": "The Default domain of the Managed Environment."
                      },
                      "value": "[reference('managedEnvironment').defaultDomain]"
                    },
                    "staticIp": {
                      "type": "string",
                      "metadata": {
                        "description": "The IP address of the Managed Environment."
                      },
                      "value": "[reference('managedEnvironment').staticIp]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('acaNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "The Azure Container Apps (ACA) cluster."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('acaDnsZoneDeployment-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.defaultDomain.value]"
                  },
                  "location": {
                    "value": "global"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "virtualNetworkLinks": {
                    "value": "[variables('virtualNetworkLinks')]"
                  },
                  "a": {
                    "value": [
                      {
                        "name": "*",
                        "aRecords": [
                          {
                            "ipv4Address": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.staticIp.value]"
                          }
                        ]
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.28.1.47646",
                      "templateHash": "11412633288570781407"
                    },
                    "name": "Private DNS Zones",
                    "description": "This module deploys a Private DNS zone.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "aType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "aRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ipv4Address": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The IPv4 address of this A record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of A records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "aaaaType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "aaaaRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ipv6Address": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The IPv6 address of this AAAA record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of AAAA records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "cnameType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "cnameRecord": {
                            "type": "object",
                            "properties": {
                              "cname": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The canonical name of the CNAME record."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The CNAME record in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "mxType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "mxRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "exchange": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The domain name of the mail host for this MX record."
                                  }
                                },
                                "preference": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The preference value for this MX record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of MX records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ptrType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "ptrRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "ptrdname": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The PTR target domain name for this PTR record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of PTR records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "soaType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "soaRecord": {
                            "type": "object",
                            "properties": {
                              "email": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The email contact for this SOA record."
                                }
                              },
                              "expireTime": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. The expire time for this SOA record."
                                }
                              },
                              "host": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The domain name of the authoritative name server for this SOA record."
                                }
                              },
                              "minimumTtl": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                                }
                              },
                              "refreshTime": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. The refresh value for this SOA record."
                                }
                              },
                              "retryTime": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. The retry time for this SOA record."
                                }
                              },
                              "serialNumber": {
                                "type": "int",
                                "metadata": {
                                  "description": "Required. The serial number for this SOA record."
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The SOA record in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "srvType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "srvRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "priority": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The priority value for this SRV record."
                                  }
                                },
                                "weight": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The weight value for this SRV record."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The port value for this SRV record."
                                  }
                                },
                                "target": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The target domain name for this SRV record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of SRV records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "txtType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the record."
                            }
                          },
                          "metadata": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The metadata of the record."
                            }
                          },
                          "ttl": {
                            "type": "int",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The TTL of the record."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "txtRecords": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "value": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. The text value of this TXT record."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The list of TXT records in the record set."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "a": {
                      "$ref": "#/definitions/aType",
                      "metadata": {
                        "description": "Optional. Array of A records."
                      }
                    },
                    "aaaa": {
                      "$ref": "#/definitions/aaaaType",
                      "metadata": {
                        "description": "Optional. Array of AAAA records."
                      }
                    },
                    "cname": {
                      "$ref": "#/definitions/cnameType",
                      "metadata": {
                        "description": "Optional. Array of CNAME records."
                      }
                    },
                    "mx": {
                      "$ref": "#/definitions/mxType",
                      "metadata": {
                        "description": "Optional. Array of MX records."
                      }
                    },
                    "ptr": {
                      "$ref": "#/definitions/ptrType",
                      "metadata": {
                        "description": "Optional. Array of PTR records."
                      }
                    },
                    "soa": {
                      "$ref": "#/definitions/soaType",
                      "metadata": {
                        "description": "Optional. Array of SOA records."
                      }
                    },
                    "srv": {
                      "$ref": "#/definitions/srvType",
                      "metadata": {
                        "description": "Optional. Array of SRV records."
                      }
                    },
                    "txt": {
                      "$ref": "#/definitions/txtType",
                      "metadata": {
                        "description": "Optional. Array of TXT records."
                      }
                    },
                    "virtualNetworkLinks": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "privateDnsZone_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_roleAssignments": {
                      "copy": {
                        "name": "privateDnsZone_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_A": {
                      "copy": {
                        "name": "privateDnsZone_A",
                        "count": "[length(coalesce(parameters('a'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                          },
                          "aRecords": {
                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8657463061873174631"
                            },
                            "name": "Private DNS Zone A record",
                            "description": "This module deploys a Private DNS Zone A record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the A record."
                              }
                            },
                            "aRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of A records in the record set."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "A": {
                              "type": "Microsoft.Network/privateDnsZones/A",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "aRecords": "[parameters('aRecords')]",
                                "metadata": "[parameters('metadata')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "A_roleAssignments": {
                              "copy": {
                                "name": "A_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "A"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed A record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed A record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed A record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_AAAA": {
                      "copy": {
                        "name": "privateDnsZone_AAAA",
                        "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                          },
                          "aaaaRecords": {
                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "1725749611610769138"
                            },
                            "name": "Private DNS Zone AAAA record",
                            "description": "This module deploys a Private DNS Zone AAAA record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the AAAA record."
                              }
                            },
                            "aaaaRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of AAAA records in the record set."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "AAAA": {
                              "type": "Microsoft.Network/privateDnsZones/AAAA",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "aaaaRecords": "[parameters('aaaaRecords')]",
                                "metadata": "[parameters('metadata')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "AAAA_roleAssignments": {
                              "copy": {
                                "name": "AAAA_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "AAAA"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed AAAA record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed AAAA record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed AAAA record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_CNAME": {
                      "copy": {
                        "name": "privateDnsZone_CNAME",
                        "count": "[length(coalesce(parameters('cname'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                          },
                          "cnameRecord": {
                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "12750497126800708872"
                            },
                            "name": "Private DNS Zone CNAME record",
                            "description": "This module deploys a Private DNS Zone CNAME record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the CNAME record."
                              }
                            },
                            "cnameRecord": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A CNAME record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "CNAME": {
                              "type": "Microsoft.Network/privateDnsZones/CNAME",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "cnameRecord": "[parameters('cnameRecord')]",
                                "metadata": "[parameters('metadata')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "CNAME_roleAssignments": {
                              "copy": {
                                "name": "CNAME_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "CNAME"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed CNAME record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed CNAME record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed CNAME record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_MX": {
                      "copy": {
                        "name": "privateDnsZone_MX",
                        "count": "[length(coalesce(parameters('mx'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "mxRecords": {
                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "13512848802819943036"
                            },
                            "name": "Private DNS Zone MX record",
                            "description": "This module deploys a Private DNS Zone MX record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the MX record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "mxRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of MX records in the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "MX": {
                              "type": "Microsoft.Network/privateDnsZones/MX",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]",
                                "mxRecords": "[parameters('mxRecords')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "MX_roleAssignments": {
                              "copy": {
                                "name": "MX_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "MX"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed MX record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed MX record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed MX record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_PTR": {
                      "copy": {
                        "name": "privateDnsZone_PTR",
                        "count": "[length(coalesce(parameters('ptr'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "ptrRecords": {
                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "5069219418696231980"
                            },
                            "name": "Private DNS Zone PTR record",
                            "description": "This module deploys a Private DNS Zone PTR record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the PTR record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "ptrRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of PTR records in the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "PTR": {
                              "type": "Microsoft.Network/privateDnsZones/PTR",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]",
                                "ptrRecords": "[parameters('ptrRecords')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "PTR_roleAssignments": {
                              "copy": {
                                "name": "PTR_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "PTR"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed PTR record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed PTR record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed PTR record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_SOA": {
                      "copy": {
                        "name": "privateDnsZone_SOA",
                        "count": "[length(coalesce(parameters('soa'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "soaRecord": {
                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8649693365938652763"
                            },
                            "name": "Private DNS Zone SOA record",
                            "description": "This module deploys a Private DNS Zone SOA record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the SOA record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "soaRecord": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A SOA record."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "SOA": {
                              "type": "Microsoft.Network/privateDnsZones/SOA",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]",
                                "soaRecord": "[parameters('soaRecord')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "SOA_roleAssignments": {
                              "copy": {
                                "name": "SOA_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "SOA"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed SOA record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed SOA record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed SOA record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_SRV": {
                      "copy": {
                        "name": "privateDnsZone_SRV",
                        "count": "[length(coalesce(parameters('srv'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "srvRecords": {
                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "1580431299497536987"
                            },
                            "name": "Private DNS Zone SRV record",
                            "description": "This module deploys a Private DNS Zone SRV record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the SRV record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "srvRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of SRV records in the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "SRV": {
                              "type": "Microsoft.Network/privateDnsZones/SRV",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]",
                                "srvRecords": "[parameters('srvRecords')]",
                                "ttl": "[parameters('ttl')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "SRV_roleAssignments": {
                              "copy": {
                                "name": "SRV_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "SRV"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed SRV record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed SRV record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed SRV record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_TXT": {
                      "copy": {
                        "name": "privateDnsZone_TXT",
                        "count": "[length(coalesce(parameters('txt'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                          },
                          "metadata": {
                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                          },
                          "txtRecords": {
                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                          },
                          "ttl": {
                            "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "1628766837655887758"
                            },
                            "name": "Private DNS Zone TXT record",
                            "description": "This module deploys a Private DNS Zone TXT record.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the TXT record."
                              }
                            },
                            "metadata": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The metadata attached to the record set."
                              }
                            },
                            "ttl": {
                              "type": "int",
                              "defaultValue": 3600,
                              "metadata": {
                                "description": "Optional. The TTL (time-to-live) of the records in the record set."
                              }
                            },
                            "txtRecords": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of TXT records in the record set."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "TXT": {
                              "type": "Microsoft.Network/privateDnsZones/TXT",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "properties": {
                                "metadata": "[parameters('metadata')]",
                                "ttl": "[parameters('ttl')]",
                                "txtRecords": "[parameters('txtRecords')]"
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            },
                            "TXT_roleAssignments": {
                              "copy": {
                                "name": "TXT_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "TXT"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed TXT record."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed TXT record."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed TXT record."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    },
                    "privateDnsZone_virtualNetworkLinks": {
                      "copy": {
                        "name": "privateDnsZone_virtualNetworkLinks",
                        "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateDnsZone-VirtualNetworkLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "privateDnsZoneName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                          },
                          "virtualNetworkResourceId": {
                            "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                          },
                          "registrationEnabled": {
                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "8423159394395901832"
                            },
                            "name": "Private DNS Zone Virtual Network Link",
                            "description": "This module deploys a Private DNS Zone Virtual Network Link.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "privateDnsZoneName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                              "metadata": {
                                "description": "Optional. The name of the virtual network link."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "global",
                              "metadata": {
                                "description": "Optional. The location of the PrivateDNSZone. Should be global."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registrationEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                              }
                            },
                            "virtualNetworkResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Link to another virtual network resource ID."
                              }
                            }
                          },
                          "resources": {
                            "privateDnsZone": {
                              "existing": true,
                              "type": "Microsoft.Network/privateDnsZones",
                              "apiVersion": "2020-06-01",
                              "name": "[parameters('privateDnsZoneName')]"
                            },
                            "virtualNetworkLink": {
                              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                              "apiVersion": "2020-06-01",
                              "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "registrationEnabled": "[parameters('registrationEnabled')]",
                                "virtualNetwork": {
                                  "id": "[parameters('virtualNetworkResourceId')]"
                                }
                              },
                              "dependsOn": [
                                "privateDnsZone"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed virtual network link."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed virtual network link."
                              },
                              "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed virtual network link."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('virtualNetworkLink', '2020-06-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "The Private DNS zone containing the ACA load balancer IP"
              }
            }
          ],
          "outputs": {
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container Apps environment."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('acaenv-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.name.value]"
            },
            "applicationInsightsName": {
              "type": "string",
              "metadata": {
                "description": "The name of the Application Insights instance."
              },
              "value": "[if(parameters('enableApplicationInsights'), reference(resourceId('Microsoft.Resources/deployments', take(format('applicationInsights-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.name.value, '')]"
            },
            "workloadProfileNames": {
              "type": "array",
              "metadata": {
                "description": "The name of the workload profiles provisioned in the Container Apps environment."
              },
              "value": [
                "[variables('workProfileName')]"
              ]
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[parameters('deploySampleApplication')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('sampleApplication-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "containerAppsEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
          },
          "workloadProfileName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.workloadProfileNames.value[0]]"
          },
          "containerRegistryUserAssignedIdentityId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "16668830347449265665"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the Azure Container Apps instances."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deplotment telemetry."
              }
            },
            "helloWorldContainerAppName": {
              "type": "string",
              "defaultValue": "ca-simple-hello",
              "minLength": 2,
              "maxLength": 32,
              "metadata": {
                "description": "Optional. The name of the Container App. If set, it overrides the name generated by the template."
              }
            },
            "containerRegistryUserAssignedIdentityId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing user-assigned managed identity to be assigned to the Container App to be able to pull images from the container registry."
              }
            },
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Container Apps environment in which the Container App will be deployed."
              }
            },
            "workloadProfileName": {
              "type": "string",
              "metadata": {
                "description": "The container apps environment workload profile to use for the Container App."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[parameters('helloWorldContainerAppName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('helloWorldContainerAppName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "environmentId": {
                    "value": "[parameters('containerAppsEnvironmentId')]"
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[parameters('containerRegistryUserAssignedIdentityId')]"
                      ]
                    }
                  },
                  "workloadProfileName": {
                    "value": "[parameters('workloadProfileName')]"
                  },
                  "containers": {
                    "value": [
                      {
                        "name": "simple-hello",
                        "image": "mcr.microsoft.com/azuredocs/containerapps-helloworld:latest",
                        "resources": {
                          "cpu": "[json('0.25')]",
                          "memory": "0.5Gi"
                        }
                      }
                    ]
                  },
                  "scaleMinReplicas": {
                    "value": 2
                  },
                  "scaleMaxReplicas": {
                    "value": 10
                  },
                  "activeRevisionsMode": {
                    "value": "Single"
                  },
                  "ingressExternal": {
                    "value": true
                  },
                  "ingressAllowInsecure": {
                    "value": false
                  },
                  "ingressTargetPort": {
                    "value": 80
                  },
                  "ingressTransport": {
                    "value": "auto"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "6251669835322227304"
                    },
                    "name": "Container Apps",
                    "description": "This module deploys a Container App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "container": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/environmentVar"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container environment variables."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Container image tag."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom container name."
                          }
                        },
                        "probes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbe"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of probes for the container."
                          }
                        },
                        "resources": {
                          "type": "object",
                          "metadata": {
                            "description": "Required. Container resource requirements."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/volumeMount"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container volume mounts."
                          }
                        }
                      }
                    },
                    "environmentVar": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Non-secret environment variable value."
                          }
                        }
                      }
                    },
                    "containerAppProbe": {
                      "type": "object",
                      "properties": {
                        "failureThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                          }
                        },
                        "httpGet": {
                          "$ref": "#/definitions/containerAppProbeHttpGet",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTPGet specifies the http request to perform."
                          }
                        },
                        "initialDelaySeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                          }
                        },
                        "periodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                          }
                        },
                        "successThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                          }
                        },
                        "tcpSocket": {
                          "$ref": "#/definitions/containerAppProbeTcpSocket",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                          }
                        },
                        "terminationGracePeriodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                          }
                        },
                        "timeoutSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The type of probe."
                          }
                        }
                      }
                    },
                    "containerAppProbeHttpGet": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to. Defaults to the pod IP."
                          }
                        },
                        "httpHeaders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTP headers to set in the request."
                          }
                        },
                        "path": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path to access on the HTTP server."
                          }
                        },
                        "port": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Name or number of the port to access on the container."
                          }
                        },
                        "scheme": {
                          "type": "string",
                          "allowedValues": [
                            "HTTP",
                            "HTTPS"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                          }
                        }
                      }
                    },
                    "containerAppProbeHttpGetHeadersItem": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the header."
                          }
                        },
                        "value": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Value of the header."
                          }
                        }
                      }
                    },
                    "containerAppProbeTcpSocket": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to, defaults to the pod IP."
                          }
                        },
                        "port": {
                          "type": "int",
                          "minValue": 1,
                          "maxValue": 65535,
                          "metadata": {
                            "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                          }
                        }
                      }
                    },
                    "volumeMount": {
                      "type": "object",
                      "properties": {
                        "mountPath": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                          }
                        },
                        "subPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                          }
                        },
                        "volumeName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. This must match the Name of a Volume."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                      }
                    },
                    "stickySessionsAffinity": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "sticky"
                      ],
                      "metadata": {
                        "description": "Optional. Bool indicating if the Container App should enable session affinity."
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "allowedValues": [
                        "auto",
                        "http",
                        "http2",
                        "tcp"
                      ],
                      "metadata": {
                        "description": "Optional. Ingress transport protocol."
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                      }
                    },
                    "ingressTargetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Optional. Target Port in containers for traffic from ingress."
                      }
                    },
                    "scaleMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                      }
                    },
                    "scaleMinReplicas": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                      }
                    },
                    "scaleRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Scaling rules."
                      }
                    },
                    "activeRevisionsMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "allowedValues": [
                        "Multiple",
                        "Single"
                      ],
                      "metadata": {
                        "description": "Optional. Controls how active revisions are handled for the Container app."
                      }
                    },
                    "environmentId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of environment."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom domain bindings for Container App hostnames."
                      }
                    },
                    "exposedPort": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rules to restrict incoming IP address."
                      }
                    },
                    "trafficLabel": {
                      "type": "string",
                      "defaultValue": "label-1",
                      "metadata": {
                        "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                      }
                    },
                    "trafficLatestRevision": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                      }
                    },
                    "trafficRevisionName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of a revision."
                      }
                    },
                    "trafficWeight": {
                      "type": "int",
                      "defaultValue": 100,
                      "metadata": {
                        "description": "Optional. Traffic weight assigned to a revision."
                      }
                    },
                    "dapr": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dapr configuration for the Container App."
                      }
                    },
                    "maxInactiveRevisions": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Max inactive revisions a Container App can have."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/container"
                      },
                      "metadata": {
                        "description": "Required. List of container definitions for the Container App."
                      }
                    },
                    "initContainersTemplate": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of specialized containers that run before app containers."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The secrets of the Container App."
                      }
                    },
                    "revisionSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. User friendly suffix that is appended to the revision name."
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of volume definitions for the Container App."
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Workload profile name to pin for container app execution."
                      }
                    }
                  },
                  "variables": {
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "containerApp": {
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "environmentId": "[parameters('environmentId')]",
                        "configuration": {
                          "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                          "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                          "ingress": {
                            "allowInsecure": "[parameters('ingressAllowInsecure')]",
                            "customDomains": "[if(not(empty(parameters('customDomains'))), parameters('customDomains'), null())]",
                            "exposedPort": "[parameters('exposedPort')]",
                            "external": "[parameters('ingressExternal')]",
                            "ipSecurityRestrictions": "[if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null())]",
                            "targetPort": "[parameters('ingressTargetPort')]",
                            "stickySessions": {
                              "affinity": "[parameters('stickySessionsAffinity')]"
                            },
                            "traffic": [
                              {
                                "label": "[parameters('trafficLabel')]",
                                "latestRevision": "[parameters('trafficLatestRevision')]",
                                "revisionName": "[parameters('trafficRevisionName')]",
                                "weight": "[parameters('trafficWeight')]"
                              }
                            ],
                            "transport": "[parameters('ingressTransport')]"
                          },
                          "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                          "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                          "secrets": "[variables('secretList')]"
                        },
                        "template": {
                          "containers": "[parameters('containers')]",
                          "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                          "revisionSuffix": "[parameters('revisionSuffix')]",
                          "scale": {
                            "maxReplicas": "[parameters('scaleMaxReplicas')]",
                            "minReplicas": "[parameters('scaleMinReplicas')]",
                            "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                          },
                          "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      }
                    },
                    "containerApp_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    },
                    "containerApp_roleAssignments": {
                      "copy": {
                        "name": "containerApp_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Container App."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                    },
                    "fqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The configuration of ingress fqdn."
                      },
                      "value": "[reference('containerApp').configuration.ingress.fqdn]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Container App was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container App."
                      },
                      "value": "[parameters('name')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('containerApp', '2023-05-01', 'full').location]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "helloWorldAppFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the \"Hello World\" Container App."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('helloWorldContainerAppName')), '2022-09-01').outputs.fqdn.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[equals(parameters('exposeContainerAppsWith'), 'applicationGateway')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('applicationGateway-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "applicationGatewayCertificateKeyName": {
            "value": "[parameters('applicationGatewayCertificateKeyName')]"
          },
          "applicationGatewayFqdn": {
            "value": "[parameters('applicationGatewayFqdn')]"
          },
          "applicationGatewayPrimaryBackendEndFqdn": "[if(parameters('deploySampleApplication'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('sampleApplication-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.helloWorldAppFqdn.value), createObject('value', ''))]",
          "applicationGatewaySubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
          },
          "base64Certificate": {
            "value": "[parameters('base64Certificate')]"
          },
          "keyVaultId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultResourceId.value]"
          },
          "deployZoneRedundantResources": {
            "value": "[parameters('deployZoneRedundantResources')]"
          },
          "enableDdosProtection": {
            "value": "[parameters('enableDdosProtection')]"
          },
          "applicationGatewayLogAnalyticsId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "13769306330739717588"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created. This needs to be the same region as the spoke."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Defines whether to enable telemetry for the modules deployment."
              }
            },
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Application Gateawy. Must match the TLS certificate."
              }
            },
            "applicationGatewaySubnetId": {
              "type": "string",
              "metadata": {
                "description": "The existing subnet resource ID to use for Application Gateway."
              }
            },
            "applicationGatewayPrimaryBackendEndFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the primary backend endpoint."
              }
            },
            "appGatewayBackendHealthProbePath": {
              "type": "string",
              "defaultValue": "/",
              "metadata": {
                "description": "The path to use for Application Gateway's backend health probe."
              }
            },
            "base64Certificate": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "The base64 encoded certificate to use for Application Gateway certificate. If this is provided, the certificate will be added to the Key Vault."
              }
            },
            "applicationGatewayCertificateKeyName": {
              "type": "string",
              "metadata": {
                "description": "The name of the certificate key to use for Application Gateway certificate."
              }
            },
            "applicationGatewayLogAnalyticsId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "The resource ID of the exsiting Log Analytics workload for diagnostic settngs, or nothing if you don't need any."
              }
            },
            "keyVaultId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the existing Key Vault which contains Application Gateway's cert."
              }
            },
            "deployZoneRedundantResources": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional, default value is true. If true, any resources that support AZ will be deployed in all three AZ. However if the selected region is not supporting AZ, this parameter needs to be set to false."
              }
            },
            "enableDdosProtection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. DDoS protection mode for the Public IP of the Application Gateway. See https://learn.microsoft.com/azure/ddos-protection/ddos-protection-sku-comparison#skus"
              }
            }
          },
          "variables": {
            "keyVaultIdTokens": "[split(parameters('keyVaultId'), '/')]",
            "keyVaultSubscriptionId": "[variables('keyVaultIdTokens')[2]]",
            "keyVaultResourceGroupName": "[variables('keyVaultIdTokens')[4]]",
            "keyVaultName": "[variables('keyVaultIdTokens')[8]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('agwNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4794676376542080363"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              },
              "metadata": {
                "description": "User-configured naming rules"
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayUserAssignedIdentity]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "998408512764899332"
                    },
                    "name": "User Assigned Identities",
                    "description": "This module deploys a User Assigned Identity.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "federatedIdentityCredentialsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the federated identity credential."
                            }
                          },
                          "audiences": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. The list of audiences that can appear in the issued token."
                            }
                          },
                          "issuer": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The URL of the issuer to be trusted."
                            }
                          },
                          "subject": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The identifier of the external identity."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the User Assigned Identity."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "federatedIdentityCredentials": {
                      "$ref": "#/definitions/federatedIdentityCredentialsType",
                      "metadata": {
                        "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                      "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "userAssignedIdentity": {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2023-01-31",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]"
                    },
                    "userAssignedIdentity_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_roleAssignments": {
                      "copy": {
                        "name": "userAssignedIdentity_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    },
                    "userAssignedIdentity_federatedIdentityCredentials": {
                      "copy": {
                        "name": "userAssignedIdentity_federatedIdentityCredentials",
                        "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                          },
                          "userAssignedIdentityName": {
                            "value": "[parameters('name')]"
                          },
                          "audiences": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                          },
                          "issuer": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                          },
                          "subject": {
                            "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "4317497001099502136"
                            },
                            "name": "User Assigned Identity Federated Identity Credential",
                            "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "userAssignedIdentityName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secret."
                              }
                            },
                            "audiences": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                              }
                            },
                            "issuer": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                              }
                            },
                            "subject": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                              "apiVersion": "2023-01-31",
                              "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                              "properties": {
                                "audiences": "[parameters('audiences')]",
                                "issuer": "[parameters('issuer')]",
                                "subject": "[parameters('subject')]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the federated identity credential."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the federated identity credential."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the federated identity credential was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "userAssignedIdentity"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the user assigned identity."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the user assigned identity."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID (object ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').principalId]"
                    },
                    "clientId": {
                      "type": "string",
                      "metadata": {
                        "description": "The client ID (application ID) of the user assigned identity."
                      },
                      "value": "[reference('userAssignedIdentity').clientId]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the user assigned identity was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64))]"
              ],
              "metadata": {
                "description": "A user-assigned managed identity that enables Application Gateway to access Key Vault for its TLS certs."
              }
            },
            {
              "condition": "[not(empty(parameters('base64Certificate')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "subscriptionId": "[variables('keyVaultSubscriptionId')]",
              "resourceGroup": "[variables('keyVaultResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[variables('keyVaultName')]"
                  },
                  "appGatewayCertificateData": {
                    "value": "[parameters('base64Certificate')]"
                  },
                  "appGatewayCertificateKeyName": {
                    "value": "[parameters('applicationGatewayCertificateKeyName')]"
                  },
                  "appGatewayUserAssignedIdentityPrincipalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.principalId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "15933024016056946085"
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string"
                    },
                    "appGatewayUserAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "appGatewayCertificateKeyName": {
                      "type": "string"
                    },
                    "appGatewayCertificateData": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultSecretUserRoleGuid": "4633458b-17de-408a-b874-0445c86b69e6"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2023-07-01",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "properties": {
                        "value": "[parameters('appGatewayCertificateData')]",
                        "contentType": "application/x-pkcs12",
                        "attributes": {
                          "enabled": true
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]",
                      "name": "[guid(subscription().id, resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), parameters('appGatewayUserAssignedIdentityPrincipalId'), 'KeyVaultSecretUser')]",
                      "properties": {
                        "principalId": "[parameters('appGatewayUserAssignedIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('keyVaultSecretUserRoleGuid'))]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "SecretUri": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('appGatewayCertificateKeyName')), '2023-07-01').secretUri]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGatewayPip]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "skuName": {
                    "value": "Standard"
                  },
                  "publicIPAllocationMethod": {
                    "value": "Static"
                  },
                  "ddosSettings": "[if(parameters('enableDdosProtection'), createObject('value', createObject('protectionMode', 'Enabled')), createObject('value', null()))]",
                  "zones": "[if(parameters('deployZoneRedundantResources'), createObject('value', createArray(1, 2, 3)), createObject('value', createArray()))]",
                  "diagnosticSettings": {
                    "value": [
                      {
                        "metricCategories": [
                          {
                            "category": "AllMetrics"
                          }
                        ],
                        "name": "publicIpDiagnosticSettings",
                        "workspaceResourceId": "[parameters('applicationGatewayLogAnalyticsId')]"
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "10356333973104369631"
                    },
                    "name": "Public IP Addresses",
                    "description": "This module deploys a Public IP Address.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "dnsSettingsType": {
                      "type": "object",
                      "properties": {
                        "domainNameLabel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                          }
                        },
                        "domainNameLabelScope": {
                          "type": "string",
                          "allowedValues": [
                            "",
                            "NoReuse",
                            "ResourceGroupReuse",
                            "SubscriptionReuse",
                            "TenantReuse"
                          ],
                          "metadata": {
                            "description": "Required. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                          }
                        },
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                          }
                        },
                        "reverseFqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                          }
                        }
                      }
                    },
                    "ddosSettingsType": {
                      "type": "object",
                      "properties": {
                        "ddosProtectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                          }
                        },
                        "protectionMode": {
                          "type": "string",
                          "allowedValues": [
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. The DDoS protection policy customizations."
                          }
                        }
                      }
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIpPrefixResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "allowedValues": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "dnsSettings": {
                      "$ref": "#/definitions/dnsSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DNS settings of the public IP address."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "ddosSettings": {
                      "$ref": "#/definitions/ddosSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "idleTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 4,
                      "metadata": {
                        "description": "Optional. The idle timeout of the public IP address."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "publicIpAddress": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2023-09-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                      "properties": {
                        "ddosSettings": "[parameters('ddosSettings')]",
                        "dnsSettings": "[parameters('dnsSettings')]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                        "ipTags": null
                      }
                    },
                    "publicIpAddress_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_roleAssignments": {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_diagnosticSettings": {
                      "copy": {
                        "name": "publicIpAddress_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('publicIpAddress', '2023-09-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('applicationGateway-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "backendAddressPools": {
                    "value": [
                      {
                        "name": "acaServiceBackend",
                        "properties": {
                          "backendAddresses": "[if(not(empty(parameters('applicationGatewayPrimaryBackendEndFqdn'))), createArray(createObject('fqdn', parameters('applicationGatewayPrimaryBackendEndFqdn'))), null())]"
                        }
                      }
                    ]
                  },
                  "backendHttpSettingsCollection": {
                    "value": [
                      {
                        "name": "https",
                        "properties": {
                          "port": 443,
                          "protocol": "Https",
                          "cookieBasedAffinity": "Disabled",
                          "pickHostNameFromBackendAddress": true,
                          "requestTimeout": 20,
                          "probe": "[if(not(empty(parameters('applicationGatewayPrimaryBackendEndFqdn'))), createObject('id', resourceId('Microsoft.Network/applicationGateways/probes', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway, 'webProbe')), null())]"
                        }
                      }
                    ]
                  },
                  "diagnosticSettings": {
                    "value": [
                      {
                        "metricCategories": [
                          {
                            "category": "AllMetrics"
                          }
                        ],
                        "name": "customSetting",
                        "workspaceResourceId": "[parameters('applicationGatewayLogAnalyticsId')]"
                      }
                    ]
                  },
                  "enableHttp2": {
                    "value": true
                  },
                  "frontendIPConfigurations": {
                    "value": [
                      {
                        "name": "appGwPublicFrontendIp",
                        "properties": {
                          "privateIPAllocationMethod": "Dynamic",
                          "publicIPAddress": {
                            "id": "[reference(resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
                          }
                        }
                      }
                    ]
                  },
                  "frontendPorts": "[if(not(empty(parameters('base64Certificate'))), createObject('value', createArray(createObject('name', 'port_443', 'properties', createObject('port', 443)), createObject('name', 'port_80', 'properties', createObject('port', 80)))), createObject('value', createArray(createObject('name', 'port_80', 'properties', createObject('port', 80)))))]",
                  "gatewayIPConfigurations": {
                    "value": [
                      {
                        "name": "appGatewayIpConfig",
                        "properties": {
                          "subnet": {
                            "id": "[parameters('applicationGatewaySubnetId')]"
                          }
                        }
                      }
                    ]
                  },
                  "httpListeners": "[if(empty(parameters('base64Certificate')), createObject('value', createArray(createObject('name', 'httpListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_80', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'protocol', 'Http', 'hostnames', createArray(), 'requireServerNameIndication', false())))), createObject('value', createArray(createObject('name', 'httpsListener', 'properties', createObject('frontendIPConfiguration', createObject('id', format('{0}/frontendIPConfigurations/appGwPublicFrontendIp', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'frontendPort', createObject('id', format('{0}/frontendPorts/port_443', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))), 'protocol', 'Https', 'sslCertificate', createObject('id', format('{0}/sslCertificates/{1}', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway), parameters('applicationGatewayFqdn'))), 'hostnames', createArray(), 'requireServerNameIndication', false())))))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "managedIdentities": {
                    "value": {
                      "userAssignedResourceIds": [
                        "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
                      ]
                    }
                  },
                  "probes": "[if(not(empty(parameters('applicationGatewayPrimaryBackendEndFqdn'))), createObject('value', createArray(createObject('name', 'webProbe', 'properties', createObject('protocol', 'Https', 'host', parameters('applicationGatewayPrimaryBackendEndFqdn'), 'path', parameters('appGatewayBackendHealthProbePath'), 'interval', 30, 'timeout', 30, 'unhealthyThreshold', 3, 'pickHostNameFromBackendHttpSettings', false(), 'minServers', 0, 'match', createObject('statusCodes', createArray('200-499')))))), createObject('value', null()))]",
                  "requestRoutingRules": {
                    "value": [
                      {
                        "name": "routingRules",
                        "properties": {
                          "ruleType": "Basic",
                          "priority": 100,
                          "httpListener": {
                            "id": "[format('{0}/httpListeners/httpListener', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          },
                          "backendAddressPool": {
                            "id": "[format('{0}/backendAddressPools/acaServiceBackend', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          },
                          "backendHttpSettings": {
                            "id": "[format('{0}/backendHttpSettingsCollection/https', resourceId('Microsoft.Network/applicationGateways', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway))]"
                          }
                        }
                      }
                    ]
                  },
                  "sku": {
                    "value": "WAF_v2"
                  },
                  "sslCertificates": "[if(not(empty(parameters('base64Certificate'))), createObject('value', createArray(createObject('name', parameters('applicationGatewayFqdn'), 'properties', createObject('keyVaultSecretId', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.SecretUri.value)))), createObject('value', createArray()))]",
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "firewallPolicyId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('appGwWafPolicy-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
                  },
                  "sslPolicyType": {
                    "value": "Predefined"
                  },
                  "sslPolicyName": {
                    "value": "AppGwSslPolicy20220101"
                  },
                  "zones": {
                    "value": [
                      "1",
                      "2",
                      "3"
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.170.59819",
                      "templateHash": "8087239342888324125"
                    },
                    "name": "Network Application Gateways",
                    "description": "This module deploys a Network Application Gateway.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateEndpointType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private endpoint."
                            }
                          },
                          "location": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The location to deploy the private endpoint to."
                            }
                          },
                          "privateLinkServiceConnectionName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private link connection to create."
                            }
                          },
                          "service": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\"."
                            }
                          },
                          "subnetResourceId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                            }
                          },
                          "privateDnsZoneGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                            }
                          },
                          "privateDnsZoneResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                            }
                          },
                          "isManualConnection": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. If Manual Private Link Connection is required."
                            }
                          },
                          "manualConnectionRequestMessage": {
                            "type": "string",
                            "nullable": true,
                            "maxLength": 140,
                            "metadata": {
                              "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                            }
                          },
                          "customDnsConfigs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Required. Fqdn that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Custom DNS configurations."
                            }
                          },
                          "ipConfigurations": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                            }
                          },
                          "applicationSecurityGroupResourceIds": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                            }
                          },
                          "customNetworkInterfaceName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The custom name of the network interface attached to the private endpoint."
                            }
                          },
                          "lock": {
                            "$ref": "#/definitions/lockType",
                            "metadata": {
                              "description": "Optional. Specify the type of lock."
                            }
                          },
                          "roleAssignments": {
                            "$ref": "#/definitions/roleAssignmentType",
                            "metadata": {
                              "description": "Optional. Array of role assignments to create."
                            }
                          },
                          "tags": {
                            "type": "object",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                            }
                          },
                          "enableTelemetry": {
                            "type": "bool",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Enable/Disable usage telemetry for module."
                            }
                          },
                          "resourceGroupName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "diagnosticSettingType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of diagnostic setting."
                            }
                          },
                          "logCategoriesAndGroups": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                  }
                                },
                                "categoryGroup": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                            }
                          },
                          "metricCategories": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "category": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                  }
                                },
                                "enabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                  }
                                }
                              }
                            },
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                            }
                          },
                          "logAnalyticsDestinationType": {
                            "type": "string",
                            "allowedValues": [
                              "AzureDiagnostics",
                              "Dedicated"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                            }
                          },
                          "workspaceResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "storageAccountResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "eventHubAuthorizationRuleResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                            }
                          },
                          "eventHubName": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                            }
                          },
                          "marketplacePartnerResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 80,
                      "metadata": {
                        "description": "Required. Name of the Application Gateway."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "authenticationCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Authentication certificates of the application gateway resource."
                      }
                    },
                    "autoscaleMaxCapacity": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Upper bound on number of Application Gateway capacity."
                      }
                    },
                    "autoscaleMinCapacity": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. Lower bound on number of Application Gateway capacity."
                      }
                    },
                    "backendAddressPools": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend address pool of the application gateway resource."
                      }
                    },
                    "backendHttpSettingsCollection": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend http settings of the application gateway resource."
                      }
                    },
                    "customErrorConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom error configurations of the application gateway resource."
                      }
                    },
                    "enableFips": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether FIPS is enabled on the application gateway resource."
                      }
                    },
                    "enableHttp2": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Whether HTTP2 is enabled on the application gateway resource."
                      }
                    },
                    "firewallPolicyId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The resource ID of an associated firewall policy. Should be configured for security reasons."
                      }
                    },
                    "frontendIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Frontend IP addresses of the application gateway resource."
                      }
                    },
                    "frontendPorts": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Frontend ports of the application gateway resource."
                      }
                    },
                    "gatewayIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Subnets of the application gateway resource."
                      }
                    },
                    "enableRequestBuffering": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable request buffering."
                      }
                    },
                    "enableResponseBuffering": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable response buffering."
                      }
                    },
                    "httpListeners": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Http listeners of the application gateway resource."
                      }
                    },
                    "loadDistributionPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Load distribution policies of the application gateway resource."
                      }
                    },
                    "privateEndpoints": {
                      "$ref": "#/definitions/privateEndpointType",
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "privateLinkConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. PrivateLink configurations on application gateway."
                      }
                    },
                    "probes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Probes of the application gateway resource."
                      }
                    },
                    "redirectConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Redirect configurations of the application gateway resource."
                      }
                    },
                    "requestRoutingRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Request routing rules of the application gateway resource."
                      }
                    },
                    "rewriteRuleSets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rewrite rules for the application gateway resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "WAF_v2",
                      "allowedValues": [
                        "Standard_Small",
                        "Standard_Medium",
                        "Standard_Large",
                        "WAF_Medium",
                        "WAF_Large",
                        "Standard_v2",
                        "WAF_v2"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the SKU for the Application Gateway."
                      }
                    },
                    "capacity": {
                      "type": "int",
                      "defaultValue": 2,
                      "minValue": 0,
                      "maxValue": 10,
                      "metadata": {
                        "description": "Optional. The number of Application instances to be configured."
                      }
                    },
                    "sslCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. SSL certificates of the application gateway resource."
                      }
                    },
                    "sslPolicyCipherSuites": {
                      "type": "array",
                      "defaultValue": [
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
                      ],
                      "allowedValues": [
                        "TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256",
                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA",
                        "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256",
                        "TLS_DHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_DHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384",
                        "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
                        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA",
                        "TLS_RSA_WITH_AES_128_CBC_SHA256",
                        "TLS_RSA_WITH_AES_128_GCM_SHA256",
                        "TLS_RSA_WITH_AES_256_CBC_SHA",
                        "TLS_RSA_WITH_AES_256_CBC_SHA256",
                        "TLS_RSA_WITH_AES_256_GCM_SHA384"
                      ],
                      "metadata": {
                        "description": "Optional. Ssl cipher suites to be enabled in the specified order to application gateway."
                      }
                    },
                    "sslPolicyMinProtocolVersion": {
                      "type": "string",
                      "defaultValue": "TLSv1_2",
                      "allowedValues": [
                        "TLSv1_0",
                        "TLSv1_1",
                        "TLSv1_2",
                        "TLSv1_3"
                      ],
                      "metadata": {
                        "description": "Optional. Ssl protocol enums."
                      }
                    },
                    "sslPolicyName": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "AppGwSslPolicy20150501",
                        "AppGwSslPolicy20170401",
                        "AppGwSslPolicy20170401S",
                        "AppGwSslPolicy20220101",
                        "AppGwSslPolicy20220101S",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. Ssl predefined policy name enums."
                      }
                    },
                    "sslPolicyType": {
                      "type": "string",
                      "defaultValue": "Custom",
                      "allowedValues": [
                        "Custom",
                        "CustomV2",
                        "Predefined"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Ssl Policy."
                      }
                    },
                    "sslProfiles": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. SSL profiles of the application gateway resource."
                      }
                    },
                    "trustedClientCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Trusted client certificates of the application gateway resource."
                      }
                    },
                    "trustedRootCertificates": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Trusted Root certificates of the application gateway resource."
                      }
                    },
                    "urlPathMaps": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. URL path map of the application gateway resource."
                      }
                    },
                    "webApplicationFirewallConfiguration": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Application gateway web application firewall configuration. Should be configured for security reasons."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting where the resource needs to come from."
                      }
                    },
                    "diagnosticSettings": {
                      "$ref": "#/definitions/diagnosticSettingType",
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "backendSettingsCollection": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Backend settings of the application gateway resource. For default limits, see [Application Gateway limits](https://learn.microsoft.com/en-us/azure/azure-subscription-service-limits#application-gateway-limits)."
                      }
                    },
                    "listeners": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Listeners of the application gateway resource. For default limits, see [Application Gateway limits](https://learn.microsoft.com/en-us/azure/azure-subscription-service-limits#application-gateway-limits)."
                      }
                    },
                    "routingRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Routing rules of the application gateway resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null()), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-appgw.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "applicationGateway": {
                      "type": "Microsoft.Network/applicationGateways",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "properties": "[union(createObject('authenticationCertificates', parameters('authenticationCertificates'), 'autoscaleConfiguration', if(and(greater(parameters('autoscaleMaxCapacity'), 0), greaterOrEquals(parameters('autoscaleMinCapacity'), 0)), createObject('maxCapacity', parameters('autoscaleMaxCapacity'), 'minCapacity', parameters('autoscaleMinCapacity')), null()), 'backendAddressPools', parameters('backendAddressPools'), 'backendHttpSettingsCollection', parameters('backendHttpSettingsCollection'), 'backendSettingsCollection', parameters('backendSettingsCollection'), 'customErrorConfigurations', parameters('customErrorConfigurations'), 'enableHttp2', parameters('enableHttp2'), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'forceFirewallPolicyAssociation', not(empty(parameters('firewallPolicyId'))), 'frontendIPConfigurations', parameters('frontendIPConfigurations'), 'frontendPorts', parameters('frontendPorts'), 'gatewayIPConfigurations', parameters('gatewayIPConfigurations'), 'globalConfiguration', if(endsWith(parameters('sku'), 'v2'), createObject('enableRequestBuffering', parameters('enableRequestBuffering'), 'enableResponseBuffering', parameters('enableResponseBuffering')), null()), 'httpListeners', parameters('httpListeners'), 'loadDistributionPolicies', parameters('loadDistributionPolicies'), 'listeners', parameters('listeners'), 'privateLinkConfigurations', parameters('privateLinkConfigurations'), 'probes', parameters('probes'), 'redirectConfigurations', parameters('redirectConfigurations'), 'requestRoutingRules', parameters('requestRoutingRules'), 'routingRules', parameters('routingRules'), 'rewriteRuleSets', parameters('rewriteRuleSets'), 'sku', createObject('name', parameters('sku'), 'tier', if(endsWith(parameters('sku'), 'v2'), parameters('sku'), substring(parameters('sku'), 0, indexOf(parameters('sku'), '_'))), 'capacity', if(and(greater(parameters('autoscaleMaxCapacity'), 0), greaterOrEquals(parameters('autoscaleMinCapacity'), 0)), null(), parameters('capacity'))), 'sslCertificates', parameters('sslCertificates'), 'sslPolicy', if(not(equals(parameters('sslPolicyType'), 'Predefined')), createObject('cipherSuites', parameters('sslPolicyCipherSuites'), 'minProtocolVersion', parameters('sslPolicyMinProtocolVersion'), 'policyName', if(empty(parameters('sslPolicyName')), null(), parameters('sslPolicyName')), 'policyType', parameters('sslPolicyType')), createObject('policyName', if(empty(parameters('sslPolicyName')), null(), parameters('sslPolicyName')), 'policyType', parameters('sslPolicyType'))), 'sslProfiles', parameters('sslProfiles'), 'trustedClientCertificates', parameters('trustedClientCertificates'), 'trustedRootCertificates', parameters('trustedRootCertificates'), 'urlPathMaps', parameters('urlPathMaps')), if(parameters('enableFips'), createObject('enableFips', parameters('enableFips')), createObject()), if(not(empty(parameters('webApplicationFirewallConfiguration'))), createObject('webApplicationFirewallConfiguration', parameters('webApplicationFirewallConfiguration')), createObject()))]",
                      "zones": "[parameters('zones')]"
                    },
                    "applicationGateway_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "applicationGateway"
                      ]
                    },
                    "applicationGateway_diagnosticSettings": {
                      "copy": {
                        "name": "applicationGateway_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "applicationGateway"
                      ]
                    },
                    "applicationGateway_roleAssignments": {
                      "copy": {
                        "name": "applicationGateway_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/applicationGateways/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Network/applicationGateways', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "applicationGateway"
                      ]
                    },
                    "applicationGateway_privateEndpoints": {
                      "copy": {
                        "name": "applicationGateway_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-applicationGateway-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Network/applicationGateways', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Network/applicationGateways', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Network/applicationGateways', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Network/applicationGateways', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Network/applicationGateways', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroupName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                          },
                          "privateDnsZoneResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "4120048060064073955"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "ipConfigurationsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the resource that is unique within a resource group."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "memberName": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateIPAddress": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private endpoint IP configurations."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "manualPrivateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateLinkServiceConnectionsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the private link service connection."
                                    }
                                  },
                                  "properties": {
                                    "type": "object",
                                    "properties": {
                                      "groupIds": {
                                        "type": "array",
                                        "metadata": {
                                          "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                        }
                                      },
                                      "privateLinkServiceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of private link service."
                                        }
                                      },
                                      "requestMessage": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                        }
                                      }
                                    },
                                    "metadata": {
                                      "description": "Required. Properties of private link service connection."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customDnsConfigType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "fqdn": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Fqdn that resolves to private endpoint IP address."
                                    }
                                  },
                                  "ipAddresses": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. A list of private IP addresses of the private endpoint."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "$ref": "#/definitions/ipConfigurationsType",
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroupName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                              }
                            },
                            "privateDnsZoneResourceIds": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "$ref": "#/definitions/customDnsConfigType",
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "$ref": "#/definitions/privateLinkServiceConnectionsType",
                              "metadata": {
                                "description": "Optional. A grouping of information about the connection to the remote resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-04-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                  },
                                  "privateDNSResourceIds": {
                                    "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "11244630631275470040"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDNSResourceIds": {
                                      "type": "array",
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(parameters('privateDNSResourceIds'))]",
                                        "input": {
                                          "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                            },
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[if(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties.groupIds[0], reference('privateEndpoint').privateLinkServiceConnections[0].properties.groupIds[0])]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "applicationGateway"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application gateway."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application gateway."
                      },
                      "value": "[resourceId('Microsoft.Network/applicationGateways', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the application gateway was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('applicationGateway', '2023-04-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('keyVaultSubscriptionId'), variables('keyVaultResourceGroupName')), 'Microsoft.Resources/deployments', take(format('appGatewayAddCertificates-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwWafPolicy-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64))]",
                "[resourceId('Microsoft.Resources/deployments', take(format('appGwUserAssignedIdentity-Deployment-{0}', uniqueString(resourceGroup().id)), 64))]"
              ],
              "metadata": {
                "description": "The Application Gateway."
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('appGwWafPolicy-Deployment-{0}', uniqueString(resourceGroup().id)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}Policy001', reference(resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.applicationGateway)]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "policySettings": {
                    "value": {
                      "fileUploadLimitInMb": 10,
                      "state": "Enabled",
                      "mode": "Prevention"
                    }
                  },
                  "managedRules": {
                    "value": {
                      "managedRuleSets": [
                        {
                          "ruleSetType": "OWASP",
                          "ruleSetVersion": "3.2",
                          "ruleGroupOverrides": []
                        },
                        {
                          "ruleSetType": "Microsoft_BotManagerRuleSet",
                          "ruleSetVersion": "0.1"
                        }
                      ]
                    }
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.26.54.24096",
                      "templateHash": "15441807103053057108"
                    },
                    "name": "Application Gateway Web Application Firewall (WAF) Policies",
                    "description": "This module deploys an Application Gateway Web Application Firewall (WAF) Policy.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Application Gateway WAF policy."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource tags."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "managedRules": {
                      "type": "object",
                      "metadata": {
                        "description": "Required. Describes the managedRules structure."
                      }
                    },
                    "customRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom rules inside the policy."
                      }
                    },
                    "policySettings": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The PolicySettings for policy."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.network-appgwwebappfirewallpolicy.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "applicationGatewayWAFPolicy": {
                      "type": "Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "managedRules": "[coalesce(parameters('managedRules'), createObject())]",
                        "customRules": "[parameters('customRules')]",
                        "policySettings": "[parameters('policySettings')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the application gateway WAF policy."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the application gateway WAF policy."
                      },
                      "value": "[resourceId('Microsoft.Network/ApplicationGatewayWebApplicationFirewallPolicies', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the application gateway WAF policy was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('applicationGatewayWAFPolicy', '2022-11-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('agwNamingDeployment-{0}', deployment().name), 64))]"
              ]
            }
          ],
          "outputs": {
            "applicationGatewayResourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Application Gateway."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('applicationGateway-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.resourceId.value]"
            },
            "applicationGatewayFqdn": {
              "type": "string",
              "metadata": {
                "description": "The FQDN of the Azure Application Gateway."
              },
              "value": "[parameters('applicationGatewayFqdn')]"
            },
            "applicationGatewayPublicIp": {
              "type": "string",
              "metadata": {
                "description": "The public IP address of the Azure Application Gateway."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('applicationGatewayPublicIp-Deployment-{0}', uniqueString(resourceGroup().id)), 64)), '2022-09-01').outputs.ipAddress.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('sampleApplication-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64))]"
      ]
    },
    {
      "condition": "[equals(parameters('exposeContainerAppsWith'), 'frontDoor')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('frontDoor-{0}-deployment', deployment().name), 64)]",
      "resourceGroup": "[variables('rgSpokeName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "environment": {
            "value": "[parameters('environment')]"
          },
          "workloadName": {
            "value": "[parameters('workloadName')]"
          },
          "containerAppsEnvironmentId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
          },
          "frontDoorOriginHostName": "[if(parameters('deploySampleApplication'), createObject('value', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('sampleApplication-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.helloWorldAppFqdn.value), createObject('value', ''))]",
          "privateLinkSubnetId": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "2374255941922404406"
            }
          },
          "parameters": {
            "workloadName": {
              "type": "string",
              "minLength": 2,
              "maxLength": 10,
              "metadata": {
                "description": "The name of the workload that is being deployed. Up to 10 characters long."
              }
            },
            "environment": {
              "type": "string",
              "maxLength": 8,
              "metadata": {
                "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\"). Up to 8 characters long."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location where the resources will be created."
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The tags to be assigned to the created resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to enable deplotment telemetry."
              }
            },
            "containerAppsEnvironmentId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the Container Apps environment to be used for the deployment. (e.g. /subscriptions/XXX/resourceGroups/XXX/providers/Microsoft.App/managedEnvironments/XXX)"
              }
            },
            "privateLinkSubnetId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the subnet to be used for the private link service. (e.g. /subscriptions/XXX/resourceGroups/XXX/providers/Microsoft.Network/virtualNetworks/XXX/subnets/XXX)"
              }
            },
            "frontDoorEndpointName": {
              "type": "string",
              "defaultValue": "fde-containerapps",
              "metadata": {
                "description": "The name of the front door endpoint to be created."
              }
            },
            "frontDoorOriginGroupName": {
              "type": "string",
              "defaultValue": "containerapps-origin-group",
              "metadata": {
                "description": "The name of the front door origin group to be created."
              }
            },
            "frontDoorOriginName": {
              "type": "string",
              "defaultValue": "containerapps-origin",
              "metadata": {
                "description": "The name of the front door origin to be created."
              }
            },
            "frontDoorOriginRouteName": {
              "type": "string",
              "defaultValue": "containerapps-route",
              "metadata": {
                "description": "The name of the front door origin route to be created."
              }
            },
            "frontDoorOriginHostName": {
              "type": "string",
              "metadata": {
                "description": "The host name of the front door origin to be created."
              }
            }
          },
          "variables": {
            "containerAppsEnvironmentTokens": "[split(parameters('containerAppsEnvironmentId'), '/')]",
            "containerAppsEnvironmentSubscriptionId": "[variables('containerAppsEnvironmentTokens')[2]]",
            "containerAppsEnvironmentResourceGroupName": "[variables('containerAppsEnvironmentTokens')[4]]",
            "containerAppsEnvironmentName": "[variables('containerAppsEnvironmentTokens')[8]]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('frontDoorNamingDeployment-{0}', deployment().name), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "uniqueId": {
                    "value": "[uniqueString(resourceGroup().id)]"
                  },
                  "environment": {
                    "value": "[parameters('environment')]"
                  },
                  "workloadName": {
                    "value": "[parameters('workloadName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "4794676376542080363"
                    }
                  },
                  "parameters": {
                    "workloadName": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 10,
                      "metadata": {
                        "description": "The name of the workloard that is being deployed. Up to 10 characters long."
                      }
                    },
                    "environment": {
                      "type": "string",
                      "maxLength": 8,
                      "metadata": {
                        "description": "The name of the environment (e.g. \"dev\", \"test\", \"prod\", \"uat\", \"dr\", \"qa\") Up to 8 characters long."
                      }
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Location for all Resources."
                      }
                    },
                    "uniqueId": {
                      "type": "string",
                      "metadata": {
                        "description": "a unique ID that can be appended (or prepended) in azure resource names that require some kind of uniqueness"
                      }
                    }
                  },
                  "variables": {
                    "$fxv#0": "{\n    // Recommended abreviations: https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-abbreviations\n    \"resourceTypeAbbreviations\" : {\n        \"applicationGateway\": \"agw\",\n        \"applicationInsights\": \"appi\",\n        \"appService\": \"app\",\n        \"azureFirewall\": \"azfw\",\n        \"bastion\": \"bas\",\n        \"containerAppsEnvironment\": \"cae\",\n        \"containerRegistry\": \"cr\",\n        \"cosmosDbNoSql\": \"cosno\",\n        \"frontDoor\": \"afd\",\n        \"frontDoorEndpoint\": \"fde\",\n        \"frontDoorWaf\": \"fdfp\",\n        \"keyVault\": \"kv\",\n        \"logAnalyticsWorkspace\": \"log\",\n        \"managedIdentity\": \"id\",\n        \"networkInterface\": \"nic\",\n        \"networkSecurityGroup\": \"nsg\",\n        \"privateEndpoint\": \"pep\",\n        \"privateLinkService\": \"pls\",\n        \"publicIpAddress\": \"pip\",\n        \"resourceGroup\": \"rg\",\n        \"routeTable\": \"rt\",\n        \"serviceBus\": \"sb\",\n        \"serviceBusQueue\": \"sbq\",\n        \"serviceBusTopic\": \"sbt\",\n        \"storageAccount\": \"st\",\n        \"virtualMachine\": \"vm\",\n        \"virtualNetwork\": \"vnet\",\n        \"redisCache\": \"redis\",\n        \"cognitiveAccount\": \"cog\",\n        \"openAiDeployment\": \"oaidep\",\n        \"azureAISearch\": \"srch\",\n        \"documentIntelligence\": \"di\",\n        \"eventGridSystemTopic\": \"egst\",\n        \"eventGridSubscription\": \"evgs\"\n    },\n\n    //copied from here: https://github.com/nianton/azure-naming/blob/main/datafiles/regionAbbreviations.json\n    \"regionAbbreviations\" : {\n        \"australiacentral\": \"auc\",\n        \"australiacentral2\": \"auc2\",\n        \"australiaeast\": \"aue\",\n        \"australiasoutheast\": \"ause\",\n        \"brazilsouth\": \"brs\",\n        \"brazilsoutheast\": \"brse\",\n        \"canadacentral\": \"canc\",\n        \"canadaeast\": \"cane\",\n        \"centralindia\": \"cin\",\n        \"centralus\": \"cus\",\n        \"centraluseuap\": \"cuseuap\",\n        \"eastasia\": \"ea\",\n        \"eastus\": \"eus\",\n        \"eastus2\": \"eus2\",\n        \"eastus2euap\": \"eus2euap\",\n        \"francecentral\": \"frc\",\n        \"francesouth\": \"frs\",\n        \"germanynorth\": \"gern\",\n        \"germanywestcentral\": \"gerwc\",\n        \"japaneast\": \"jae\",\n        \"japanwest\": \"jaw\",\n        \"jioindiacentral\": \"jioinc\",\n        \"jioindiawest\": \"jioinw\",\n        \"koreacentral\": \"koc\",\n        \"koreasouth\": \"kors\",\n        \"northcentralus\": \"ncus\",\n        \"northeurope\": \"neu\",\n        \"norwayeast\": \"nore\",\n        \"norwaywest\": \"norw\",\n        \"southafricanorth\": \"san\",\n        \"southafricawest\": \"saw\",\n        \"southcentralus\": \"scus\",\n        \"southeastasia\": \"sea\",\n        \"southindia\": \"sin\",\n        \"swedencentral\": \"swc\",\n        \"switzerlandnorth\": \"swn\",\n        \"switzerlandwest\": \"sww\",\n        \"uaecentral\": \"uaec\",\n        \"uaenorth\": \"uaen\",\n        \"uksouth\": \"uks\",\n        \"ukwest\": \"ukw\",\n        \"westcentralus\": \"wcus\",\n        \"westeurope\": \"weu\",\n        \"westindia\": \"win\",\n        \"westus\": \"wus\",\n        \"westus2\": \"wus2\",\n        \"westus3\": \"wus3\"\n    }\n}",
                    "naming": "[json(variables('$fxv#0'))]",
                    "uniqueIdShort": "[substring(parameters('uniqueId'), 0, 5)]",
                    "resourceTypeToken": "RES_TYPE",
                    "namingBase": "[format('{0}-{1}-{2}-{3}', variables('resourceTypeToken'), parameters('workloadName'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseUnique": "[format('{0}-{1}-{2}-{3}-{4}', variables('resourceTypeToken'), parameters('workloadName'), variables('uniqueIdShort'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "namingBaseNoWorkloadName": "[format('{0}-{1}-{2}', variables('resourceTypeToken'), parameters('environment'), variables('naming').regionAbbreviations[toLower(parameters('location'))])]",
                    "resourceTypeAbbreviations": "[variables('naming').resourceTypeAbbreviations]",
                    "keyVaultName": "[take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault), 24)]",
                    "resourceNames": {
                      "vnetSpoke": "[format('{0}-spoke', replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "vnetHub": "[format('{0}-hub', replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualNetwork))]",
                      "applicationGateway": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway)]",
                      "applicationGatewayPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayUserAssignedIdentity": "[format('{0}-{1}-KeyVaultSecretUser', variables('naming').resourceTypeAbbreviations.managedIdentity, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "applicationGatewayNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationGateway))]",
                      "pepNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.privateEndpoint))]",
                      "applicationInsights": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.applicationInsights)]",
                      "azureFirewall": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall)]",
                      "azureFirewallPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureFirewall))]",
                      "bastion": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion)]",
                      "bastionNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "bastionPip": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.publicIpAddress, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.bastion))]",
                      "containerAppsEnvironment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment)]",
                      "containerAppsEnvironmentNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerAppsEnvironment))]",
                      "containerRegistry": "[take(toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')), 50)]",
                      "containerRegistryPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "containerRegistryUserAssignedIdentity": "[format('{0}-{1}-AcrPull', variables('naming').resourceTypeAbbreviations.managedIdentity, toLower(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.containerRegistry), '-', '')))]",
                      "redisCache": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache)]",
                      "redisCachePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.redisCache))]",
                      "openAiAccount": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cognitiveAccount)]",
                      "openAiDeployment": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.openAiDeployment)]",
                      "cosmosDbNoSql": "[toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44))]",
                      "cosmosDbNoSqlPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(take(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.cosmosDbNoSql), 44)))]",
                      "frontDoorProfile": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "keyVault": "[if(endsWith(variables('keyVaultName'), '-'), take(variables('keyVaultName'), 23), variables('keyVaultName'))]",
                      "keyVaultPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.keyVault))]",
                      "logAnalyticsWorkspace": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.logAnalyticsWorkspace)]",
                      "routeTable": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.routeTable)]",
                      "serviceBus": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus)]",
                      "serviceBusPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.serviceBus))]",
                      "storageAccount": "[toLower(take(replace(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount), '-', ''), 24))]",
                      "storageAccountPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, toLower(replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.storageAccount)))]",
                      "vmJumpBox": "[replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine)]",
                      "vmJumpBoxNsg": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkSecurityGroup, replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "vmJumpBoxNic": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.networkInterface, replace(variables('namingBaseNoWorkloadName'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.virtualMachine))]",
                      "frontDoor": "[replace(variables('namingBase'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.frontDoor)]",
                      "azureAISearch": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch)]",
                      "azureAISearchPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.azureAISearch))]",
                      "documentIntelligence": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence)]",
                      "documentIntelligencePep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.documentIntelligence))]",
                      "eventGridSystemTopic": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic)]",
                      "eventGridSystemTopicPep": "[format('{0}-{1}', variables('naming').resourceTypeAbbreviations.privateEndpoint, replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSystemTopic))]",
                      "eventGridSubscription": "[replace(variables('namingBaseUnique'), variables('resourceTypeToken'), variables('naming').resourceTypeAbbreviations.eventGridSubscription)]"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "resourcesNames": {
                      "type": "object",
                      "value": "[variables('resourceNames')]"
                    },
                    "resourceTypeAbbreviations": {
                      "type": "object",
                      "value": "[variables('resourceTypeAbbreviations')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "containerAppsDefaultDomainName": {
                    "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('containerAppsEnvironmentSubscriptionId'), variables('containerAppsEnvironmentResourceGroupName')), 'Microsoft.App/managedEnvironments', variables('containerAppsEnvironmentName')), '2024-03-01').defaultDomain]"
                  },
                  "containerAppsEnvironmentSubscriptionId": {
                    "value": "[variables('containerAppsEnvironmentSubscriptionId')]"
                  },
                  "privateLinkServiceName": {
                    "value": "[format('{0}-{1}', reference(resourceId('Microsoft.Resources/deployments', take(format('frontDoorNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourceTypeAbbreviations.value.privateLinkService, reference(resourceId('Microsoft.Resources/deployments', take(format('frontDoorNamingDeployment-{0}', deployment().name), 64)), '2022-09-01').outputs.resourcesNames.value.frontDoor)]"
                  },
                  "privateLinkSubnetId": {
                    "value": "[parameters('privateLinkSubnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "13579081567653218345"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "The location where the resources will be created."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The tags to be assigned to the created resources."
                      }
                    },
                    "privateLinkServiceName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private link service to create."
                      }
                    },
                    "privateLinkSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "SubnetId used to configure private link service."
                      }
                    },
                    "containerAppsDefaultDomainName": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Container Apps Environment Default Domain Name"
                      }
                    },
                    "containerAppsEnvironmentSubscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure Container Apps Environment Subscription Id"
                      }
                    }
                  },
                  "variables": {
                    "containerAppsDefaultDomainArray": "[split(parameters('containerAppsDefaultDomainName'), '.')]",
                    "containerAppsNameIdentifier": "[variables('containerAppsDefaultDomainArray')[sub(lastIndexOf(variables('containerAppsDefaultDomainArray'), parameters('location')), 1)]]",
                    "containerAppsManagedResourceGroup": "[format('MC_{0}-rg_{1}_{2}', variables('containerAppsNameIdentifier'), variables('containerAppsNameIdentifier'), parameters('location'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/privateLinkServices",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('privateLinkServiceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "loadBalancerFrontendIpConfigurations": [
                          {
                            "id": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('containerAppsEnvironmentSubscriptionId'), variables('containerAppsManagedResourceGroup')), 'Microsoft.Network/loadBalancers', 'kubernetes-internal'), '2021-05-01').frontendIPConfigurations[0].id]"
                          }
                        ],
                        "ipConfigurations": [
                          {
                            "name": "snet-provider-default-1",
                            "properties": {
                              "privateIPAllocationMethod": "Dynamic",
                              "subnet": {
                                "id": "[parameters('privateLinkSubnetId')]"
                              },
                              "primary": true,
                              "privateIPAddressVersion": "IPv4"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "privateLinkServiceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/privateLinkServices', parameters('privateLinkServiceName'))]"
                    },
                    "privateEndpointConnections": {
                      "type": "array",
                      "value": "[reference(resourceId('Microsoft.Network/privateLinkServices', parameters('privateLinkServiceName')), '2023-11-01').privateEndpointConnections]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', take(format('frontDoorNamingDeployment-{0}', deployment().name), 64))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('frontDoorDeployment-{0}', uniqueString(resourceGroup().id))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "dep-test-cdnpmax"
                  },
                  "location": {
                    "value": "Global"
                  },
                  "sku": {
                    "value": "Premium_AzureFrontDoor"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  },
                  "originResponseTimeoutSeconds": {
                    "value": 60
                  },
                  "endpointProperties": {
                    "value": {
                      "contentTypesToCompress": [
                        "application/javascript",
                        "application/json",
                        "application/x-javascript",
                        "application/xml",
                        "text/css",
                        "text/html",
                        "text/javascript",
                        "text/plain"
                      ],
                      "geoFilters": [],
                      "isCompressionEnabled": true,
                      "isHttpAllowed": true,
                      "isHttpsAllowed": true,
                      "queryStringCachingBehavior": "IgnoreQueryString"
                    }
                  },
                  "originGroups": "[if(not(empty(parameters('frontDoorOriginHostName'))), createObject('value', createArray(createObject('name', parameters('frontDoorOriginGroupName'), 'loadBalancingSettings', createObject('sampleSize', 4, 'successfulSamplesRequired', 3, 'additionalLatencyInMilliseconds', 50), 'healthProbeSettings', createObject('probePath', '/', 'probeRequestType', 'HEAD', 'probeProtocol', 'Https', 'probeIntervalInSeconds', 100), 'sessionAffinityState', 'Disabled', 'origins', createArray(createObject('name', parameters('frontDoorOriginName'), 'hostName', parameters('frontDoorOriginHostName'), 'httpPort', 80, 'httpsPort', 443, 'originHostHeader', parameters('frontDoorOriginHostName'), 'priority', 1, 'weight', 1000, 'enabledState', 'Enabled', 'sharedPrivateLinkResource', createObject('privateLink', createObject('id', reference(resourceId('Microsoft.Resources/deployments', format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.privateLinkServiceId.value), 'privateLinkLocation', parameters('location'), 'requestMessage', 'frontdoor'), 'enforceCertificateNameCheck', true()))))), createObject('value', createArray()))]",
                  "afdEndpoints": {
                    "value": [
                      {
                        "name": "[parameters('frontDoorEndpointName')]",
                        "originGroup": "[parameters('frontDoorOriginGroupName')]",
                        "enabledState": "Enabled",
                        "routes": [
                          {
                            "name": "[parameters('frontDoorOriginRouteName')]",
                            "originPath": "/",
                            "ruleSets": [],
                            "supportedProtocols": [
                              "Http",
                              "Https"
                            ],
                            "patternsToMatch": [
                              "/*"
                            ],
                            "forwardingProtocol": "HttpsOnly",
                            "linkToDefaultDomain": "Enabled",
                            "httpsRedirect": "Enabled",
                            "enabledState": "Enabled"
                          }
                        ]
                      }
                    ]
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.27.1.19265",
                      "templateHash": "10155723221995510314"
                    },
                    "name": "CDN Profiles",
                    "description": "This module deploys a CDN Profile.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the CDN profile."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "allowedValues": [
                        "Custom_Verizon",
                        "Premium_AzureFrontDoor",
                        "Premium_Verizon",
                        "StandardPlus_955BandWidth_ChinaCdn",
                        "StandardPlus_AvgBandWidth_ChinaCdn",
                        "StandardPlus_ChinaCdn",
                        "Standard_955BandWidth_ChinaCdn",
                        "Standard_AvgBandWidth_ChinaCdn",
                        "Standard_AzureFrontDoor",
                        "Standard_ChinaCdn",
                        "Standard_Microsoft",
                        "Standard_Verizon"
                      ],
                      "metadata": {
                        "description": "Required. The pricing tier (defines a CDN provider, feature list and rate) of the CDN profile."
                      }
                    },
                    "originResponseTimeoutSeconds": {
                      "type": "int",
                      "defaultValue": 60,
                      "metadata": {
                        "description": "Optional. Send and receive timeout on forwarding request to the origin."
                      }
                    },
                    "endpointName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the endpoint under the profile which is unique globally."
                      }
                    },
                    "endpointProperties": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Endpoint properties (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/endpoints?pivots=deployment-language-bicep#endpointproperties for details)."
                      }
                    },
                    "secrets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of secret objects."
                      }
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of custom domain objects."
                      }
                    },
                    "originGroups": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Conditional. Array of origin group objects. Required if the afdEndpoints is specified."
                      }
                    },
                    "ruleSets": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of rule set objects."
                      }
                    },
                    "afdEndpoints": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of AFD endpoint objects."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Endpoint tags."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "CDN Endpoint Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '426e0c7f-0c7e-4658-b36f-ff54d6c29b45')]",
                      "CDN Endpoint Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '871e35f6-b5c1-49cc-a043-bde969a0f2cd')]",
                      "CDN Profile Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ec156ff8-a8d1-4d15-830c-5b80698ca432')]",
                      "CDN Profile Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8f96442b-4075-438f-813d-ad51ab4019af')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2023-07-01",
                      "name": "[format('46d3xbcp.res.cdn-profile.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "profile": {
                      "type": "Microsoft.Cdn/profiles",
                      "apiVersion": "2023-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "originResponseTimeoutSeconds": "[parameters('originResponseTimeoutSeconds')]"
                      },
                      "tags": "[parameters('tags')]"
                    },
                    "profile_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_roleAssignments": {
                      "copy": {
                        "name": "profile_roleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Cdn/profiles/{0}', parameters('name'))]",
                      "name": "[guid(resourceId('Microsoft.Cdn/profiles', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                      "properties": {
                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_endpoint": {
                      "condition": "[not(empty(parameters('endpointProperties')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Profile-Endpoint', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('endpointName'), format('{0}-endpoint', parameters('name')))]"
                          },
                          "properties": {
                            "value": "[coalesce(parameters('endpointProperties'), createObject())]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "6907263116726609492"
                            },
                            "name": "CDN Profiles Endpoints",
                            "description": "This module deploys a CDN Profile Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the endpoint under the profile which is unique globally."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Resource location."
                              }
                            },
                            "properties": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. Endpoint properties (see https://learn.microsoft.com/en-us/azure/templates/microsoft.cdn/profiles/endpoints?pivots=deployment-language-bicep#endpointproperties for details)."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Endpoint tags."
                              }
                            }
                          },
                          "resources": {
                            "profile": {
                              "existing": true,
                              "type": "Microsoft.Cdn/profiles",
                              "apiVersion": "2021-06-01",
                              "name": "[parameters('profileName')]"
                            },
                            "endpoint": {
                              "type": "Microsoft.Cdn/profiles/endpoints",
                              "apiVersion": "2021-06-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "properties": "[parameters('properties')]",
                              "tags": "[parameters('tags')]",
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "endpoint_origins": {
                              "copy": {
                                "name": "endpoint_origins",
                                "count": "[length(parameters('properties').origins)]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-origins-{1}', parameters('name'), parameters('properties').origins[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "profileName": {
                                    "value": "[parameters('profileName')]"
                                  },
                                  "endpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[parameters('properties').origins[copyIndex()].name]"
                                  },
                                  "hostName": {
                                    "value": "[parameters('properties').origins[copyIndex()].properties.hostName]"
                                  },
                                  "httpPort": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'httpPort')]"
                                  },
                                  "httpsPort": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'httpsPort')]"
                                  },
                                  "enabled": {
                                    "value": "[parameters('properties').origins[copyIndex()].properties.enabled]"
                                  },
                                  "priority": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'priority')]"
                                  },
                                  "weight": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'weight')]"
                                  },
                                  "originHostHeader": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'originHostHeader')]"
                                  },
                                  "privateLinkAlias": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkAlias')]"
                                  },
                                  "privateLinkLocation": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkLocation')]"
                                  },
                                  "privateLinkResourceId": {
                                    "value": "[tryGet(parameters('properties').origins[copyIndex()].properties, 'privateLinkResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "2422401530872933264"
                                    },
                                    "name": "CDN Profiles Endpoints Origins",
                                    "description": "This module deploys a CDN Profile Endpoint Origin.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "endpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CDN Endpoint."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the origin."
                                      }
                                    },
                                    "enabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether the origin is enabled for load balancing."
                                      }
                                    },
                                    "hostName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The hostname of the origin."
                                      }
                                    },
                                    "httpPort": {
                                      "type": "int",
                                      "defaultValue": 80,
                                      "metadata": {
                                        "description": "Optional. The HTTP port of the origin."
                                      }
                                    },
                                    "httpsPort": {
                                      "type": "int",
                                      "defaultValue": 443,
                                      "metadata": {
                                        "description": "Optional. The HTTPS port of the origin."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "metadata": {
                                        "description": "Conditional. The priority of origin in given origin group for load balancing. Required if `weight` is provided."
                                      }
                                    },
                                    "weight": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "metadata": {
                                        "description": "Conditional. The weight of the origin used for load balancing. Required if `priority` is provided."
                                      }
                                    },
                                    "privateLinkAlias": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The private link alias of the origin. Required if privateLinkLocation is provided."
                                      }
                                    },
                                    "privateLinkLocation": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The private link location of the origin. Required if privateLinkAlias is provided."
                                      }
                                    },
                                    "privateLinkResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private link resource ID of the origin."
                                      }
                                    },
                                    "originHostHeader": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The host header value sent to the origin."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the CDN profile. Default to \"default\"."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2021-06-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "endpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/endpoints",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('endpointName'))]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "origin": {
                                      "type": "Microsoft.Cdn/profiles/endpoints/origins",
                                      "apiVersion": "2021-06-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('endpointName'), parameters('name'))]",
                                      "properties": "[union(createObject('hostName', parameters('hostName'), 'httpPort', parameters('httpPort'), 'enabled', parameters('enabled'), 'httpsPort', parameters('httpsPort')), if(or(greater(parameters('priority'), 0), greater(parameters('weight'), 0)), createObject('priority', parameters('priority'), 'weight', parameters('weight')), createObject()), if(and(not(empty(parameters('privateLinkAlias'))), not(empty(parameters('privateLinkLocation')))), createObject('privateLinkAlias', parameters('privateLinkAlias'), 'privateLinkLocation', parameters('privateLinkLocation')), createObject()), if(not(empty(parameters('privateLinkResourceId'))), createObject('privateLinkResourceId', parameters('privateLinkResourceId')), createObject()), if(not(empty(parameters('originHostHeader'))), createObject('originHostHeader', parameters('originHostHeader')), createObject()))]",
                                      "dependsOn": [
                                        "endpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/endpoints/origins', parameters('profileName'), parameters('endpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the endpoint was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('endpoint', '2021-06-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "endpoint",
                                "profile"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the endpoint."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/endpoints', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the endpoint was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('endpoint', '2021-06-01', 'full').location]"
                            },
                            "endpointProperties": {
                              "type": "object",
                              "metadata": {
                                "description": "The properties of the endpoint."
                              },
                              "value": "[reference('endpoint')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_secrets": {
                      "copy": {
                        "name": "profile_secrets",
                        "count": "[length(parameters('secrets'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Profile-Secret-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('secrets')[copyIndex()].name]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          },
                          "type": {
                            "value": "[parameters('secrets')[copyIndex()].type]"
                          },
                          "secretSourceResourceId": {
                            "value": "[parameters('secrets')[copyIndex()].secretSourceResourceId]"
                          },
                          "subjectAlternativeNames": {
                            "value": "[tryGet(parameters('secrets')[copyIndex()], 'subjectAlternativeNames')]"
                          },
                          "useLatestVersion": {
                            "value": "[tryGet(parameters('secrets')[copyIndex()], 'useLatestVersion')]"
                          },
                          "secretVersion": {
                            "value": "[parameters('secrets')[copyIndex()].secretVersion]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "8969856235939919174"
                            },
                            "name": "CDN Profiles Secret",
                            "description": "This module deploys a CDN Profile Secret.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the secrect."
                              }
                            },
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                              }
                            },
                            "type": {
                              "type": "string",
                              "defaultValue": "AzureFirstPartyManagedCertificate",
                              "allowedValues": [
                                "AzureFirstPartyManagedCertificate",
                                "CustomerCertificate",
                                "ManagedCertificate",
                                "UrlSigningKey"
                              ],
                              "metadata": {
                                "description": "Required. The type of the secrect."
                              }
                            },
                            "secretSourceResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. The resource ID of the secret source. Required if the `type` is \"CustomerCertificate\"."
                              }
                            },
                            "secretVersion": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The version of the secret."
                              }
                            },
                            "subjectAlternativeNames": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The subject alternative names of the secrect."
                              }
                            },
                            "useLatestVersion": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether to use the latest version of the secrect."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Cdn/profiles/secrets",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "properties": {
                                "parameters": "[if(equals(parameters('type'), 'CustomerCertificate'), createObject('type', parameters('type'), 'secretSource', createObject('id', parameters('secretSourceResourceId')), 'secretVersion', parameters('secretVersion'), 'subjectAlternativeNames', parameters('subjectAlternativeNames'), 'useLatestVersion', parameters('useLatestVersion')), null())]"
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the secrect."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the secrect."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the secret was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_customDomains": {
                      "copy": {
                        "name": "profile_customDomains",
                        "count": "[length(parameters('customDomains'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-CustomDomain-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('customDomains')[copyIndex()].name]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          },
                          "hostName": {
                            "value": "[parameters('customDomains')[copyIndex()].hostName]"
                          },
                          "azureDnsZoneResourceId": {
                            "value": "[tryGet(parameters('customDomains')[copyIndex()], 'azureDnsZoneResourceId')]"
                          },
                          "extendedProperties": {
                            "value": "[tryGet(parameters('customDomains')[copyIndex()], 'extendedProperties')]"
                          },
                          "certificateType": {
                            "value": "[parameters('customDomains')[copyIndex()].certificateType]"
                          },
                          "minimumTlsVersion": {
                            "value": "[tryGet(parameters('customDomains')[copyIndex()], 'minimumTlsVersion')]"
                          },
                          "preValidatedCustomDomainResourceId": {
                            "value": "[tryGet(parameters('customDomains')[copyIndex()], 'preValidatedCustomDomainResourceId')]"
                          },
                          "secretName": {
                            "value": "[tryGet(parameters('customDomains')[copyIndex()], 'secretName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "4987993668641975476"
                            },
                            "name": "CDN Profiles Custom Domains",
                            "description": "This module deploys a CDN Profile Custom Domains.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the custom domain."
                              }
                            },
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the CDN profile."
                              }
                            },
                            "hostName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The host name of the domain. Must be a domain name."
                              }
                            },
                            "azureDnsZoneResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optonal. Resource reference to the Azure DNS zone."
                              }
                            },
                            "extendedProperties": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Key-Value pair representing migration properties for domains."
                              }
                            },
                            "preValidatedCustomDomainResourceId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Resource reference to the Azure resource where custom domain ownership was prevalidated."
                              }
                            },
                            "certificateType": {
                              "type": "string",
                              "allowedValues": [
                                "CustomerCertificate",
                                "ManagedCertificate"
                              ],
                              "metadata": {
                                "description": "Required. The type of the certificate used for secure delivery."
                              }
                            },
                            "minimumTlsVersion": {
                              "type": "string",
                              "defaultValue": "TLS12",
                              "allowedValues": [
                                "TLS10",
                                "TLS12"
                              ],
                              "metadata": {
                                "description": "Optional. The minimum TLS version required for the custom domain. Default value: TLS12."
                              }
                            },
                            "secretName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name of the secret. ie. subs/rg/profile/secret."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Cdn/profiles/customDomains",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "properties": {
                                "azureDnsZone": "[if(not(empty(parameters('azureDnsZoneResourceId'))), createObject('id', parameters('azureDnsZoneResourceId')), null())]",
                                "extendedProperties": "[if(not(empty(parameters('extendedProperties'))), parameters('extendedProperties'), null())]",
                                "hostName": "[parameters('hostName')]",
                                "preValidatedCustomDomainResourceId": "[if(not(empty(parameters('preValidatedCustomDomainResourceId'))), createObject('id', parameters('preValidatedCustomDomainResourceId')), null())]",
                                "tlsSettings": {
                                  "certificateType": "[parameters('certificateType')]",
                                  "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                                  "secret": "[if(not(empty(parameters('secretName'))), createObject('id', resourceId('Microsoft.Cdn/profiles/secrets', parameters('profileName'), parameters('secretName'))), null())]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the custom domain."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of the custom domain."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the custom domain was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile",
                        "profile_secrets"
                      ]
                    },
                    "profile_originGroups": {
                      "copy": {
                        "name": "profile_originGroups",
                        "count": "[length(parameters('originGroups'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Profile-OriginGroup-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('originGroups')[copyIndex()].name]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          },
                          "loadBalancingSettings": {
                            "value": "[parameters('originGroups')[copyIndex()].loadBalancingSettings]"
                          },
                          "healthProbeSettings": {
                            "value": "[tryGet(parameters('originGroups')[copyIndex()], 'healthProbeSettings')]"
                          },
                          "sessionAffinityState": {
                            "value": "[tryGet(parameters('originGroups')[copyIndex()], 'sessionAffinityState')]"
                          },
                          "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                            "value": "[tryGet(parameters('originGroups')[copyIndex()], 'trafficRestorationTimeToHealedOrNewEndpointsInMinutes')]"
                          },
                          "origins": {
                            "value": "[parameters('originGroups')[copyIndex()].origins]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "15134351122358254660"
                            },
                            "name": "CDN Profiles Origin Group",
                            "description": "This module deploys a CDN Profile Origin Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the origin group."
                              }
                            },
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the CDN profile."
                              }
                            },
                            "healthProbeSettings": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Health probe settings to the origin that is used to determine the health of the origin."
                              }
                            },
                            "loadBalancingSettings": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. Load balancing settings for a backend pool."
                              }
                            },
                            "sessionAffinityState": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether to allow session affinity on this host."
                              }
                            },
                            "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Time in minutes to shift the traffic to the endpoint gradually when an unhealthy endpoint comes healthy or a new endpoint is added. Default is 10 mins."
                              }
                            },
                            "origins": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. The list of origins within the origin group."
                              }
                            }
                          },
                          "resources": {
                            "profile": {
                              "existing": true,
                              "type": "Microsoft.Cdn/profiles",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('profileName')]"
                            },
                            "originGroup": {
                              "type": "Microsoft.Cdn/profiles/originGroups",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "properties": {
                                "healthProbeSettings": "[parameters('healthProbeSettings')]",
                                "loadBalancingSettings": "[parameters('loadBalancingSettings')]",
                                "sessionAffinityState": "[parameters('sessionAffinityState')]",
                                "trafficRestorationTimeToHealedOrNewEndpointsInMinutes": "[parameters('trafficRestorationTimeToHealedOrNewEndpointsInMinutes')]"
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "originGroup_origins": {
                              "copy": {
                                "name": "originGroup_origins",
                                "count": "[length(parameters('origins'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-OriginGroup-Origin-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('origins')[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('profileName')]"
                                  },
                                  "hostName": {
                                    "value": "[parameters('origins')[copyIndex()].hostName]"
                                  },
                                  "originGroupName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "enabledState": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'enabledState')]"
                                  },
                                  "enforceCertificateNameCheck": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'enforceCertificateNameCheck')]"
                                  },
                                  "httpPort": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'httpPort')]"
                                  },
                                  "httpsPort": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'httpsPort')]"
                                  },
                                  "originHostHeader": {
                                    "value": "[coalesce(tryGet(parameters('origins')[copyIndex()], 'originHostHeader'), parameters('origins')[copyIndex()].hostName)]"
                                  },
                                  "priority": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'priority')]"
                                  },
                                  "weight": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'weight')]"
                                  },
                                  "sharedPrivateLinkResource": {
                                    "value": "[tryGet(parameters('origins')[copyIndex()], 'sharedPrivateLinkResource')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "13403133934817379620"
                                    },
                                    "name": "CDN Profiles Origin",
                                    "description": "This module deploys a CDN Profile Origin.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the origion."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the CDN profile."
                                      }
                                    },
                                    "originGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the group."
                                      }
                                    },
                                    "enabledState": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether to enable health probes to be made against backends defined under backendPools. Health probes can only be disabled if there is a single enabled backend in single enabled backend pool."
                                      }
                                    },
                                    "enforceCertificateNameCheck": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Whether to enable certificate name check at origin level."
                                      }
                                    },
                                    "hostName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The address of the origin. Domain names, IPv4 addresses, and IPv6 addresses are supported.This should be unique across all origins in an endpoint."
                                      }
                                    },
                                    "httpPort": {
                                      "type": "int",
                                      "defaultValue": 80,
                                      "metadata": {
                                        "description": "Optional. The value of the HTTP port. Must be between 1 and 65535."
                                      }
                                    },
                                    "httpsPort": {
                                      "type": "int",
                                      "defaultValue": 443,
                                      "metadata": {
                                        "description": "Optional. The value of the HTTPS port. Must be between 1 and 65535."
                                      }
                                    },
                                    "originHostHeader": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The host header value sent to the origin with each request. If you leave this blank, the request hostname determines this value. Azure Front Door origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default. This overrides the host header defined at Endpoint."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "defaultValue": 1,
                                      "metadata": {
                                        "description": "Optional. Priority of origin in given origin group for load balancing. Higher priorities will not be used for load balancing if any lower priority origin is healthy.Must be between 1 and 5."
                                      }
                                    },
                                    "sharedPrivateLinkResource": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The properties of the private link resource for private origin."
                                      }
                                    },
                                    "weight": {
                                      "type": "int",
                                      "defaultValue": 1000,
                                      "metadata": {
                                        "description": "Optional. Weight of the origin in given origin group for load balancing. Must be between 1 and 1000."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile::originGroup": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/originGroups",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroupName'))]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "origin": {
                                      "type": "Microsoft.Cdn/profiles/originGroups/origins",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('originGroupName'), parameters('name'))]",
                                      "properties": {
                                        "enabledState": "[parameters('enabledState')]",
                                        "enforceCertificateNameCheck": "[parameters('enforceCertificateNameCheck')]",
                                        "hostName": "[parameters('hostName')]",
                                        "httpPort": "[parameters('httpPort')]",
                                        "httpsPort": "[parameters('httpsPort')]",
                                        "originHostHeader": "[parameters('originHostHeader')]",
                                        "priority": "[parameters('priority')]",
                                        "sharedPrivateLinkResource": "[parameters('sharedPrivateLinkResource')]",
                                        "weight": "[parameters('weight')]"
                                      },
                                      "dependsOn": [
                                        "profile::originGroup"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the origin."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the origin."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/originGroups/origins', parameters('profileName'), parameters('originGroupName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the origin was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "originGroup"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the origin group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of the origin group."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the origin group was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('profile', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_ruleSets": {
                      "copy": {
                        "name": "profile_ruleSets",
                        "count": "[length(parameters('ruleSets'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Profile-RuleSet-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('ruleSets')[copyIndex()].name]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('ruleSets')[copyIndex()].rules]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "15489136897524188469"
                            },
                            "name": "CDN Profiles Rule Sets",
                            "description": "This module deploys a CDN Profile rule set.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the rule set."
                              }
                            },
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the CDN profile."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optinal. The rules to apply to the rule set."
                              }
                            }
                          },
                          "resources": {
                            "profile": {
                              "existing": true,
                              "type": "Microsoft.Cdn/profiles",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('profileName')]"
                            },
                            "ruleSet": {
                              "type": "Microsoft.Cdn/profiles/ruleSets",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "ruleSet_rules": {
                              "copy": {
                                "name": "ruleSet_rules",
                                "count": "[length(coalesce(parameters('rules'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-RuleSet-Rule-{1}-{2}', uniqueString(deployment().name), coalesce(parameters('rules'), createArray())[copyIndex()].name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "profileName": {
                                    "value": "[parameters('profileName')]"
                                  },
                                  "ruleSetName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].name]"
                                  },
                                  "order": {
                                    "value": "[coalesce(parameters('rules'), createArray())[copyIndex()].order]"
                                  },
                                  "actions": {
                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'actions')]"
                                  },
                                  "conditions": {
                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'conditions')]"
                                  },
                                  "matchProcessingBehavior": {
                                    "value": "[tryGet(coalesce(parameters('rules'), createArray())[copyIndex()], 'matchProcessingBehavior')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "16996204249819398780"
                                    },
                                    "name": "CDN Profiles Rules",
                                    "description": "This module deploys a CDN Profile rule.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the rule."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the profile."
                                      }
                                    },
                                    "ruleSetName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the rule set."
                                      }
                                    },
                                    "order": {
                                      "type": "int",
                                      "metadata": {
                                        "description": "Required. The order in which this rule will be applied. Rules with a lower order are applied before rules with a higher order."
                                      }
                                    },
                                    "actions": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of actions that are executed when all the conditions of a rule are satisfied."
                                      }
                                    },
                                    "conditions": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of conditions that must be matched for the actions to be executed."
                                      }
                                    },
                                    "matchProcessingBehavior": {
                                      "type": "string",
                                      "defaultValue": "Continue",
                                      "allowedValues": [
                                        "Continue",
                                        "Stop"
                                      ],
                                      "metadata": {
                                        "description": "Optional. If this rule is a match should the rules engine continue running the remaining rules or stop. If not present, defaults to Continue."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile::ruleSet": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/ruleSets",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('ruleSetName'))]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "rule": {
                                      "type": "Microsoft.Cdn/profiles/ruleSets/rules",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('ruleSetName'), parameters('name'))]",
                                      "properties": {
                                        "order": "[parameters('order')]",
                                        "actions": "[parameters('actions')]",
                                        "conditions": "[parameters('conditions')]",
                                        "matchProcessingBehavior": "[parameters('matchProcessingBehavior')]"
                                      },
                                      "dependsOn": [
                                        "profile::ruleSet"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the rule."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource id of the rule."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/ruleSets/rules', parameters('profileName'), parameters('ruleSetName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the custom domain was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the rule set."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of the rule set."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the custom domain was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile"
                      ]
                    },
                    "profile_afdEndpoints": {
                      "copy": {
                        "name": "profile_afdEndpoints",
                        "count": "[length(parameters('afdEndpoints'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Profile-AfdEndpoint-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('afdEndpoints')[copyIndex()].name]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "profileName": {
                            "value": "[parameters('name')]"
                          },
                          "autoGeneratedDomainNameLabelScope": {
                            "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'autoGeneratedDomainNameLabelScope')]"
                          },
                          "enabledState": {
                            "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'enabledState')]"
                          },
                          "routes": {
                            "value": "[tryGet(parameters('afdEndpoints')[copyIndex()], 'routes')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(parameters('afdEndpoints')[copyIndex()], 'tags'), parameters('tags'))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.27.1.19265",
                              "templateHash": "12280139305247236649"
                            },
                            "name": "CDN Profiles AFD Endpoints",
                            "description": "This module deploys a CDN Profile AFD Endpoint.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the AFD Endpoint."
                              }
                            },
                            "profileName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent CDN profile. Required if the template is used in a standalone deployment."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. The location of the AFD Endpoint."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The tags of the AFD Endpoint."
                              }
                            },
                            "autoGeneratedDomainNameLabelScope": {
                              "type": "string",
                              "defaultValue": "TenantReuse",
                              "allowedValues": [
                                "NoReuse",
                                "ResourceGroupReuse",
                                "SubscriptionReuse",
                                "TenantReuse"
                              ],
                              "metadata": {
                                "description": "Optional. Indicates the endpoint name reuse scope. The default value is TenantReuse."
                              }
                            },
                            "enabledState": {
                              "type": "string",
                              "defaultValue": "Enabled",
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Indicates whether the AFD Endpoint is enabled. The default value is Enabled."
                              }
                            },
                            "routes": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The list of routes for this AFD Endpoint."
                              }
                            }
                          },
                          "resources": {
                            "profile": {
                              "existing": true,
                              "type": "Microsoft.Cdn/profiles",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('profileName')]"
                            },
                            "afdEndpoint": {
                              "type": "Microsoft.Cdn/profiles/afdEndpoints",
                              "apiVersion": "2023-05-01",
                              "name": "[format('{0}/{1}', parameters('profileName'), parameters('name'))]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "autoGeneratedDomainNameLabelScope": "[parameters('autoGeneratedDomainNameLabelScope')]",
                                "enabledState": "[parameters('enabledState')]"
                              },
                              "dependsOn": [
                                "profile"
                              ]
                            },
                            "afdEndpoint_routes": {
                              "copy": {
                                "name": "afdEndpoint_routes",
                                "count": "[length(coalesce(parameters('routes'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Profile-AfdEndpoint-Route', uniqueString(deployment().name, coalesce(parameters('routes'), createArray())[copyIndex()].name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('routes'), createArray())[copyIndex()].name]"
                                  },
                                  "profileName": {
                                    "value": "[parameters('profileName')]"
                                  },
                                  "afdEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "cacheConfiguration": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'cacheConfiguration')]"
                                  },
                                  "customDomainNames": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'customDomainNames')]"
                                  },
                                  "enabledState": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'enabledState')]"
                                  },
                                  "forwardingProtocol": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'forwardingProtocol')]"
                                  },
                                  "httpsRedirect": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'httpsRedirect')]"
                                  },
                                  "linkToDefaultDomain": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'linkToDefaultDomain')]"
                                  },
                                  "originGroupName": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'originGroupName')]"
                                  },
                                  "originPath": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'originPath')]"
                                  },
                                  "patternsToMatch": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'patternsToMatch')]"
                                  },
                                  "ruleSets": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'ruleSets')]"
                                  },
                                  "supportedProtocols": {
                                    "value": "[tryGet(coalesce(parameters('routes'), createArray())[copyIndex()], 'supportedProtocols')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.27.1.19265",
                                      "templateHash": "10229922284695085147"
                                    },
                                    "name": "CDN Profiles AFD Endpoint Route",
                                    "description": "This module deploys a CDN Profile AFD Endpoint route.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the route."
                                      }
                                    },
                                    "profileName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent CDN profile."
                                      }
                                    },
                                    "afdEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the AFD endpoint."
                                      }
                                    },
                                    "cacheConfiguration": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object."
                                      }
                                    },
                                    "customDomainNames": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The names of the custom domains. The custom domains must be defined in the profile customDomains array."
                                      }
                                    },
                                    "forwardingProtocol": {
                                      "type": "string",
                                      "defaultValue": "MatchRequest",
                                      "allowedValues": [
                                        "HttpOnly",
                                        "HttpsOnly",
                                        "MatchRequest"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The protocol this rule will use when forwarding traffic to backends."
                                      }
                                    },
                                    "enabledState": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether this route is enabled."
                                      }
                                    },
                                    "httpsRedirect": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether to automatically redirect HTTP traffic to HTTPS traffic."
                                      }
                                    },
                                    "linkToDefaultDomain": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether this route will be linked to the default endpoint domain."
                                      }
                                    },
                                    "originGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the origin group. The origin group must be defined in the profile originGroups."
                                      }
                                    },
                                    "originPath": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath."
                                      }
                                    },
                                    "patternsToMatch": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The route patterns of the rule."
                                      }
                                    },
                                    "ruleSets": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The rule sets of the rule. The rule sets must be defined in the profile ruleSets."
                                      }
                                    },
                                    "supportedProtocols": {
                                      "type": "array",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Http",
                                        "Https"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The supported protocols of the rule."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "profile::afdEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/afdEndpoints",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('afdEndpointName'))]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile::customDomains": {
                                      "copy": {
                                        "name": "customDomains",
                                        "count": "[length(coalesce(parameters('customDomainNames'), createArray()))]"
                                      },
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/customDomains",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), coalesce(parameters('customDomainNames'), createArray())[copyIndex()])]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile::originGroup": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/originGroups",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('originGroupName'))]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile::ruleSet": {
                                      "copy": {
                                        "name": "ruleSet",
                                        "count": "[length(parameters('ruleSets'))]"
                                      },
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles/ruleSets",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}', parameters('profileName'), parameters('ruleSets')[copyIndex()].name)]",
                                      "dependsOn": [
                                        "profile"
                                      ]
                                    },
                                    "profile": {
                                      "existing": true,
                                      "type": "Microsoft.Cdn/profiles",
                                      "apiVersion": "2023-05-01",
                                      "name": "[parameters('profileName')]"
                                    },
                                    "route": {
                                      "type": "Microsoft.Cdn/profiles/afdEndpoints/routes",
                                      "apiVersion": "2023-05-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('profileName'), parameters('afdEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "customDomains",
                                            "count": "[length(range(0, length(coalesce(parameters('customDomainNames'), createArray()))))]",
                                            "input": {
                                              "id": "[resourceId('Microsoft.Cdn/profiles/customDomains', parameters('profileName'), coalesce(parameters('customDomainNames'), createArray())[range(0, length(coalesce(parameters('customDomainNames'), createArray())))[copyIndex('customDomains')]])]"
                                            }
                                          },
                                          {
                                            "name": "ruleSets",
                                            "count": "[length(parameters('ruleSets'))]",
                                            "input": {
                                              "id": "[resourceId('Microsoft.Cdn/profiles/ruleSets', parameters('profileName'), parameters('ruleSets')[copyIndex('ruleSets')].name)]"
                                            }
                                          }
                                        ],
                                        "cacheConfiguration": "[parameters('cacheConfiguration')]",
                                        "enabledState": "[parameters('enabledState')]",
                                        "forwardingProtocol": "[parameters('forwardingProtocol')]",
                                        "httpsRedirect": "[parameters('httpsRedirect')]",
                                        "linkToDefaultDomain": "[parameters('linkToDefaultDomain')]",
                                        "originGroup": {
                                          "id": "[resourceId('Microsoft.Cdn/profiles/originGroups', parameters('profileName'), parameters('originGroupName'))]"
                                        },
                                        "originPath": "[parameters('originPath')]",
                                        "patternsToMatch": "[parameters('patternsToMatch')]",
                                        "supportedProtocols": "[parameters('supportedProtocols')]"
                                      },
                                      "dependsOn": [
                                        "profile::afdEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the route."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The ID of the route."
                                      },
                                      "value": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints/routes', parameters('profileName'), parameters('afdEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the route was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "afdEndpoint",
                                "profile"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the AFD Endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource id of the AFD Endpoint."
                              },
                              "value": "[resourceId('Microsoft.Cdn/profiles/afdEndpoints', parameters('profileName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the endpoint was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('afdEndpoint', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "profile",
                        "profile_customDomains",
                        "profile_originGroups",
                        "profile_ruleSets"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the CDN profile."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the CDN profile."
                      },
                      "value": "[resourceId('Microsoft.Cdn/profiles', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the CDN profile is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "profileType": {
                      "type": "string",
                      "metadata": {
                        "description": "The type of the CDN profile."
                      },
                      "value": "Microsoft.Cdn/profiles"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('profile', '2023-05-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id)))]"
              ]
            }
          ],
          "outputs": {
            "frontDoorResourceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the front door resource."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('frontDoorDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.resourceId.value]"
            },
            "privateLinkServiceId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the private link service."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.privateLinkServiceId.value]"
            },
            "privateLinkEndpointConnectionId": {
              "type": "string",
              "metadata": {
                "description": "The ID of the private link endpoint connection to approve."
              },
              "value": "[if(greater(length(reference(resourceId('Microsoft.Resources/deployments', format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.privateEndpointConnections.value), 0), filter(reference(resourceId('Microsoft.Resources/deployments', format('privateLinkServiceFrontDoorDeployment-{0}', uniqueString(resourceGroup().id))), '2022-09-01').outputs.privateEndpointConnections.value, lambda('connection', equals(lambdaVariables('connection').properties.privateLinkServiceConnectionState.description, 'frontdoor')))[0].id, '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('sampleApplication-{0}-deployment', deployment().name), 64))]",
        "[subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64))]"
      ]
    }
  ],
  "outputs": {
    "spokeResourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke resource group."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeResourceGroupName.value]"
    },
    "spokeVNetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The  resource ID of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetId.value]"
    },
    "spokeVnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Virtual Network."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeVNetName.value]"
    },
    "spokeInfraSubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetId.value]"
    },
    "spokeInfraSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Infrastructure Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeInfraSubnetName.value]"
    },
    "spokePrivateEndpointsSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Private Endpoints Subnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokePrivateEndpointsSubnetName.value]"
    },
    "spokeApplicationGatewaySubnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Spoke Application Gateway Subnet. If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetId.value]"
    },
    "spokeApplicationGatewaySubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Spoke Application Gateway Subnet.  If \"spokeApplicationGatewaySubnetAddressPrefix\" is empty, the subnet will not be created and the value returned is empty."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.spokeApplicationGatewaySubnetName.value]"
    },
    "logAnalyticsWorkspaceResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Log Analytics workspace created in the spoke vnet."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "vmJumpBoxName": {
      "type": "string",
      "metadata": {
        "description": "The name of the jump box virtual machine."
      },
      "value": "[reference(subscriptionResourceId('Microsoft.Resources/deployments', take(format('spoke-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.vmJumpBoxName.value]"
    },
    "containerRegistryResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryId.value]"
    },
    "containerRegistryName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container registry."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryName.value]"
    },
    "containerRegistryLoginServer": {
      "type": "string",
      "metadata": {
        "description": "The name of the container registry login server."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryLoginServer.value]"
    },
    "containerRegistryUserAssignedIdentityResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the user assigned managed identity for the container registry to be able to pull images from it."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerRegistryUserAssignedIdentityId.value]"
    },
    "keyVaultResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultResourceId.value]"
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure key vault."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('supportingServices-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.keyVaultName.value]"
    },
    "applicationGatewayResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Azure Application Gateway."
      },
      "value": "[if(equals(parameters('exposeContainerAppsWith'), 'applicationGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('applicationGateway-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.applicationGatewayResourceId.value, '')]"
    },
    "applicationGatewayFqdn": {
      "type": "string",
      "metadata": {
        "description": "The FQDN of the Azure Application Gateway."
      },
      "value": "[if(equals(parameters('exposeContainerAppsWith'), 'applicationGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('applicationGateway-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.applicationGatewayFqdn.value, '')]"
    },
    "applicationGatewayPublicIp": {
      "type": "string",
      "metadata": {
        "description": "The public IP address of the Azure Application Gateway."
      },
      "value": "[if(equals(parameters('exposeContainerAppsWith'), 'applicationGateway'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('applicationGateway-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.applicationGatewayPublicIp.value, '')]"
    },
    "containerAppsEnvironmentResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentId.value]"
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container apps environment."
      },
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.containerAppsEnvironmentName.value]"
    },
    "applicationInsightsName": {
      "type": "string",
      "metadata": {
        "description": "The name of application Insights instance."
      },
      "value": "[if(parameters('enableApplicationInsights'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('rgSpokeName')), 'Microsoft.Resources/deployments', take(format('containerAppsEnvironment-{0}-deployment', deployment().name), 64)), '2022-09-01').outputs.applicationInsightsName.value, '')]"
    }
  }
}