{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "12099423287853631622"
    },
    "name": "PaaS ASE with CosmosDB Tier 4",
    "description": "Creates a PaaS ASE with CosmosDB Tier 4 resiliency configuration."
  },
  "parameters": {
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the deployment."
      }
    },
    "suffix": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. Suffix for all resources."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Network/networkSecurityGroups@2024-07-01#properties/tags"
        },
        "description": "Optional. Tags of the resource."
      },
      "nullable": true
    },
    "vNetAddressPrefix": {
      "type": "string",
      "defaultValue": "192.168.250.0/23",
      "metadata": {
        "description": "Optional. Virtual Network address space."
      }
    },
    "defaultSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "192.168.250.0/24",
      "metadata": {
        "description": "Optional. Default subnet address prefix."
      }
    },
    "privateEndpointSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "192.168.251.0/24",
      "metadata": {
        "description": "Optional. PrivateEndpoint subnet address prefix."
      }
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.app-paasasecosmosdbt4.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "defaultNsg": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('defaultNsg-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-default-nsg-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "securityRules": {
            "value": []
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2305747478751645177"
            },
            "name": "Network Security Groups",
            "description": "This module deploys a Network security Group (NSG)."
          },
          "definitions": {
            "securityRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the security rule."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Required. Whether network traffic is allowed or denied."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the security rule."
                      }
                    },
                    "destinationAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                      }
                    },
                    "destinationAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                      }
                    },
                    "destinationApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                      }
                    },
                    "destinationPortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "destinationPortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port ranges."
                      }
                    },
                    "direction": {
                      "type": "string",
                      "allowedValues": [
                        "Inbound",
                        "Outbound"
                      ],
                      "metadata": {
                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                      }
                    },
                    "priority": {
                      "type": "int",
                      "minValue": 100,
                      "maxValue": 4096,
                      "metadata": {
                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "Ah",
                        "Esp",
                        "Icmp",
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Network protocol this rule applies to."
                      }
                    },
                    "sourceAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                      }
                    },
                    "sourceAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP ranges."
                      }
                    },
                    "sourceApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as source."
                      }
                    },
                    "sourcePortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "sourcePortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port ranges."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the security rule."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a security rule."
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "securityRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityRuleType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "flushConnection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                      }
                    }
                  }
                ],
                "flushConnection": "[parameters('flushConnection')]"
              }
            },
            "networkSecurityGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_diagnosticSettings": {
              "copy": {
                "name": "networkSecurityGroup_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_roleAssignments": {
              "copy": {
                "name": "networkSecurityGroup_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the network security group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the network security group."
              },
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network security group."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
            }
          }
        }
      }
    },
    "privateEndpointNsg": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('privateEndpointNsg-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-privateendpointsubnet-nsg-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "securityRules": {
            "value": []
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "2305747478751645177"
            },
            "name": "Network Security Groups",
            "description": "This module deploys a Network security Group (NSG)."
          },
          "definitions": {
            "securityRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the security rule."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "access": {
                      "type": "string",
                      "allowedValues": [
                        "Allow",
                        "Deny"
                      ],
                      "metadata": {
                        "description": "Required. Whether network traffic is allowed or denied."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the security rule."
                      }
                    },
                    "destinationAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                      }
                    },
                    "destinationAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                      }
                    },
                    "destinationApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                      }
                    },
                    "destinationPortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "destinationPortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The destination port ranges."
                      }
                    },
                    "direction": {
                      "type": "string",
                      "allowedValues": [
                        "Inbound",
                        "Outbound"
                      ],
                      "metadata": {
                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                      }
                    },
                    "priority": {
                      "type": "int",
                      "minValue": 100,
                      "maxValue": 4096,
                      "metadata": {
                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "Ah",
                        "Esp",
                        "Icmp",
                        "Tcp",
                        "Udp"
                      ],
                      "metadata": {
                        "description": "Required. Network protocol this rule applies to."
                      }
                    },
                    "sourceAddressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                      }
                    },
                    "sourceAddressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The CIDR or source IP ranges."
                      }
                    },
                    "sourceApplicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource IDs of the application security groups specified as source."
                      }
                    },
                    "sourcePortRange": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                      }
                    },
                    "sourcePortRanges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The source port ranges."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The properties of the security rule."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a security rule."
              }
            },
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Network Security Group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "securityRules": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/securityRuleType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
              }
            },
            "flushConnection": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the NSG resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "networkSecurityGroup": {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "securityRules",
                    "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                      "properties": {
                        "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                        "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                        "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                        "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                        "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                        "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                        "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                        "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                        "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                        "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                        "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                        "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                        "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                        "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                        "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                      }
                    }
                  }
                ],
                "flushConnection": "[parameters('flushConnection')]"
              }
            },
            "networkSecurityGroup_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_diagnosticSettings": {
              "copy": {
                "name": "networkSecurityGroup_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            },
            "networkSecurityGroup_roleAssignments": {
              "copy": {
                "name": "networkSecurityGroup_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "networkSecurityGroup"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the network security group was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the network security group."
              },
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the network security group."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
            }
          }
        }
      }
    },
    "vnet": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vnet-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-vNet-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "addressPrefixes": {
            "value": [
              "[parameters('vNetAddressPrefix')]"
            ]
          },
          "subnets": {
            "value": [
              {
                "name": "default",
                "addressPrefix": "[parameters('defaultSubnetAddressPrefix')]",
                "networkSecurityGroupResourceId": "[reference('defaultNsg').outputs.resourceId.value]",
                "delegation": "Microsoft.Web/hostingEnvironments",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              },
              {
                "name": "PrivateEndpointSubnet",
                "addressPrefix": "[parameters('privateEndpointSubnetAddressPrefix')]",
                "networkSecurityGroupResourceId": "[reference('privateEndpointNsg').outputs.resourceId.value]",
                "privateEndpointNetworkPolicies": "Disabled",
                "privateLinkServiceNetworkPolicies": "Enabled"
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "16195883788906927531"
            },
            "name": "Virtual Networks",
            "description": "This module deploys a Virtual Network (vNet)."
          },
          "definitions": {
            "peeringType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                  }
                },
                "remoteVirtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                  }
                },
                "allowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "allowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "allowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "doNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "useRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                },
                "remotePeeringEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Deploy the outbound and the inbound peering."
                  }
                },
                "remotePeeringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                  }
                },
                "remotePeeringAllowForwardedTraffic": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                  }
                },
                "remotePeeringAllowGatewayTransit": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                  }
                },
                "remotePeeringAllowVirtualNetworkAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                  }
                },
                "remotePeeringDoNotVerifyRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                  }
                },
                "remotePeeringUseRemoteGateways": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                  }
                }
              }
            },
            "subnetType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Name of the subnet resource."
                  }
                },
                "addressPrefix": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                  }
                },
                "addressPrefixes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                  }
                },
                "ipamPoolPrefixAllocations": {
                  "type": "array",
                  "prefixItems": [
                    {
                      "type": "object",
                      "properties": {
                        "pool": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Resource ID of the IPAM pool."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The Resource ID of the IPAM pool."
                          }
                        },
                        "numberOfIpAddresses": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Number of IP addresses allocated from the pool."
                          }
                        }
                      }
                    }
                  ],
                  "items": false,
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty and the VNet address space configured to use IPAM Pool."
                  }
                },
                "applicationGatewayIPConfigurations": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application gateway IP configurations of virtual network resource."
                  }
                },
                "delegation": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The delegation to enable on the subnet."
                  }
                },
                "natGatewayResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                  }
                },
                "networkSecurityGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the network security group to assign to the subnet."
                  }
                },
                "privateEndpointNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled",
                    "NetworkSecurityGroupEnabled",
                    "RouteTableEnabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                  }
                },
                "privateLinkServiceNetworkPolicies": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "routeTableResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                  }
                },
                "serviceEndpointPolicies": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. An array of service endpoint policies."
                  }
                },
                "serviceEndpoints": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The service endpoints to enable on the subnet."
                  }
                },
                "defaultOutboundAccess": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                  }
                },
                "sharingScope": {
                  "type": "string",
                  "allowedValues": [
                    "DelegatedServices",
                    "Tenant"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                  }
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Virtual Network (vNet)."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "addressPrefixes": {
              "type": "array",
              "metadata": {
                "description": "Required. An Array of 1 or more IP Address Prefixes OR the resource ID of the IPAM pool to be used for the Virtual Network. When specifying an IPAM pool resource ID you must also set a value for the parameter called `ipamPoolNumberOfIpAddresses`."
              }
            },
            "ipamPoolNumberOfIpAddresses": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Number of IP addresses allocated from the pool. To be used only when the addressPrefix param is defined with a resource ID of an IPAM pool."
              }
            },
            "virtualNetworkBgpCommunity": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The BGP community associated with the virtual network."
              }
            },
            "subnets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/subnetType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. An Array of subnets to deploy to the Virtual Network."
              }
            },
            "dnsServers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. DNS Servers associated to the Virtual Network."
              }
            },
            "ddosProtectionPlanResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
              }
            },
            "peerings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/peeringType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual Network Peering configurations."
              }
            },
            "vnetEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
              }
            },
            "vnetEncryptionEnforcement": {
              "type": "string",
              "defaultValue": "AllowUnencrypted",
              "allowedValues": [
                "AllowUnencrypted",
                "DropUnencrypted"
              ],
              "metadata": {
                "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
              }
            },
            "flowTimeoutInMinutes": {
              "type": "int",
              "defaultValue": 0,
              "maxValue": 30,
              "metadata": {
                "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "enableVmProtection": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "virtualNetwork": {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": "[if(contains(parameters('addressPrefixes')[0], '/Microsoft.Network/networkManagers/'), createObject('ipamPoolPrefixAllocations', createArray(createObject('pool', createObject('id', parameters('addressPrefixes')[0]), 'numberOfIpAddresses', parameters('ipamPoolNumberOfIpAddresses')))), createObject('addressPrefixes', parameters('addressPrefixes')))]",
                "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                "enableVmProtection": "[parameters('enableVmProtection')]"
              }
            },
            "virtualNetwork_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_diagnosticSettings": {
              "copy": {
                "name": "virtualNetwork_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_roleAssignments": {
              "copy": {
                "name": "virtualNetwork_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_subnets": {
              "copy": {
                "name": "virtualNetwork_subnets",
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualNetworkName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                  },
                  "addressPrefix": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                  },
                  "addressPrefixes": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                  },
                  "ipamPoolPrefixAllocations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'ipamPoolPrefixAllocations')]"
                  },
                  "applicationGatewayIPConfigurations": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                  },
                  "delegation": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                  },
                  "natGatewayResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                  },
                  "networkSecurityGroupResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                  },
                  "privateEndpointNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                  },
                  "privateLinkServiceNetworkPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "routeTableResourceId": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                  },
                  "serviceEndpointPolicies": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                  },
                  "serviceEndpoints": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                  },
                  "defaultOutboundAccess": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                  },
                  "sharingScope": {
                    "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "9728353654559466189"
                    },
                    "name": "Virtual Network Subnets",
                    "description": "This module deploys a Virtual Network Subnet."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Name of the subnet resource."
                      }
                    },
                    "virtualNetworkName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                      }
                    },
                    "addressPrefix": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                      }
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                      }
                    },
                    "networkSecurityGroupResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                      }
                    },
                    "routeTableResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                      }
                    },
                    "serviceEndpoints": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The service endpoints to enable on the subnet."
                      }
                    },
                    "delegation": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The delegation to enable on the subnet."
                      }
                    },
                    "natGatewayResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                      }
                    },
                    "privateEndpointNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled",
                        "NetworkSecurityGroupEnabled",
                        "RouteTableEnabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                      }
                    },
                    "privateLinkServiceNetworkPolicies": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                      }
                    },
                    "defaultOutboundAccess": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                      }
                    },
                    "sharingScope": {
                      "type": "string",
                      "allowedValues": [
                        "DelegatedServices",
                        "Tenant"
                      ],
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                      }
                    },
                    "applicationGatewayIPConfigurations": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                      }
                    },
                    "serviceEndpointPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of service endpoint policies."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "virtualNetwork": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('virtualNetworkName')]"
                    },
                    "subnet": {
                      "type": "Microsoft.Network/virtualNetworks/subnets",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "serviceEndpoints",
                            "count": "[length(parameters('serviceEndpoints'))]",
                            "input": {
                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                            }
                          }
                        ],
                        "addressPrefix": "[parameters('addressPrefix')]",
                        "addressPrefixes": "[parameters('addressPrefixes')]",
                        "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                        "sharingScope": "[parameters('sharingScope')]"
                      }
                    },
                    "subnet_roleAssignments": {
                      "copy": {
                        "name": "subnet_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "subnet"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                    },
                    "addressPrefix": {
                      "type": "string",
                      "metadata": {
                        "description": "The address prefix for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "List of address prefixes for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                    },
                    "ipamPoolPrefixAllocations": {
                      "type": "array",
                      "metadata": {
                        "description": "The IPAM pool prefix allocations for the subnet."
                      },
                      "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork"
              ]
            },
            "virtualNetwork_peering_local": {
              "copy": {
                "name": "virtualNetwork_peering_local",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[parameters('name')]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            },
            "virtualNetwork_peering_remote": {
              "copy": {
                "name": "virtualNetwork_peering_remote",
                "count": "[length(coalesce(parameters('peerings'), createArray()))]"
              },
              "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
              "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "localVnetName": {
                    "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                  },
                  "allowForwardedTraffic": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                  },
                  "allowGatewayTransit": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                  },
                  "allowVirtualNetworkAccess": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                  },
                  "doNotVerifyRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                  },
                  "useRemoteGateways": {
                    "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11179987886456111827"
                    },
                    "name": "Virtual Network Peerings",
                    "description": "This module deploys a Virtual Network Peering."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                      }
                    },
                    "localVnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                      }
                    },
                    "allowForwardedTraffic": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                      }
                    },
                    "allowGatewayTransit": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                      }
                    },
                    "allowVirtualNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                      }
                    },
                    "doNotVerifyRemoteGateways": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                      }
                    },
                    "useRemoteGateways": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                      "properties": {
                        "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                        "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                        "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                        "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                        "useRemoteGateways": "[parameters('useRemoteGateways')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual network peering was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual network peering."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual network peering."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualNetwork",
                "virtualNetwork_subnets"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the virtual network was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual network."
              },
              "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual network."
              },
              "value": "[parameters('name')]"
            },
            "subnetNames": {
              "type": "array",
              "metadata": {
                "description": "The names of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
              }
            },
            "subnetResourceIds": {
              "type": "array",
              "metadata": {
                "description": "The resource IDs of the deployed subnets."
              },
              "copy": {
                "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('virtualNetwork', '2024-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "defaultNsg",
        "privateEndpointNsg"
      ]
    },
    "appServicePrivateDnsZone": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('appServicePrivateDnsZone-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}.appserviceenvironment.net', parameters('name'))]"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "name": "vnetlink",
                "virtualNetworkResourceId": "[reference('vnet').outputs.resourceId.value]",
                "registrationEnabled": false
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4533956061065498344"
            },
            "name": "Private DNS Zones",
            "description": "This module deploys a Private DNS zone."
          },
          "definitions": {
            "aType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv4Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv4 address of this A record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of A records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the A record."
              }
            },
            "aaaaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aaaaRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv6Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv6 address of this AAAA record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of AAAA records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the AAAA record."
              }
            },
            "cnameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "cnameRecord": {
                  "type": "object",
                  "properties": {
                    "cname": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The canonical name of the CNAME record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The CNAME record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the CNAME record."
              }
            },
            "mxType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "mxRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The domain name of the mail host for this MX record."
                        }
                      },
                      "preference": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The preference value for this MX record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of MX records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the MX record."
              }
            },
            "ptrType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "ptrRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ptrdname": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The PTR target domain name for this PTR record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of PTR records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the PTR record."
              }
            },
            "soaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "soaRecord": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The email contact for this SOA record."
                      }
                    },
                    "expireTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The expire time for this SOA record."
                      }
                    },
                    "host": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The domain name of the authoritative name server for this SOA record."
                      }
                    },
                    "minimumTtl": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                      }
                    },
                    "refreshTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The refresh value for this SOA record."
                      }
                    },
                    "retryTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The retry time for this SOA record."
                      }
                    },
                    "serialNumber": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The serial number for this SOA record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SOA record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SOA record."
              }
            },
            "srvType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "srvRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "priority": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The priority value for this SRV record."
                        }
                      },
                      "weight": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The weight value for this SRV record."
                        }
                      },
                      "port": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The port value for this SRV record."
                        }
                      },
                      "target": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The target domain name for this SRV record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of SRV records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SRV record."
              }
            },
            "txtType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "txtRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "Required. The text value of this TXT record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of TXT records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the TXT record."
              }
            },
            "virtualNetworkLinkType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "minLength": 1,
                  "maxLength": 80,
                  "metadata": {
                    "description": "Optional. The resource name."
                  }
                },
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the virtual network to link."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Region where the resource lives."
                  }
                },
                "registrationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource tags."
                  }
                },
                "resolutionPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "NxDomainRedirect"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resolution type of the private-dns-zone fallback machanism."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the virtual network link."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "a": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of A records."
              }
            },
            "aaaa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aaaaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of AAAA records."
              }
            },
            "cname": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cnameType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of CNAME records."
              }
            },
            "mx": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mxType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of MX records."
              }
            },
            "ptr": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ptrType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of PTR records."
              }
            },
            "soa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/soaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SOA records."
              }
            },
            "srv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/srvType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SRV records."
              }
            },
            "txt": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/txtType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of TXT records."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/virtualNetworkLinkType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "privateDnsZone_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_roleAssignments": {
              "copy": {
                "name": "privateDnsZone_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_A": {
              "copy": {
                "name": "privateDnsZone_A",
                "count": "[length(coalesce(parameters('a'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                  },
                  "aRecords": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "18243374258187942664"
                    },
                    "name": "Private DNS Zone A record",
                    "description": "This module deploys a Private DNS Zone A record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the A record."
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of A records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "A": {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aRecords": "[parameters('aRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "A_roleAssignments": {
                      "copy": {
                        "name": "A_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "A"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed A record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed A record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed A record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_AAAA": {
              "copy": {
                "name": "privateDnsZone_AAAA",
                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                  },
                  "aaaaRecords": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "7322684246075092047"
                    },
                    "name": "Private DNS Zone AAAA record",
                    "description": "This module deploys a Private DNS Zone AAAA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AAAA record."
                      }
                    },
                    "aaaaRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of AAAA records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "AAAA": {
                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aaaaRecords": "[parameters('aaaaRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "AAAA_roleAssignments": {
                      "copy": {
                        "name": "AAAA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "AAAA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed AAAA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed AAAA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed AAAA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_CNAME": {
              "copy": {
                "name": "privateDnsZone_CNAME",
                "count": "[length(coalesce(parameters('cname'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                  },
                  "cnameRecord": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "5264706240021075859"
                    },
                    "name": "Private DNS Zone CNAME record",
                    "description": "This module deploys a Private DNS Zone CNAME record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the CNAME record."
                      }
                    },
                    "cnameRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A CNAME record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "CNAME": {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "cnameRecord": "[parameters('cnameRecord')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "CNAME_roleAssignments": {
                      "copy": {
                        "name": "CNAME_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "CNAME"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed CNAME record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed CNAME record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed CNAME record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_MX": {
              "copy": {
                "name": "privateDnsZone_MX",
                "count": "[length(coalesce(parameters('mx'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "mxRecords": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13758189936483275969"
                    },
                    "name": "Private DNS Zone MX record",
                    "description": "This module deploys a Private DNS Zone MX record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the MX record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "mxRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of MX records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "MX": {
                      "type": "Microsoft.Network/privateDnsZones/MX",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "mxRecords": "[parameters('mxRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "MX_roleAssignments": {
                      "copy": {
                        "name": "MX_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "MX"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed MX record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed MX record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed MX record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_PTR": {
              "copy": {
                "name": "privateDnsZone_PTR",
                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ptrRecords": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "11955164584650609753"
                    },
                    "name": "Private DNS Zone PTR record",
                    "description": "This module deploys a Private DNS Zone PTR record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the PTR record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ptrRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of PTR records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "PTR": {
                      "type": "Microsoft.Network/privateDnsZones/PTR",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ptrRecords": "[parameters('ptrRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "PTR_roleAssignments": {
                      "copy": {
                        "name": "PTR_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "PTR"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed PTR record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed PTR record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed PTR record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SOA": {
              "copy": {
                "name": "privateDnsZone_SOA",
                "count": "[length(coalesce(parameters('soa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "soaRecord": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14626715835033259725"
                    },
                    "name": "Private DNS Zone SOA record",
                    "description": "This module deploys a Private DNS Zone SOA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SOA record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "soaRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A SOA record."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SOA": {
                      "type": "Microsoft.Network/privateDnsZones/SOA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "soaRecord": "[parameters('soaRecord')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SOA_roleAssignments": {
                      "copy": {
                        "name": "SOA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SOA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SOA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SOA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SOA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SRV": {
              "copy": {
                "name": "privateDnsZone_SRV",
                "count": "[length(coalesce(parameters('srv'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "srvRecords": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "6510442308165042737"
                    },
                    "name": "Private DNS Zone SRV record",
                    "description": "This module deploys a Private DNS Zone SRV record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SRV record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "srvRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of SRV records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SRV": {
                      "type": "Microsoft.Network/privateDnsZones/SRV",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "srvRecords": "[parameters('srvRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SRV_roleAssignments": {
                      "copy": {
                        "name": "SRV_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SRV"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SRV record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SRV record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SRV record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_TXT": {
              "copy": {
                "name": "privateDnsZone_TXT",
                "count": "[length(coalesce(parameters('txt'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "txtRecords": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "170623042781622569"
                    },
                    "name": "Private DNS Zone TXT record",
                    "description": "This module deploys a Private DNS Zone TXT record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the TXT record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "txtRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of TXT records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "TXT": {
                      "type": "Microsoft.Network/privateDnsZones/TXT",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]",
                        "txtRecords": "[parameters('txtRecords')]"
                      }
                    },
                    "TXT_roleAssignments": {
                      "copy": {
                        "name": "TXT_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "TXT"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed TXT record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed TXT record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed TXT record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_virtualNetworkLinks": {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-VNetLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "resolutionPolicy": {
                    "value": "[tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'resolutionPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "725891200086243555"
                    },
                    "name": "Private DNS Zone Virtual Network Link",
                    "description": "This module deploys a Private DNS Zone Virtual Network Link."
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    },
                    "resolutionPolicy": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to `NxDomainRedirect`, Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. `Default` is configured as the default option."
                      }
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        },
                        "resolutionPolicy": "[parameters('resolutionPolicy')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual network link."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetworkLink', '2024-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private DNS zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vnet"
      ]
    },
    "cosmosdbPrivateDnsZone": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosdbPrivateDnsZone-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.documents.azure.com"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "name": "vnetlink",
                "virtualNetworkResourceId": "[reference('vnet').outputs.resourceId.value]",
                "registrationEnabled": false
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4533956061065498344"
            },
            "name": "Private DNS Zones",
            "description": "This module deploys a Private DNS zone."
          },
          "definitions": {
            "aType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv4Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv4 address of this A record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of A records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the A record."
              }
            },
            "aaaaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aaaaRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv6Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv6 address of this AAAA record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of AAAA records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the AAAA record."
              }
            },
            "cnameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "cnameRecord": {
                  "type": "object",
                  "properties": {
                    "cname": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The canonical name of the CNAME record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The CNAME record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the CNAME record."
              }
            },
            "mxType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "mxRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The domain name of the mail host for this MX record."
                        }
                      },
                      "preference": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The preference value for this MX record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of MX records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the MX record."
              }
            },
            "ptrType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "ptrRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ptrdname": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The PTR target domain name for this PTR record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of PTR records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the PTR record."
              }
            },
            "soaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "soaRecord": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The email contact for this SOA record."
                      }
                    },
                    "expireTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The expire time for this SOA record."
                      }
                    },
                    "host": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The domain name of the authoritative name server for this SOA record."
                      }
                    },
                    "minimumTtl": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                      }
                    },
                    "refreshTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The refresh value for this SOA record."
                      }
                    },
                    "retryTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The retry time for this SOA record."
                      }
                    },
                    "serialNumber": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The serial number for this SOA record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SOA record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SOA record."
              }
            },
            "srvType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "srvRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "priority": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The priority value for this SRV record."
                        }
                      },
                      "weight": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The weight value for this SRV record."
                        }
                      },
                      "port": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The port value for this SRV record."
                        }
                      },
                      "target": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The target domain name for this SRV record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of SRV records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SRV record."
              }
            },
            "txtType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "txtRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "Required. The text value of this TXT record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of TXT records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the TXT record."
              }
            },
            "virtualNetworkLinkType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "minLength": 1,
                  "maxLength": 80,
                  "metadata": {
                    "description": "Optional. The resource name."
                  }
                },
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the virtual network to link."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Region where the resource lives."
                  }
                },
                "registrationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource tags."
                  }
                },
                "resolutionPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "NxDomainRedirect"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resolution type of the private-dns-zone fallback machanism."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the virtual network link."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "a": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of A records."
              }
            },
            "aaaa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aaaaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of AAAA records."
              }
            },
            "cname": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cnameType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of CNAME records."
              }
            },
            "mx": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mxType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of MX records."
              }
            },
            "ptr": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ptrType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of PTR records."
              }
            },
            "soa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/soaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SOA records."
              }
            },
            "srv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/srvType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SRV records."
              }
            },
            "txt": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/txtType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of TXT records."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/virtualNetworkLinkType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "privateDnsZone_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_roleAssignments": {
              "copy": {
                "name": "privateDnsZone_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_A": {
              "copy": {
                "name": "privateDnsZone_A",
                "count": "[length(coalesce(parameters('a'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                  },
                  "aRecords": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "18243374258187942664"
                    },
                    "name": "Private DNS Zone A record",
                    "description": "This module deploys a Private DNS Zone A record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the A record."
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of A records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "A": {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aRecords": "[parameters('aRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "A_roleAssignments": {
                      "copy": {
                        "name": "A_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "A"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed A record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed A record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed A record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_AAAA": {
              "copy": {
                "name": "privateDnsZone_AAAA",
                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                  },
                  "aaaaRecords": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "7322684246075092047"
                    },
                    "name": "Private DNS Zone AAAA record",
                    "description": "This module deploys a Private DNS Zone AAAA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AAAA record."
                      }
                    },
                    "aaaaRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of AAAA records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "AAAA": {
                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aaaaRecords": "[parameters('aaaaRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "AAAA_roleAssignments": {
                      "copy": {
                        "name": "AAAA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "AAAA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed AAAA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed AAAA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed AAAA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_CNAME": {
              "copy": {
                "name": "privateDnsZone_CNAME",
                "count": "[length(coalesce(parameters('cname'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                  },
                  "cnameRecord": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "5264706240021075859"
                    },
                    "name": "Private DNS Zone CNAME record",
                    "description": "This module deploys a Private DNS Zone CNAME record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the CNAME record."
                      }
                    },
                    "cnameRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A CNAME record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "CNAME": {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "cnameRecord": "[parameters('cnameRecord')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "CNAME_roleAssignments": {
                      "copy": {
                        "name": "CNAME_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "CNAME"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed CNAME record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed CNAME record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed CNAME record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_MX": {
              "copy": {
                "name": "privateDnsZone_MX",
                "count": "[length(coalesce(parameters('mx'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "mxRecords": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13758189936483275969"
                    },
                    "name": "Private DNS Zone MX record",
                    "description": "This module deploys a Private DNS Zone MX record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the MX record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "mxRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of MX records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "MX": {
                      "type": "Microsoft.Network/privateDnsZones/MX",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "mxRecords": "[parameters('mxRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "MX_roleAssignments": {
                      "copy": {
                        "name": "MX_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "MX"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed MX record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed MX record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed MX record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_PTR": {
              "copy": {
                "name": "privateDnsZone_PTR",
                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ptrRecords": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "11955164584650609753"
                    },
                    "name": "Private DNS Zone PTR record",
                    "description": "This module deploys a Private DNS Zone PTR record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the PTR record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ptrRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of PTR records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "PTR": {
                      "type": "Microsoft.Network/privateDnsZones/PTR",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ptrRecords": "[parameters('ptrRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "PTR_roleAssignments": {
                      "copy": {
                        "name": "PTR_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "PTR"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed PTR record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed PTR record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed PTR record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SOA": {
              "copy": {
                "name": "privateDnsZone_SOA",
                "count": "[length(coalesce(parameters('soa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "soaRecord": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14626715835033259725"
                    },
                    "name": "Private DNS Zone SOA record",
                    "description": "This module deploys a Private DNS Zone SOA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SOA record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "soaRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A SOA record."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SOA": {
                      "type": "Microsoft.Network/privateDnsZones/SOA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "soaRecord": "[parameters('soaRecord')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SOA_roleAssignments": {
                      "copy": {
                        "name": "SOA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SOA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SOA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SOA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SOA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SRV": {
              "copy": {
                "name": "privateDnsZone_SRV",
                "count": "[length(coalesce(parameters('srv'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "srvRecords": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "6510442308165042737"
                    },
                    "name": "Private DNS Zone SRV record",
                    "description": "This module deploys a Private DNS Zone SRV record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SRV record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "srvRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of SRV records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SRV": {
                      "type": "Microsoft.Network/privateDnsZones/SRV",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "srvRecords": "[parameters('srvRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SRV_roleAssignments": {
                      "copy": {
                        "name": "SRV_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SRV"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SRV record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SRV record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SRV record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_TXT": {
              "copy": {
                "name": "privateDnsZone_TXT",
                "count": "[length(coalesce(parameters('txt'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "txtRecords": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "170623042781622569"
                    },
                    "name": "Private DNS Zone TXT record",
                    "description": "This module deploys a Private DNS Zone TXT record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the TXT record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "txtRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of TXT records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "TXT": {
                      "type": "Microsoft.Network/privateDnsZones/TXT",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]",
                        "txtRecords": "[parameters('txtRecords')]"
                      }
                    },
                    "TXT_roleAssignments": {
                      "copy": {
                        "name": "TXT_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "TXT"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed TXT record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed TXT record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed TXT record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_virtualNetworkLinks": {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-VNetLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "resolutionPolicy": {
                    "value": "[tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'resolutionPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "725891200086243555"
                    },
                    "name": "Private DNS Zone Virtual Network Link",
                    "description": "This module deploys a Private DNS Zone Virtual Network Link."
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    },
                    "resolutionPolicy": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to `NxDomainRedirect`, Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. `Default` is configured as the default option."
                      }
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        },
                        "resolutionPolicy": "[parameters('resolutionPolicy')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual network link."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetworkLink', '2024-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private DNS zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vnet"
      ]
    },
    "redisPrivateDnsZone": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('redisPrivateDnsZone-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "privatelink.redis.cache.windows.net"
          },
          "location": {
            "value": "global"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "virtualNetworkLinks": {
            "value": [
              {
                "name": "vnetlink",
                "virtualNetworkResourceId": "[reference('vnet').outputs.resourceId.value]",
                "registrationEnabled": false
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "4533956061065498344"
            },
            "name": "Private DNS Zones",
            "description": "This module deploys a Private DNS zone."
          },
          "definitions": {
            "aType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv4Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv4 address of this A record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of A records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the A record."
              }
            },
            "aaaaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "aaaaRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ipv6Address": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The IPv6 address of this AAAA record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of AAAA records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the AAAA record."
              }
            },
            "cnameType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "cnameRecord": {
                  "type": "object",
                  "properties": {
                    "cname": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The canonical name of the CNAME record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The CNAME record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the CNAME record."
              }
            },
            "mxType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "mxRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "exchange": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The domain name of the mail host for this MX record."
                        }
                      },
                      "preference": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The preference value for this MX record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of MX records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the MX record."
              }
            },
            "ptrType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "ptrRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ptrdname": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The PTR target domain name for this PTR record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of PTR records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the PTR record."
              }
            },
            "soaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "soaRecord": {
                  "type": "object",
                  "properties": {
                    "email": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The email contact for this SOA record."
                      }
                    },
                    "expireTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The expire time for this SOA record."
                      }
                    },
                    "host": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The domain name of the authoritative name server for this SOA record."
                      }
                    },
                    "minimumTtl": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The minimum value for this SOA record. By convention this is used to determine the negative caching duration."
                      }
                    },
                    "refreshTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The refresh value for this SOA record."
                      }
                    },
                    "retryTime": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The retry time for this SOA record."
                      }
                    },
                    "serialNumber": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. The serial number for this SOA record."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The SOA record in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SOA record."
              }
            },
            "srvType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "srvRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "priority": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The priority value for this SRV record."
                        }
                      },
                      "weight": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The weight value for this SRV record."
                        }
                      },
                      "port": {
                        "type": "int",
                        "metadata": {
                          "description": "Required. The port value for this SRV record."
                        }
                      },
                      "target": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The target domain name for this SRV record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of SRV records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the SRV record."
              }
            },
            "txtType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the record."
                  }
                },
                "metadata": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The metadata of the record."
                  }
                },
                "ttl": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TTL of the record."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "txtRecords": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "value": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "Required. The text value of this TXT record."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The list of TXT records in the record set."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the TXT record."
              }
            },
            "virtualNetworkLinkType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "minLength": 1,
                  "maxLength": 80,
                  "metadata": {
                    "description": "Optional. The resource name."
                  }
                },
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the virtual network to link."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Region where the resource lives."
                  }
                },
                "registrationEnabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource tags."
                  }
                },
                "resolutionPolicy": {
                  "type": "string",
                  "allowedValues": [
                    "Default",
                    "NxDomainRedirect"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resolution type of the private-dns-zone fallback machanism."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the virtual network link."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Private DNS zone name."
              }
            },
            "a": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of A records."
              }
            },
            "aaaa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/aaaaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of AAAA records."
              }
            },
            "cname": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/cnameType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of CNAME records."
              }
            },
            "mx": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/mxType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of MX records."
              }
            },
            "ptr": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ptrType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of PTR records."
              }
            },
            "soa": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/soaType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SOA records."
              }
            },
            "srv": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/srvType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of SRV records."
              }
            },
            "txt": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/txtType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of TXT records."
              }
            },
            "virtualNetworkLinks": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/virtualNetworkLinkType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of custom objects describing vNet links of the DNS zone. Each object should contain properties 'virtualNetworkResourceId' and 'registrationEnabled'. The 'vnetResourceId' is a resource ID of a vNet to link, 'registrationEnabled' (bool) enables automatic DNS registration in the zone for the linked vNet."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "global",
              "metadata": {
                "description": "Optional. The location of the PrivateDNSZone. Should be global."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privatednszone.{0}.{1}', replace('0.7.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateDnsZone": {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "privateDnsZone_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_roleAssignments": {
              "copy": {
                "name": "privateDnsZone_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateDnsZones/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_A": {
              "copy": {
                "name": "privateDnsZone_A",
                "count": "[length(coalesce(parameters('a'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-ARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('a'), createArray())[copyIndex()].name]"
                  },
                  "aRecords": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'aRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('a'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "18243374258187942664"
                    },
                    "name": "Private DNS Zone A record",
                    "description": "This module deploys a Private DNS Zone A record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the A record."
                      }
                    },
                    "aRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of A records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "A": {
                      "type": "Microsoft.Network/privateDnsZones/A",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aRecords": "[parameters('aRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "A_roleAssignments": {
                      "copy": {
                        "name": "A_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/A/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "A"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed A record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed A record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/A', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed A record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_AAAA": {
              "copy": {
                "name": "privateDnsZone_AAAA",
                "count": "[length(coalesce(parameters('aaaa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-AAAARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('aaaa'), createArray())[copyIndex()].name]"
                  },
                  "aaaaRecords": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'aaaaRecords')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('aaaa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "7322684246075092047"
                    },
                    "name": "Private DNS Zone AAAA record",
                    "description": "This module deploys a Private DNS Zone AAAA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the AAAA record."
                      }
                    },
                    "aaaaRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of AAAA records in the record set."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "AAAA": {
                      "type": "Microsoft.Network/privateDnsZones/AAAA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "aaaaRecords": "[parameters('aaaaRecords')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "AAAA_roleAssignments": {
                      "copy": {
                        "name": "AAAA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/AAAA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "AAAA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed AAAA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed AAAA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/AAAA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed AAAA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_CNAME": {
              "copy": {
                "name": "privateDnsZone_CNAME",
                "count": "[length(coalesce(parameters('cname'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-CNAMERecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('cname'), createArray())[copyIndex()].name]"
                  },
                  "cnameRecord": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'cnameRecord')]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('cname'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "5264706240021075859"
                    },
                    "name": "Private DNS Zone CNAME record",
                    "description": "This module deploys a Private DNS Zone CNAME record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the CNAME record."
                      }
                    },
                    "cnameRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A CNAME record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "CNAME": {
                      "type": "Microsoft.Network/privateDnsZones/CNAME",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "cnameRecord": "[parameters('cnameRecord')]",
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "CNAME_roleAssignments": {
                      "copy": {
                        "name": "CNAME_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/CNAME/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "CNAME"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed CNAME record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed CNAME record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/CNAME', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed CNAME record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_MX": {
              "copy": {
                "name": "privateDnsZone_MX",
                "count": "[length(coalesce(parameters('mx'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-MXRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mx'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "mxRecords": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'mxRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('mx'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13758189936483275969"
                    },
                    "name": "Private DNS Zone MX record",
                    "description": "This module deploys a Private DNS Zone MX record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the MX record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "mxRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of MX records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "MX": {
                      "type": "Microsoft.Network/privateDnsZones/MX",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "mxRecords": "[parameters('mxRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "MX_roleAssignments": {
                      "copy": {
                        "name": "MX_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/MX/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "MX"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed MX record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed MX record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/MX', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed MX record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_PTR": {
              "copy": {
                "name": "privateDnsZone_PTR",
                "count": "[length(coalesce(parameters('ptr'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-PTRRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('ptr'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "ptrRecords": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ptrRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('ptr'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "11955164584650609753"
                    },
                    "name": "Private DNS Zone PTR record",
                    "description": "This module deploys a Private DNS Zone PTR record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the PTR record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ptrRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of PTR records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "PTR": {
                      "type": "Microsoft.Network/privateDnsZones/PTR",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ptrRecords": "[parameters('ptrRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "PTR_roleAssignments": {
                      "copy": {
                        "name": "PTR_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/PTR/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "PTR"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed PTR record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed PTR record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/PTR', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed PTR record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SOA": {
              "copy": {
                "name": "privateDnsZone_SOA",
                "count": "[length(coalesce(parameters('soa'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SOARecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('soa'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "soaRecord": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'soaRecord')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('soa'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "14626715835033259725"
                    },
                    "name": "Private DNS Zone SOA record",
                    "description": "This module deploys a Private DNS Zone SOA record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SOA record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "soaRecord": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A SOA record."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SOA": {
                      "type": "Microsoft.Network/privateDnsZones/SOA",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "soaRecord": "[parameters('soaRecord')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SOA_roleAssignments": {
                      "copy": {
                        "name": "SOA_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SOA/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SOA"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SOA record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SOA record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SOA', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SOA record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_SRV": {
              "copy": {
                "name": "privateDnsZone_SRV",
                "count": "[length(coalesce(parameters('srv'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-SRVRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('srv'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "srvRecords": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'srvRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('srv'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "6510442308165042737"
                    },
                    "name": "Private DNS Zone SRV record",
                    "description": "This module deploys a Private DNS Zone SRV record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the SRV record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "srvRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of SRV records in the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "SRV": {
                      "type": "Microsoft.Network/privateDnsZones/SRV",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "srvRecords": "[parameters('srvRecords')]",
                        "ttl": "[parameters('ttl')]"
                      }
                    },
                    "SRV_roleAssignments": {
                      "copy": {
                        "name": "SRV_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/SRV/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "SRV"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed SRV record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed SRV record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/SRV', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed SRV record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_TXT": {
              "copy": {
                "name": "privateDnsZone_TXT",
                "count": "[length(coalesce(parameters('txt'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-TXTRecord-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('txt'), createArray())[copyIndex()].name]"
                  },
                  "metadata": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'metadata')]"
                  },
                  "txtRecords": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'txtRecords')]"
                  },
                  "ttl": {
                    "value": "[coalesce(tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'ttl'), 3600)]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('txt'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "170623042781622569"
                    },
                    "name": "Private DNS Zone TXT record",
                    "description": "This module deploys a Private DNS Zone TXT record."
                  },
                  "definitions": {
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the TXT record."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The metadata attached to the record set."
                      }
                    },
                    "ttl": {
                      "type": "int",
                      "defaultValue": 3600,
                      "metadata": {
                        "description": "Optional. The TTL (time-to-live) of the records in the record set."
                      }
                    },
                    "txtRecords": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of TXT records in the record set."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "TXT": {
                      "type": "Microsoft.Network/privateDnsZones/TXT",
                      "apiVersion": "2020-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "properties": {
                        "metadata": "[parameters('metadata')]",
                        "ttl": "[parameters('ttl')]",
                        "txtRecords": "[parameters('txtRecords')]"
                      }
                    },
                    "TXT_roleAssignments": {
                      "copy": {
                        "name": "TXT_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateDnsZones/{0}/TXT/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "TXT"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed TXT record."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed TXT record."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/TXT', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed TXT record."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            },
            "privateDnsZone_virtualNetworkLinks": {
              "copy": {
                "name": "privateDnsZone_virtualNetworkLinks",
                "count": "[length(coalesce(parameters('virtualNetworkLinks'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateDnsZone-VNetLink-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "privateDnsZoneName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'name'), format('{0}-vnetlink', last(split(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId, '/'))))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()].virtualNetworkResourceId]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'location'), 'global')]"
                  },
                  "registrationEnabled": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'registrationEnabled'), false())]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "resolutionPolicy": {
                    "value": "[tryGet(coalesce(parameters('virtualNetworkLinks'), createArray())[copyIndex()], 'resolutionPolicy')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "725891200086243555"
                    },
                    "name": "Private DNS Zone Virtual Network Link",
                    "description": "This module deploys a Private DNS Zone Virtual Network Link."
                  },
                  "parameters": {
                    "privateDnsZoneName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Private DNS zone. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-vnetlink', last(split(parameters('virtualNetworkResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the virtual network link."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "global",
                      "metadata": {
                        "description": "Optional. The location of the PrivateDNSZone. Should be global."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registrationEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Is auto-registration of virtual machine records in the virtual network in the Private DNS zone enabled?."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Link to another virtual network resource ID."
                      }
                    },
                    "resolutionPolicy": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resolution policy on the virtual network link. Only applicable for virtual network links to privatelink zones, and for A,AAAA,CNAME queries. When set to `NxDomainRedirect`, Azure DNS resolver falls back to public resolution if private dns query resolution results in non-existent domain response. `Default` is configured as the default option."
                      }
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "existing": true,
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2020-06-01",
                      "name": "[parameters('privateDnsZoneName')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('privateDnsZoneName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": "[parameters('registrationEnabled')]",
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        },
                        "resolutionPolicy": "[parameters('resolutionPolicy')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual network link."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual network link."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', parameters('privateDnsZoneName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed virtual network link."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('virtualNetworkLink', '2024-06-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private DNS zone was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private DNS zone."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private DNS zone."
              },
              "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateDnsZone', '2020-06-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "vnet"
      ]
    },
    "ase": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ase-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "kind": {
            "value": "ASEv3"
          },
          "internalLoadBalancingMode": {
            "value": "Web, Publishing"
          },
          "clusterSettings": {
            "value": [
              {
                "name": "WorkerSize",
                "value": "Standard_D2d_v4"
              }
            ]
          },
          "customDnsSuffix": {
            "value": "[format('{0}.appserviceenvironment.net', parameters('name'))]"
          },
          "networkConfiguration": {
            "value": {
              "frontEndScaleFactor": 15,
              "upgradePreference": "None",
              "zoneRedundant": false
            }
          },
          "subnetResourceId": {
            "value": "[reference('vnet').outputs.subnetResourceIds.value[0]]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "426851802388429070"
            },
            "name": "App Service Environments",
            "description": "This module deploys an App Service Environment."
          },
          "definitions": {
            "diagnosticSettingLogsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the resource to create."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "ASEv3",
              "allowedValues": [
                "ASEv3"
              ],
              "metadata": {
                "description": "Optional. Kind of resource."
              }
            },
            "clusterSettings": {
              "type": "array",
              "defaultValue": [
                {
                  "name": "DisableTls1.0",
                  "value": "1"
                }
              ],
              "metadata": {
                "description": "Optional. Custom settings for changing the behavior of the App Service Environment."
              }
            },
            "customDnsSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Enable the default custom domain suffix to use for all sites deployed on the ASE. If provided, then customDnsSuffixCertificateUrl and customDnsSuffixKeyVaultReferenceIdentity are required."
              }
            },
            "customDnsSuffixCertificateUrl": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix. Required if customDnsSuffix is not empty."
              }
            },
            "customDnsSuffixKeyVaultReferenceIdentity": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available. Required if customDnsSuffix is not empty."
              }
            },
            "dedicatedHostCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. The Dedicated Host Count. If `zoneRedundant` is false, and you want physical hardware isolation enabled, set to 2. Otherwise 0."
              }
            },
            "dnsSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. DNS suffix of the App Service Environment."
              }
            },
            "frontEndScaleFactor": {
              "type": "int",
              "defaultValue": 15,
              "metadata": {
                "description": "Optional. Scale factor for frontends."
              }
            },
            "internalLoadBalancingMode": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "Web",
                "Publishing",
                "Web, Publishing"
              ],
              "metadata": {
                "description": "Optional. Specifies which endpoints to serve internally in the Virtual Network for the App Service Environment. - None, Web, Publishing, Web,Publishing. \"None\" Exposes the ASE-hosted apps on an internet-accessible IP address."
              }
            },
            "networkConfiguration": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Properties to configure additional networking features."
              }
            },
            "upgradePreference": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "Early",
                "Late",
                "Manual",
                "None"
              ],
              "metadata": {
                "description": "Optional. Specify preference for when and how the planned maintenance is applied."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. ResourceId for the subnet."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Switch to make the App Service Environment zone redundant. If enabled, the minimum App Service plan instance count will be three, otherwise 1. If enabled, the `dedicatedHostCount` must be set to `-1`."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-hostingenvironment.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "appServiceEnvironment": {
              "type": "Microsoft.Web/hostingEnvironments",
              "apiVersion": "2023-12-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "clusterSettings": "[parameters('clusterSettings')]",
                "dedicatedHostCount": "[if(not(equals(parameters('dedicatedHostCount'), 0)), parameters('dedicatedHostCount'), null())]",
                "dnsSuffix": "[if(not(empty(parameters('dnsSuffix'))), parameters('dnsSuffix'), null())]",
                "frontEndScaleFactor": "[parameters('frontEndScaleFactor')]",
                "internalLoadBalancingMode": "[parameters('internalLoadBalancingMode')]",
                "upgradePreference": "[parameters('upgradePreference')]",
                "networkingConfiguration": "[parameters('networkConfiguration')]",
                "virtualNetwork": {
                  "id": "[parameters('subnetResourceId')]",
                  "subnet": "[last(split(parameters('subnetResourceId'), '/'))]"
                },
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            },
            "appServiceEnvironment_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "appServiceEnvironment"
              ]
            },
            "appServiceEnvironment_diagnosticSettings": {
              "copy": {
                "name": "appServiceEnvironment_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "appServiceEnvironment"
              ]
            },
            "appServiceEnvironment_roleAssignments": {
              "copy": {
                "name": "appServiceEnvironment_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/hostingEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/hostingEnvironments', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "appServiceEnvironment"
              ]
            },
            "appServiceEnvironment_configurations_customDnsSuffix": {
              "condition": "[not(empty(parameters('customDnsSuffix')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-AppServiceEnv-Configurations-CustomDnsSuffix', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "hostingEnvironmentName": {
                    "value": "[parameters('name')]"
                  },
                  "certificateUrl": {
                    "value": "[parameters('customDnsSuffixCertificateUrl')]"
                  },
                  "keyVaultReferenceIdentity": {
                    "value": "[parameters('customDnsSuffixKeyVaultReferenceIdentity')]"
                  },
                  "dnsSuffix": {
                    "value": "[parameters('customDnsSuffix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "6389683208674877505"
                    },
                    "name": "Hosting Environment Custom DNS Suffix Configuration",
                    "description": "This module deploys a Hosting Environment Custom DNS Suffix Configuration."
                  },
                  "parameters": {
                    "hostingEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Hosting Environment. Required if the template is used in a standalone deployment."
                      }
                    },
                    "dnsSuffix": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Enable the default custom domain suffix to use for all sites deployed on the ASE."
                      }
                    },
                    "certificateUrl": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The URL referencing the Azure Key Vault certificate secret that should be used as the default SSL/TLS certificate for sites with the custom domain suffix."
                      }
                    },
                    "keyVaultReferenceIdentity": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The user-assigned identity to use for resolving the key vault certificate reference. If not specified, the system-assigned ASE identity will be used if available."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Web/hostingEnvironments/configurations",
                      "apiVersion": "2023-12-01",
                      "name": "[format('{0}/{1}', parameters('hostingEnvironmentName'), 'customdnssuffix')]",
                      "properties": {
                        "certificateUrl": "[parameters('certificateUrl')]",
                        "keyVaultReferenceIdentity": "[parameters('keyVaultReferenceIdentity')]",
                        "dnsSuffix": "[parameters('dnsSuffix')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the configuration."
                      },
                      "value": "customdnssuffix"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed configuration."
                      },
                      "value": "[resourceId('Microsoft.Web/hostingEnvironments/configurations', parameters('hostingEnvironmentName'), 'customdnssuffix')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed configuration."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "appServiceEnvironment"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the App Service Environment."
              },
              "value": "[resourceId('Microsoft.Web/hostingEnvironments', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the App Service Environment was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the App Service Environment."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('appServiceEnvironment', '2023-12-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('appServiceEnvironment', '2023-12-01', 'full'), 'identity'), 'principalId')]"
            }
          }
        }
      },
      "dependsOn": [
        "vnet"
      ]
    },
    "asp": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('asp-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-asp-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "kind": {
            "value": "linux"
          },
          "skuName": {
            "value": "S1"
          },
          "skuCapacity": {
            "value": 1
          },
          "appServiceEnvironmentId": {
            "value": "[reference('ase').outputs.resourceId.value]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "13070013363315850466"
            },
            "name": "App Service Plan",
            "description": "This module deploys an App Service Plan.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "diagnosticSettingMetricsOnlyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if only metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "minLength": 1,
              "maxLength": 60,
              "metadata": {
                "description": "Required. Name of the app service plan."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "P1v3",
              "metadata": {
                "example": "  'F1'\n  'B1'\n  'P1v3'\n  'I1v2'\n  'FC1'\n  ",
                "description": "Optional. The name of the SKU will Determine the tier, size, family of the App Service Plan. This defaults to P1v3 to leverage availability zones."
              }
            },
            "skuCapacity": {
              "type": "int",
              "defaultValue": 3,
              "metadata": {
                "description": "Optional. Number of workers associated with the App Service Plan. This defaults to 3, to leverage availability zones."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "app",
              "allowedValues": [
                "app",
                "elastic",
                "functionApp",
                "windows",
                "linux"
              ],
              "metadata": {
                "description": "Optional. Kind of server OS."
              }
            },
            "reserved": {
              "type": "bool",
              "defaultValue": "[equals(parameters('kind'), 'linux')]",
              "metadata": {
                "description": "Conditional. Defaults to false when creating Windows/app App Service Plan. Required if creating a Linux App Service Plan and must be set to true."
              }
            },
            "appServiceEnvironmentId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource ID of the App Service Environment to use for the App Service Plan."
              }
            },
            "workerTierName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Target worker tier assigned to the App Service plan."
              }
            },
            "perSiteScaling": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. If true, apps assigned to this App Service plan can be scaled independently. If false, apps assigned to this App Service plan will scale to all instances of the plan."
              }
            },
            "elasticScaleEnabled": {
              "type": "bool",
              "defaultValue": "[greater(parameters('maximumElasticWorkerCount'), 1)]",
              "metadata": {
                "description": "Optional. Enable/Disable ElasticScaleEnabled App Service Plan."
              }
            },
            "maximumElasticWorkerCount": {
              "type": "int",
              "defaultValue": 1,
              "metadata": {
                "description": "Optional. Maximum number of total workers allowed for this ElasticScaleEnabled App Service Plan."
              }
            },
            "targetWorkerCount": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Scaling worker count."
              }
            },
            "targetWorkerSize": {
              "type": "int",
              "defaultValue": 0,
              "allowedValues": [
                0,
                1,
                2
              ],
              "metadata": {
                "description": "Optional. The instance size of the hosting plan (small, medium, or large)."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": "[if(or(startsWith(parameters('skuName'), 'P'), startsWith(parameters('skuName'), 'EP')), true(), false())]",
              "metadata": {
                "description": "Optional. Zone Redundant server farms can only be used on Premium or ElasticPremium SKU tiers within ZRS Supported regions (https://learn.microsoft.com/en-us/azure/storage/common/redundancy-regions-zrs)."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingMetricsOnlyType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Web Plan Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2cc479cb-7b4d-49a8-b449-8c00fd0f0a4b')]",
              "Website Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.web-serverfarm.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "appServicePlan": {
              "type": "Microsoft.Web/serverfarms",
              "apiVersion": "2022-09-01",
              "name": "[parameters('name')]",
              "kind": "[parameters('kind')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('skuName')]",
                "capacity": "[if(equals(parameters('skuName'), 'FC1'), null(), parameters('skuCapacity'))]",
                "tier": "[if(equals(parameters('skuName'), 'FC1'), 'FlexConsumption', null())]"
              },
              "properties": {
                "workerTierName": "[parameters('workerTierName')]",
                "hostingEnvironmentProfile": "[if(not(empty(parameters('appServiceEnvironmentId'))), createObject('id', parameters('appServiceEnvironmentId')), null())]",
                "perSiteScaling": "[parameters('perSiteScaling')]",
                "maximumElasticWorkerCount": "[parameters('maximumElasticWorkerCount')]",
                "elasticScaleEnabled": "[parameters('elasticScaleEnabled')]",
                "reserved": "[parameters('reserved')]",
                "targetWorkerCount": "[parameters('targetWorkerCount')]",
                "targetWorkerSizeId": "[parameters('targetWorkerSize')]",
                "zoneRedundant": "[parameters('zoneRedundant')]"
              }
            },
            "appServicePlan_diagnosticSettings": {
              "copy": {
                "name": "appServicePlan_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            },
            "appServicePlan_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            },
            "appServicePlan_roleAssignments": {
              "copy": {
                "name": "appServicePlan_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Web/serverfarms/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Web/serverfarms', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "appServicePlan"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the app service plan was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the app service plan."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the app service plan."
              },
              "value": "[resourceId('Microsoft.Web/serverfarms', parameters('name'))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('appServicePlan', '2022-09-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "ase"
      ]
    },
    "cosmosdbAccount": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosdbAccount-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-cosmos-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "defaultConsistencyLevel": {
            "value": "Session"
          },
          "capabilitiesToAdd": {
            "value": [
              "EnableServerless"
            ]
          },
          "failoverLocations": {
            "value": [
              {
                "locationName": "[parameters('location')]",
                "failoverPriority": 0,
                "isZoneRedundant": false
              }
            ]
          },
          "maxStalenessPrefix": {
            "value": 100
          },
          "maxIntervalInSeconds": {
            "value": 5
          },
          "networkRestrictions": {
            "value": {
              "publicNetworkAccess": "Disabled"
            }
          },
          "sqlDatabases": {
            "value": [
              {
                "name": "[format('{0}-cosmosdb', parameters('name'))]",
                "containers": [
                  {
                    "name": "defaultContainer",
                    "paths": [
                      "/partitionKey"
                    ]
                  }
                ]
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "8020152823352819436"
            },
            "name": "Azure Cosmos DB account",
            "description": "This module deploys an Azure Cosmos DB account. The API used for the account is determined by the child resources that are deployed."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group ID for the private endpoint group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "fully-qualified domain name (FQDN) that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses for the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the private endpoint output."
              }
            },
            "failoverLocationType": {
              "type": "object",
              "properties": {
                "failoverPriority": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists."
                  }
                },
                "isZoneRedundant": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag to indicate whether or not this region is an AvailabilityZone region. Defaults to true."
                  }
                },
                "locationName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the region."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the failover location."
              }
            },
            "dataPlaneRoleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The unique name of the role assignment."
                  }
                },
                "roleDefinitionId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The unique identifier of the Azure Cosmos DB for NoSQL native role-based access control definition."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The unique identifier for the associated Microsoft Entra ID principal to which access is being granted through this role-based access control assignment. The tenant ID for the principal is inferred using the tenant associated with the subscription."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an Azure Cosmos DB for NoSQL native role-based access control assignment."
              }
            },
            "dataPlaneRoleDefinitionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The unique identifier of the role-based access control definition."
                  }
                },
                "roleName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. A user-friendly name for the role-based access control definition. This must be unique within the database account."
                  }
                },
                "dataActions": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. An array of data actions that are allowed."
                  }
                },
                "assignableScopes": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A set of fully-qualified scopes at or below which role-based access control assignments may be created using this definition. This setting allows application of this definition on the entire account or any underlying resource. This setting must have at least one element. Scopes higher than the account level are not enforceable as assignable scopes. Resources referenced in assignable scopes do not need to exist at creation. Defaults to the current account scope."
                  }
                },
                "assignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/sqlRoleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. An array of role-based access control assignments to be created for the definition."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an Azure Cosmos DB for NoSQL or Table native role-based access control definition."
              }
            },
            "sqlDatabaseType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the database ."
                  }
                },
                "throughput": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Request units per second. Will be ignored if `autoscaleSettingsMaxThroughput` is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level. Defaults to 400."
                  }
                },
                "autoscaleSettingsMaxThroughput": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the autoscale settings and represents maximum throughput the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If the value is not set, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                  }
                },
                "containers": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of the container."
                        }
                      },
                      "paths": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "minLength": 1,
                        "maxLength": 3,
                        "metadata": {
                          "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                        }
                      },
                      "analyticalStorageTtl": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                        }
                      },
                      "autoscaleSettingsMaxThroughput": {
                        "type": "int",
                        "nullable": true,
                        "maxValue": 1000000,
                        "metadata": {
                          "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level."
                        }
                      },
                      "conflictResolutionPolicy": {
                        "type": "object",
                        "properties": {
                          "conflictResolutionPath": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Conditional. The conflict resolution path in the case of LastWriterWins mode. Required if `mode` is set to 'LastWriterWins'."
                            }
                          },
                          "conflictResolutionProcedure": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Conditional. The procedure to resolve conflicts in the case of custom mode. Required if `mode` is set to 'Custom'."
                            }
                          },
                          "mode": {
                            "type": "string",
                            "allowedValues": [
                              "Custom",
                              "LastWriterWins"
                            ],
                            "metadata": {
                              "description": "Required. Indicates the conflict resolution mode."
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                        }
                      },
                      "defaultTtl": {
                        "type": "int",
                        "nullable": true,
                        "minValue": -1,
                        "maxValue": 2147483647,
                        "metadata": {
                          "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                        }
                      },
                      "indexingPolicy": {
                        "type": "object",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Indexing policy of the container."
                        }
                      },
                      "kind": {
                        "type": "string",
                        "allowedValues": [
                          "Hash",
                          "MultiHash"
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                        }
                      },
                      "version": {
                        "type": "int",
                        "allowedValues": [
                          1,
                          2
                        ],
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                        }
                      },
                      "throughput": {
                        "type": "int",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
                        }
                      },
                      "uniqueKeyPolicyKeys": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "paths": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. List of paths must be unique for each document in the Azure Cosmos DB service."
                              }
                            }
                          }
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Set of containers to deploy in the database."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an Azure Cosmos DB for NoSQL database."
              }
            },
            "networkRestrictionType": {
              "type": "object",
              "properties": {
                "ipRules": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A single IPv4 address or a single IPv4 address range in Classless Inter-Domain Routing (CIDR) format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: `10.0.0.0/8`, `100.64.0.0/10`, `172.16.0.0/12`, `192.168.0.0/16`, since these are not enforceable by the IP address filter. Example of valid inputs: `23.40.210.245` or `23.40.210.0/8`."
                  }
                },
                "networkAclBypass": {
                  "type": "string",
                  "allowedValues": [
                    "AzureServices",
                    "None"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the network ACL bypass for Azure services. Default to \"None\"."
                  }
                },
                "publicNetworkAccess": {
                  "type": "string",
                  "allowedValues": [
                    "Disabled",
                    "Enabled"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Whether requests from the public network are allowed. Default to \"Disabled\"."
                  }
                },
                "virtualNetworkRules": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "subnetResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Resource ID of a subnet."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of virtual network access control list (ACL) rules configured for the account."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the network restriction."
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateEndpointMultiServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the private endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS zone group to configure for the private endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the private endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "sqlRoleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name unique identifier of the SQL Role Assignment."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                  }
                }
              },
              "metadata": {
                "description": "The type for the SQL Role Assignments.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "sql-role-definition/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the account."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Defaults to the current resource group scope location. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.DocumentDB/databaseAccounts@2024-11-15#properties/tags"
                },
                "description": "Optional. Tags for the resource."
              },
              "nullable": true
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "databaseAccountOfferType": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The offer type for the account. Defaults to \"Standard\"."
              }
            },
            "failoverLocations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/failoverLocationType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The set of locations enabled for the account. Defaults to the location where the account is deployed."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether the single-region account is zone redundant. Defaults to true. This property is ignored for multi-region accounts."
              }
            },
            "defaultConsistencyLevel": {
              "type": "string",
              "defaultValue": "Session",
              "allowedValues": [
                "Eventual",
                "ConsistentPrefix",
                "Session",
                "BoundedStaleness",
                "Strong"
              ],
              "metadata": {
                "description": "Optional. The default consistency level of the account. Defaults to \"Session\"."
              }
            },
            "disableLocalAuthentication": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Opt-out of local authentication and ensure that only Microsoft Entra can be used exclusively for authentication. Defaults to true."
              }
            },
            "enableAnalyticalStorage": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Flag to indicate whether to enable storage analytics. Defaults to false."
              }
            },
            "automaticFailover": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable automatic failover for regions. Defaults to true."
              }
            },
            "enableFreeTier": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Flag to indicate whether \"Free Tier\" is enabled. Defaults to false."
              }
            },
            "enableMultipleWriteLocations": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enables the account to write in multiple locations. Periodic backup must be used if enabled. Defaults to false."
              }
            },
            "disableKeyBasedMetadataWriteAccess": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Disable write operations on metadata resources (databases, containers, throughput) via account keys. Defaults to true."
              }
            },
            "maxStalenessPrefix": {
              "type": "int",
              "defaultValue": 100000,
              "minValue": 1,
              "maxValue": 2147483647,
              "metadata": {
                "description": "Optional. The maximum stale requests. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000. Defaults to 100000."
              }
            },
            "maxIntervalInSeconds": {
              "type": "int",
              "defaultValue": 300,
              "minValue": 5,
              "maxValue": 86400,
              "metadata": {
                "description": "Optional. The maximum lag time in minutes. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400. Defaults to 300."
              }
            },
            "serverVersion": {
              "type": "string",
              "defaultValue": "4.2",
              "allowedValues": [
                "3.2",
                "3.6",
                "4.0",
                "4.2",
                "5.0",
                "6.0",
                "7.0"
              ],
              "metadata": {
                "description": "Optional. Specifies the MongoDB server version to use if using Azure Cosmos DB for MongoDB RU. Defaults to \"4.2\"."
              }
            },
            "sqlDatabases": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/sqlDatabaseType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for databases when using Azure Cosmos DB for NoSQL."
              }
            },
            "mongodbDatabases": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for databases when using Azure Cosmos DB for MongoDB RU."
              }
            },
            "gremlinDatabases": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for databases when using Azure Cosmos DB for Apache Gremlin."
              }
            },
            "tables": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration for databases when using Azure Cosmos DB for Table."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "totalThroughputLimit": {
              "type": "int",
              "defaultValue": -1,
              "metadata": {
                "description": "Optional. The total throughput limit imposed on this account in request units per second (RU/s). Default to unlimited throughput."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. An array of control plane Azure role-based access control assignments."
              }
            },
            "dataPlaneRoleDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataPlaneRoleDefinitionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control definitions. Allows the creations of custom role definitions."
              }
            },
            "dataPlaneRoleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataPlaneRoleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control assignments."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings for the service."
              }
            },
            "capabilitiesToAdd": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "allowedValues": [
                "EnableCassandra",
                "EnableTable",
                "EnableGremlin",
                "EnableMongo",
                "DisableRateLimitingResponses",
                "EnableServerless",
                "EnableNoSQLVectorSearch",
                "EnableNoSQLFullTextSearch",
                "EnableMaterializedViews",
                "DeleteAllItemsByPartitionKey"
              ],
              "metadata": {
                "description": "Optional. A list of Azure Cosmos DB specific capabilities for the account."
              }
            },
            "backupPolicyType": {
              "type": "string",
              "defaultValue": "Continuous",
              "allowedValues": [
                "Periodic",
                "Continuous"
              ],
              "metadata": {
                "description": "Optional. Configures the backup mode. Periodic backup must be used if multiple write locations are used. Defaults to \"Continuous\"."
              }
            },
            "backupPolicyContinuousTier": {
              "type": "string",
              "defaultValue": "Continuous30Days",
              "allowedValues": [
                "Continuous30Days",
                "Continuous7Days"
              ],
              "metadata": {
                "description": "Optional. Configuration values to specify the retention period for continuous mode backup. Default to \"Continuous30Days\"."
              }
            },
            "backupIntervalInMinutes": {
              "type": "int",
              "defaultValue": 240,
              "minValue": 60,
              "maxValue": 1440,
              "metadata": {
                "description": "Optional. An integer representing the interval in minutes between two backups. This setting only applies to the periodic backup type. Defaults to 240."
              }
            },
            "backupRetentionIntervalInHours": {
              "type": "int",
              "defaultValue": 8,
              "minValue": 2,
              "maxValue": 720,
              "metadata": {
                "description": "Optional. An integer representing the time (in hours) that each backup is retained. This setting only applies to the periodic backup type. Defaults to 8."
              }
            },
            "backupStorageRedundancy": {
              "type": "string",
              "defaultValue": "Local",
              "allowedValues": [
                "Geo",
                "Local",
                "Zone"
              ],
              "metadata": {
                "description": "Optional. Setting that indicates the type of backup residency. This setting only applies to the periodic backup type. Defaults to \"Local\"."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointMultiServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is advised to use private endpoints whenever possible."
              }
            },
            "networkRestrictions": {
              "$ref": "#/definitions/networkRestrictionType",
              "defaultValue": {
                "ipRules": [],
                "virtualNetworkRules": [],
                "publicNetworkAccess": "Disabled"
              },
              "metadata": {
                "description": "Optional. The network configuration of this module. Defaults to `{ ipRules: [], virtualNetworkRules: [], publicNetworkAccess: 'Disabled' }`."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "Tls12",
              "allowedValues": [
                "Tls12"
              ],
              "metadata": {
                "description": "Optional. Setting that indicates the minimum allowed TLS version. Azure Cosmos DB for MongoDB RU and Apache Cassandra only work with TLS 1.2 or later. Defaults to \"Tls12\" (TLS 1.2)."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInControlPlaneRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInControlPlaneRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
              "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
              "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
              "CosmosRestoreOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5432c526-bc82-444a-b7ba-57c5b0b5b34f')]",
              "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-07-01",
              "name": "[format('46d3xbcp.res.documentdb-databaseaccount.{0}.{1}', replace('0.15.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "databaseAccount": {
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-11-15",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "kind": "[if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'GlobalDocumentDB')]",
              "properties": "[shallowMerge(createArray(createObject('databaseAccountOfferType', parameters('databaseAccountOfferType'), 'backupPolicy', shallowMerge(createArray(createObject('type', parameters('backupPolicyType')), if(equals(parameters('backupPolicyType'), 'Continuous'), createObject('continuousModeProperties', createObject('tier', parameters('backupPolicyContinuousTier'))), createObject()), if(equals(parameters('backupPolicyType'), 'Periodic'), createObject('periodicModeProperties', createObject('backupIntervalInMinutes', parameters('backupIntervalInMinutes'), 'backupRetentionIntervalInHours', parameters('backupRetentionIntervalInHours'), 'backupStorageRedundancy', parameters('backupStorageRedundancy'))), createObject()))), 'capabilities', map(coalesce(parameters('capabilitiesToAdd'), createArray()), lambda('capability', createObject('name', lambdaVariables('capability')))), 'minimalTlsVersion', parameters('minimumTlsVersion'), 'capacity', createObject('totalThroughputLimit', parameters('totalThroughputLimit')), 'publicNetworkAccess', coalesce(tryGet(parameters('networkRestrictions'), 'publicNetworkAccess'), 'Disabled')), if(or(or(or(not(empty(parameters('sqlDatabases'))), not(empty(parameters('mongodbDatabases')))), not(empty(parameters('gremlinDatabases')))), not(empty(parameters('tables')))), createObject('consistencyPolicy', shallowMerge(createArray(createObject('defaultConsistencyLevel', parameters('defaultConsistencyLevel')), if(equals(parameters('defaultConsistencyLevel'), 'BoundedStaleness'), createObject('maxStalenessPrefix', parameters('maxStalenessPrefix'), 'maxIntervalInSeconds', parameters('maxIntervalInSeconds')), createObject()))), 'enableMultipleWriteLocations', parameters('enableMultipleWriteLocations'), 'locations', if(not(empty(parameters('failoverLocations'))), map(parameters('failoverLocations'), lambda('failoverLocation', createObject('failoverPriority', lambdaVariables('failoverLocation').failoverPriority, 'locationName', lambdaVariables('failoverLocation').locationName, 'isZoneRedundant', coalesce(tryGet(lambdaVariables('failoverLocation'), 'isZoneRedundant'), true())))), createArray(createObject('failoverPriority', 0, 'locationName', parameters('location'), 'isZoneRedundant', parameters('zoneRedundant')))), 'ipRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'ipRules'), createArray()), lambda('ipRule', createObject('ipAddressOrRange', lambdaVariables('ipRule')))), 'virtualNetworkRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules'), createArray()), lambda('rule', createObject('id', lambdaVariables('rule').subnetResourceId, 'ignoreMissingVNetServiceEndpoint', false()))), 'networkAclBypass', coalesce(tryGet(parameters('networkRestrictions'), 'networkAclBypass'), 'None'), 'isVirtualNetworkFilterEnabled', or(not(empty(tryGet(parameters('networkRestrictions'), 'ipRules'))), not(empty(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules')))), 'enableFreeTier', parameters('enableFreeTier'), 'enableAutomaticFailover', parameters('automaticFailover'), 'enableAnalyticalStorage', parameters('enableAnalyticalStorage')), createObject()), if(or(not(empty(parameters('mongodbDatabases'))), not(empty(parameters('gremlinDatabases')))), createObject('disableLocalAuth', false(), 'disableKeyBasedMetadataWriteAccess', false()), createObject('disableLocalAuth', parameters('disableLocalAuthentication'), 'disableKeyBasedMetadataWriteAccess', parameters('disableKeyBasedMetadataWriteAccess'))), if(not(empty(parameters('mongodbDatabases'))), createObject('apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject())))]"
            },
            "databaseAccount_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_diagnosticSettings": {
              "copy": {
                "name": "databaseAccount_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_roleAssignments": {
              "copy": {
                "name": "databaseAccount_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_sqlDatabases": {
              "copy": {
                "name": "databaseAccount_sqlDatabases",
                "count": "[length(coalesce(parameters('sqlDatabases'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name]"
                  },
                  "containers": {
                    "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'containers')]"
                  },
                  "throughput": {
                    "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'throughput')]"
                  },
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "autoscaleSettingsMaxThroughput": {
                    "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "6801379641184405078"
                    },
                    "name": "DocumentDB Database Account SQL Databases",
                    "description": "This module deploys a SQL Database in a CosmosDB Account."
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the SQL database ."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of containers to deploy in the SQL database."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                      }
                    },
                    "autoscaleSettingsMaxThroughput": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the SQL database resource."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "sqlDatabase": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(equals(parameters('autoscaleSettingsMaxThroughput'), null()), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "container": {
                      "copy": {
                        "name": "container",
                        "count": "[length(coalesce(parameters('containers'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('containers'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "sqlDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                          },
                          "analyticalStorageTtl": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'analyticalStorageTtl')]"
                          },
                          "autoscaleSettingsMaxThroughput": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                          },
                          "conflictResolutionPolicy": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'conflictResolutionPolicy')]"
                          },
                          "defaultTtl": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultTtl')]"
                          },
                          "indexingPolicy": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'indexingPolicy')]"
                          },
                          "kind": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'kind')]"
                          },
                          "version": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'version')]"
                          },
                          "paths": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'paths')]"
                          },
                          "throughput": "[if(and(or(not(equals(parameters('throughput'), null())), not(equals(parameters('autoscaleSettingsMaxThroughput'), null()))), equals(tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput'), null())), createObject('value', -1), createObject('value', tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput')))]",
                          "uniqueKeyPolicyKeys": {
                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'uniqueKeyPolicyKeys')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "5467755913632158534"
                            },
                            "name": "DocumentDB Database Account SQL Database Containers",
                            "description": "This module deploys a SQL Database Container in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "sqlDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent SQL Database. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the container."
                              }
                            },
                            "analyticalStorageTtl": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                              }
                            },
                            "conflictResolutionPolicy": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                              }
                            },
                            "defaultTtl": {
                              "type": "int",
                              "defaultValue": -1,
                              "minValue": -1,
                              "maxValue": 2147483647,
                              "metadata": {
                                "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "autoscaleSettingsMaxThroughput": {
                              "type": "int",
                              "nullable": true,
                              "maxValue": 1000000,
                              "metadata": {
                                "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the SQL Database resource."
                              }
                            },
                            "paths": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "minLength": 1,
                              "maxLength": 3,
                              "metadata": {
                                "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                              }
                            },
                            "indexingPolicy": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Indexing policy of the container."
                              }
                            },
                            "uniqueKeyPolicyKeys": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "Hash",
                              "allowedValues": [
                                "Hash",
                                "MultiHash"
                              ],
                              "metadata": {
                                "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                              }
                            },
                            "version": {
                              "type": "int",
                              "defaultValue": 1,
                              "allowedValues": [
                                1,
                                2
                              ],
                              "metadata": {
                                "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "partitionKeyPaths",
                                "count": "[length(parameters('paths'))]",
                                "input": "[if(startsWith(parameters('paths')[copyIndex('partitionKeyPaths')], '/'), parameters('paths')[copyIndex('partitionKeyPaths')], format('/{0}', parameters('paths')[copyIndex('partitionKeyPaths')]))]"
                              }
                            ],
                            "containerResourceParams": "[union(createObject('conflictResolutionPolicy', parameters('conflictResolutionPolicy'), 'defaultTtl', parameters('defaultTtl'), 'id', parameters('name'), 'indexingPolicy', if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null()), 'partitionKey', createObject('paths', variables('partitionKeyPaths'), 'kind', parameters('kind'), 'version', if(equals(parameters('kind'), 'MultiHash'), 2, parameters('version'))), 'uniqueKeyPolicy', if(not(empty(parameters('uniqueKeyPolicyKeys'))), createObject('uniqueKeys', parameters('uniqueKeyPolicyKeys')), null())), if(not(equals(parameters('analyticalStorageTtl'), 0)), createObject('analyticalStorageTtl', parameters('analyticalStorageTtl')), createObject()))]"
                          },
                          "resources": {
                            "databaseAccount::sqlDatabase": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]"
                            },
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "container": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": "[variables('containerResourceParams')]",
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(and(equals(parameters('autoscaleSettingsMaxThroughput'), null()), not(equals(parameters('throughput'), -1))), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the container."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the container."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the container was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "sqlDatabase"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the SQL database."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the SQL database."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the SQL database was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_sqlRoleDefinitions": {
              "copy": {
                "name": "databaseAccount_sqlRoleDefinitions",
                "count": "[length(coalesce(parameters('dataPlaneRoleDefinitions'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sqlrd-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'name')]"
                  },
                  "dataActions": {
                    "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'dataActions')]"
                  },
                  "roleName": {
                    "value": "[coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()].roleName]"
                  },
                  "assignableScopes": {
                    "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignableScopes')]"
                  },
                  "sqlRoleAssignments": {
                    "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "12119240119487993734"
                    },
                    "name": "DocumentDB Database Account SQL Role Definitions.",
                    "description": "This module deploys a SQL Role Definision in a CosmosDB Account."
                  },
                  "definitions": {
                    "sqlRoleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name unique identifier of the SQL Role Assignment."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the SQL Role Assignments."
                      }
                    }
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The unique identifier of the Role Definition."
                      }
                    },
                    "roleName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A user-friendly name for the Role Definition. Must be unique for the database account."
                      }
                    },
                    "dataActions": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of data actions that are allowed."
                      }
                    },
                    "assignableScopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. Defaults to the current account."
                      }
                    },
                    "sqlRoleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sqlRoleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An array of SQL Role Assignments to be created for the SQL Role Definition."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "sqlRoleDefinition": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]",
                      "properties": {
                        "assignableScopes": "[coalesce(parameters('assignableScopes'), createArray(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]",
                        "permissions": [
                          {
                            "dataActions": "[parameters('dataActions')]"
                          }
                        ],
                        "roleName": "[parameters('roleName')]",
                        "type": "CustomRole"
                      }
                    },
                    "databaseAccount_sqlRoleAssignments": {
                      "copy": {
                        "name": "databaseAccount_sqlRoleAssignments",
                        "count": "[length(coalesce(parameters('sqlRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "roleDefinitionId": {
                            "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                          },
                          "principalId": {
                            "value": "[coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()].principalId]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()], 'name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "11941443499827753966"
                            },
                            "name": "DocumentDB Database Account SQL Role Assignments.",
                            "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name unique identifier of the SQL Role Assignment."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier of the associated SQL Role Definition."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlRoleAssignment": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL Role Assignment."
                              },
                              "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL Role Definition was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "sqlRoleDefinition"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the SQL Role Definition."
                      },
                      "value": "[coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role'))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the SQL Role Definition."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the SQL Role Definition was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "roleName": {
                      "type": "string",
                      "metadata": {
                        "description": "The role name of the SQL Role Definition."
                      },
                      "value": "[reference('sqlRoleDefinition').roleName]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_sqlRoleAssignments": {
              "copy": {
                "name": "databaseAccount_sqlRoleAssignments",
                "count": "[length(coalesce(parameters('dataPlaneRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "roleDefinitionId": {
                    "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                  },
                  "principalId": {
                    "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].principalId]"
                  },
                  "name": {
                    "value": "[tryGet(coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()], 'name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "11941443499827753966"
                    },
                    "name": "DocumentDB Database Account SQL Role Assignments.",
                    "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name unique identifier of the SQL Role Assignment."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                      }
                    },
                    "roleDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The unique identifier of the associated SQL Role Definition."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "sqlRoleAssignment": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                      "properties": {
                        "principalId": "[parameters('principalId')]",
                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the SQL Role Assignment."
                      },
                      "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the SQL Role Assignment."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the SQL Role Definition was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_mongodbDatabases": {
              "copy": {
                "name": "databaseAccount_mongodbDatabases",
                "count": "[length(coalesce(parameters('mongodbDatabases'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "collections": {
                    "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'collections')]"
                  },
                  "throughput": {
                    "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'throughput')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "16911349070369924403"
                    },
                    "name": "DocumentDB Database Account MongoDB Databases",
                    "description": "This module deploys a MongoDB Database within a CosmosDB Account."
                  },
                  "parameters": {
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the mongodb database."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "defaultValue": 400,
                      "metadata": {
                        "description": "Optional. Request Units per second. Setting throughput at the database level is only recommended for development/test or when workload across all collections in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                      }
                    },
                    "collections": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Collections in the mongodb database."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "mongodbDatabase": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resource": {
                          "id": "[parameters('name')]"
                        },
                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "mongodbDatabase_collections": {
                      "copy": {
                        "name": "mongodbDatabase_collections",
                        "count": "[length(coalesce(parameters('collections'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('collections'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "mongodbDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].name]"
                          },
                          "indexes": {
                            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].indexes]"
                          },
                          "shardKey": {
                            "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].shardKey]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('collections'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "7802955893269337475"
                            },
                            "name": "DocumentDB Database Account MongoDB Database Collections",
                            "description": "This module deploys a MongoDB Database Collection."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "mongodbDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent mongodb database. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the collection."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Request Units per second. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                              }
                            },
                            "indexes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. Indexes for the collection."
                              }
                            },
                            "shardKey": {
                              "type": "object",
                              "metadata": {
                                "description": "Required. ShardKey for the collection."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                              "properties": {
                                "options": "[if(contains(reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), '2024-11-15').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]",
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "indexes": "[parameters('indexes')]",
                                  "shardKey": "[parameters('shardKey')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the mongodb database collection."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the mongodb database collection."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the mongodb database collection was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "mongodbDatabase"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the mongodb database."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the mongodb database."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the mongodb database was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_gremlinDatabases": {
              "copy": {
                "name": "databaseAccount_gremlinDatabases",
                "count": "[length(coalesce(parameters('gremlinDatabases'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-gremlin-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "graphs": {
                    "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'graphs')]"
                  },
                  "maxThroughput": {
                    "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'maxThroughput')]"
                  },
                  "throughput": {
                    "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'throughput')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "4743052544503629108"
                    },
                    "name": "DocumentDB Database Account Gremlin Databases",
                    "description": "This module deploys a Gremlin Database within a CosmosDB Account."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Gremlin database."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the Gremlin database resource."
                      }
                    },
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Gremlin database. Required if the template is used in a standalone deployment."
                      }
                    },
                    "graphs": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of graphs to deploy in the Gremlin database."
                      }
                    },
                    "maxThroughput": {
                      "type": "int",
                      "defaultValue": 4000,
                      "metadata": {
                        "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "gremlinDatabase": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                        "resource": {
                          "id": "[parameters('name')]"
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "gremlinDatabase_gremlinGraphs": {
                      "copy": {
                        "name": "gremlinDatabase_gremlinGraphs",
                        "count": "[length(parameters('graphs'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-gremlindb-{1}', uniqueString(deployment().name, parameters('name')), parameters('graphs')[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('graphs')[copyIndex()].name]"
                          },
                          "gremlinDatabaseName": {
                            "value": "[parameters('name')]"
                          },
                          "databaseAccountName": {
                            "value": "[parameters('databaseAccountName')]"
                          },
                          "indexingPolicy": {
                            "value": "[tryGet(parameters('graphs')[copyIndex()], 'indexingPolicy')]"
                          },
                          "partitionKeyPaths": "[if(not(empty(parameters('graphs')[copyIndex()].partitionKeyPaths)), createObject('value', parameters('graphs')[copyIndex()].partitionKeyPaths), createObject('value', createArray()))]"
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "9587717186996793648"
                            },
                            "name": "DocumentDB Database Accounts Gremlin Databases Graphs",
                            "description": "This module deploys a DocumentDB Database Accounts Gremlin Database Graph."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the graph."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the Gremlin graph resource."
                              }
                            },
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "gremlinDatabaseName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Gremlin Database. Required if the template is used in a standalone deployment."
                              }
                            },
                            "indexingPolicy": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Indexing policy of the graph."
                              }
                            },
                            "partitionKeyPaths": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of paths using which data within the container can be partitioned."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount::gremlinDatabase": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'))]"
                            },
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "gremlinGraph": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]",
                                  "indexingPolicy": "[if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null())]",
                                  "partitionKey": {
                                    "paths": "[if(not(empty(parameters('partitionKeyPaths'))), parameters('partitionKeyPaths'), null())]"
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the graph."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the graph."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the graph was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "gremlinDatabase"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Gremlin database."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Gremlin database."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', parameters('databaseAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Gremlin database was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_tables": {
              "copy": {
                "name": "databaseAccount_tables",
                "count": "[length(coalesce(parameters('tables'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-table-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('tables'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "databaseAccountName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "maxThroughput": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'maxThroughput')]"
                  },
                  "throughput": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'throughput')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "14106261468136691896"
                    },
                    "name": "Azure Cosmos DB account tables",
                    "description": "This module deploys a table within an Azure Cosmos DB Account."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the table."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags for the table."
                      }
                    },
                    "databaseAccountName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Azure Cosmos DB account. Required if the template is used in a standalone deployment."
                      }
                    },
                    "maxThroughput": {
                      "type": "int",
                      "defaultValue": 4000,
                      "metadata": {
                        "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored."
                      }
                    },
                    "throughput": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`."
                      }
                    }
                  },
                  "resources": {
                    "databaseAccount": {
                      "existing": true,
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('databaseAccountName')]"
                    },
                    "table": {
                      "type": "Microsoft.DocumentDB/databaseAccounts/tables",
                      "apiVersion": "2024-11-15",
                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                        "resource": {
                          "id": "[parameters('name')]"
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the table."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/tables', parameters('databaseAccountName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the table was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            },
            "databaseAccount_privateEndpoints": {
              "copy": {
                "name": "databaseAccount_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-dbAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.13.18514",
                      "templateHash": "15954548978129725136"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.13.18514",
                              "templateHash": "5440815542537978381"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "databaseAccount"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the database account."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the database account."
              },
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the database account was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('databaseAccount', '2024-11-15', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('databaseAccount', '2024-11-15', 'full').location]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The endpoint of the database account."
              },
              "value": "[reference('databaseAccount').documentEndpoint]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the database account."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "primaryReadWriteKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary read-write key."
              },
              "value": "[listKeys('databaseAccount', '2024-11-15').primaryMasterKey]"
            },
            "primaryReadOnlyKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary read-only key."
              },
              "value": "[listKeys('databaseAccount', '2024-11-15').primaryReadonlyMasterKey]"
            },
            "primaryReadWriteConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The primary read-write connection string."
              },
              "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[0].connectionString]"
            },
            "primaryReadOnlyConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The primary read-only connection string."
              },
              "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[2].connectionString]"
            },
            "secondaryReadWriteKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary read-write key."
              },
              "value": "[listKeys('databaseAccount', '2024-11-15').secondaryMasterKey]"
            },
            "secondaryReadOnlyKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary read-only key."
              },
              "value": "[listKeys('databaseAccount', '2024-11-15').secondaryReadonlyMasterKey]"
            },
            "secondaryReadWriteConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary read-write connection string."
              },
              "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[1].connectionString]"
            },
            "secondaryReadOnlyConnectionString": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary read-only connection string."
              },
              "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[3].connectionString]"
            }
          }
        }
      }
    },
    "cosmosdbPrivateEndpoint": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmosdbPrivateEndpoint-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-CosmosPrivateEndpoint-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "subnetResourceId": {
            "value": "[reference('vnet').outputs.subnetResourceIds.value[1]]"
          },
          "privateLinkServiceConnections": {
            "value": [
              {
                "name": "CosmosPrivateEndpoint",
                "properties": {
                  "privateLinkServiceId": "[listOutputsWithSecureValues(resourceId('Microsoft.Resources/deployments', format('cosmosdbAccount-{0}', uniqueString(deployment().name, parameters('location')))), '2022-09-01').resourceId]",
                  "groupIds": [
                    "Sql"
                  ],
                  "requestMessage": "Auto-approved"
                }
              }
            ]
          },
          "customDnsConfigs": {
            "value": [
              {
                "fqdn": "[format('{0}-cosmos.documents.azure.com', parameters('name'))]",
                "ipAddresses": [
                  "192.168.251.4"
                ]
              }
            ]
          },
          "customNetworkInterfaceName": {
            "value": "[format('{0}-CosmosPrivateEndpoint-nic-{1}', parameters('name'), parameters('suffix'))]"
          },
          "privateDnsZoneGroup": {
            "value": {
              "privateDnsZoneGroupConfigs": [
                {
                  "name": "default",
                  "privateDnsZoneResourceId": "[reference('cosmosdbPrivateDnsZone').outputs.resourceId.value]"
                }
              ]
            }
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "12389807800450456797"
            },
            "name": "Private Endpoints",
            "description": "This module deploys a Private Endpoint."
          },
          "definitions": {
            "privateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                  },
                  "metadata": {
                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "ipConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "privateLinkServiceConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the private link service connection."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                      }
                    },
                    "privateLinkServiceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource id of private link service."
                      }
                    },
                    "requestMessage": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private link service connection."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "customDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateDnsZoneGroupConfigType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private DNS zone group config."
                  }
                },
                "privateDnsZoneResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource id of the private DNS zone."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the private endpoint resource to create."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
              }
            },
            "applicationSecurityGroupResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
              }
            },
            "customNetworkInterfaceName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The custom name of the network interface attached to the private endpoint."
              }
            },
            "ipConfigurations": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ipConfigurationType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
              }
            },
            "privateDnsZoneGroup": {
              "$ref": "#/definitions/privateDnsZoneGroupType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The private DNS zone group to configure for the private endpoint."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
              }
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Custom DNS configurations."
              }
            },
            "manualPrivateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
              }
            },
            "privateLinkServiceConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateLinkServiceConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "privateEndpoint": {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "applicationSecurityGroups",
                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                    "input": {
                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                    }
                  }
                ],
                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                "subnet": {
                  "id": "[parameters('subnetResourceId')]"
                }
              }
            },
            "privateEndpoint_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_roleAssignments": {
              "copy": {
                "name": "privateEndpoint_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            },
            "privateEndpoint_privateDnsZoneGroup": {
              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                  },
                  "privateEndpointName": {
                    "value": "[parameters('name')]"
                  },
                  "privateDnsZoneConfigs": {
                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13997305779829540948"
                    },
                    "name": "Private Endpoint Private DNS Zone Groups",
                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                  },
                  "definitions": {
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "privateEndpointName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                      }
                    },
                    "privateDnsZoneConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                      },
                      "minLength": 1,
                      "maxLength": 5,
                      "metadata": {
                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "default",
                      "metadata": {
                        "description": "Optional. The name of the private DNS zone group."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "privateDnsZoneConfigsVar",
                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                        "input": {
                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                          "properties": {
                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                          }
                        }
                      }
                    ]
                  },
                  "resources": {
                    "privateEndpoint": {
                      "existing": true,
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('privateEndpointName')]"
                    },
                    "privateDnsZoneGroup": {
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2024-05-01",
                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                      "properties": {
                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint DNS zone group."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint DNS zone group."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateEndpoint"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the private endpoint was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the private endpoint."
              },
              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the private endpoint."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
            },
            "customDnsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customDnsConfigType"
              },
              "metadata": {
                "description": "The custom DNS configurations of the private endpoint."
              },
              "value": "[reference('privateEndpoint').customDnsConfigs]"
            },
            "networkInterfaceResourceIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "metadata": {
                "description": "The resource IDs of the network interfaces associated with the private endpoint."
              },
              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
            },
            "groupId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The group Id for the private endpoint Group."
              },
              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
            }
          }
        }
      },
      "dependsOn": [
        "cosmosdbAccount",
        "cosmosdbPrivateDnsZone",
        "vnet"
      ]
    },
    "redis": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('redis-{0}', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('{0}-redis-{1}', parameters('name'), parameters('suffix'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "skuName": {
            "value": "Basic"
          },
          "capacity": {
            "value": 0
          },
          "enableNonSslPort": {
            "value": false
          },
          "minimumTlsVersion": {
            "value": "1.2"
          },
          "publicNetworkAccess": {
            "value": "Disabled"
          },
          "redisVersion": {
            "value": "6"
          },
          "privateEndpoints": {
            "value": [
              {
                "name": "[format('{0}-ReddisPrivateEndpoint-{1}', parameters('name'), parameters('suffix'))]",
                "subnetResourceId": "[reference('vnet').outputs.subnetResourceIds.value[1]]",
                "privateDnsZoneGroup": {
                  "privateDnsZoneGroupConfigs": [
                    {
                      "name": "default",
                      "privateDnsZoneResourceId": "[reference('redisPrivateDnsZone').outputs.resourceId.value]"
                    }
                  ]
                },
                "customNetworkInterfaceName": "[format('{0}-ReddisPrivateEndpoint-nic-{1}', parameters('name'), parameters('suffix'))]"
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "15125409893909150676"
            },
            "name": "Redis Cache",
            "description": "This module deploys a Redis Cache."
          },
          "definitions": {
            "privateEndpointOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "The name of the private endpoint."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resource ID of the private endpoint."
                  }
                },
                "groupId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "The group Id for the private endpoint Group."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "fqdn": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "FQDN that resolves to private endpoint IP address."
                        }
                      },
                      "ipAddresses": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "metadata": {
                          "description": "A list of private IP addresses of the private endpoint."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "The custom DNS configurations of the private endpoint."
                  }
                },
                "networkInterfaceResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "The IDs of the network interfaces associated with the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "accessPolicyType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the access policy."
                  }
                },
                "permissions": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Permissions associated with the access policy."
                  }
                }
              }
            },
            "accessPolicyAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Access Policy Assignment."
                  }
                },
                "objectId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Object id to which the access policy will be assigned."
                  }
                },
                "objectIdAlias": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Alias for the target object id."
                  }
                },
                "accessPolicyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the access policy to be assigned."
                  }
                }
              }
            },
            "secretsExportConfigurationType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the key vault where to store the secrets of this module."
                  }
                },
                "primaryAccessKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryAccessKey secret name to create."
                  }
                },
                "primaryConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryConnectionString secret name to create."
                  }
                },
                "primaryStackExchangeRedisConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The primaryStackExchangeRedisConnectionString secret name to create."
                  }
                },
                "secondaryAccessKeyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryAccessKey secret name to create."
                  }
                },
                "secondaryConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryConnectionString secret name to create."
                  }
                },
                "secondaryStackExchangeRedisConnectionStringName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The secondaryStackExchangeRedisConnectionString secret name to create."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "_1.privateEndpointCustomDnsConfigType": {
              "type": "object",
              "properties": {
                "fqdn": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                  }
                },
                "ipAddresses": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. A list of private IP addresses of the private endpoint."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointIpConfigurationType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the resource that is unique within a resource group."
                  }
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "memberName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                      }
                    },
                    "privateIPAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of private endpoint IP configurations."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.privateEndpointPrivateDnsZoneGroupType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private DNS Zone Group."
                  }
                },
                "privateDnsZoneGroupConfigs": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the private DNS Zone Group config."
                        }
                      },
                      "privateDnsZoneResourceId": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The resource id of the private DNS zone."
                        }
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "_1.secretSetOutputType": {
              "type": "object",
              "properties": {
                "secretResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "The resourceId of the exported secret."
                  }
                },
                "secretUri": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI of the exported secret."
                  }
                },
                "secretUriWithVersion": {
                  "type": "string",
                  "metadata": {
                    "description": "The secret URI with version of the exported secret."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "privateEndpointSingleServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the Private Endpoint."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The location to deploy the Private Endpoint to."
                  }
                },
                "privateLinkServiceConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the private link connection to create."
                  }
                },
                "service": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                  }
                },
                "resourceGroupResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                  }
                },
                "privateDnsZoneGroup": {
                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                  }
                },
                "isManualConnection": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. If Manual Private Link Connection is required."
                  }
                },
                "manualConnectionRequestMessage": {
                  "type": "string",
                  "nullable": true,
                  "maxLength": 140,
                  "metadata": {
                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                  }
                },
                "customDnsConfigs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom DNS configurations."
                  }
                },
                "ipConfigurations": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                  }
                },
                "applicationSecurityGroupResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                  }
                },
                "customNetworkInterfaceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                  }
                },
                "lock": {
                  "$ref": "#/definitions/lockType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Array of role assignments to create."
                  }
                },
                "tags": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                  }
                },
                "enableTelemetry": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable/Disable usage telemetry for module."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "secretsOutputType": {
              "type": "object",
              "properties": {},
              "additionalProperties": {
                "$ref": "#/definitions/_1.secretSetOutputType",
                "metadata": {
                  "description": "An exported secret's references."
                }
              },
              "metadata": {
                "description": "A map of the exported secrets",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location to deploy the Redis cache service."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Redis cache resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "disableAccessKeyAuthentication": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disable authentication via access keys."
              }
            },
            "enableNonSslPort": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Specifies whether the non-ssl Redis server port (6379) is enabled."
              }
            },
            "minimumTlsVersion": {
              "type": "string",
              "defaultValue": "1.2",
              "allowedValues": [
                "1.0",
                "1.1",
                "1.2"
              ],
              "metadata": {
                "description": "Optional. Requires clients to use a specified TLS version (or higher) to connect."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "",
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set."
              }
            },
            "redisConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. All Redis Settings. Few possible keys: rdb-backup-enabled,rdb-storage-connection-string,rdb-backup-frequency,maxmemory-delta,maxmemory-policy,notify-keyspace-events,maxmemory-samples,slowlog-log-slower-than,slowlog-max-len,list-max-ziplist-entries,list-max-ziplist-value,hash-max-ziplist-entries,hash-max-ziplist-value,set-max-intset-entries,zset-max-ziplist-entries,zset-max-ziplist-value etc."
              }
            },
            "redisVersion": {
              "type": "string",
              "defaultValue": "6",
              "allowedValues": [
                "4",
                "6"
              ],
              "metadata": {
                "description": "Optional. Redis version. Only major version will be used in PUT/PATCH request with current valid values: (4, 6)."
              }
            },
            "replicasPerMaster": {
              "type": "int",
              "defaultValue": 3,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary."
              }
            },
            "replicasPerPrimary": {
              "type": "int",
              "defaultValue": 3,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of replicas to be created per primary. Needs to be the same as replicasPerMaster for a Premium Cluster Cache."
              }
            },
            "shardCount": {
              "type": "int",
              "nullable": true,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The number of shards to be created on a Premium Cluster Cache."
              }
            },
            "capacity": {
              "type": "int",
              "defaultValue": 1,
              "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ],
              "metadata": {
                "description": "Optional. The size of the Redis cache to deploy. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Premium",
              "allowedValues": [
                "Basic",
                "Premium",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The type of Redis cache to deploy."
              }
            },
            "staticIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Static IP address. Optionally, may be specified when deploying a Redis cache inside an existing Azure Virtual Network; auto assigned by default."
              }
            },
            "subnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The full resource ID of a subnet in a virtual network to deploy the Redis cache in."
              }
            },
            "tenantSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. A dictionary of tenant settings."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. When true, replicas will be provisioned in availability zones specified in the zones parameter."
              }
            },
            "availabilityZones": {
              "type": "array",
              "items": {
                "type": "int"
              },
              "defaultValue": [
                1,
                2,
                3
              ],
              "allowedValues": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. If the zoneRedundant parameter is true, replicas will be provisioned in the availability zones specified here. Otherwise, the service will choose where replicas are deployed."
              }
            },
            "zonalAllocationPolicy": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "Automatic",
                "NoZones",
                "UserDefined"
              ],
              "metadata": {
                "description": "Optional. Specifies how availability zones are allocated to the Redis cache. \"Automatic\" enables zone redundancy and Azure will automatically select zones. \"UserDefined\" will select availability zones passed in by you using the \"availabilityZones\" parameter. \"NoZones\" will produce a non-zonal cache. Only applicable when zoneRedundant is true."
              }
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointSingleServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "geoReplicationObject": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The geo-replication settings of the service. Requires a Premium SKU. Geo-replication is not supported on a cache with multiple replicas per primary. Secondary cache VM Size must be same or higher as compared to the primary cache VM Size. Geo-replication between a vnet and non vnet cache (and vice-a-versa) not supported."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "accessPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accessPolicyType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of access policies to create."
              }
            },
            "accessPolicyAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/accessPolicyAssignmentType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of access policy assignments."
              }
            },
            "firewallRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The firewall rules to create in the PostgreSQL flexible server."
              }
            },
            "secretsExportConfiguration": {
              "$ref": "#/definitions/secretsExportConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "zones": "[if(equals(parameters('skuName'), 'Premium'), if(parameters('zoneRedundant'), if(not(empty(parameters('availabilityZones'))), parameters('availabilityZones'), pickZones('Microsoft.Cache', 'redis', parameters('location'), 3)), createArray()), createArray())]",
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Redis Cache Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e0f68234-74aa-48ed-b826-c38b57376e17')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.cache-redis.{0}.{1}', replace('0.16.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "redis": {
              "type": "Microsoft.Cache/redis",
              "apiVersion": "2024-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "disableAccessKeyAuthentication": "[parameters('disableAccessKeyAuthentication')]",
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(not(empty(parameters('privateEndpoints'))), 'Disabled', null()))]",
                "redisConfiguration": "[if(not(empty(parameters('redisConfiguration'))), parameters('redisConfiguration'), null())]",
                "redisVersion": "[parameters('redisVersion')]",
                "replicasPerMaster": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerMaster'), null())]",
                "replicasPerPrimary": "[if(equals(parameters('skuName'), 'Premium'), parameters('replicasPerPrimary'), null())]",
                "shardCount": "[if(equals(parameters('skuName'), 'Premium'), parameters('shardCount'), null())]",
                "sku": {
                  "capacity": "[parameters('capacity')]",
                  "family": "[if(equals(parameters('skuName'), 'Premium'), 'P', 'C')]",
                  "name": "[parameters('skuName')]"
                },
                "staticIP": "[if(not(empty(parameters('staticIP'))), parameters('staticIP'), null())]",
                "subnetId": "[if(not(empty(parameters('subnetResourceId'))), parameters('subnetResourceId'), null())]",
                "tenantSettings": "[parameters('tenantSettings')]",
                "zonalAllocationPolicy": "[if(and(equals(parameters('skuName'), 'Premium'), parameters('zoneRedundant')), parameters('zonalAllocationPolicy'), null())]"
              },
              "zones": "[variables('zones')]"
            },
            "redis_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_diagnosticSettings": {
              "copy": {
                "name": "redis_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_roleAssignments": {
              "copy": {
                "name": "redis_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Cache/redis/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Cache/redis', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_accessPolicies": {
              "copy": {
                "name": "redis_accessPolicies",
                "count": "[length(parameters('accessPolicies'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-AccessPolicy-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "redisCacheName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('accessPolicies')[copyIndex()].name]"
                  },
                  "permissions": {
                    "value": "[parameters('accessPolicies')[copyIndex()].permissions]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "18365093303814967998"
                    },
                    "name": "Redis Cache Access Policy",
                    "description": "This module deploys an access policy for Redis Cache."
                  },
                  "parameters": {
                    "redisCacheName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Redis cache."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the access policy."
                      }
                    },
                    "permissions": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Permissions associated with the access policy."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cache/redis/accessPolicies",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('redisCacheName'), parameters('name'))]",
                      "properties": {
                        "permissions": "[parameters('permissions')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the access policy."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the access policy."
                      },
                      "value": "[resourceId('Microsoft.Cache/redis/accessPolicies', parameters('redisCacheName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the access policy was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_policyAssignments": {
              "copy": {
                "name": "redis_policyAssignments",
                "count": "[length(parameters('accessPolicyAssignments'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-PolicyAssignment-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "redisCacheName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[tryGet(parameters('accessPolicyAssignments')[copyIndex()], 'name')]"
                  },
                  "objectId": {
                    "value": "[parameters('accessPolicyAssignments')[copyIndex()].objectId]"
                  },
                  "objectIdAlias": {
                    "value": "[parameters('accessPolicyAssignments')[copyIndex()].objectIdAlias]"
                  },
                  "accessPolicyName": {
                    "value": "[parameters('accessPolicyAssignments')[copyIndex()].accessPolicyName]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "10082088536827762989"
                    },
                    "name": "Redis Cache Access Policy Assignment",
                    "description": "This module deploys an access policy assignment for Redis Cache."
                  },
                  "parameters": {
                    "redisCacheName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Redis cache."
                      }
                    },
                    "objectId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Object ID to which the access policy will be assigned."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[parameters('objectId')]",
                      "metadata": {
                        "description": "Optional. The name of the assignment. By default uses the Object ID to which the access policy will be assigned."
                      }
                    },
                    "objectIdAlias": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Alias for the target object ID."
                      }
                    },
                    "accessPolicyName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the access policy to be assigned."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cache/redis/accessPolicyAssignments",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('redisCacheName'), parameters('name'))]",
                      "properties": {
                        "objectId": "[parameters('objectId')]",
                        "objectIdAlias": "[parameters('objectIdAlias')]",
                        "accessPolicyName": "[parameters('accessPolicyName')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the access policy assignment."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the access policy assignment."
                      },
                      "value": "[resourceId('Microsoft.Cache/redis/accessPolicyAssignments', parameters('redisCacheName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the access policy assignment was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redis",
                "redis_accessPolicies"
              ]
            },
            "redis_privateEndpoints": {
              "copy": {
                "name": "redis_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redis', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisCache'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redis', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisCache'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Cache/redis', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisCache')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Cache/redis', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisCache'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Cache/redis', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'redisCache')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "12389807800450456797"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint."
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "privateLinkServiceConnectionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the private link service connection."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                              }
                            },
                            "privateLinkServiceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of private link service."
                              }
                            },
                            "requestMessage": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private link service connection."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "customDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipConfigurationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "13997305779829540948"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                    },
                    "customDnsConfigs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/customDnsConfigType"
                      },
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "networkInterfaceResourceIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "metadata": {
                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                      },
                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                    },
                    "groupId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_firewallRules": {
              "copy": {
                "name": "redis_firewallRules",
                "count": "[length(parameters('firewallRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-FirewallRules-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('firewallRules')[copyIndex()].name]"
                  },
                  "redisCacheName": {
                    "value": "[parameters('name')]"
                  },
                  "startIP": {
                    "value": "[parameters('firewallRules')[copyIndex()].startIP]"
                  },
                  "endIP": {
                    "value": "[parameters('firewallRules')[copyIndex()].endIP]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "1446936391553152650"
                    },
                    "name": "Redis Cache Firewall Rules",
                    "description": "This module creates a firewall rule for Redis Cache."
                  },
                  "parameters": {
                    "redisCacheName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Redis cache name."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Redis Cache Firewall Rule."
                      }
                    },
                    "startIP": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The start IP address of the firewall rule. Must be IPv4 format. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    },
                    "endIP": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The end IP address of the firewall rule. Must be IPv4 format. Must be greater than or equal to startIpAddress. Use value '0.0.0.0' for all Azure-internal IP addresses."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Cache/redis/firewallRules",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('redisCacheName'), parameters('name'))]",
                      "properties": {
                        "startIP": "[parameters('startIP')]",
                        "endIP": "[parameters('endIP')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed firewall rule."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed firewall rule."
                      },
                      "value": "[resourceId('Microsoft.Cache/redis/firewallRules', parameters('redisCacheName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed firewall rule."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redis"
              ]
            },
            "redis_geoReplication": {
              "condition": "[not(empty(parameters('geoReplicationObject')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-redis-LinkedServer', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "redisCacheName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('geoReplicationObject').name]"
                  },
                  "linkedRedisCacheResourceId": {
                    "value": "[parameters('geoReplicationObject').linkedRedisCacheResourceId]"
                  },
                  "linkedRedisCacheLocation": {
                    "value": "[tryGet(parameters('geoReplicationObject'), 'linkedRedisCacheLocation')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "13435626421395447274"
                    },
                    "name": "Redis Cache Linked Servers",
                    "description": "This module connects a primary and secondary Redis Cache together for geo-replication."
                  },
                  "parameters": {
                    "redisCacheName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Primary Redis cache name."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[parameters('redisCacheName')]",
                      "metadata": {
                        "description": "Optional. The name of the secondary Redis cache. If not provided, the primary Redis cache name is used."
                      }
                    },
                    "linkedRedisCacheResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the linked server."
                      }
                    },
                    "linkedRedisCacheLocation": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The location of the linked server. If not provided, the location of the primary Redis cache is used."
                      }
                    },
                    "serverRole": {
                      "type": "string",
                      "defaultValue": "Secondary",
                      "metadata": {
                        "description": "Optional. The role of the linked server. Possible values include: \"Primary\", \"Secondary\". Default value is \"Secondary\"."
                      }
                    }
                  },
                  "resources": {
                    "redisCache": {
                      "existing": true,
                      "type": "Microsoft.Cache/redis",
                      "apiVersion": "2024-11-01",
                      "name": "[parameters('redisCacheName')]"
                    },
                    "redisLinkedServer": {
                      "type": "Microsoft.Cache/redis/linkedServers",
                      "apiVersion": "2024-11-01",
                      "name": "[format('{0}/{1}', parameters('redisCacheName'), parameters('name'))]",
                      "properties": {
                        "linkedRedisCacheId": "[parameters('linkedRedisCacheResourceId')]",
                        "linkedRedisCacheLocation": "[coalesce(parameters('linkedRedisCacheLocation'), reference('redisCache', '2024-11-01', 'full').location)]",
                        "serverRole": "[parameters('serverRole')]"
                      },
                      "dependsOn": [
                        "redisCache"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the linkedServer resource."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the linkedServer."
                      },
                      "value": "[resourceId('Microsoft.Cache/redis/linkedServers', parameters('redisCacheName'), parameters('name'))]"
                    },
                    "geoReplicatedPrimaryHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "The hostname of the linkedServer."
                      },
                      "value": "[reference('redisLinkedServer').geoReplicatedPrimaryHostName]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed linkedServer."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "redis",
                "redis_privateEndpoints"
              ]
            },
            "secretsExport": {
              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
              "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultName": {
                    "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                  },
                  "secretsToSet": {
                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'primaryAccessKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryAccessKeyName'), 'value', listKeys('redis', '2024-11-01').primaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'primaryConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryConnectionStringName'), 'value', format('rediss://:{0}@{1}:6380', listKeys('redis', '2024-11-01').primaryKey, reference('redis').hostName))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'primaryStackExchangeRedisConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'primaryStackExchangeRedisConnectionStringName'), 'value', format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').hostName, listKeys('redis', '2024-11-01').primaryKey))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryAccessKeyName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryAccessKeyName'), 'value', listKeys('redis', '2024-11-01').secondaryKey)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryConnectionStringName'), 'value', format('rediss://:{0}@{1}:6380', listKeys('redis', '2024-11-01').secondaryKey, reference('redis').hostName))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'secondaryStackExchangeRedisConnectionStringName'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'secondaryStackExchangeRedisConnectionStringName'), 'value', format('{0}:6380,password={1},ssl=True,abortConnect=False', reference('redis').hostName, listKeys('redis', '2024-11-01').secondaryKey))), createArray()))]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3544094571587756877"
                    }
                  },
                  "definitions": {
                    "secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "secretToSetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the secret to set."
                          }
                        },
                        "value": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. The value of the secret to set."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "keyVaultName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Key Vault to set the secrets in."
                      }
                    },
                    "secretsToSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretToSetType"
                      },
                      "metadata": {
                        "description": "Required. The secrets to set in the Key Vault."
                      }
                    }
                  },
                  "resources": {
                    "keyVault": {
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-12-01-preview",
                      "name": "[parameters('keyVaultName')]"
                    },
                    "secrets": {
                      "copy": {
                        "name": "secrets",
                        "count": "[length(parameters('secretsToSet'))]"
                      },
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2024-12-01-preview",
                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                      "properties": {
                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                      }
                    }
                  },
                  "outputs": {
                    "secretsSet": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/secretSetOutputType"
                      },
                      "metadata": {
                        "description": "The references to the secrets exported to the provided Key Vault."
                      },
                      "copy": {
                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                        "input": {
                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                          "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "redis"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Redis Cache."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Redis Cache."
              },
              "value": "[resourceId('Microsoft.Cache/redis', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Redis Cache was created in."
              },
              "value": "[resourceGroup().name]"
            },
            "hostName": {
              "type": "string",
              "metadata": {
                "description": "Redis hostname."
              },
              "value": "[reference('redis').hostName]"
            },
            "sslPort": {
              "type": "int",
              "metadata": {
                "description": "Redis SSL port."
              },
              "value": "[reference('redis').sslPort]"
            },
            "subnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "The full resource ID of a subnet in a virtual network where the Redis Cache was deployed in."
              },
              "value": "[if(not(empty(parameters('subnetResourceId'))), reference('redis').subnetId, '')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('redis', '2024-11-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('redis', '2024-11-01', 'full').location]"
            },
            "privateEndpoints": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/privateEndpointOutputType"
              },
              "metadata": {
                "description": "The private endpoints of the Redis Cache."
              },
              "copy": {
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                "input": {
                  "name": "[reference(format('redis_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                  "resourceId": "[reference(format('redis_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                  "groupId": "[tryGet(tryGet(reference(format('redis_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                  "customDnsConfigs": "[reference(format('redis_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                  "networkInterfaceResourceIds": "[reference(format('redis_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                }
              }
            },
            "exportedSecrets": {
              "$ref": "#/definitions/secretsOutputType",
              "metadata": {
                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
              },
              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
            }
          }
        }
      },
      "dependsOn": [
        "redisPrivateDnsZone",
        "vnet"
      ]
    }
  },
  "outputs": {
    "vnetResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the virtual network."
      },
      "value": "[reference('vnet').outputs.resourceId.value]"
    },
    "cosmosDbResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the CosmosDB account."
      },
      "value": "[listOutputsWithSecureValues(resourceId('Microsoft.Resources/deployments', format('cosmosdbAccount-{0}', uniqueString(deployment().name, parameters('location')))), '2022-09-01').resourceId]"
    },
    "redisCacheResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Redis cache."
      },
      "value": "[reference('redis').outputs.resourceId.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the PaaS ASE with CosmosDB Tier 4 was deployed into."
      },
      "value": "[resourceGroup().name]"
    }
  }
}