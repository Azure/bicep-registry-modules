{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.1.42791",
      "templateHash": "13219794560610520414"
    },
    "name": "avm/ptn/alz/empty",
    "description": "Azure Landing Zones - Bicep - Empty\n\nPlease review the [Usage examples](https://github.com/Azure/bicep-registry-modules/tree/main/avm/ptn/alz/empty#Usage-examples) section in the module's README, but please ensure for the `max` example you review the entire [directory](https://github.com/Azure/bicep-registry-modules/tree/main/avm/ptn/alz/empty/tests/e2e/max) to see the supplementary files that are required for the example.\n\nAlso please ensure you review the [Notes section of the module's README](https://github.com/Azure/bicep-registry-modules/tree/main/avm/ptn/alz/empty#Notes) for important information about the module as well as features that exist outside of parameter inputs."
  },
  "definitions": {
    "policyAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 24,
          "metadata": {
            "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
          }
        },
        "displayName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the policy assignment."
          }
        },
        "policyDefinitionId": {
          "type": "string",
          "metadata": {
            "description": "Required. Specifies the Resource ID of the policy definition or policy set definition being assigned. Example `/providers/Microsoft.Authorization/policyDefinitions/cccc23c7-8427-4f53-ad12-b6a63eb452b3` or `/providers/Microsoft.Management/managementGroups/<management-group-name>/providers/Microsoft.Authorization/policyDefinitions/<policy-definition/set-name`."
          }
        },
        "parameters": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/policyAssignments@2022-06-01#properties/properties/properties/parameters"
            },
            "description": "Optional. Parameters for the policy assignment if needed."
          },
          "nullable": true
        },
        "identity": {
          "type": "string",
          "allowedValues": [
            "None",
            "SystemAssigned",
            "UserAssigned"
          ],
          "metadata": {
            "description": "Required. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning `Modify` or `DeployIfNotExists` policy definitions."
          }
        },
        "userAssignedIdentityId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource ID for the user assigned identity to assign to the policy assignment."
          }
        },
        "roleDefinitionIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
          }
        },
        "nonComplianceMessages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "metadata": {
                  "description": "Required. A message that describes why a resource is non-compliant with the policy. This is shown in \"deny\" error messages and on resources non-compliant compliance results."
                }
              },
              "policyDefinitionReferenceId": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The policy definition reference ID within a policy set definition the message is intended for. This is only applicable if the policy assignment assigns a policy set definition. If this is not provided the message applies to all policies assigned by this policy assignment."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
          }
        },
        "metadata": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
          }
        },
        "enforcementMode": {
          "type": "string",
          "allowedValues": [
            "Default",
            "DoNotEnforce"
          ],
          "metadata": {
            "description": "Required. The policy assignment enforcement mode. Possible values are `Default` and `DoNotEnforce`. Recommended value is `Default`."
          }
        },
        "notScopes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The policy excluded scopes."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The location of the policy assignment. Only required when utilizing managed identity, as sets location of system assigned managed identity, if created."
          }
        },
        "overrides": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "kind": {
                "type": "string",
                "allowedValues": [
                  "definitionVersion",
                  "policyEffect"
                ],
                "metadata": {
                  "description": "Required. The override kind."
                }
              },
              "selectors": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/policyAssignmentSelectorType"
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. The selector type."
                }
              },
              "value": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The value to override the policy property."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The policy property value override. Allows changing the effect of a policy definition without modifying the underlying policy definition or using a parameterized effect in the policy definition."
          }
        },
        "resourceSelectors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/policyAssignmentSelectorType"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource selector list to filter policies by resource properties. Facilitates safe deployment practices (SDP) by enabling gradual roll out policy assignments based on factors like resource location, resource type, or whether a resource has a location."
          }
        },
        "definitionVersion": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The policy definition version to use for the policy assignment. If not specified, the latest version of the policy definition will be used. For more information on policy assignment definition versions see https://learn.microsoft.com/azure/governance/policy/concepts/assignment-structure#policy-definition-id-and-version-preview."
          }
        },
        "additionalManagementGroupsIDsToAssignRbacTo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. An array of additional management group IDs to assign RBAC to for the policy assignment if it has an identity."
          }
        },
        "additionalSubscriptionIDsToAssignRbacTo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. An array of additional Subscription IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
          }
        },
        "additionalResourceGroupResourceIDsToAssignRbacTo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. An array of additional Resource Group Resource IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "A type for policy assignments."
      }
    },
    "policyAssignmentSelectorType": {
      "type": "object",
      "properties": {
        "in": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of values to filter in."
          }
        },
        "notIn": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The list of values to filter out."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "policyDefinitionReferenceId",
            "resourceLocation",
            "resourceType",
            "resourceWithoutLocation"
          ],
          "metadata": {
            "description": "Required. The selector kind."
          }
        }
      }
    },
    "roleDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the custom role definition."
          }
        },
        "description": {
          "type": "string",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/description"
            },
            "description": "Optional. The description of the custom role definition."
          },
          "nullable": true
        },
        "assignableScopes": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/assignableScopes"
            },
            "description": "Optional. The assignable scopes of the custom role definition. If not specified, the management group being targeted in the parameter managementGroupName will be used."
          },
          "nullable": true
        },
        "roleName": {
          "type": "string",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/roleName"
            },
            "description": "Optional. The display name of the custom role definition. If not specified, the name will be used."
          },
          "nullable": true
        },
        "actions": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/permissions/items/properties/actions"
            },
            "description": "Optional. The permission actions of the custom role definition."
          },
          "nullable": true
        },
        "notActions": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/permissions/items/properties/notActions"
            },
            "description": "Optional. The permission not actions of the custom role definition."
          },
          "nullable": true
        },
        "dataActions": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/permissions/items/properties/dataActions"
            },
            "description": "Optional. The permission data actions of the custom role definition."
          },
          "nullable": true
        },
        "notDataActions": {
          "type": "array",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/roleDefinitions@2022-05-01-preview#properties/properties/properties/permissions/items/properties/notDataActions"
            },
            "description": "Optional. The permission not data actions of the custom role definition."
          },
          "nullable": true
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "A type for custom role definition."
      }
    },
    "policyDefinitionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 128,
          "metadata": {
            "description": "Required. Specifies the name of the policy definition. Maximum length is 128 characters for management group scope."
          }
        },
        "properties": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/policyDefinitions@2025-01-01#properties/properties"
            },
            "description": "Required. The properties of the policy definition."
          }
        }
      },
      "metadata": {
        "description": "A type for policy definitions.",
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/policy-definitions.bicep"
        }
      }
    },
    "policySetDefinitionsType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 128,
          "metadata": {
            "description": "Required. Specifies the name of the policy set definition. Maximum length is 128 characters for management group scope."
          }
        },
        "properties": {
          "type": "object",
          "metadata": {
            "__bicep_resource_derived_type!": {
              "source": "Microsoft.Authorization/policySetDefinitions@2025-01-01#properties/properties"
            },
            "description": "Required. The properties of the policy set definition."
          }
        }
      },
      "metadata": {
        "description": "A type for policy set definitions.",
        "__bicep_imported_from!": {
          "sourceTemplate": "modules/policy-set-definitions.bicep"
        }
      }
    },
    "roleAssignmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
          }
        },
        "roleDefinitionIdOrName": {
          "type": "string",
          "metadata": {
            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
          }
        },
        "principalId": {
          "type": "string",
          "metadata": {
            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
          }
        },
        "principalType": {
          "type": "string",
          "allowedValues": [
            "Device",
            "ForeignGroup",
            "Group",
            "ServicePrincipal",
            "User"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The principal type of the assigned principal ID."
          }
        },
        "description": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The description of the role assignment."
          }
        },
        "condition": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
          }
        },
        "conditionVersion": {
          "type": "string",
          "allowedValues": [
            "2.0"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Version of the condition."
          }
        },
        "delegatedManagedIdentityResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Resource Id of the delegated managed identity resource."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a role assignment.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[deployment().location]",
      "metadata": {
        "description": "Optional. The location to deploy resources to."
      }
    },
    "waitForConsistencyCounterBeforeCustomRoleDefinitions": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the custom role definitions are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "waitForConsistencyCounterBeforeRoleAssignments": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the role assignments are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "waitForConsistencyCounterBeforeCustomPolicyDefinitions": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the custom policy definitions are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "waitForConsistencyCounterBeforeCustomPolicySetDefinitions": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the custom policy set definitions (initiatives) are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "waitForConsistencyCounterBeforePolicyAssignments": {
      "type": "int",
      "defaultValue": 10,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the policy assignments are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "waitForConsistencyCounterBeforeSubPlacement": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. An integer that specifies the number of blank ARM deployments prior to the subscription management group associations are deployed. This electively introduces a wait timer to allow ARM eventual consistency to become consistent and helps avoids \"Not Found\" error messages."
      }
    },
    "createOrUpdateManagementGroup": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Boolean to create or update the management group. If set to false, the module will only check if the management group exists and do a GET on it before it continues to deploy resources to it."
      }
    },
    "managementGroupName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the management group to create or update."
      }
    },
    "managementGroupDisplayName": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The display name of the management group to create or update. If not specified, the management group name will be used."
      }
    },
    "managementGroupParentId": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The parent ID of the management group to create or update. If not specified, the management group will be created at the root level of the tenant. Just provide the management group ID, not the full resource ID."
      }
    },
    "subscriptionsToPlaceInManagementGroup": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. An array of subscriptions to place in the management group. If not specified, no subscriptions will be placed in the management group."
      }
    },
    "managementGroupRoleAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of custom role assignments to create on the management group."
      }
    },
    "managementGroupCustomRoleDefinitions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/roleDefinitionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of custom role definitions to create on the management group."
      }
    },
    "managementGroupCustomPolicyDefinitions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/policyDefinitionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of custom policy definitions to create on the management group."
      }
    },
    "managementGroupCustomPolicySetDefinitions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/policySetDefinitionsType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of custom policy set definitions (initiatives) to create on the management group."
      }
    },
    "managementGroupPolicyAssignments": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/policyAssignmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. Array of policy assignments to create on the management group."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "copy": [
      {
        "name": "formattedRoleAssignments",
        "count": "[length(coalesce(parameters('managementGroupRoleAssignments'), createArray()))]",
        "input": "[union(coalesce(parameters('managementGroupRoleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('managementGroupRoleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('managementGroupRoleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('managementGroupRoleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, managementGroupResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('managementGroupRoleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
      }
    ],
    "builtInRoleNames": {
      "Billing Reader": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'fa23ad8b-c56e-40d8-ac0c-ce449e1d2c64')]",
      "Contributor": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "Cost Management Reader": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '72fafb9e-0641-4937-9268-a91bfd8191a3')]",
      "Cost Management Contributor": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '434105ed-43f6-45c7-a02f-909b2ba83430')]",
      "Hierarchy Settings Administrator": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '350f8d15-c687-4448-8ae1-157740a3936d')]",
      "Management Group Contributor": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '5d58bcaf-24a5-4b20-bdb6-eed9f69fbe4c')]",
      "Management Group Reader": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]",
      "Owner": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
      "Quota Request Operator": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '0e5f05e5-9ab9-446b-b98d-1e2157c94125')]",
      "Reader": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
      "Role Based Access Control Administrator": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
      "Security Admin": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
      "Security Reader": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
      "Support Request Contributor": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', 'cfd33db0-3dd1-45e3-aa9d-cdbdf3b6f24e')]",
      "User Access Administrator": "[managementGroupResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
    },
    "deploymentNames": {
      "mg": "[format('{0}-alz-mg-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgSubPlacement": "[format('{0}-alz-sub-place-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgSubPlacementWait": "[format('{0}-alz-sub-place-wait-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgRoleAssignments": "[format('{0}-alz-mg-rbac-asi-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgRoleDefinitions": "[format('{0}-alz-mg-rbac-def-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgRoleDefinitionsWait": "[format('{0}-alz-rbac-def-wait-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgRoleAssignmentsWait": "[format('{0}-alz-rbac-asi-wait-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgCustomPolicyDefinitionsWait": "[format('{0}-alz-pol-def-wait-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgCustomPolicySetDefinitionsWait": "[format('{0}-alz-pol-init-wait-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgPolicyDefinitions": "[format('{0}-alz-mg-pol-def-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgPolicySetDefinitions": "[format('{0}-alz-mg-pol-init-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgPolicyAssignments": "[format('{0}-alz-mg-pol-asi-{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]",
      "mgPolicyAssignmentsWait": "[format('{0}-alz-pol-asi-wait{1}', uniqueString(deployment().name, parameters('location')), parameters('managementGroupName'))]"
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.ptn.alz-empty.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "location": "[parameters('location')]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "mgExisting": {
      "condition": "[not(parameters('createOrUpdateManagementGroup'))]",
      "existing": true,
      "type": "Microsoft.Management/managementGroups",
      "apiVersion": "2023-04-01",
      "scope": "/",
      "name": "[parameters('managementGroupName')]"
    },
    "mgSubPlacement": {
      "copy": {
        "name": "mgSubPlacement",
        "count": "[length(parameters('subscriptionsToPlaceInManagementGroup'))]"
      },
      "type": "Microsoft.Management/managementGroups/subscriptions",
      "apiVersion": "2023-04-01",
      "scope": "/",
      "name": "[if(parameters('createOrUpdateManagementGroup'), format('{0}/{1}', parameters('managementGroupName'), parameters('subscriptionsToPlaceInManagementGroup')[copyIndex()]), format('{0}/{1}', parameters('managementGroupName'), parameters('subscriptionsToPlaceInManagementGroup')[copyIndex()]))]",
      "dependsOn": [
        "mg"
      ]
    },
    "mg": {
      "condition": "[parameters('createOrUpdateManagementGroup')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deploymentNames').mg]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('managementGroupName')]"
          },
          "displayName": {
            "value": "[coalesce(parameters('managementGroupDisplayName'), parameters('managementGroupName'))]"
          },
          "parentId": {
            "value": "[coalesce(parameters('managementGroupParentId'), tenant().tenantId)]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.28.1.47646",
              "templateHash": "10592933576502540473"
            },
            "name": "Management Groups",
            "description": "This template will prepare the management group structure based on the provided parameter.\n\nThis module has some known **limitations**:\n- It's not possible to change the display name of the root management group (the one that has the tenant GUID as ID)\n- It can't manage the Root (/) management group",
            "owner": "Azure/module-maintainers"
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The group ID of the Management group."
              }
            },
            "displayName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The friendly name of the management group. If no value is passed then this field will be set to the group ID."
              }
            },
            "parentId": {
              "type": "string",
              "defaultValue": "[last(split(managementGroup().id, '/'))]",
              "metadata": {
                "description": "Optional. The management group parent ID. Defaults to current scope."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location deployment metadata."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.management-managementgroup.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Management/managementGroups",
              "apiVersion": "2021-04-01",
              "scope": "/",
              "name": "[parameters('name')]",
              "properties": {
                "displayName": "[parameters('displayName')]",
                "details": "[if(not(empty(parameters('parentId'))), createObject('parent', createObject('id', tenantResourceId('Microsoft.Management/managementGroups', parameters('parentId')))), null())]"
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the management group."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the management group."
              },
              "value": "[tenantResourceId('Microsoft.Management/managementGroups', parameters('name'))]"
            }
          }
        }
      }
    },
    "mgSubPlacementWait": {
      "copy": {
        "name": "mgSubPlacementWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforeSubPlacement')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforeSubPlacement'), 0), not(empty(parameters('subscriptionsToPlaceInManagementGroup'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgSubPlacementWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgCustomPolicyDefinitionsWait": {
      "copy": {
        "name": "mgCustomPolicyDefinitionsWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforeCustomPolicyDefinitions')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforeCustomPolicyDefinitions'), 0), not(empty(parameters('managementGroupCustomPolicyDefinitions'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgCustomPolicyDefinitionsWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgCustomPolicyDefinitions": {
      "condition": "[not(empty(parameters('managementGroupCustomPolicyDefinitions')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deploymentNames').mgPolicyDefinitions]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupName'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managementGroupCustomPolicyDefinitions": {
            "value": "[parameters('managementGroupCustomPolicyDefinitions')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "13903514106979025495"
            },
            "name": "avm/ptn/alz/empty/policy-definitions",
            "description": "Azure Landing Zones - Bicep - Empty - Policy Definitions Module"
          },
          "definitions": {
            "policyDefinitionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 128,
                  "metadata": {
                    "description": "Required. Specifies the name of the policy definition. Maximum length is 128 characters for management group scope."
                  }
                },
                "properties": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Authorization/policyDefinitions@2025-01-01#properties/properties"
                    },
                    "description": "Required. The properties of the policy definition."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "A type for policy definitions."
              }
            }
          },
          "parameters": {
            "managementGroupCustomPolicyDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/policyDefinitionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Policy definitions to create on the management group."
              }
            }
          },
          "resources": {
            "mgCustomPolicyDefinitions": {
              "copy": {
                "name": "mgCustomPolicyDefinitions",
                "count": "[length(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray()))]"
              },
              "type": "Microsoft.Authorization/policyDefinitions",
              "apiVersion": "2025-01-01",
              "name": "[coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].name]",
              "properties": {
                "description": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'description')]",
                "displayName": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'displayName')]",
                "metadata": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'metadata')]",
                "mode": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'mode')]",
                "parameters": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'parameters')]",
                "policyType": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'policyType')]",
                "policyRule": "[coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties.policyRule]",
                "version": "[tryGet(coalesce(parameters('managementGroupCustomPolicyDefinitions'), createArray())[copyIndex()].properties, 'version')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "mgCustomPolicyDefinitionsWait"
      ]
    },
    "mgCustomPolicySetDefinitionsWait": {
      "copy": {
        "name": "mgCustomPolicySetDefinitionsWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforeCustomPolicySetDefinitions')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforeCustomPolicySetDefinitions'), 0), not(empty(parameters('managementGroupCustomPolicySetDefinitions'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgCustomPolicySetDefinitionsWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgCustomPolicySetDefinitions": {
      "condition": "[not(empty(parameters('managementGroupCustomPolicySetDefinitions')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[variables('deploymentNames').mgPolicySetDefinitions]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupName'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managementGroupCustomPolicySetDefinitions": {
            "value": "[parameters('managementGroupCustomPolicySetDefinitions')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "16744617044693941549"
            },
            "name": "avm/ptn/alz/empty/policy-set-definitions",
            "description": "Azure Landing Zones - Bicep - Empty - Policy Set Definitions Module"
          },
          "definitions": {
            "policySetDefinitionsType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "maxLength": 128,
                  "metadata": {
                    "description": "Required. Specifies the name of the policy set definition. Maximum length is 128 characters for management group scope."
                  }
                },
                "properties": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.Authorization/policySetDefinitions@2025-01-01#properties/properties"
                    },
                    "description": "Required. The properties of the policy set definition."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "A type for policy set definitions."
              }
            }
          },
          "parameters": {
            "managementGroupCustomPolicySetDefinitions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/policySetDefinitionsType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Policy set definitions to create on the management group."
              }
            }
          },
          "resources": {
            "mgCustomPolicySetDefinitions": {
              "copy": {
                "name": "mgCustomPolicySetDefinitions",
                "count": "[length(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray()))]"
              },
              "type": "Microsoft.Authorization/policySetDefinitions",
              "apiVersion": "2025-01-01",
              "name": "[coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].name]",
              "properties": {
                "copy": [
                  {
                    "name": "policyDefinitions",
                    "count": "[length(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions)]",
                    "input": {
                      "policyDefinitionReferenceId": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions[copyIndex('policyDefinitions')], 'policyDefinitionReferenceId')]",
                      "policyDefinitionId": "[replace(tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions[copyIndex('policyDefinitions')], 'policyDefinitionId'), '{customPolicyDefinitionScopeId}', managementGroup().id)]",
                      "parameters": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions[copyIndex('policyDefinitions')], 'parameters')]",
                      "groupNames": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions[copyIndex('policyDefinitions')], 'groupNames')]",
                      "definitionVersion": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties.policyDefinitions[copyIndex('policyDefinitions')], 'definitionVersion')]"
                    }
                  }
                ],
                "description": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'description')]",
                "displayName": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'displayName')]",
                "metadata": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'metadata')]",
                "parameters": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'parameters')]",
                "policyType": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'policyType')]",
                "version": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'version')]",
                "policyDefinitionGroups": "[tryGet(coalesce(parameters('managementGroupCustomPolicySetDefinitions'), createArray())[copyIndex()].properties, 'policyDefinitionGroups')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "mgCustomPolicyDefinitions",
        "mgCustomPolicySetDefinitionsWait"
      ]
    },
    "mgPolicyAssignmentsWait": {
      "copy": {
        "name": "mgPolicyAssignmentsWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforePolicyAssignments')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforePolicyAssignments'), 0), not(empty(parameters('managementGroupPolicyAssignments'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgPolicyAssignmentsWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgPolicyAssignments": {
      "copy": {
        "name": "mgPolicyAssignments",
        "count": "[length(coalesce(parameters('managementGroupPolicyAssignments'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-{1}', variables('deploymentNames').mgPolicyAssignments, uniqueString(parameters('managementGroupName'), coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()].name)), 64)]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupName'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()].name]"
          },
          "policyDefinitionId": {
            "value": "[coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()].policyDefinitionId]"
          },
          "location": {
            "value": "[coalesce(tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'location'), parameters('location'))]"
          },
          "description": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'description')]"
          },
          "displayName": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'displayName')]"
          },
          "enforcementMode": {
            "value": "[coalesce(tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'enforcementMode'), 'Default')]"
          },
          "identity": {
            "value": "[coalesce(tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'identity'), 'None')]"
          },
          "userAssignedIdentityId": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'userAssignedIdentityId')]"
          },
          "roleDefinitionIds": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'roleDefinitionIds')]"
          },
          "parameters": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'parameters')]"
          },
          "managementGroupId": "[if(parameters('createOrUpdateManagementGroup'), createObject('value', reference('mg').outputs.name.value), createObject('value', parameters('managementGroupName')))]",
          "nonComplianceMessages": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'nonComplianceMessages')]"
          },
          "metadata": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'metadata')]"
          },
          "overrides": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'overrides')]"
          },
          "resourceSelectors": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'resourceSelectors')]"
          },
          "definitionVersion": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'definitionVersion')]"
          },
          "notScopes": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'notScopes')]"
          },
          "additionalManagementGroupsIDsToAssignRbacTo": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'additionalManagementGroupsIDsToAssignRbacTo')]"
          },
          "additionalSubscriptionIDsToAssignRbacTo": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'additionalSubscriptionIDsToAssignRbacTo')]"
          },
          "additionalResourceGroupResourceIDsToAssignRbacTo": {
            "value": "[tryGet(coalesce(parameters('managementGroupPolicyAssignments'), createArray())[copyIndex()], 'additionalResourceGroupResourceIDsToAssignRbacTo')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1602129596204903277"
            },
            "name": "Policy Assignments (All scopes)",
            "description": "This module deploys a Policy Assignment at a Management Group, Subscription or Resource Group scope."
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope, 64 characters for subscription and resource group scopes."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. This message will be part of response in case of policy violation."
              }
            },
            "displayName": {
              "type": "string",
              "defaultValue": "",
              "maxLength": 128,
              "metadata": {
                "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
              }
            },
            "policyDefinitionId": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
              }
            },
            "parameters": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Parameters for the policy assignment if needed."
              }
            },
            "identity": {
              "type": "string",
              "defaultValue": "SystemAssigned",
              "allowedValues": [
                "SystemAssigned",
                "UserAssigned",
                "None"
              ],
              "metadata": {
                "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
              }
            },
            "userAssignedIdentityId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Resource ID for the user assigned identity to assign to the policy assignment."
              }
            },
            "roleDefinitionIds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
              }
            },
            "metadata": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
              }
            },
            "nonComplianceMessages": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
              }
            },
            "enforcementMode": {
              "type": "string",
              "defaultValue": "Default",
              "allowedValues": [
                "Default",
                "DoNotEnforce"
              ],
              "metadata": {
                "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce."
              }
            },
            "managementGroupId": {
              "type": "string",
              "defaultValue": "[managementGroup().name]",
              "metadata": {
                "description": "Optional. The Target Scope for the Policy. The name of the management group for the policy assignment. If not provided, will use the current scope for deployment."
              }
            },
            "additionalManagementGroupsIDsToAssignRbacTo": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An array of additional management group IDs to assign RBAC to for the policy assignment if it has an identity."
              }
            },
            "additionalSubscriptionIDsToAssignRbacTo": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An array of additional Subscription IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
              }
            },
            "additionalResourceGroupResourceIDsToAssignRbacTo": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. An array of additional Resource Group Resource IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Target Scope for the Policy. The subscription ID of the subscription for the policy assignment."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Target Scope for the Policy. The name of the resource group for the policy assignment."
              }
            },
            "notScopes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The policy excluded scopes."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "overrides": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The policy property value override. Allows changing the effect of a policy definition without modifying the underlying policy definition or using a parameterized effect in the policy definition."
              }
            },
            "resourceSelectors": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The resource selector list to filter policies by resource properties. Facilitates safe deployment practices (SDP) by enabling gradual roll out policy assignments based on factors like resource location, resource type, or whether a resource has a location."
              }
            },
            "definitionVersion": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The policy definition version to use for the policy assignment. If not specified, the latest version of the policy definition will be used. For more information on policy assignment definition versions see https://learn.microsoft.com/azure/governance/policy/concepts/assignment-structure#policy-definition-id-and-version-preview."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[take(format('46d3xbcp.ptn.authorization-policyassignment.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "policyAssignment_mg": {
              "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PolicyAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
              "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "policyDefinitionId": {
                    "value": "[parameters('policyDefinitionId')]"
                  },
                  "displayName": "[if(not(empty(parameters('displayName'))), createObject('value', parameters('displayName')), createObject('value', ''))]",
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "parameters": "[if(not(empty(parameters('parameters'))), createObject('value', parameters('parameters')), createObject('value', createObject()))]",
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "userAssignedIdentityId": {
                    "value": "[parameters('userAssignedIdentityId')]"
                  },
                  "roleDefinitionIds": "[if(not(empty(parameters('roleDefinitionIds'))), createObject('value', parameters('roleDefinitionIds')), createObject('value', createArray()))]",
                  "metadata": "[if(not(empty(parameters('metadata'))), createObject('value', parameters('metadata')), createObject('value', createObject()))]",
                  "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), createObject('value', parameters('nonComplianceMessages')), createObject('value', createArray()))]",
                  "enforcementMode": {
                    "value": "[parameters('enforcementMode')]"
                  },
                  "notScopes": "[if(not(empty(parameters('notScopes'))), createObject('value', parameters('notScopes')), createObject('value', createArray()))]",
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "overrides": "[if(not(empty(parameters('overrides'))), createObject('value', parameters('overrides')), createObject('value', createArray()))]",
                  "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), createObject('value', parameters('resourceSelectors')), createObject('value', createArray()))]",
                  "definitionVersion": {
                    "value": "[parameters('definitionVersion')]"
                  },
                  "additionalManagementGroupsIDsToAssignRbacTo": {
                    "value": "[parameters('additionalManagementGroupsIDsToAssignRbacTo')]"
                  },
                  "additionalSubscriptionIDsToAssignRbacTo": {
                    "value": "[parameters('additionalSubscriptionIDsToAssignRbacTo')]"
                  },
                  "additionalResourceGroupResourceIDsToAssignRbacTo": {
                    "value": "[parameters('additionalResourceGroupResourceIDsToAssignRbacTo')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16571041331828455729"
                    },
                    "name": "Policy Assignments (Management Group scope)",
                    "description": "This module deploys a Policy Assignment at a Management Group scope."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This message will be part of response in case of policy violation."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
                      }
                    },
                    "policyDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters for the policy assignment if needed."
                      }
                    },
                    "identity": {
                      "type": "string",
                      "defaultValue": "SystemAssigned",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
                      }
                    },
                    "userAssignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Resource ID for the user assigned identity to assign to the policy assignment."
                      }
                    },
                    "roleDefinitionIds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                      }
                    },
                    "additionalManagementGroupsIDsToAssignRbacTo": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of additional management group IDs to assign RBAC to for the policy assignment if it has an identity."
                      }
                    },
                    "additionalSubscriptionIDsToAssignRbacTo": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of additional Subscription IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
                      }
                    },
                    "additionalResourceGroupResourceIDsToAssignRbacTo": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An array of additional Resource Group Resource IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                      }
                    },
                    "nonComplianceMessages": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
                      }
                    },
                    "enforcementMode": {
                      "type": "string",
                      "defaultValue": "Default",
                      "allowedValues": [
                        "Default",
                        "DoNotEnforce"
                      ],
                      "metadata": {
                        "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce."
                      }
                    },
                    "notScopes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy excluded scopes."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "overrides": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy property value override. Allows changing the effect of a policy definition without modifying the underlying policy definition or using a parameterized effect in the policy definition."
                      }
                    },
                    "resourceSelectors": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The resource selector list to filter policies by resource properties. Facilitates safe deployment practices (SDP) by enabling gradual roll out policy assignments based on factors like resource location, resource type, or whether a resource has a location."
                      }
                    },
                    "definitionVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The policy definition version to use for the policy assignment. If not specified, the latest version of the policy definition will be used. For more information on policy assignment definition versions see https://learn.microsoft.com/azure/governance/policy/concepts/assignment-structure#policy-definition-id-and-version-preview."
                      }
                    }
                  },
                  "variables": {
                    "identityVar": "[if(equals(parameters('identity'), 'SystemAssigned'), createObject('type', parameters('identity')), if(equals(parameters('identity'), 'UserAssigned'), createObject('type', parameters('identity'), 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), null()))]",
                    "finalArrayOfManagementGroupsToAssignRbacTo": "[if(equals(parameters('identity'), 'SystemAssigned'), union(parameters('additionalManagementGroupsIDsToAssignRbacTo'), createArray(managementGroup().name)), createArray())]"
                  },
                  "resources": {
                    "policyAssignment": {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                        "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "policyDefinitionId": "[parameters('policyDefinitionId')]",
                        "parameters": "[parameters('parameters')]",
                        "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), parameters('nonComplianceMessages'), createArray())]",
                        "enforcementMode": "[parameters('enforcementMode')]",
                        "notScopes": "[if(not(empty(parameters('notScopes'))), parameters('notScopes'), createArray())]",
                        "overrides": "[if(not(empty(parameters('overrides'))), parameters('overrides'), createArray())]",
                        "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), parameters('resourceSelectors'), createArray())]",
                        "definitionVersion": "[parameters('definitionVersion')]"
                      },
                      "identity": "[variables('identityVar')]"
                    },
                    "managementGroupRoleAssignments": {
                      "copy": {
                        "name": "managementGroupRoleAssignments",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(and(not(empty(parameters('roleDefinitionIds'))), not(empty(parameters('additionalManagementGroupsIDsToAssignRbacTo')))), equals(parameters('identity'), 'SystemAssigned'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PolicyAssignment-MG-Module-Additional-RBAC', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionIds')[copyIndex()], parameters('name')))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "policyAssignmentIdentityId": {
                            "value": "[reference('policyAssignment', '2025-01-01', 'full').identity.principalId]"
                          },
                          "roleDefinitionId": {
                            "value": "[parameters('roleDefinitionIds')[copyIndex()]]"
                          },
                          "managementGroupsIDsToAssignRbacTo": {
                            "value": "[variables('finalArrayOfManagementGroupsToAssignRbacTo')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "16132708231319273822"
                            }
                          },
                          "parameters": {
                            "managementGroupsIDsToAssignRbacTo": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of additional management group IDs to assign RBAC to for the policy assignment if it has an identity."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                              }
                            },
                            "policyAssignmentIdentityId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The managed identity principal ID associated with the policy assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "additionalManagementGroupRoleAssignmentsPerMG",
                                "count": "[length(parameters('managementGroupsIDsToAssignRbacTo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PolicyAssignment-MG-Module-Additional-RBAC', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionId'), parameters('name')))]",
                              "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupsIDsToAssignRbacTo')[copyIndex()])]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "policyAssignmentIdentityId": {
                                    "value": "[parameters('policyAssignmentIdentityId')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "18359218032794714355"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[deployment().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                                      }
                                    },
                                    "policyAssignmentIdentityId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The managed identity principal ID associated with the policy assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(managementGroup().id, parameters('roleDefinitionId'), parameters('location'), parameters('name'))]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalId": "[parameters('policyAssignmentIdentityId')]",
                                        "principalType": "ServicePrincipal"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "policyAssignment"
                      ]
                    },
                    "additionalSubscriptionRoleAssignments": {
                      "copy": {
                        "name": "additionalSubscriptionRoleAssignments",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(and(not(empty(parameters('roleDefinitionIds'))), not(empty(parameters('additionalSubscriptionIDsToAssignRbacTo')))), equals(parameters('identity'), 'SystemAssigned'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PolicyAssignment-MG-Module-Additional-RBAC-Subs', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionIds')[copyIndex()], parameters('name')))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "policyAssignmentIdentityId": {
                            "value": "[reference('policyAssignment', '2025-01-01', 'full').identity.principalId]"
                          },
                          "roleDefinitionId": {
                            "value": "[parameters('roleDefinitionIds')[copyIndex()]]"
                          },
                          "subscriptionIDsToAssignRbacTo": {
                            "value": "[parameters('additionalSubscriptionIDsToAssignRbacTo')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "13456700536070272376"
                            }
                          },
                          "parameters": {
                            "subscriptionIDsToAssignRbacTo": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of additional Subscription IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                              }
                            },
                            "policyAssignmentIdentityId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The managed identity principal ID associated with the policy assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "additionalSubscriptionRoleAssignmentsPerSub",
                                "count": "[length(parameters('subscriptionIDsToAssignRbacTo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PolicyAssignment-MG-Module-RBAC-Sub-{1}', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionId'), parameters('name')), substring(parameters('subscriptionIDsToAssignRbacTo')[copyIndex()], 0, 8))]",
                              "subscriptionId": "[parameters('subscriptionIDsToAssignRbacTo')[copyIndex()]]",
                              "location": "[deployment().location]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "policyAssignmentIdentityId": {
                                    "value": "[parameters('policyAssignmentIdentityId')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "283263530432177648"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[deployment().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                                      }
                                    },
                                    "policyAssignmentIdentityId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The managed identity principal ID associated with the policy assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(subscription().id, parameters('roleDefinitionId'), parameters('location'), parameters('name'))]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalId": "[parameters('policyAssignmentIdentityId')]",
                                        "principalType": "ServicePrincipal"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "policyAssignment"
                      ]
                    },
                    "additionalResourceGroupRoleAssignments": {
                      "copy": {
                        "name": "additionalResourceGroupRoleAssignments",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(and(not(empty(parameters('roleDefinitionIds'))), not(empty(parameters('additionalResourceGroupResourceIDsToAssignRbacTo')))), equals(parameters('identity'), 'SystemAssigned'))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PolicyAssignment-MG-Module-Additional-RBAC-RGs', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionIds')[copyIndex()], parameters('name')))]",
                      "location": "[deployment().location]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "policyAssignmentIdentityId": {
                            "value": "[reference('policyAssignment', '2025-01-01', 'full').identity.principalId]"
                          },
                          "roleDefinitionId": {
                            "value": "[parameters('roleDefinitionIds')[copyIndex()]]"
                          },
                          "resourceGroupResourceIDsToAssignRbacTo": {
                            "value": "[parameters('additionalResourceGroupResourceIDsToAssignRbacTo')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1587977627296299534"
                            }
                          },
                          "parameters": {
                            "resourceGroupResourceIDsToAssignRbacTo": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of additional Resource Group Resource IDs to assign RBAC to for the policy assignment if it has an identity, only supported for Management Group Policy Assignments."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[deployment().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                              }
                            },
                            "policyAssignmentIdentityId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The managed identity principal ID associated with the policy assignment."
                              }
                            }
                          },
                          "resources": [
                            {
                              "copy": {
                                "name": "additionalResourceGroupResourceIDsRoleAssignmentsPerSub",
                                "count": "[length(parameters('resourceGroupResourceIDsToAssignRbacTo'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PolicyAssignment-MG-Module-RBAC-RG-Sub-{1}', uniqueString(deployment().name, parameters('location'), parameters('roleDefinitionId'), parameters('name'), parameters('resourceGroupResourceIDsToAssignRbacTo')[copyIndex()]), substring(split(parameters('resourceGroupResourceIDsToAssignRbacTo')[copyIndex()], '/')[2], 0, 8))]",
                              "subscriptionId": "[split(parameters('resourceGroupResourceIDsToAssignRbacTo')[copyIndex()], '/')[2]]",
                              "resourceGroup": "[split(parameters('resourceGroupResourceIDsToAssignRbacTo')[copyIndex()], '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "policyAssignmentIdentityId": {
                                    "value": "[parameters('policyAssignmentIdentityId')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[parameters('roleDefinitionId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "17794491056080423713"
                                    }
                                  },
                                  "parameters": {
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID Of the Azure Role Definition that is used to assign permissions to the identity. You need to provide the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 24 characters for management group scope."
                                      }
                                    },
                                    "policyAssignmentIdentityId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The managed identity principal ID associated with the policy assignment."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "name": "[guid(resourceGroup().id, parameters('roleDefinitionId'), parameters('location'), parameters('name'))]",
                                      "properties": {
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "principalId": "[parameters('policyAssignmentIdentityId')]",
                                        "principalType": "ServicePrincipal"
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "policyAssignment"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment Name."
                      },
                      "value": "[parameters('name')]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment principal ID."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('policyAssignment', '2025-01-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment resource ID."
                      },
                      "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/policyAssignments', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('policyAssignment', '2025-01-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "policyAssignment_sub": {
              "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PolicyAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "policyDefinitionId": {
                    "value": "[parameters('policyDefinitionId')]"
                  },
                  "displayName": "[if(not(empty(parameters('displayName'))), createObject('value', parameters('displayName')), createObject('value', ''))]",
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "parameters": "[if(not(empty(parameters('parameters'))), createObject('value', parameters('parameters')), createObject('value', createObject()))]",
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "userAssignedIdentityId": {
                    "value": "[parameters('userAssignedIdentityId')]"
                  },
                  "roleDefinitionIds": "[if(not(empty(parameters('roleDefinitionIds'))), createObject('value', parameters('roleDefinitionIds')), createObject('value', createArray()))]",
                  "metadata": "[if(not(empty(parameters('metadata'))), createObject('value', parameters('metadata')), createObject('value', createObject()))]",
                  "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), createObject('value', parameters('nonComplianceMessages')), createObject('value', createArray()))]",
                  "enforcementMode": {
                    "value": "[parameters('enforcementMode')]"
                  },
                  "notScopes": "[if(not(empty(parameters('notScopes'))), createObject('value', parameters('notScopes')), createObject('value', createArray()))]",
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "overrides": "[if(not(empty(parameters('overrides'))), createObject('value', parameters('overrides')), createObject('value', createArray()))]",
                  "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), createObject('value', parameters('resourceSelectors')), createObject('value', createArray()))]",
                  "definitionVersion": {
                    "value": "[parameters('definitionVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1309214929264356674"
                    },
                    "name": "Policy Assignments (Subscription scope)",
                    "description": "This module deploys a Policy Assignment at a Subscription scope."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 64 characters for subscription scope."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This message will be part of response in case of policy violation."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
                      }
                    },
                    "policyDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters for the policy assignment if needed."
                      }
                    },
                    "identity": {
                      "type": "string",
                      "defaultValue": "SystemAssigned",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
                      }
                    },
                    "userAssignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Resource ID for the user assigned identity to assign to the policy assignment."
                      }
                    },
                    "roleDefinitionIds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                      }
                    },
                    "nonComplianceMessages": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
                      }
                    },
                    "enforcementMode": {
                      "type": "string",
                      "defaultValue": "Default",
                      "allowedValues": [
                        "Default",
                        "DoNotEnforce"
                      ],
                      "metadata": {
                        "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce."
                      }
                    },
                    "notScopes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy excluded scopes."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[deployment().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "overrides": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy property value override. Allows changing the effect of a policy definition without modifying the underlying policy definition or using a parameterized effect in the policy definition."
                      }
                    },
                    "resourceSelectors": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The resource selector list to filter policies by resource properties. Facilitates safe deployment practices (SDP) by enabling gradual roll out policy assignments based on factors like resource location, resource type, or whether a resource has a location."
                      }
                    },
                    "definitionVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The policy definition version to use for the policy assignment. If not specified, the latest version of the policy definition will be used. For more information on policy assignment definition versions see https://learn.microsoft.com/azure/governance/policy/concepts/assignment-structure#policy-definition-id-and-version-preview."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. The Target Scope for the Policy. The subscription ID of the subscription for the policy assignment. If not provided, will use the current scope for deployment."
                      }
                    }
                  },
                  "variables": {
                    "identityVar": "[if(equals(parameters('identity'), 'SystemAssigned'), createObject('type', parameters('identity')), if(equals(parameters('identity'), 'UserAssigned'), createObject('type', parameters('identity'), 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), null()))]"
                  },
                  "resources": {
                    "policyAssignment": {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                        "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "policyDefinitionId": "[parameters('policyDefinitionId')]",
                        "parameters": "[parameters('parameters')]",
                        "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), parameters('nonComplianceMessages'), createArray())]",
                        "enforcementMode": "[parameters('enforcementMode')]",
                        "notScopes": "[if(not(empty(parameters('notScopes'))), parameters('notScopes'), createArray())]",
                        "overrides": "[if(not(empty(parameters('overrides'))), parameters('overrides'), createArray())]",
                        "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), parameters('resourceSelectors'), createArray())]",
                        "definitionVersion": "[parameters('definitionVersion')]"
                      },
                      "identity": "[variables('identityVar')]"
                    },
                    "roleAssignment": {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(not(empty(parameters('roleDefinitionIds'))), equals(parameters('identity'), 'SystemAssigned'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), parameters('roleDefinitionIds')[copyIndex()], parameters('location'), parameters('name'))]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionIds')[copyIndex()]]",
                        "principalId": "[reference('policyAssignment', '2025-01-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "policyAssignment"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment Name."
                      },
                      "value": "[parameters('name')]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment principal ID."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('policyAssignment', '2025-01-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment resource ID."
                      },
                      "value": "[subscriptionResourceId('Microsoft.Authorization/policyAssignments', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('policyAssignment', '2025-01-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "policyAssignment_rg": {
              "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-PolicyAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "policyDefinitionId": {
                    "value": "[parameters('policyDefinitionId')]"
                  },
                  "displayName": "[if(not(empty(parameters('displayName'))), createObject('value', parameters('displayName')), createObject('value', ''))]",
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "parameters": "[if(not(empty(parameters('parameters'))), createObject('value', parameters('parameters')), createObject('value', createObject()))]",
                  "identity": {
                    "value": "[parameters('identity')]"
                  },
                  "userAssignedIdentityId": {
                    "value": "[parameters('userAssignedIdentityId')]"
                  },
                  "roleDefinitionIds": "[if(not(empty(parameters('roleDefinitionIds'))), createObject('value', parameters('roleDefinitionIds')), createObject('value', createArray()))]",
                  "metadata": "[if(not(empty(parameters('metadata'))), createObject('value', parameters('metadata')), createObject('value', createObject()))]",
                  "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), createObject('value', parameters('nonComplianceMessages')), createObject('value', createArray()))]",
                  "enforcementMode": {
                    "value": "[parameters('enforcementMode')]"
                  },
                  "notScopes": "[if(not(empty(parameters('notScopes'))), createObject('value', parameters('notScopes')), createObject('value', createArray()))]",
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "overrides": "[if(not(empty(parameters('overrides'))), createObject('value', parameters('overrides')), createObject('value', createArray()))]",
                  "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), createObject('value', parameters('resourceSelectors')), createObject('value', createArray()))]",
                  "definitionVersion": {
                    "value": "[parameters('definitionVersion')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "11388691241992820794"
                    },
                    "name": "Policy Assignments (Resource Group scope)",
                    "description": "This module deploys a Policy Assignment at a Resource Group scope."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 64,
                      "metadata": {
                        "description": "Required. Specifies the name of the policy assignment. Maximum length is 64 characters for resource group scope."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. This message will be part of response in case of policy violation."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "defaultValue": "",
                      "maxLength": 128,
                      "metadata": {
                        "description": "Optional. The display name of the policy assignment. Maximum length is 128 characters."
                      }
                    },
                    "policyDefinitionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Specifies the ID of the policy definition or policy set definition being assigned."
                      }
                    },
                    "parameters": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Parameters for the policy assignment if needed."
                      }
                    },
                    "identity": {
                      "type": "string",
                      "defaultValue": "SystemAssigned",
                      "allowedValues": [
                        "SystemAssigned",
                        "UserAssigned",
                        "None"
                      ],
                      "metadata": {
                        "description": "Optional. The managed identity associated with the policy assignment. Policy assignments must include a resource identity when assigning 'Modify' policy definitions."
                      }
                    },
                    "userAssignedIdentityId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The Resource ID for the user assigned identity to assign to the policy assignment."
                      }
                    },
                    "roleDefinitionIds": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The IDs Of the Azure Role Definition list that is used to assign permissions to the identity. You need to provide either the fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'.. See https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles for the list IDs for built-in Roles. They must match on what is on the policy definition."
                      }
                    },
                    "metadata": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The policy assignment metadata. Metadata is an open ended object and is typically a collection of key-value pairs."
                      }
                    },
                    "nonComplianceMessages": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The messages that describe why a resource is non-compliant with the policy."
                      }
                    },
                    "enforcementMode": {
                      "type": "string",
                      "defaultValue": "Default",
                      "allowedValues": [
                        "Default",
                        "DoNotEnforce"
                      ],
                      "metadata": {
                        "description": "Optional. The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. - Default or DoNotEnforce."
                      }
                    },
                    "notScopes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy excluded scopes."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "overrides": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The policy property value override. Allows changing the effect of a policy definition without modifying the underlying policy definition or using a parameterized effect in the policy definition."
                      }
                    },
                    "resourceSelectors": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The resource selector list to filter policies by resource properties. Facilitates safe deployment practices (SDP) by enabling gradual roll out policy assignments based on factors like resource location, resource type, or whether a resource has a location."
                      }
                    },
                    "definitionVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The policy definition version to use for the policy assignment. If not specified, the latest version of the policy definition will be used. For more information on policy assignment definition versions see https://learn.microsoft.com/azure/governance/policy/concepts/assignment-structure#policy-definition-id-and-version-preview."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. The Target Scope for the Policy. The subscription ID of the subscription for the policy assignment. If not provided, will use the current scope for deployment."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. The Target Scope for the Policy. The name of the resource group for the policy assignment. If not provided, will use the current scope for deployment."
                      }
                    }
                  },
                  "variables": {
                    "identityVar": "[if(equals(parameters('identity'), 'SystemAssigned'), createObject('type', parameters('identity')), if(equals(parameters('identity'), 'UserAssigned'), createObject('type', parameters('identity'), 'userAssignedIdentities', createObject(format('{0}', parameters('userAssignedIdentityId')), createObject())), null()))]"
                  },
                  "resources": {
                    "policyAssignment": {
                      "type": "Microsoft.Authorization/policyAssignments",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), null())]",
                        "metadata": "[if(not(empty(parameters('metadata'))), parameters('metadata'), null())]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "policyDefinitionId": "[parameters('policyDefinitionId')]",
                        "parameters": "[parameters('parameters')]",
                        "nonComplianceMessages": "[if(not(empty(parameters('nonComplianceMessages'))), parameters('nonComplianceMessages'), createArray())]",
                        "enforcementMode": "[parameters('enforcementMode')]",
                        "notScopes": "[if(not(empty(parameters('notScopes'))), parameters('notScopes'), createArray())]",
                        "overrides": "[if(not(empty(parameters('overrides'))), parameters('overrides'), createArray())]",
                        "resourceSelectors": "[if(not(empty(parameters('resourceSelectors'))), parameters('resourceSelectors'), createArray())]",
                        "definitionVersion": "[parameters('definitionVersion')]"
                      },
                      "identity": "[variables('identityVar')]"
                    },
                    "roleAssignment": {
                      "copy": {
                        "name": "roleAssignment",
                        "count": "[length(parameters('roleDefinitionIds'))]"
                      },
                      "condition": "[and(not(empty(parameters('roleDefinitionIds'))), equals(parameters('identity'), 'SystemAssigned'))]",
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), parameters('roleDefinitionIds')[copyIndex()], parameters('location'), parameters('name'))]",
                      "properties": {
                        "roleDefinitionId": "[parameters('roleDefinitionIds')[copyIndex()]]",
                        "principalId": "[reference('policyAssignment', '2025-01-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      },
                      "dependsOn": [
                        "policyAssignment"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment Name."
                      },
                      "value": "[parameters('name')]"
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment principal ID."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('policyAssignment', '2025-01-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Policy Assignment resource ID."
                      },
                      "value": "[resourceId('Microsoft.Authorization/policyAssignments', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the policy was assigned to."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('policyAssignment', '2025-01-01', 'full').location]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Policy Assignment Name."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference('policyAssignment_mg').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference('policyAssignment_sub').outputs.name.value, reference('policyAssignment_rg').outputs.name.value))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Policy Assignment principal ID."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference('policyAssignment_mg').outputs.principalId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference('policyAssignment_sub').outputs.principalId.value, reference('policyAssignment_rg').outputs.principalId.value))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Policy Assignment resource ID."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference('policyAssignment_mg').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference('policyAssignment_sub').outputs.resourceId.value, reference('policyAssignment_rg').outputs.resourceId.value))]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference('policyAssignment_mg').outputs.location.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference('policyAssignment_sub').outputs.location.value, reference('policyAssignment_rg').outputs.location.value))]"
            }
          }
        }
      },
      "dependsOn": [
        "mg",
        "mgCustomPolicyDefinitions",
        "mgCustomPolicySetDefinitions",
        "mgPolicyAssignmentsWait"
      ]
    },
    "mgRoleDefinitionsWait": {
      "copy": {
        "name": "mgRoleDefinitionsWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforeCustomRoleDefinitions')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforeCustomRoleDefinitions'), 0), not(empty(parameters('managementGroupCustomRoleDefinitions'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgRoleDefinitionsWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgRoleDefinitions": {
      "copy": {
        "name": "mgRoleDefinitions",
        "count": "[length(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-{1}', variables('deploymentNames').mgRoleDefinitions, uniqueString(parameters('managementGroupName'), coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()].name)), 64)]",
      "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupName'))]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()].name]"
          },
          "roleName": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'roleName')]"
          },
          "description": {
            "value": "[coalesce(tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'description'), '')]"
          },
          "assignableScopes": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'assignableScopes')]"
          },
          "actions": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'actions')]"
          },
          "notActions": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'notActions')]"
          },
          "dataActions": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'dataActions')]"
          },
          "notDataActions": {
            "value": "[tryGet(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray())[copyIndex()], 'notDataActions')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "11771591169360468159"
            },
            "name": "avm/ptn/authorization/role-definition",
            "description": "This module deploys a custom role definition to a Management Group."
          },
          "parameters": {
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. The location of the telemetry deployment to be created. Default is location of deployment."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the custom role definition."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of the custom role definition."
              }
            },
            "assignableScopes": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The assignable scopes of the custom role definition. If not specified, the management group being targeted in the parameter managementGroupName will be used."
              }
            },
            "actions": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The permission actions of the custom role definition."
              }
            },
            "notActions": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The permission not actions of the custom role definition."
              }
            },
            "dataActions": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The permission data actions of the custom role definition."
              }
            },
            "notDataActions": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The permission not data actions of the custom role definition."
              }
            },
            "roleName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The display name of the custom role definition. If not specified, the name will be used."
              }
            }
          },
          "variables": {
            "roleDefNameFinalGuid": "[if(and(and(contains(parameters('name'), '-'), equals(length(parameters('name')), 36)), equals(length(split(parameters('name'), '-')), 5)), parameters('name'), guid(parameters('name')))]"
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.ptn.authorization-roledefinition.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "location": "[parameters('location')]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "res_roleDefinition_mg": {
              "type": "Microsoft.Authorization/roleDefinitions",
              "apiVersion": "2022-05-01-preview",
              "name": "[variables('roleDefNameFinalGuid')]",
              "properties": {
                "roleName": "[coalesce(parameters('roleName'), variables('roleDefNameFinalGuid'))]",
                "description": "[parameters('description')]",
                "type": "CustomRole",
                "assignableScopes": "[if(not(empty(parameters('assignableScopes'))), parameters('assignableScopes'), createArray(managementGroup().id))]",
                "permissions": [
                  {
                    "actions": "[coalesce(parameters('actions'), createArray())]",
                    "notActions": "[coalesce(parameters('notActions'), createArray())]",
                    "dataActions": "[coalesce(parameters('dataActions'), createArray())]",
                    "notDataActions": "[coalesce(parameters('notDataActions'), createArray())]"
                  }
                ]
              }
            }
          },
          "outputs": {
            "managementGroupCustomRoleDefinitionIds": {
              "type": "object",
              "metadata": {
                "description": "An object containing the resourceId, roleDefinitionId, and displayName of the custom role definition."
              },
              "value": {
                "resourceId": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleDefinitions', variables('roleDefNameFinalGuid'))]",
                "roleDefinitionIdName": "[variables('roleDefNameFinalGuid')]",
                "displayName": "[reference('res_roleDefinition_mg').roleName]"
              }
            },
            "roleDefinitionIdName": {
              "type": "string",
              "metadata": {
                "description": "The ID/name of the custom role definition created."
              },
              "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleDefinitions', variables('roleDefNameFinalGuid'))]"
            }
          }
        }
      },
      "dependsOn": [
        "mgRoleDefinitionsWait"
      ]
    },
    "mgRoleAssignmentsWait": {
      "copy": {
        "name": "mgRoleAssignmentsWait",
        "count": "[length(range(0, parameters('waitForConsistencyCounterBeforeRoleAssignments')))]",
        "mode": "serial",
        "batchSize": 1
      },
      "condition": "[and(greater(parameters('waitForConsistencyCounterBeforeRoleAssignments'), 0), not(empty(variables('formattedRoleAssignments'))))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', variables('deploymentNames').mgRoleAssignmentsWait, copyIndex())]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "7098678057241875925"
            },
            "name": "avm/ptn/alz/empty/wait",
            "description": "Azure Landing Zones - Bicep - Empty - Wait Module\n\nThis module is used to create sequential empty/blank ARM deployments to introuce an artificial wait between deployments in the pattern module. When the `wait()` and `retry()` functions become available in GA in Bicep, this approach will be deprecated and we will migrate to using those functions instead.\n"
          },
          "resources": []
        }
      }
    },
    "mgRoleAssignments": {
      "copy": {
        "name": "mgRoleAssignments",
        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-{1}', variables('deploymentNames').mgRoleAssignments, uniqueString(parameters('managementGroupName'), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId)), 64)]",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "managementGroupId": "[if(parameters('createOrUpdateManagementGroup'), createObject('value', reference('mg').outputs.name.value), createObject('value', parameters('managementGroupName')))]",
          "principalId": {
            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
          },
          "roleDefinitionIdOrName": {
            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
          },
          "description": {
            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
          },
          "principalType": {
            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
          },
          "condition": {
            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
          },
          "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
          "delegatedManagedIdentityResourceId": {
            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "15934868457214952424"
            },
            "name": "Role Assignments (All scopes)",
            "description": "This module deploys a Role Assignment at a Management Group, Subscription or Resource Group scope."
          },
          "parameters": {
            "roleDefinitionIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
              }
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
              }
            },
            "resourceGroupName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of the Resource Group to assign the RBAC role to. If Resource Group name is provided, and Subscription ID is provided, the module deploys at resource group level, therefore assigns the provided RBAC role to the resource group."
              }
            },
            "subscriptionId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If no Resource Group name is provided, the module deploys at subscription level, therefore assigns the provided RBAC role to the subscription."
              }
            },
            "managementGroupId": {
              "type": "string",
              "defaultValue": "[managementGroup().name]",
              "metadata": {
                "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[deployment().location]",
              "metadata": {
                "description": "Optional. Location deployment metadata."
              }
            },
            "description": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The description of the role assignment."
              }
            },
            "delegatedManagedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the delegated managed identity resource."
              }
            },
            "condition": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
              }
            },
            "conditionVersion": {
              "type": "string",
              "defaultValue": "2.0",
              "allowedValues": [
                "2.0"
              ],
              "metadata": {
                "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
              }
            },
            "principalType": {
              "type": "string",
              "defaultValue": "",
              "allowedValues": [
                "ServicePrincipal",
                "Group",
                "User",
                "ForeignGroup",
                "Device",
                ""
              ],
              "metadata": {
                "description": "Optional. The principal type of the assigned principal ID."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": [
            {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.ptn.authorization-roleassignment.{0}.{1}', replace('0.2.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              },
              "location": "[parameters('location')]"
            },
            {
              "condition": "[and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))]",
              "scope": "[format('Microsoft.Management/managementGroups/{0}', parameters('managementGroupId'))]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleDefinitionIdOrName')]"
                  },
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "managementGroupId": {
                    "value": "[parameters('managementGroupId')]"
                  },
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                  "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                  "conditionVersion": {
                    "value": "[parameters('conditionVersion')]"
                  },
                  "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "2146197675736538693"
                    },
                    "name": "Role Assignments (Management Group scope)",
                    "description": "This module deploys a Role Assignment at a Management Group scope."
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "managementGroupId": {
                      "type": "string",
                      "defaultValue": "[managementGroup().name]",
                      "metadata": {
                        "description": "Optional. Group ID of the Management Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Resource Policy Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                      "Management Group Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ac63b705-f282-497d-ac71-919bf39d939d')]"
                    },
                    "roleDefinitionIdVar": "[coalesce(tryGet(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[extensionResourceId(managementGroup().id, 'Microsoft.Authorization/roleAssignments', guid(parameters('managementGroupId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[resourceId('Microsoft.Management/managementGroups', parameters('managementGroupId'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "location": "[deployment().location]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleDefinitionIdOrName')]"
                  },
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                  "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                  "conditionVersion": {
                    "value": "[parameters('conditionVersion')]"
                  },
                  "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "18268822790511715012"
                    },
                    "name": "Role Assignments (Subscription scope)",
                    "description": "This module deploys a Role Assignment at a Subscription scope."
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "defaultValue": "",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "roleDefinitionIdVar": "[coalesce(tryGet(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[subscriptionResourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                    },
                    "subscriptionName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at."
                      },
                      "value": "[subscription().displayName]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[subscription().id]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[and(not(empty(parameters('resourceGroupName'))), not(empty(parameters('subscriptionId'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))]",
              "subscriptionId": "[parameters('subscriptionId')]",
              "resourceGroup": "[parameters('resourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "roleDefinitionIdOrName": {
                    "value": "[parameters('roleDefinitionIdOrName')]"
                  },
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  },
                  "subscriptionId": {
                    "value": "[parameters('subscriptionId')]"
                  },
                  "resourceGroupName": {
                    "value": "[parameters('resourceGroupName')]"
                  },
                  "description": "[if(not(empty(parameters('description'))), createObject('value', parameters('description')), createObject('value', ''))]",
                  "principalType": "[if(not(empty(parameters('principalType'))), createObject('value', parameters('principalType')), createObject('value', ''))]",
                  "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), createObject('value', parameters('delegatedManagedIdentityResourceId')), createObject('value', ''))]",
                  "conditionVersion": {
                    "value": "[parameters('conditionVersion')]"
                  },
                  "condition": "[if(not(empty(parameters('condition'))), createObject('value', parameters('condition')), createObject('value', ''))]"
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "8200662209265445642"
                    },
                    "name": "Role Assignments (Resource Group scope)",
                    "description": "This module deploys a Role Assignment at a Resource Group scope."
                  },
                  "parameters": {
                    "roleDefinitionIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. You can provide either the display name of the role definition (must be configured in the variable `builtInRoleNames`), or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                      }
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Optional. Name of the Resource Group to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "subscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Optional. Subscription ID of the subscription to assign the RBAC role to. If not provided, will use the current scope for deployment."
                      }
                    },
                    "description": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The description of the role assignment."
                      }
                    },
                    "delegatedManagedIdentityResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. ID of the delegated managed identity resource."
                      }
                    },
                    "condition": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to."
                      }
                    },
                    "conditionVersion": {
                      "type": "string",
                      "defaultValue": "2.0",
                      "allowedValues": [
                        "2.0"
                      ],
                      "metadata": {
                        "description": "Optional. Version of the condition. Currently accepted value is \"2.0\"."
                      }
                    },
                    "principalType": {
                      "type": "string",
                      "allowedValues": [
                        "ServicePrincipal",
                        "Group",
                        "User",
                        "ForeignGroup",
                        "Device",
                        ""
                      ],
                      "metadata": {
                        "description": "Optional. The principal type of the assigned principal ID."
                      }
                    }
                  },
                  "variables": {
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    },
                    "roleDefinitionIdVar": "[coalesce(tryGet(variables('builtInRoleNames'), parameters('roleDefinitionIdOrName')), parameters('roleDefinitionIdOrName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "name": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]",
                      "properties": {
                        "roleDefinitionId": "[variables('roleDefinitionIdVar')]",
                        "principalId": "[parameters('principalId')]",
                        "description": "[if(not(empty(parameters('description'))), parameters('description'), null())]",
                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]",
                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The GUID of the Role Assignment."
                      },
                      "value": "[guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId'))]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Role Assignment."
                      },
                      "value": "[resourceId('Microsoft.Authorization/roleAssignments', guid(parameters('subscriptionId'), parameters('resourceGroupName'), variables('roleDefinitionIdVar'), parameters('principalId')))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the role assignment was applied at."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "scope": {
                      "type": "string",
                      "metadata": {
                        "description": "The scope this Role Assignment applies to."
                      },
                      "value": "[resourceGroup().id]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The GUID of the Role Assignment."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.name.value))]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Role Assignment."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.resourceId.value))]"
            },
            "scope": {
              "type": "string",
              "metadata": {
                "description": "The scope this Role Assignment applies to."
              },
              "value": "[if(and(empty(parameters('subscriptionId')), empty(parameters('resourceGroupName'))), reference(extensionResourceId(tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupId')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-MG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, if(and(not(empty(parameters('subscriptionId'))), empty(parameters('resourceGroupName'))), reference(subscriptionResourceId(parameters('subscriptionId'), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-Sub-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value, reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('subscriptionId'), parameters('resourceGroupName')), 'Microsoft.Resources/deployments', format('{0}-RoleAssignment-RG-Module', uniqueString(deployment().name, parameters('location')))), '2022-09-01').outputs.scope.value))]"
            }
          }
        }
      },
      "dependsOn": [
        "mg",
        "mgRoleAssignmentsWait",
        "mgRoleDefinitions"
      ]
    }
  },
  "outputs": {
    "managementGroupResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the management group."
      },
      "value": "[if(parameters('createOrUpdateManagementGroup'), reference('mg').outputs.resourceId.value, tenantResourceId('Microsoft.Management/managementGroups', parameters('managementGroupName')))]"
    },
    "managementGroupId": {
      "type": "string",
      "metadata": {
        "description": "The ID of the management group."
      },
      "value": "[if(parameters('createOrUpdateManagementGroup'), reference('mg').outputs.name.value, parameters('managementGroupName'))]"
    },
    "managementGroupParentId": {
      "type": "string",
      "metadata": {
        "description": "The parent management group ID of the management group."
      },
      "value": "[if(parameters('createOrUpdateManagementGroup'), coalesce(parameters('managementGroupParentId'), tenant().tenantId), reference('mgExisting').details.parent.id)]"
    },
    "managementGroupCustomRoleDefinitionIds": {
      "type": "array",
      "metadata": {
        "description": "The custom role definitions created on the management group."
      },
      "copy": {
        "count": "[length(coalesce(parameters('managementGroupCustomRoleDefinitions'), createArray()))]",
        "input": {
          "resourceId": "[reference(format('mgRoleDefinitions[{0}]', copyIndex())).outputs.managementGroupCustomRoleDefinitionIds.value.resourceId]",
          "roleDefinitionId": "[reference(format('mgRoleDefinitions[{0}]', copyIndex())).outputs.managementGroupCustomRoleDefinitionIds.value.roleDefinitionIdName]",
          "displayName": "[reference(format('mgRoleDefinitions[{0}]', copyIndex())).outputs.managementGroupCustomRoleDefinitionIds.value.displayName]"
        }
      }
    }
  }
}