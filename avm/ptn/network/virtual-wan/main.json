{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.35.1.17967",
      "templateHash": "9860383058203964667"
    },
    "name": "Azure Virtual WAN",
    "description": "This pattern will create a Virtual WAN and optionally create Virtual Hubs, Azure Firewalls, and VPN/ExpressRoute Gateways."
  },
  "definitions": {
    "virtualWanParameterType": {
      "type": "object",
      "properties": {
        "virtualWanName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the Virtual WAN."
          }
        },
        "location": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Azure region where the Virtual WAN will be created. Defaults to the resource group location if not specified."
          }
        },
        "allowBranchToBranchTraffic": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether to allow branch-to-branch traffic within the Virtual WAN."
          }
        },
        "allowVnetToVnetTraffic": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether to allow VNet-to-VNet traffic within the Virtual WAN."
          }
        },
        "disableVpnEncryption": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Whether to disable VPN encryption for the Virtual WAN."
          }
        },
        "lock": {
          "$ref": "#/definitions/lockType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Lock settings for the Virtual WAN and associated resources."
          }
        },
        "p2sVpnParameters": {
          "type": "object",
          "properties": {
            "createP2sVpnServerConfiguration": {
              "type": "bool",
              "metadata": {
                "description": "Required. Whether to create a new P2S VPN server configuration."
              }
            },
            "p2sVpnServerConfigurationName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the P2S VPN server configuration."
              }
            },
            "aadAudience": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure AD audience for VPN authentication."
              }
            },
            "aadIssuer": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure AD issuer for VPN authentication."
              }
            },
            "aadTenant": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Azure AD tenant for VPN authentication."
              }
            },
            "p2sConfigurationPolicyGroups": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Policy groups for P2S VPN configuration."
              }
            },
            "radiusClientRootCertificates": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of RADIUS client root certificates."
              }
            },
            "radiusServerAddress": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. RADIUS server address."
              }
            },
            "radiusServerRootCertificates": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of RADIUS server root certificates."
              }
            },
            "radiusServerSecret": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. RADIUS server secret."
              }
            },
            "radiusServers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of RADIUS servers."
              }
            },
            "vpnAuthenticationTypes": {
              "type": "array",
              "prefixItems": [
                {
                  "type": "string",
                  "allowedValues": [
                    "AAD",
                    "Certificate",
                    "Radius"
                  ]
                }
              ],
              "items": false,
              "nullable": true,
              "metadata": {
                "description": "Optional. VPN authentication types supported."
              }
            },
            "vpnClientIpsecPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vpnClientIpsecPoliciesType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of VPN client IPsec policies."
              }
            },
            "vpnClientRevokedCertificates": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of revoked VPN client certificates."
              }
            },
            "vpnClientRootCertificates": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of VPN client root certificates."
              }
            },
            "vpnProtocols": {
              "type": "string",
              "allowedValues": [
                "IkeV2",
                "OpenVPN"
              ],
              "nullable": true,
              "metadata": {
                "description": "Optional. Supported VPN protocols."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. Point-to-site VPN server configuration parameters for the Virtual WAN."
          }
        },
        "roleAssignments": {
          "$ref": "#/definitions/roleAssignmentType",
          "nullable": true,
          "metadata": {
            "description": "Optional. Role assignments to be applied to the Virtual WAN."
          }
        },
        "tags": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Tags to be applied to the Virtual WAN."
          }
        },
        "type": {
          "type": "string",
          "allowedValues": [
            "Basic",
            "Standard"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. The type of Virtual WAN. Allowed values are Standard or Basic."
          }
        }
      },
      "metadata": {
        "description": "Required. The parameters required to create a Virtual WAN."
      }
    },
    "virtualHubParameterType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "hubName": {
            "type": "string",
            "metadata": {
              "description": "Required. The name of the Virtual Hub."
            }
          },
          "hubLocation": {
            "type": "string",
            "metadata": {
              "description": "Required. The Azure region where the Virtual Hub will be created."
            }
          },
          "hubAddressPrefix": {
            "type": "string",
            "metadata": {
              "description": "Required. The address prefix for the Virtual Hub."
            }
          },
          "allowBranchToBranchTraffic": {
            "type": "bool",
            "nullable": true,
            "metadata": {
              "description": "Optional. Whether to allow branch-to-branch traffic within the Virtual Hub."
            }
          },
          "hubRoutingPreference": {
            "type": "string",
            "allowedValues": [
              "ASPath",
              "ExpressRoute",
              "VpnGateway"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The routing preference for the Virtual Hub."
            }
          },
          "hubRouteTables": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/hubRouteTableType"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The route tables for the Virtual Hub."
            }
          },
          "hubVirtualNetworkConnections": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/hubVirtualNetworkConnectionType"
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. The virtual network connections for the Virtual Hub."
            }
          },
          "p2sVpnParameters": {
            "type": "object",
            "properties": {
              "customDnsServers": {
                "type": "array",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Custom DNS servers for the P2S VPN Gateway."
                }
              },
              "deployP2SVpnGateway": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Whether to deploy a P2S VPN Gateway."
                }
              },
              "enableInternetSecurity": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable internet security for the P2S VPN Gateway."
                }
              },
              "inboundRouteMapResourceId": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Resource ID of the inbound route map."
                }
              },
              "isRoutingPreferenceInternet": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Whether routing preference is internet."
                }
              },
              "outboundRouteMapResourceId": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Resource ID of the outbound route map."
                }
              },
              "propagatedLabelNames": {
                "type": "array",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Names of propagated labels."
                }
              },
              "propagatedRouteTableNames": {
                "type": "array",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Names of propagated route tables."
                }
              },
              "vnetRoutesStaticRoutes": {
                "$ref": "#/definitions/vnetRoutesStaticRoutesType",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Static routes for VNet routes."
                }
              },
              "vpnGatewayName": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of the VPN Gateway."
                }
              },
              "vpnClientAddressPoolAddressPrefixes": {
                "type": "array",
                "metadata": {
                  "description": "Required. Address prefixes for the VPN client address pool."
                }
              },
              "connectionConfigurationsName": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of the connection configurations."
                }
              },
              "vpnGatewayScaleUnit": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Scale unit for the VPN Gateway."
                }
              },
              "vpnGatewayAssociatedRouteTable": {
                "type": "string",
                "allowedValues": [
                  "defaultRouteTable",
                  "noneRouteTable"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. Associated route table for the VPN Gateway."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Point-to-site VPN parameters for the Virtual Hub."
            }
          },
          "s2sVpnParameters": {
            "type": "object",
            "properties": {
              "deployS2SVpnGateway": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Whether to deploy a S2S VPN Gateway."
                }
              },
              "vpnGatewayName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of the VPN Gateway."
                }
              },
              "vpnGatewayScaleUnit": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Scale unit for the VPN Gateway."
                }
              },
              "bgpSettings": {
                "type": "object",
                "properties": {
                  "asn": {
                    "type": "int",
                    "metadata": {
                      "description": "Required. ASN for BGP."
                    }
                  },
                  "bgpPeeringAddress": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. BGP peering address."
                    }
                  },
                  "bgpPeeringAddresses": {
                    "type": "array",
                    "prefixItems": [
                      {
                        "type": "object",
                        "properties": {
                          "customBgpIpAddresses": {
                            "type": "array",
                            "prefixItems": [
                              {
                                "type": "string"
                              }
                            ],
                            "items": false,
                            "metadata": {
                              "description": "Required. Custom BGP IP addresses."
                            }
                          },
                          "ipconfigurationId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. IP configuration ID."
                            }
                          }
                        }
                      }
                    ],
                    "items": false,
                    "metadata": {
                      "description": "Required. BGP peering addresses."
                    }
                  },
                  "peerWeight": {
                    "type": "int",
                    "metadata": {
                      "description": "Required. Peer weight for BGP."
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. BGP settings for the VPN Gateway."
                }
              },
              "enableBgpRouteTranslationForNat": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable BGP route translation for NAT."
                }
              },
              "isRoutingPreferenceInternet": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Whether routing preference is internet."
                }
              },
              "lock": {
                "$ref": "#/definitions/lockType",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Lock settings for the VPN Gateway."
                }
              },
              "natRules": {
                "type": "array",
                "prefixItems": [
                  {
                    "type": "object",
                    "properties": {
                      "externalMappings": {
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "object",
                            "properties": {
                              "addressSpace": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Address space for external mapping."
                                }
                              }
                            }
                          }
                        ],
                        "items": false,
                        "metadata": {
                          "description": "Required. External mappings for NAT rule."
                        }
                      },
                      "internalMappings": {
                        "type": "array",
                        "prefixItems": [
                          {
                            "type": "object",
                            "properties": {
                              "addressSpace": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Address space for internal mapping."
                                }
                              }
                            }
                          }
                        ],
                        "items": false,
                        "metadata": {
                          "description": "Required. Internal mappings for NAT rule."
                        }
                      },
                      "mode": {
                        "type": "string",
                        "allowedValues": [
                          "EgressSnat",
                          "IngressSnat"
                        ],
                        "metadata": {
                          "description": "Required. Mode for NAT rule."
                        }
                      },
                      "name": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of the NAT rule."
                        }
                      },
                      "type": {
                        "type": "string",
                        "allowedValues": [
                          "Dynamic",
                          "Static"
                        ],
                        "metadata": {
                          "description": "Required. Type of NAT rule."
                        }
                      }
                    }
                  }
                ],
                "items": false,
                "nullable": true,
                "metadata": {
                  "description": "Optional. NAT rules for the VPN Gateway."
                }
              },
              "vpnConnections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the VPN connection."
                      }
                    },
                    "vpnGatewayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the VPN Gateway."
                      }
                    },
                    "connectionBandwidth": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Connection bandwidth."
                      }
                    },
                    "enableBgp": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable BGP for the connection."
                      }
                    },
                    "enableInternetSecurity": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable internet security for the connection."
                      }
                    },
                    "remoteVpnSiteResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the remote VPN site."
                      }
                    },
                    "enableRateLimiting": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable rate limiting."
                      }
                    },
                    "routingConfiguration": {
                      "type": "object",
                      "properties": {},
                      "metadata": {
                        "description": "Optional. Routing configuration for the connection."
                      }
                    },
                    "routingWeight": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Routing weight for the connection."
                      }
                    },
                    "sharedKey": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Shared key for the connection."
                      }
                    },
                    "useLocalAzureIpAddress": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Use local Azure IP address."
                      }
                    },
                    "usePolicyBasedTrafficSelectors": {
                      "type": "bool",
                      "metadata": {
                        "description": "Required. Use policy-based traffic selectors."
                      }
                    },
                    "vpnConnectionProtocolType": {
                      "type": "string",
                      "allowedValues": [
                        "IKEv1",
                        "IKEv2"
                      ],
                      "metadata": {
                        "description": "Required. VPN connection protocol type."
                      }
                    },
                    "ipsecPolicies": {
                      "type": "array",
                      "prefixItems": [],
                      "items": false,
                      "metadata": {
                        "description": "Optional. IPsec policies for the connection."
                      }
                    },
                    "trafficSelectorPolicies": {
                      "type": "array",
                      "prefixItems": [],
                      "items": false,
                      "metadata": {
                        "description": "Optional. Traffic selector policies for the connection."
                      }
                    },
                    "vpnLinkConnections": {
                      "type": "array",
                      "prefixItems": [],
                      "items": false,
                      "metadata": {
                        "description": "Optional. VPN link connections for the connection."
                      }
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. VPN connections for the VPN Gateway."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Site-to-site VPN parameters for the Virtual Hub."
            }
          },
          "expressRouteParameters": {
            "type": "object",
            "properties": {
              "deployExpressRouteGateway": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Whether to deploy an ExpressRoute Gateway."
                }
              },
              "expressRouteGatewayName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of the ExpressRoute Gateway."
                }
              },
              "allowNonVirtualWanTraffic": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Allow non-Virtual WAN traffic."
                }
              },
              "autoScaleConfigurationBoundsMin": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Minimum bound for autoscale configuration."
                }
              },
              "autoScaleConfigurationBoundsMax": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Maximum bound for autoscale configuration."
                }
              },
              "expressRouteConnections": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the ExpressRoute connection."
                      }
                    },
                    "connectionBandwidth": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Connection bandwidth."
                      }
                    },
                    "enableBgp": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable BGP for the connection."
                      }
                    },
                    "enableInternetSecurity": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable internet security for the connection."
                      }
                    },
                    "expressRouteCircuitId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the ExpressRoute circuit."
                      }
                    },
                    "routingIntent": {
                      "$ref": "#/definitions/routingIntentType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Routing intent for the connection."
                      }
                    },
                    "enableRateLimiting": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable rate limiting."
                      }
                    },
                    "routingWeight": {
                      "type": "int",
                      "metadata": {
                        "description": "Required. Routing weight for the connection."
                      }
                    },
                    "sharedKey": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Shared key for the connection."
                      }
                    },
                    "usePolicyBasedTrafficSelectors": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Use policy-based traffic selectors."
                      }
                    },
                    "ipsecPolicies": {
                      "type": "array",
                      "prefixItems": [],
                      "items": false,
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. IPsec policies for the connection."
                      }
                    },
                    "trafficSelectorPolicies": {
                      "type": "array",
                      "prefixItems": [],
                      "items": false,
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Traffic selector policies for the connection."
                      }
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. ExpressRoute connections."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. ExpressRoute parameters for the Virtual Hub."
            }
          },
          "secureHubParameters": {
            "type": "object",
            "properties": {
              "deploySecureHub": {
                "type": "bool",
                "metadata": {
                  "description": "Required. Whether to deploy a Secure Hub."
                }
              },
              "firewallPolicyResourceId": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Resource ID of the firewall policy."
                }
              },
              "azureFirewallName": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of the Azure Firewall."
                }
              },
              "azureFirewallSku": {
                "type": "string",
                "allowedValues": [
                  "Basic",
                  "Premium",
                  "Standard"
                ],
                "nullable": true,
                "metadata": {
                  "description": "Optional. SKU for the Azure Firewall."
                }
              },
              "azureFirewallPublicIPCount": {
                "type": "int",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Number of public IPs for the Azure Firewall."
                }
              },
              "publicIPAddressObject": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the public IP address."
                    }
                  },
                  "publicIPAllocationMethod": {
                    "type": "string",
                    "allowedValues": [
                      "Static"
                    ],
                    "metadata": {
                      "description": "Required. Allocation method for the public IP address."
                    }
                  },
                  "publicIPPrefixResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the public IP prefix."
                    }
                  },
                  "skuName": {
                    "type": "string",
                    "allowedValues": [
                      "Standard"
                    ],
                    "metadata": {
                      "description": "Required. SKU name for the public IP address."
                    }
                  },
                  "skuTier": {
                    "type": "string",
                    "allowedValues": [
                      "Regional"
                    ],
                    "metadata": {
                      "description": "Required. SKU tier for the public IP address."
                    }
                  }
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. Public IP address object for the Azure Firewall."
                }
              },
              "publicIPResourceID": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Resource ID of the public IP address."
                }
              },
              "additionalPublicIpConfigurationResourceIds": {
                "type": "array",
                "prefixItems": [],
                "items": false,
                "nullable": true,
                "metadata": {
                  "description": "Optional. Additional public IP configuration resource IDs."
                }
              },
              "diagnosticSettings": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/diagnosticSettingFullType"
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. Diagnostic settings for the Azure Firewall in the Secure Hub."
                }
              }
            },
            "nullable": true,
            "metadata": {
              "description": "Optional. Secure Hub parameters for the Virtual Hub."
            }
          },
          "sku": {
            "type": "string",
            "allowedValues": [
              "Basic",
              "Standard"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. SKU for the Virtual Hub."
            }
          },
          "tags": {
            "type": "object",
            "nullable": true,
            "metadata": {
              "description": "Optional. Tags to be applied to the Virtual Hub."
            }
          },
          "virtualRouterAsn": {
            "type": "int",
            "nullable": true,
            "metadata": {
              "description": "Optional. ASN for the Virtual Router."
            }
          },
          "virtualRouterIps": {
            "type": "array",
            "nullable": true,
            "metadata": {
              "description": "Optional. IP addresses for the Virtual Router."
            }
          }
        }
      },
      "metadata": {
        "description": "Required. The parameters required to create a Virtual Hub."
      }
    },
    "roleAssignmentType": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
            }
          },
          "roleDefinitionIdOrName": {
            "type": "string",
            "metadata": {
              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
            }
          },
          "principalId": {
            "type": "string",
            "metadata": {
              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
            }
          },
          "principalType": {
            "type": "string",
            "allowedValues": [
              "Device",
              "ForeignGroup",
              "Group",
              "ServicePrincipal",
              "User"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. The principal type of the assigned principal ID."
            }
          },
          "description": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The description of the role assignment."
            }
          },
          "condition": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
            }
          },
          "conditionVersion": {
            "type": "string",
            "allowedValues": [
              "2.0"
            ],
            "nullable": true,
            "metadata": {
              "description": "Optional. Version of the condition."
            }
          },
          "delegatedManagedIdentityResourceId": {
            "type": "string",
            "nullable": true,
            "metadata": {
              "description": "Optional. The Resource Id of the delegated managed identity resource."
            }
          }
        }
      },
      "nullable": true
    },
    "diagnosticSettingFullType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the diagnostic setting."
          }
        },
        "logCategoriesAndGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                }
              },
              "categoryGroup": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
          }
        },
        "metricCategories": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "category": {
                "type": "string",
                "metadata": {
                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                }
              },
              "enabled": {
                "type": "bool",
                "nullable": true,
                "metadata": {
                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
          }
        },
        "logAnalyticsDestinationType": {
          "type": "string",
          "allowedValues": [
            "AzureDiagnostics",
            "Dedicated"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
          }
        },
        "workspaceResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "storageAccountResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "eventHubAuthorizationRuleResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
          }
        },
        "eventHubName": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
          }
        },
        "marketplacePartnerResourceId": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../utl/types/avm-common-types/main.bicep"
        }
      }
    },
    "hubRouteTableType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The route table name."
          }
        },
        "labels": {
          "type": "array",
          "nullable": true,
          "metadata": {
            "description": "Optional. List of labels associated with this route table."
          }
        },
        "routes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "destinations": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "metadata": {
                  "description": "Required. The address prefix for the route."
                }
              },
              "destinationType": {
                "type": "string",
                "allowedValues": [
                  "CIDR"
                ],
                "metadata": {
                  "description": "Required. The destination type for the route."
                }
              },
              "name": {
                "type": "string",
                "metadata": {
                  "description": "Required. The name of the route."
                }
              },
              "nextHopType": {
                "type": "string",
                "allowedValues": [
                  "ResourceId"
                ],
                "metadata": {
                  "description": "Required. The next hop type for the route."
                }
              },
              "nextHop": {
                "type": "string",
                "metadata": {
                  "description": "Required. The next hop IP address for the route."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. List of all routes."
          }
        }
      },
      "metadata": {
        "description": "The type of a virtual hub route table.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../res/network/virtual-hub/main.bicep"
        }
      }
    },
    "hubVirtualNetworkConnectionType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The connection name."
          }
        },
        "enableInternetSecurity": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enable internet security."
          }
        },
        "remoteVirtualNetworkResourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. Resource ID of the virtual network to link to."
          }
        },
        "routingConfiguration": {
          "type": "object",
          "nullable": true,
          "metadata": {
            "description": "Optional. Routing Configuration indicating the associated and propagated route tables for this connection."
          }
        }
      },
      "metadata": {
        "description": "The type of a hub virtual network connection.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../res/network/virtual-hub/main.bicep"
        }
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
        }
      }
    },
    "routingIntentType": {
      "type": "object",
      "properties": {
        "privateToFirewall": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Configures Routing Intent to forward Private traffic to the firewall (RFC1918)."
          }
        },
        "internetToFirewall": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Configures Routing Intent to Forward Internet traffic to the firewall (0.0.0.0/0)."
          }
        }
      },
      "metadata": {
        "description": "The type of a routing intent.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../res/network/virtual-hub/main.bicep"
        }
      }
    },
    "vnetRoutesStaticRoutesType": {
      "type": "object",
      "properties": {
        "staticRoutes": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "addressPrefixes": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true,
                "metadata": {
                  "description": "Optional. The address prefixes of the static route."
                }
              },
              "name": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The name of the static route."
                }
              },
              "nextHopIpAddress": {
                "type": "string",
                "nullable": true,
                "metadata": {
                  "description": "Optional. The next hop IP of the static route."
                }
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The static route configuration for the P2S VPN Gateway."
          }
        },
        "staticRoutesConfig": {
          "type": "object",
          "properties": {
            "vnetLocalRouteOverrideCriteria": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Determines whether the NVA in a SPOKE VNET is bypassed for traffic with destination in spoke."
              }
            }
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The static route configuration for the P2S VPN Gateway."
          }
        }
      },
      "metadata": {
        "description": "Optional. A Type representing the VNET static routes for the P2S VPN Gateway.",
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../res/network/p2s-vpn-gateway/main.bicep"
        }
      }
    },
    "vpnClientIpsecPoliciesType": {
      "type": "object",
      "properties": {
        "dhGroup": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Diffie-Hellman group used in IKE phase 1. Required if using IKEv2."
          }
        },
        "ikeEncryption": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The encryption algorithm used in IKE phase 1. Required if using IKEv2."
          }
        },
        "ikeIntegrity": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The integrity algorithm used in IKE phase 1. Required if using IKEv2."
          }
        },
        "ipsecEncryption": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The encryption algorithm used in IKE phase 2. Required if using IKEv2."
          }
        },
        "ipsecIntegrity": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The integrity algorithm used in IKE phase 2. Required if using IKEv2."
          }
        },
        "pfsGroup": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The Perfect Forward Secrecy (PFS) group used in IKE phase 2. Required if using IKEv2."
          }
        },
        "saDataSizeKilobytes": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The size of the SA data in kilobytes. Required if using IKEv2."
          }
        },
        "salfetimeSeconds": {
          "type": "int",
          "nullable": true,
          "metadata": {
            "description": "Optional. The lifetime of the SA in seconds. Required if using IKEv2."
          }
        }
      },
      "metadata": {
        "__bicep_imported_from!": {
          "sourceTemplate": "../../../res/network/vpn-server-configuration/main.bicep"
        }
      }
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Required. Azure region where the Virtual WAN will be created."
      }
    },
    "virtualWanParameters": {
      "$ref": "#/definitions/virtualWanParameterType",
      "metadata": {
        "description": "Required. The parameters for the Virtual WAN."
      }
    },
    "virtualHubParameters": {
      "$ref": "#/definitions/virtualHubParameterType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The parameters for the Virtual Hubs and associated networking components, required if configuring Virtual Hubs."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings for the Virtual WAN and associated components."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2023-07-01",
      "name": "[format('46d3xbcp.ptn.network-virtualwan.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "virtualWan": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('virtualWanParameters').virtualWanName)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('virtualWanParameters').virtualWanName]"
          },
          "location": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'location')]"
          },
          "allowBranchToBranchTraffic": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'allowBranchToBranchTraffic')]"
          },
          "allowVnetToVnetTraffic": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'allowVnetToVnetTraffic')]"
          },
          "disableVpnEncryption": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'disableVpnEncryption')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "lock": {
            "value": "[coalesce(tryGet(parameters('virtualWanParameters'), 'lock'), createObject())]"
          },
          "roleAssignments": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'roleAssignments')]"
          },
          "tags": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'tags')]"
          },
          "type": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'type')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "7593671486394056762"
            },
            "name": "Virtual WANs",
            "description": "This module deploys a Virtual WAN."
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location where all resources will be created."
              }
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Virtual WAN."
              }
            },
            "type": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Standard",
                "Basic"
              ],
              "metadata": {
                "description": "Optional. The type of the Virtual WAN."
              }
            },
            "allowBranchToBranchTraffic": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. True if branch to branch traffic is allowed."
              }
            },
            "allowVnetToVnetTraffic": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. True if VNET to VNET traffic is allowed."
              }
            },
            "disableVpnEncryption": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. VPN encryption to be disabled or not."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-virtualwan.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "virtualWan": {
              "type": "Microsoft.Network/virtualWans",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "allowBranchToBranchTraffic": "[parameters('allowBranchToBranchTraffic')]",
                "allowVnetToVnetTraffic": "[if(parameters('allowVnetToVnetTraffic'), parameters('allowVnetToVnetTraffic'), null())]",
                "disableVpnEncryption": "[parameters('disableVpnEncryption')]",
                "type": "[parameters('type')]"
              }
            },
            "virtualWan_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/virtualWans/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualWan"
              ]
            },
            "virtualWan_roleAssignments": {
              "copy": {
                "name": "virtualWan_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/virtualWans/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualWans', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "virtualWan"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual WAN."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual WAN."
              },
              "value": "[resourceId('Microsoft.Network/virtualWans', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the virtual WAN was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('virtualWan', '2023-04-01', 'full').location]"
            }
          }
        }
      }
    },
    "virtualHubModule": {
      "copy": {
        "name": "virtualHubModule",
        "count": "[length(parameters('virtualHubParameters'))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-{1}', uniqueString(deployment().name, parameters('location')), parameters('virtualHubParameters')[copyIndex()].hubName)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('virtualHubParameters')[copyIndex()].hubName]"
          },
          "addressPrefix": {
            "value": "[parameters('virtualHubParameters')[copyIndex()].hubAddressPrefix]"
          },
          "location": {
            "value": "[parameters('virtualHubParameters')[copyIndex()].hubLocation]"
          },
          "virtualWanResourceId": {
            "value": "[reference('virtualWan').outputs.resourceId.value]"
          },
          "allowBranchToBranchTraffic": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'allowBranchToBranchTraffic')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "hubRoutingPreference": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'hubRoutingPreference')]"
          },
          "hubRouteTables": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'hubRouteTables')]"
          },
          "hubVirtualNetworkConnections": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'hubVirtualNetworkConnections')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          },
          "sku": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'sku')]"
          },
          "tags": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'tags')]"
          },
          "virtualRouterAsn": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'virtualRouterAsn')]"
          },
          "virtualRouterIps": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'virtualRouterIps')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "7289389241473161106"
            },
            "name": "Virtual Hubs",
            "description": "This module deploys a Virtual Hub.\nIf you are planning to deploy a Secure Virtual Hub (with an Azure Firewall integrated), please refer to the Azure Firewall module."
          },
          "definitions": {
            "hubRouteTableType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The route table name."
                  }
                },
                "labels": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of labels associated with this route table."
                  }
                },
                "routes": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of all routes."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a virtual hub route table."
              }
            },
            "routingIntentType": {
              "type": "object",
              "properties": {
                "privateToFirewall": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configures Routing Intent to forward Private traffic to the firewall (RFC1918)."
                  }
                },
                "internetToFirewall": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Configures Routing Intent to Forward Internet traffic to the firewall (0.0.0.0/0)."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a routing intent."
              }
            },
            "hubVirtualNetworkConnectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection name."
                  }
                },
                "enableInternetSecurity": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable internet security."
                  }
                },
                "remoteVirtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the virtual network to link to."
                  }
                },
                "routingConfiguration": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Routing Configuration indicating the associated and propagated route tables for this connection."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of a hub virtual network connection."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The virtual hub name."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "addressPrefix": {
              "type": "string",
              "metadata": {
                "description": "Required. Address-prefix for this VirtualHub."
              }
            },
            "allowBranchToBranchTraffic": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Flag to control transit for VirtualRouter hub."
              }
            },
            "azureFirewallResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Azure Firewall to link to."
              }
            },
            "expressRouteGatewayResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Express Route Gateway to link to."
              }
            },
            "p2SVpnGatewayResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Point-to-Site VPN Gateway to link to."
              }
            },
            "hubRoutingPreference": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "ASPath",
                "ExpressRoute",
                "VpnGateway"
              ],
              "metadata": {
                "description": "Optional. The preferred routing preference for this virtual hub."
              }
            },
            "preferredRoutingGateway": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "ExpressRoute",
                "None",
                "VpnGateway"
              ],
              "metadata": {
                "description": "Optional. The preferred routing gateway types."
              }
            },
            "routeTableRoutes": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. VirtualHub route tables."
              }
            },
            "securityPartnerProviderResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. ID of the Security Partner Provider to link to."
              }
            },
            "securityProviderName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Security Provider name."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The sku of this VirtualHub."
              }
            },
            "virtualHubRouteTableV2s": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of all virtual hub route table v2s associated with this VirtualHub."
              }
            },
            "virtualRouterAsn": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. VirtualRouter ASN."
              }
            },
            "virtualRouterIps": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. VirtualRouter IPs."
              }
            },
            "virtualWanResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the virtual WAN to link to."
              }
            },
            "vpnGatewayResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the VPN Gateway to link to."
              }
            },
            "routingIntent": {
              "$ref": "#/definitions/routingIntentType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The routing intent configuration to create for the virtual hub."
              }
            },
            "hubRouteTables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hubRouteTableType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Route tables to create for the virtual hub."
              }
            },
            "hubVirtualNetworkConnections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/hubVirtualNetworkConnectionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Virtual network connections to create for the virtual hub."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[take(format('46d3xbcp.res.network-virtualhub.{0}.{1}', replace('0.3.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "virtualHub": {
              "type": "Microsoft.Network/virtualHubs",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressPrefix": "[parameters('addressPrefix')]",
                "allowBranchToBranchTraffic": "[parameters('allowBranchToBranchTraffic')]",
                "azureFirewall": "[if(not(empty(parameters('azureFirewallResourceId'))), createObject('id', parameters('azureFirewallResourceId')), null())]",
                "expressRouteGateway": "[if(not(empty(parameters('expressRouteGatewayResourceId'))), createObject('id', parameters('expressRouteGatewayResourceId')), null())]",
                "p2SVpnGateway": "[if(not(empty(parameters('p2SVpnGatewayResourceId'))), createObject('id', parameters('p2SVpnGatewayResourceId')), null())]",
                "hubRoutingPreference": "[parameters('hubRoutingPreference')]",
                "preferredRoutingGateway": "[parameters('preferredRoutingGateway')]",
                "routeTable": "[if(not(empty(parameters('routeTableRoutes'))), createObject('routes', parameters('routeTableRoutes')), null())]",
                "securityPartnerProvider": "[if(not(empty(parameters('securityPartnerProviderResourceId'))), createObject('id', parameters('securityPartnerProviderResourceId')), null())]",
                "securityProviderName": "[parameters('securityProviderName')]",
                "sku": "[parameters('sku')]",
                "virtualHubRouteTableV2s": "[parameters('virtualHubRouteTableV2s')]",
                "virtualRouterAsn": "[parameters('virtualRouterAsn')]",
                "virtualRouterIps": "[parameters('virtualRouterIps')]",
                "virtualWan": {
                  "id": "[parameters('virtualWanResourceId')]"
                },
                "vpnGateway": "[if(not(empty(parameters('vpnGatewayResourceId'))), createObject('id', parameters('vpnGatewayResourceId')), null())]"
              }
            },
            "virtualHub_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/virtualHubs/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "virtualHub"
              ]
            },
            "virtualHub_routingIntent": {
              "condition": "[and(not(empty(parameters('azureFirewallResourceId'))), not(empty(parameters('routingIntent'))))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-routingIntent', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualHubName": {
                    "value": "[parameters('name')]"
                  },
                  "azureFirewallResourceId": {
                    "value": "[parameters('azureFirewallResourceId')]"
                  },
                  "internetToFirewall": {
                    "value": "[tryGet(parameters('routingIntent'), 'internetToFirewall')]"
                  },
                  "privateToFirewall": {
                    "value": "[tryGet(parameters('routingIntent'), 'privateToFirewall')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3102762079756303099"
                    },
                    "name": "Virtual Hub Routing Intent",
                    "description": "This module configures Routing Intent for a Virtual Hub; this module requires an existing Virtual Hub, as well the firewall Resource ID."
                  },
                  "parameters": {
                    "azureFirewallResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Hub firewall Resource ID."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "defaultRouteTable",
                      "allowedValues": [
                        "defaultRouteTable"
                      ],
                      "metadata": {
                        "description": "Optional. The name of the routing intent configuration."
                      }
                    },
                    "virtualHubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Virtual Hub."
                      }
                    },
                    "privateToFirewall": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures Routing Intent to forward Private traffic to the firewall (RFC1918)."
                      }
                    },
                    "internetToFirewall": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Configures Routing Intent to Forward Internet traffic to the firewall (0.0.0.0/0)."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualHubs/routingIntent",
                      "apiVersion": "2023-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualHubName'), parameters('name'))]",
                      "properties": {
                        "routingPolicies": "[if(and(equals(parameters('internetToFirewall'), true()), equals(parameters('privateToFirewall'), true())), createArray(createObject('name', '_policy_PublicTraffic', 'destinations', createArray('Internet'), 'nextHop', parameters('azureFirewallResourceId')), createObject('name', '_policy_PrivateTraffic', 'destinations', createArray('PrivateTraffic'), 'nextHop', parameters('azureFirewallResourceId'))), if(and(equals(parameters('internetToFirewall'), true()), equals(parameters('privateToFirewall'), false())), createArray(createObject('name', '_policy_PublicTraffic', 'destinations', createArray('Internet'), 'nextHop', parameters('azureFirewallResourceId'))), if(and(equals(parameters('internetToFirewall'), false()), equals(parameters('privateToFirewall'), true())), createArray(createObject('name', '_policy_PrivateTraffic', 'destinations', createArray('PrivateTraffic'), 'nextHop', parameters('azureFirewallResourceId'))), null())))]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Routing Intent configuration."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Routing Intent configuration."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualHubs/routingIntent', parameters('virtualHubName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the Routing Intent configuration was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualHub"
              ]
            },
            "virtualHub_routeTables": {
              "copy": {
                "name": "virtualHub_routeTables",
                "count": "[length(coalesce(parameters('hubRouteTables'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-routeTable-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualHubName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('hubRouteTables'), createArray())[copyIndex()].name]"
                  },
                  "labels": {
                    "value": "[tryGet(coalesce(parameters('hubRouteTables'), createArray())[copyIndex()], 'labels')]"
                  },
                  "routes": {
                    "value": "[tryGet(coalesce(parameters('hubRouteTables'), createArray())[copyIndex()], 'routes')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5524849091894583522"
                    },
                    "name": "Virtual Hub Route Tables",
                    "description": "This module deploys a Virtual Hub Route Table."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The route table name."
                      }
                    },
                    "virtualHubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual hub. Required if the template is used in a standalone deployment."
                      }
                    },
                    "labels": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of labels associated with this route table."
                      }
                    },
                    "routes": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of all routes."
                      }
                    }
                  },
                  "resources": {
                    "virtualHub": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualHubs",
                      "apiVersion": "2022-11-01",
                      "name": "[parameters('virtualHubName')]"
                    },
                    "hubRouteTable": {
                      "type": "Microsoft.Network/virtualHubs/hubRouteTables",
                      "apiVersion": "2022-11-01",
                      "name": "[format('{0}/{1}', parameters('virtualHubName'), parameters('name'))]",
                      "properties": {
                        "labels": "[parameters('labels')]",
                        "routes": "[parameters('routes')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed virtual hub route table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed virtual hub route table."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', parameters('virtualHubName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual hub route table was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualHub"
              ]
            },
            "virtualHub_hubVirtualNetworkConnections": {
              "copy": {
                "name": "virtualHub_hubVirtualNetworkConnections",
                "count": "[length(coalesce(parameters('hubVirtualNetworkConnections'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-connection-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "virtualHubName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('hubVirtualNetworkConnections'), createArray())[copyIndex()].name]"
                  },
                  "enableInternetSecurity": {
                    "value": "[tryGet(coalesce(parameters('hubVirtualNetworkConnections'), createArray())[copyIndex()], 'enableInternetSecurity')]"
                  },
                  "remoteVirtualNetworkResourceId": {
                    "value": "[coalesce(parameters('hubVirtualNetworkConnections'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                  },
                  "routingConfiguration": {
                    "value": "[tryGet(coalesce(parameters('hubVirtualNetworkConnections'), createArray())[copyIndex()], 'routingConfiguration')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "6966615132477571734"
                    },
                    "name": "Virtual Hub Virtual Network Connections",
                    "description": "This module deploys a Virtual Hub Virtual Network Connection."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The connection name."
                      }
                    },
                    "virtualHubName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent virtual hub. Required if the template is used in a standalone deployment."
                      }
                    },
                    "enableInternetSecurity": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable internet security."
                      }
                    },
                    "remoteVirtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the virtual network to link to."
                      }
                    },
                    "routingConfiguration": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Routing Configuration indicating the associated and propagated route tables for this connection."
                      }
                    }
                  },
                  "resources": {
                    "virtualHub": {
                      "existing": true,
                      "type": "Microsoft.Network/virtualHubs",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('virtualHubName')]"
                    },
                    "hubVirtualNetworkConnection": {
                      "type": "Microsoft.Network/virtualHubs/hubVirtualNetworkConnections",
                      "apiVersion": "2024-01-01",
                      "name": "[format('{0}/{1}', parameters('virtualHubName'), parameters('name'))]",
                      "properties": {
                        "enableInternetSecurity": "[parameters('enableInternetSecurity')]",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('remoteVirtualNetworkResourceId')]"
                        },
                        "routingConfiguration": "[parameters('routingConfiguration')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the virtual hub connection was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the virtual hub connection."
                      },
                      "value": "[resourceId('Microsoft.Network/virtualHubs/hubVirtualNetworkConnections', parameters('virtualHubName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the virtual hub connection."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "virtualHub",
                "virtualHub_routeTables"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the virtual hub was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the virtual hub."
              },
              "value": "[resourceId('Microsoft.Network/virtualHubs', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual hub."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('virtualHub', '2023-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "virtualWan"
      ]
    },
    "firewallModule": {
      "copy": {
        "name": "firewallModule",
        "count": "[length(parameters('virtualHubParameters'))]"
      },
      "condition": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'deploySecureHub')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'azureFirewallName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'azureFirewallName')]"
          },
          "azureSkuTier": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'azureFirewallSku')]"
          },
          "virtualHubId": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceId.value]"
          },
          "firewallPolicyId": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'firewallPolicyResourceId')]"
          },
          "location": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.location.value]"
          },
          "hubIPAddresses": {
            "value": {
              "publicIPs": {
                "count": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'azureFirewallPublicIPCount')]"
              }
            }
          },
          "publicIPAddressObject": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'publicIPAddressObject')]"
          },
          "publicIPResourceID": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'publicIPResourceID')]"
          },
          "additionalPublicIpConfigurations": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'additionalPublicIpConfigurationResourceIds')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "diagnosticSettings": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'secureHubParameters'), 'diagnosticSettings')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "426768951448835930"
            },
            "name": "Azure Firewalls",
            "description": "This module deploys an Azure Firewall."
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "natRuleCollectionType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the NAT rule collection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "Dnat",
                              "Snat"
                            ],
                            "metadata": {
                              "description": "Required. The type of action."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The action type of a NAT rule collection."
                        }
                      },
                      "priority": {
                        "type": "int",
                        "minValue": 100,
                        "maxValue": 65000,
                        "metadata": {
                          "description": "Required. Priority of the NAT rule collection."
                        }
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the NAT rule."
                              }
                            },
                            "description": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Description of the rule."
                              }
                            },
                            "protocols": {
                              "type": "array",
                              "allowedValues": [
                                "Any",
                                "ICMP",
                                "TCP",
                                "UDP"
                              ],
                              "metadata": {
                                "description": "Required. Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule."
                              }
                            },
                            "destinationAddresses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags."
                              }
                            },
                            "destinationPorts": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination ports."
                              }
                            },
                            "sourceAddresses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IP addresses for this rule."
                              }
                            },
                            "sourceIpGroups": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IpGroups for this rule."
                              }
                            },
                            "translatedAddress": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The translated address for this NAT rule."
                              }
                            },
                            "translatedFqdn": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The translated FQDN for this NAT rule."
                              }
                            },
                            "translatedPort": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The translated port for this NAT rule."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. Collection of rules used by a NAT rule collection."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of the azure firewall NAT rule collection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "applicationRuleCollectionType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the application rule collection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "Allow",
                              "Deny"
                            ],
                            "metadata": {
                              "description": "Required. The type of action."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The action type of a rule collection."
                        }
                      },
                      "priority": {
                        "type": "int",
                        "minValue": 100,
                        "maxValue": 65000,
                        "metadata": {
                          "description": "Required. Priority of the application rule collection."
                        }
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the application rule."
                              }
                            },
                            "description": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Description of the rule."
                              }
                            },
                            "protocols": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "port": {
                                    "type": "int",
                                    "nullable": true,
                                    "maxValue": 64000,
                                    "metadata": {
                                      "description": "Optional. Port number for the protocol."
                                    }
                                  },
                                  "protocolType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Http",
                                      "Https",
                                      "Mssql"
                                    ],
                                    "metadata": {
                                      "description": "Required. Protocol type."
                                    }
                                  }
                                }
                              },
                              "metadata": {
                                "description": "Required. Array of ApplicationRuleProtocols."
                              }
                            },
                            "fqdnTags": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of FQDN Tags for this rule."
                              }
                            },
                            "targetFqdns": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of FQDNs for this rule."
                              }
                            },
                            "sourceAddresses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IP addresses for this rule."
                              }
                            },
                            "sourceIpGroups": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IpGroups for this rule."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. Collection of rules used by a application rule collection."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of the azure firewall application rule collection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "networkRuleCollectionType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Name of the network rule collection."
                    }
                  },
                  "properties": {
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "allowedValues": [
                              "Allow",
                              "Deny"
                            ],
                            "metadata": {
                              "description": "Required. The type of action."
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The action type of a rule collection."
                        }
                      },
                      "priority": {
                        "type": "int",
                        "minValue": 100,
                        "maxValue": 65000,
                        "metadata": {
                          "description": "Required. Priority of the network rule collection."
                        }
                      },
                      "rules": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the network rule."
                              }
                            },
                            "description": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Description of the rule."
                              }
                            },
                            "protocols": {
                              "type": "array",
                              "allowedValues": [
                                "Any",
                                "ICMP",
                                "TCP",
                                "UDP"
                              ],
                              "metadata": {
                                "description": "Required. Array of AzureFirewallNetworkRuleProtocols."
                              }
                            },
                            "destinationAddresses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination IP addresses."
                              }
                            },
                            "destinationFqdns": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination FQDNs."
                              }
                            },
                            "destinationIpGroups": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination IP groups for this rule."
                              }
                            },
                            "destinationPorts": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of destination ports."
                              }
                            },
                            "sourceAddresses": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IP addresses for this rule."
                              }
                            },
                            "sourceIpGroups": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of source IpGroups for this rule."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. Collection of rules used by a network rule collection."
                        }
                      }
                    },
                    "metadata": {
                      "description": "Required. Properties of the azure firewall network rule collection."
                    }
                  }
                }
              },
              "nullable": true
            },
            "hubIPAddressesType": {
              "type": "object",
              "properties": {
                "privateIPAddress": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Private IP Address associated with AzureFirewall."
                  }
                },
                "publicIPs": {
                  "type": "object",
                  "properties": {
                    "addresses": {
                      "type": "array",
                      "prefixItems": [
                        {
                          "type": "object",
                          "properties": {
                            "address": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Public IP."
                              }
                            }
                          }
                        }
                      ],
                      "items": false,
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of Public IP addresses associated with AzureFirewall or IP addresses to be retained."
                      }
                    },
                    "count": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Public IP address count."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of public IP addresses associated with AzureFirewall."
                  }
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Azure Firewall."
              }
            },
            "azureSkuTier": {
              "type": "string",
              "defaultValue": "Standard",
              "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Optional. Tier of an Azure Firewall."
              }
            },
            "virtualNetworkResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Shared services Virtual Network resource ID. The virtual network ID containing AzureFirewallSubnet. If a Public IP is not provided, then the Public IP that is created as part of this module will be applied with the subnet provided in this variable. Required if `virtualHubId` is empty."
              }
            },
            "publicIPResourceID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Public IP resource ID to associate to the AzureFirewallSubnet. If empty, then the Public IP that is created as part of this module will be applied to the AzureFirewallSubnet."
              }
            },
            "additionalPublicIpConfigurations": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. This is to add any additional Public IP configurations on top of the Public IP with subnet IP configuration."
              }
            },
            "publicIPAddressObject": {
              "type": "object",
              "defaultValue": {
                "name": "[format('{0}-pip', parameters('name'))]"
              },
              "metadata": {
                "description": "Optional. Specifies the properties of the Public IP to create and be used by the Firewall, if no existing public IP was provided."
              }
            },
            "managementIPResourceID": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The Management Public IP resource ID to associate to the AzureFirewallManagementSubnet. If empty, then the Management Public IP that is created as part of this module will be applied to the AzureFirewallManagementSubnet."
              }
            },
            "managementIPAddressObject": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Specifies the properties of the Management Public IP to create and be used by Azure Firewall. If it's not provided and managementIPResourceID is empty, a '-mip' suffix will be appended to the Firewall's name."
              }
            },
            "applicationRuleCollections": {
              "$ref": "#/definitions/applicationRuleCollectionType",
              "metadata": {
                "description": "Optional. Collection of application rule collections used by Azure Firewall."
              }
            },
            "networkRuleCollections": {
              "$ref": "#/definitions/networkRuleCollectionType",
              "metadata": {
                "description": "Optional. Collection of network rule collections used by Azure Firewall."
              }
            },
            "natRuleCollections": {
              "$ref": "#/definitions/natRuleCollectionType",
              "metadata": {
                "description": "Optional. Collection of NAT rule collections used by Azure Firewall."
              }
            },
            "firewallPolicyId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Resource ID of the Firewall Policy that should be attached."
              }
            },
            "hubIPAddresses": {
              "$ref": "#/definitions/hubIPAddressesType",
              "nullable": true,
              "metadata": {
                "description": "Conditional. IP addresses associated with AzureFirewall. Required if `virtualHubId` is supplied."
              }
            },
            "virtualHubId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. The virtualHub resource ID to which the firewall belongs. Required if `virtualNetworkId` is empty."
              }
            },
            "threatIntelMode": {
              "type": "string",
              "defaultValue": "Deny",
              "allowedValues": [
                "Alert",
                "Deny",
                "Off"
              ],
              "metadata": {
                "description": "Optional. The operation mode for Threat Intel."
              }
            },
            "zones": {
              "type": "array",
              "defaultValue": [
                1,
                2,
                3
              ],
              "metadata": {
                "description": "Optional. Zone numbers e.g. 1,2,3."
              }
            },
            "enableForcedTunneling": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable/Disable forced tunneling."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the Azure Firewall resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "additionalPublicIpConfigurationsVar",
                "count": "[length(parameters('additionalPublicIpConfigurations'))]",
                "input": {
                  "name": "[parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].name]",
                  "properties": {
                    "publicIPAddress": "[if(contains(parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')], 'publicIPAddressResourceId'), createObject('id', parameters('additionalPublicIpConfigurations')[copyIndex('additionalPublicIpConfigurationsVar')].publicIPAddressResourceId), null())]"
                  }
                }
              },
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "azureSkuName": "[if(empty(parameters('virtualNetworkResourceId')), 'AZFW_Hub', 'AZFW_VNet')]",
            "requiresManagementIp": "[if(or(equals(parameters('azureSkuTier'), 'Basic'), parameters('enableForcedTunneling')), true(), false())]",
            "isCreateDefaultManagementIP": "[and(empty(parameters('managementIPResourceID')), variables('requiresManagementIp'))]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-azurefirewall.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "azureFirewall": {
              "type": "Microsoft.Network/azureFirewalls",
              "apiVersion": "2024-05-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "zones": "[if(equals(length(parameters('zones')), 0), null(), parameters('zones'))]",
              "tags": "[parameters('tags')]",
              "properties": "[if(equals(variables('azureSkuName'), 'AZFW_VNet'), createObject('threatIntelMode', parameters('threatIntelMode'), 'firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'ipConfigurations', concat(createArray(createObject('name', if(not(empty(parameters('publicIPResourceID'))), last(split(parameters('publicIPResourceID'), '/')), reference('publicIPAddress').outputs.name.value), 'properties', union(createObject('subnet', createObject('id', format('{0}/subnets/AzureFirewallSubnet', parameters('virtualNetworkResourceId')))), if(or(not(empty(parameters('publicIPResourceID'))), not(empty(parameters('publicIPAddressObject')))), createObject('publicIPAddress', createObject('id', if(not(empty(parameters('publicIPResourceID'))), parameters('publicIPResourceID'), reference('publicIPAddress').outputs.resourceId.value))), createObject())))), variables('additionalPublicIpConfigurationsVar')), 'managementIpConfiguration', if(variables('requiresManagementIp'), createObject('name', if(not(empty(parameters('managementIPResourceID'))), last(split(parameters('managementIPResourceID'), '/')), reference('managementIPAddress').outputs.name.value), 'properties', createObject('subnet', createObject('id', format('{0}/subnets/AzureFirewallManagementSubnet', parameters('virtualNetworkResourceId'))), 'publicIPAddress', createObject('id', if(not(empty(parameters('managementIPResourceID'))), parameters('managementIPResourceID'), reference('managementIPAddress').outputs.resourceId.value)))), null()), 'sku', createObject('name', variables('azureSkuName'), 'tier', parameters('azureSkuTier')), 'applicationRuleCollections', coalesce(parameters('applicationRuleCollections'), createArray()), 'natRuleCollections', coalesce(parameters('natRuleCollections'), createArray()), 'networkRuleCollections', coalesce(parameters('networkRuleCollections'), createArray())), createObject('firewallPolicy', if(not(empty(parameters('firewallPolicyId'))), createObject('id', parameters('firewallPolicyId')), null()), 'sku', createObject('name', variables('azureSkuName'), 'tier', parameters('azureSkuTier')), 'hubIPAddresses', if(not(empty(parameters('hubIPAddresses'))), parameters('hubIPAddresses'), null()), 'virtualHub', if(not(empty(parameters('virtualHubId'))), createObject('id', parameters('virtualHubId')), null())))]",
              "dependsOn": [
                "managementIPAddress",
                "publicIPAddress"
              ]
            },
            "azureFirewall_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "azureFirewall"
              ]
            },
            "azureFirewall_diagnosticSettings": {
              "copy": {
                "name": "azureFirewall_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "azureFirewall"
              ]
            },
            "azureFirewall_roleAssignments": {
              "copy": {
                "name": "azureFirewall_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/azureFirewalls/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/azureFirewalls', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "azureFirewall"
              ]
            },
            "publicIPAddress": {
              "condition": "[and(empty(parameters('publicIPResourceID')), equals(variables('azureSkuName'), 'AZFW_VNet'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Firewall-PIP', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('publicIPAddressObject').name]"
                  },
                  "publicIpPrefixResourceId": "[if(contains(parameters('publicIPAddressObject'), 'publicIPPrefixResourceId'), if(not(empty(parameters('publicIPAddressObject').publicIPPrefixResourceId)), createObject('value', parameters('publicIPAddressObject').publicIPPrefixResourceId), createObject('value', '')), createObject('value', ''))]",
                  "publicIPAllocationMethod": "[if(contains(parameters('publicIPAddressObject'), 'publicIPAllocationMethod'), if(not(empty(parameters('publicIPAddressObject').publicIPAllocationMethod)), createObject('value', parameters('publicIPAddressObject').publicIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                  "skuName": "[if(contains(parameters('publicIPAddressObject'), 'skuName'), if(not(empty(parameters('publicIPAddressObject').skuName)), createObject('value', parameters('publicIPAddressObject').skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                  "skuTier": "[if(contains(parameters('publicIPAddressObject'), 'skuTier'), if(not(empty(parameters('publicIPAddressObject').skuTier)), createObject('value', parameters('publicIPAddressObject').skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                  "roleAssignments": "[if(contains(parameters('publicIPAddressObject'), 'roleAssignments'), if(not(empty(parameters('publicIPAddressObject').roleAssignments)), createObject('value', parameters('publicIPAddressObject').roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('publicIPAddressObject'), 'diagnosticSettings')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "lock": {
                    "value": "[parameters('lock')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'tags'), parameters('tags'))]"
                  },
                  "zones": {
                    "value": "[parameters('zones')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5168739580767459761"
                    },
                    "name": "Public IP Addresses",
                    "description": "This module deploys a Public IP Address."
                  },
                  "definitions": {
                    "dnsSettingsType": {
                      "type": "object",
                      "properties": {
                        "domainNameLabel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                          }
                        },
                        "domainNameLabelScope": {
                          "type": "string",
                          "allowedValues": [
                            "NoReuse",
                            "ResourceGroupReuse",
                            "SubscriptionReuse",
                            "TenantReuse"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                          }
                        },
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                          }
                        },
                        "reverseFqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ddosSettingsType": {
                      "type": "object",
                      "properties": {
                        "ddosProtectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                          }
                        },
                        "protectionMode": {
                          "type": "string",
                          "allowedValues": [
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. The DDoS protection policy customizations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipTagType": {
                      "type": "object",
                      "properties": {
                        "ipTagType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag type."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIpPrefixResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "allowedValues": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "dnsSettings": {
                      "$ref": "#/definitions/dnsSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DNS settings of the public IP address."
                      }
                    },
                    "ipTags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipTagType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of tags associated with the public IP address."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "ddosSettings": {
                      "$ref": "#/definitions/ddosSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "idleTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 4,
                      "metadata": {
                        "description": "Optional. The idle timeout of the public IP address."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "publicIpAddress": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                      "properties": {
                        "ddosSettings": "[parameters('ddosSettings')]",
                        "dnsSettings": "[parameters('dnsSettings')]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                        "ipTags": "[parameters('ipTags')]"
                      }
                    },
                    "publicIpAddress_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_roleAssignments": {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_diagnosticSettings": {
                      "copy": {
                        "name": "publicIpAddress_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "managementIPAddress": {
              "condition": "[and(variables('isCreateDefaultManagementIP'), equals(variables('azureSkuName'), 'AZFW_VNet'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Firewall-MIP', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": "[if(contains(parameters('managementIPAddressObject'), 'name'), if(not(empty(parameters('managementIPAddressObject').name)), createObject('value', parameters('managementIPAddressObject').name), createObject('value', format('{0}-mip', parameters('name')))), createObject('value', format('{0}-mip', parameters('name'))))]",
                  "publicIpPrefixResourceId": "[if(contains(parameters('managementIPAddressObject'), 'managementIPPrefixResourceId'), if(not(empty(parameters('managementIPAddressObject').managementIPPrefixResourceId)), createObject('value', parameters('managementIPAddressObject').managementIPPrefixResourceId), createObject('value', '')), createObject('value', ''))]",
                  "publicIPAllocationMethod": "[if(contains(parameters('managementIPAddressObject'), 'managementIPAllocationMethod'), if(not(empty(parameters('managementIPAddressObject').managementIPAllocationMethod)), createObject('value', parameters('managementIPAddressObject').managementIPAllocationMethod), createObject('value', 'Static')), createObject('value', 'Static'))]",
                  "skuName": "[if(contains(parameters('managementIPAddressObject'), 'skuName'), if(not(empty(parameters('managementIPAddressObject').skuName)), createObject('value', parameters('managementIPAddressObject').skuName), createObject('value', 'Standard')), createObject('value', 'Standard'))]",
                  "skuTier": "[if(contains(parameters('managementIPAddressObject'), 'skuTier'), if(not(empty(parameters('managementIPAddressObject').skuTier)), createObject('value', parameters('managementIPAddressObject').skuTier), createObject('value', 'Regional')), createObject('value', 'Regional'))]",
                  "roleAssignments": "[if(contains(parameters('managementIPAddressObject'), 'roleAssignments'), if(not(empty(parameters('managementIPAddressObject').roleAssignments)), createObject('value', parameters('managementIPAddressObject').roleAssignments), createObject('value', createArray())), createObject('value', createArray()))]",
                  "diagnosticSettings": {
                    "value": "[tryGet(parameters('managementIPAddressObject'), 'diagnosticSettings')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(parameters('managementIPAddressObject'), 'tags'), parameters('tags'))]"
                  },
                  "zones": {
                    "value": "[parameters('zones')]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "5168739580767459761"
                    },
                    "name": "Public IP Addresses",
                    "description": "This module deploys a Public IP Address."
                  },
                  "definitions": {
                    "dnsSettingsType": {
                      "type": "object",
                      "properties": {
                        "domainNameLabel": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                          }
                        },
                        "domainNameLabelScope": {
                          "type": "string",
                          "allowedValues": [
                            "NoReuse",
                            "ResourceGroupReuse",
                            "SubscriptionReuse",
                            "TenantReuse"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                          }
                        },
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                          }
                        },
                        "reverseFqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ddosSettingsType": {
                      "type": "object",
                      "properties": {
                        "ddosProtectionPlan": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                          }
                        },
                        "protectionMode": {
                          "type": "string",
                          "allowedValues": [
                            "Enabled"
                          ],
                          "metadata": {
                            "description": "Required. The DDoS protection policy customizations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "ipTagType": {
                      "type": "object",
                      "properties": {
                        "ipTagType": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag type."
                          }
                        },
                        "tag": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The IP tag."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the Public IP Address."
                      }
                    },
                    "publicIpPrefixResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                      }
                    },
                    "publicIPAllocationMethod": {
                      "type": "string",
                      "defaultValue": "Static",
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The public IP address allocation method."
                      }
                    },
                    "zones": {
                      "type": "array",
                      "items": {
                        "type": "int"
                      },
                      "defaultValue": [
                        1,
                        2,
                        3
                      ],
                      "allowedValues": [
                        1,
                        2,
                        3
                      ],
                      "metadata": {
                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                      }
                    },
                    "publicIPAddressVersion": {
                      "type": "string",
                      "defaultValue": "IPv4",
                      "allowedValues": [
                        "IPv4",
                        "IPv6"
                      ],
                      "metadata": {
                        "description": "Optional. IP address version."
                      }
                    },
                    "dnsSettings": {
                      "$ref": "#/definitions/dnsSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DNS settings of the public IP address."
                      }
                    },
                    "ipTags": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ipTagType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The list of tags associated with the public IP address."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Basic",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Name of a public IP address SKU."
                      }
                    },
                    "skuTier": {
                      "type": "string",
                      "defaultValue": "Regional",
                      "allowedValues": [
                        "Global",
                        "Regional"
                      ],
                      "metadata": {
                        "description": "Optional. Tier of a public IP address SKU."
                      }
                    },
                    "ddosSettings": {
                      "$ref": "#/definitions/ddosSettingsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "idleTimeoutInMinutes": {
                      "type": "int",
                      "defaultValue": 4,
                      "metadata": {
                        "description": "Optional. The idle timeout of the public IP address."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "publicIpAddress": {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('skuName')]",
                        "tier": "[parameters('skuTier')]"
                      },
                      "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                      "properties": {
                        "ddosSettings": "[parameters('ddosSettings')]",
                        "dnsSettings": "[parameters('dnsSettings')]",
                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                        "ipTags": "[parameters('ipTags')]"
                      }
                    },
                    "publicIpAddress_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_roleAssignments": {
                      "copy": {
                        "name": "publicIpAddress_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    },
                    "publicIpAddress_diagnosticSettings": {
                      "copy": {
                        "name": "publicIpAddress_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "publicIpAddress"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the public IP address was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the public IP address."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the public IP address."
                      },
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "ipAddress": {
                      "type": "string",
                      "metadata": {
                        "description": "The public IP address of the public IP address resource."
                      },
                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Azure Firewall."
              },
              "value": "[resourceId('Microsoft.Network/azureFirewalls', parameters('name'))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Azure Firewall."
              },
              "value": "[parameters('name')]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the Azure firewall was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "privateIp": {
              "type": "string",
              "metadata": {
                "description": "The private IP of the Azure firewall."
              },
              "value": "[if(contains(reference('azureFirewall'), 'ipConfigurations'), reference('azureFirewall').ipConfigurations[0].properties.privateIPAddress, '')]"
            },
            "ipConfAzureFirewallSubnet": {
              "type": "object",
              "metadata": {
                "description": "The Public IP configuration object for the Azure Firewall Subnet."
              },
              "value": "[if(contains(reference('azureFirewall'), 'ipConfigurations'), reference('azureFirewall').ipConfigurations[0], createObject())]"
            },
            "applicationRuleCollections": {
              "type": "array",
              "metadata": {
                "description": "List of Application Rule Collections used by Azure Firewall."
              },
              "value": "[coalesce(parameters('applicationRuleCollections'), createArray())]"
            },
            "networkRuleCollections": {
              "type": "array",
              "metadata": {
                "description": "List of Network Rule Collections used by Azure Firewall."
              },
              "value": "[coalesce(parameters('networkRuleCollections'), createArray())]"
            },
            "natRuleCollections": {
              "type": "array",
              "metadata": {
                "description": "List of NAT rule collections used by Azure Firewall."
              },
              "value": "[coalesce(parameters('natRuleCollections'), createArray())]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('azureFirewall', '2024-05-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[format('virtualHubModule[{0}]', copyIndex())]",
        "[format('virtualHubModule[{0}]', copyIndex())]"
      ]
    },
    "vpnServerConfiguration": {
      "condition": "[equals(tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'createP2sVpnServerConfiguration'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters', 'p2sVpnServerConfigurationName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters', 'p2sVpnServerConfigurationName')]"
          },
          "location": {
            "value": "[reference('virtualWan').outputs.location.value]"
          },
          "aadAudience": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'aadAudience')]"
          },
          "aadIssuer": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'aadIssuer')]"
          },
          "aadTenant": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'aadTenant')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          },
          "p2sConfigurationPolicyGroups": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'p2sConfigurationPolicyGroups')]"
          },
          "radiusClientRootCertificates": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'radiusClientRootCertificates')]"
          },
          "radiusServerAddress": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'radiusServerAddress')]"
          },
          "radiusServerRootCertificates": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'radiusServerRootCertificates')]"
          },
          "radiusServerSecret": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'radiusServerSecret')]"
          },
          "radiusServers": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'radiusServers')]"
          },
          "vpnAuthenticationTypes": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'vpnAuthenticationTypes')]"
          },
          "vpnClientIpsecPolicies": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'vpnClientIpsecPolicies')]"
          },
          "vpnClientRevokedCertificates": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'vpnClientRevokedCertificates')]"
          },
          "vpnClientRootCertificates": {
            "value": "[tryGet(tryGet(parameters('virtualWanParameters'), 'p2sVpnParameters'), 'vpnClientRootCertificates')]"
          },
          "vpnProtocols": {
            "value": [
              "OpenVPN"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.13.18514",
              "templateHash": "13533570582897020060"
            },
            "name": "VPN Server Configuration",
            "description": "This module deploys a VPN Server Configuration for a Virtual Hub P2S Gateway."
          },
          "definitions": {
            "vpnClientIpsecPoliciesType": {
              "type": "object",
              "properties": {
                "dhGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Diffie-Hellman group used in IKE phase 1. Required if using IKEv2."
                  }
                },
                "ikeEncryption": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The encryption algorithm used in IKE phase 1. Required if using IKEv2."
                  }
                },
                "ikeIntegrity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The integrity algorithm used in IKE phase 1. Required if using IKEv2."
                  }
                },
                "ipsecEncryption": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The encryption algorithm used in IKE phase 2. Required if using IKEv2."
                  }
                },
                "ipsecIntegrity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The integrity algorithm used in IKE phase 2. Required if using IKEv2."
                  }
                },
                "pfsGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Perfect Forward Secrecy (PFS) group used in IKE phase 2. Required if using IKEv2."
                  }
                },
                "saDataSizeKilobytes": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The size of the SA data in kilobytes. Required if using IKEv2."
                  }
                },
                "salfetimeSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The lifetime of the SA in seconds. Required if using IKEv2."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the user VPN configuration."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location where all resources will be created."
              }
            },
            "aadAudience": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The audience for the AAD/Entra authentication. Required if configuring Entra ID authentication."
              }
            },
            "aadIssuer": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The issuer for the AAD/Entra authentication. Required if configuring Entra ID authentication."
              }
            },
            "aadTenant": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The audience for the AAD/Entra authentication. Required if configuring Entra ID authentication."
              }
            },
            "p2sConfigurationPolicyGroups": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The P2S configuration policy groups for the configuration."
              }
            },
            "radiusClientRootCertificates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The revoked RADIUS client certificates for the configuration."
              }
            },
            "radiusServerAddress": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The address of the RADIUS server. Required if configuring a single RADIUS."
              }
            },
            "radiusServerRootCertificates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The root certificates of the RADIUS server."
              }
            },
            "radiusServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The list of RADIUS servers. Required if configuring multiple RADIUS servers."
              }
            },
            "radiusServerSecret": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The RADIUS server secret. Required if configuring a single RADIUS server."
              }
            },
            "vpnAuthenticationTypes": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "AAD",
                "Certificate",
                "Radius"
              ],
              "metadata": {
                "description": "Optional. The authentication types for the VPN configuration."
              }
            },
            "vpnClientIpsecPolicies": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/vpnClientIpsecPoliciesType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The IPsec policies for the configuration."
              }
            },
            "vpnClientRevokedCertificates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The revoked VPN Client certificate thumbprints for the configuration."
              }
            },
            "vpnClientRootCertificates": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Conditional. The VPN Client root certificate public keys for the configuration. Required if using certificate authentication."
              }
            },
            "vpnProtocols": {
              "type": "array",
              "defaultValue": [],
              "allowedValues": [
                "IkeV2",
                "OpenVPN"
              ],
              "metadata": {
                "description": "Optional. The allowed VPN protocols for the configuration."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[take(format('46d3xbcp.res.network-vpnserverconfiguration.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "vpnServerConfig": {
              "type": "Microsoft.Network/vpnServerConfigurations",
              "apiVersion": "2023-11-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "configurationPolicyGroups",
                    "count": "[length(coalesce(parameters('p2sConfigurationPolicyGroups'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('p2sConfigurationPolicyGroups'), createArray())[copyIndex('configurationPolicyGroups')].userVPNPolicyGroupName]",
                      "properties": {
                        "isDefault": "[coalesce(parameters('p2sConfigurationPolicyGroups'), createArray())[copyIndex('configurationPolicyGroups')].isDefault]",
                        "policyMembers": "[coalesce(parameters('p2sConfigurationPolicyGroups'), createArray())[copyIndex('configurationPolicyGroups')].policyMembers]",
                        "priority": "[coalesce(parameters('p2sConfigurationPolicyGroups'), createArray())[copyIndex('configurationPolicyGroups')].priority]"
                      }
                    }
                  },
                  {
                    "name": "radiusClientRootCertificates",
                    "count": "[length(coalesce(parameters('radiusClientRootCertificates'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('radiusClientRootCertificates'), createArray())[copyIndex('radiusClientRootCertificates')].name]",
                      "thumbprint": "[coalesce(parameters('radiusClientRootCertificates'), createArray())[copyIndex('radiusClientRootCertificates')].thumbprint]"
                    }
                  },
                  {
                    "name": "radiusServerRootCertificates",
                    "count": "[length(coalesce(parameters('radiusServerRootCertificates'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('radiusServerRootCertificates'), createArray())[copyIndex('radiusServerRootCertificates')].name]",
                      "publicCertData": "[coalesce(parameters('radiusServerRootCertificates'), createArray())[copyIndex('radiusServerRootCertificates')].publicCertData]"
                    }
                  },
                  {
                    "name": "radiusServers",
                    "count": "[length(coalesce(parameters('radiusServers'), createArray()))]",
                    "input": {
                      "radiusServerAddress": "[coalesce(parameters('radiusServers'), createArray())[copyIndex('radiusServers')].radiusServerAddress]",
                      "radiusServerScore": "[coalesce(parameters('radiusServers'), createArray())[copyIndex('radiusServers')].radiusServerScore]",
                      "radiusServerSecret": "[coalesce(parameters('radiusServers'), createArray())[copyIndex('radiusServers')].radiusServerSecret]"
                    }
                  },
                  {
                    "name": "vpnClientIpsecPolicies",
                    "count": "[length(coalesce(parameters('vpnClientIpsecPolicies'), createArray()))]",
                    "input": {
                      "dhGroup": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].dhGroup]",
                      "ikeEncryption": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].ikeEncryption]",
                      "ikeIntegrity": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].ikeIntegrity]",
                      "ipsecEncryption": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].ipsecEncryption]",
                      "ipsecIntegrity": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].ipsecIntegrity]",
                      "pfsGroup": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].pfsGroup]",
                      "saDataSizeKilobytes": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].saDataSizeKilobytes]",
                      "saLifeTimeSeconds": "[coalesce(parameters('vpnClientIpsecPolicies'), createArray())[copyIndex('vpnClientIpsecPolicies')].saLifeTimeSeconds]"
                    }
                  },
                  {
                    "name": "vpnClientRevokedCertificates",
                    "count": "[length(coalesce(parameters('vpnClientRevokedCertificates'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('vpnClientRevokedCertificates'), createArray())[copyIndex('vpnClientRevokedCertificates')].name]",
                      "thumbprint": "[coalesce(parameters('vpnClientRevokedCertificates'), createArray())[copyIndex('vpnClientRevokedCertificates')].thumbprint]"
                    }
                  },
                  {
                    "name": "vpnClientRootCertificates",
                    "count": "[length(coalesce(parameters('vpnClientRootCertificates'), createArray()))]",
                    "input": {
                      "name": "[coalesce(parameters('vpnClientRootCertificates'), createArray())[copyIndex('vpnClientRootCertificates')].name]",
                      "publicCertData": "[coalesce(parameters('vpnClientRootCertificates'), createArray())[copyIndex('vpnClientRootCertificates')].publicCertData]"
                    }
                  }
                ],
                "aadAuthenticationParameters": {
                  "aadAudience": "[parameters('aadAudience')]",
                  "aadIssuer": "[parameters('aadIssuer')]",
                  "aadTenant": "[parameters('aadTenant')]"
                },
                "radiusServerAddress": "[parameters('radiusServerAddress')]",
                "radiusServerSecret": "[parameters('radiusServerSecret')]",
                "vpnAuthenticationTypes": "[parameters('vpnAuthenticationTypes')]",
                "vpnProtocols": "[parameters('vpnProtocols')]"
              }
            },
            "vpnGateway_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/vpnServerConfigurations/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "vpnServerConfig"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user VPN configuration."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user VPN configuration."
              },
              "value": "[resourceId('Microsoft.Network/vpnServerConfigurations', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the user VPN configuration was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('vpnServerConfig', '2023-11-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "virtualWan"
      ]
    },
    "p2sVpnGatewayModule": {
      "copy": {
        "name": "p2sVpnGatewayModule",
        "count": "[length(parameters('virtualHubParameters'))]"
      },
      "condition": "[equals(tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'deployP2SVpnGateway'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vpnGatewayName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vpnGatewayName')]"
          },
          "location": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.location.value]"
          },
          "virtualHubResourceId": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceId.value]"
          },
          "vpnServerConfigurationResourceId": {
            "value": "[reference('vpnServerConfiguration').outputs.resourceId.value]"
          },
          "associatedRouteTableName": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vpnGatewayAssociatedRouteTable')]"
          },
          "vpnGatewayScaleUnit": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vpnGatewayScaleUnit')]"
          },
          "vpnClientAddressPoolAddressPrefixes": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vpnClientAddressPoolAddressPrefixes')]"
          },
          "p2SConnectionConfigurationsName": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'connectionConfigurationsName')]"
          },
          "customDnsServers": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'customDnsServers')]"
          },
          "enableInternetSecurity": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'enableInternetSecurity')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "inboundRouteMapResourceId": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'inboundRouteMapResourceId')]"
          },
          "isRoutingPreferenceInternet": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'isRoutingPreferenceInternet')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          },
          "outboundRouteMapResourceId": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'outboundRouteMapResourceId')]"
          },
          "propagatedLabelNames": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'propagatedLabelNames')]"
          },
          "propagatedRouteTableNames": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'propagatedRouteTableNames')]"
          },
          "tags": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'tags')]"
          },
          "vnetRoutesStaticRoutes": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'p2sVpnParameters'), 'vnetRoutesStaticRoutes')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.32.4.45862",
              "templateHash": "14603170013973241237"
            },
            "name": "P2S VPN Gateway",
            "description": "This module deploys a Virtual Hub P2S Gateway."
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "vnetRoutesStaticRoutesType": {
              "type": "object",
              "properties": {
                "staticRoutes": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "addressPrefixes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The address prefixes of the static route."
                        }
                      },
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the static route."
                        }
                      },
                      "nextHopIpAddress": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The next hop IP of the static route."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The static route configuration for the P2S VPN Gateway."
                  }
                },
                "staticRoutesConfig": {
                  "type": "object",
                  "properties": {
                    "vnetLocalRouteOverrideCriteria": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Determines whether the NVA in a SPOKE VNET is bypassed for traffic with destination in spoke."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The static route configuration for the P2S VPN Gateway."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Optional. A Type representing the VNET static routes for the P2S VPN Gateway."
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the P2S VPN Gateway."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location where all resources will be created."
              }
            },
            "associatedRouteTableName": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "noneRouteTable",
                "defaultRouteTable"
              ],
              "metadata": {
                "description": "Conditional. The name of the associated route table. Required if deploying in a Secure Virtual Hub; cannot be a custom route table."
              }
            },
            "propagatedRouteTableNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The names of the route tables to propagate to the P2S VPN Gateway."
              }
            },
            "customDnsServers": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The custom DNS servers for the P2S VPN Gateway."
              }
            },
            "isRoutingPreferenceInternet": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. The routing preference for the P2S VPN Gateway, Internet or Microsoft network."
              }
            },
            "p2SConnectionConfigurationsName": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the P2S Connection Configuration."
              }
            },
            "enableInternetSecurity": {
              "type": "bool",
              "nullable": true,
              "metadata": {
                "description": "Optional. Enable/Disable Internet Security; \"Propagate Default Route\"."
              }
            },
            "inboundRouteMapResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Resource ID of the inbound route map."
              }
            },
            "outboundRouteMapResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The Resource ID of the outbound route map."
              }
            },
            "propagatedLabelNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The Labels to propagate routes to."
              }
            },
            "vnetRoutesStaticRoutes": {
              "$ref": "#/definitions/vnetRoutesStaticRoutesType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The routes from the virtual hub to virtual network connections."
              }
            },
            "vpnClientAddressPoolAddressPrefixes": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The address prefixes for the VPN Client Address Pool."
              }
            },
            "virtualHubResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of the gateways virtual hub."
              }
            },
            "vpnGatewayScaleUnit": {
              "type": "int",
              "nullable": true,
              "metadata": {
                "description": "Optional. The scale unit of the VPN Gateway."
              }
            },
            "vpnServerConfigurationResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the VPN Server Configuration."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "virtualHubName": "[split(parameters('virtualHubResourceId'), '/')[8]]"
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[take(format('46d3xbcp.res.network-p2svpngateway.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "p2sVpnGateway": {
              "type": "Microsoft.Network/p2svpnGateways",
              "apiVersion": "2024-01-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "customDnsServers": "[parameters('customDnsServers')]",
                "isRoutingPreferenceInternet": "[parameters('isRoutingPreferenceInternet')]",
                "p2SConnectionConfigurations": [
                  {
                    "name": "[parameters('p2SConnectionConfigurationsName')]",
                    "properties": {
                      "enableInternetSecurity": "[parameters('enableInternetSecurity')]",
                      "routingConfiguration": {
                        "associatedRouteTable": {
                          "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', format('{0}', variables('virtualHubName')), format('{0}', parameters('associatedRouteTableName')))]"
                        },
                        "inboundRouteMap": "[if(not(empty(parameters('inboundRouteMapResourceId'))), createObject('id', parameters('inboundRouteMapResourceId')), null())]",
                        "outboundRouteMap": "[if(not(empty(parameters('outboundRouteMapResourceId'))), createObject('id', parameters('outboundRouteMapResourceId')), null())]",
                        "propagatedRouteTables": {
                          "copy": [
                            {
                              "name": "ids",
                              "count": "[length(parameters('propagatedRouteTableNames'))]",
                              "input": {
                                "id": "[resourceId('Microsoft.Network/virtualHubs/hubRouteTables', format('{0}', variables('virtualHubName')), format('{0}', parameters('propagatedRouteTableNames')[copyIndex('ids')]))]"
                              }
                            }
                          ],
                          "labels": "[parameters('propagatedLabelNames')]"
                        },
                        "vnetRoutes": "[parameters('vnetRoutesStaticRoutes')]"
                      },
                      "vpnClientAddressPool": {
                        "addressPrefixes": "[parameters('vpnClientAddressPoolAddressPrefixes')]"
                      }
                    }
                  }
                ],
                "virtualHub": {
                  "id": "[parameters('virtualHubResourceId')]"
                },
                "vpnGatewayScaleUnit": "[parameters('vpnGatewayScaleUnit')]",
                "vpnServerConfiguration": {
                  "id": "[parameters('vpnServerConfigurationResourceId')]"
                }
              }
            },
            "vpnGateway_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/p2svpnGateways/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "p2sVpnGateway"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user VPN configuration."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user VPN configuration."
              },
              "value": "[resourceId('Microsoft.Network/p2svpnGateways', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the user VPN configuration was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('p2sVpnGateway', '2024-01-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[format('virtualHubModule[{0}]', copyIndex())]",
        "[format('virtualHubModule[{0}]', copyIndex())]",
        "vpnServerConfiguration"
      ]
    },
    "s2sVpnGatewayModule": {
      "copy": {
        "name": "s2sVpnGatewayModule",
        "count": "[length(parameters('virtualHubParameters'))]"
      },
      "condition": "[equals(tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'deployS2SVpnGateway'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'vpnGatewayName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'vpnGatewayName')]"
          },
          "location": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.location.value]"
          },
          "virtualHubResourceId": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceId.value]"
          },
          "bgpSettings": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'bgpSettings')]"
          },
          "enableBgpRouteTranslationForNat": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'enableBgpRouteTranslationForNat')]"
          },
          "isRoutingPreferenceInternet": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'isRoutingPreferenceInternet')]"
          },
          "natRules": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'natRules')]"
          },
          "vpnConnections": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'vpnConnections')]"
          },
          "vpnGatewayScaleUnit": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 's2sVpnParameters'), 'vpnGatewayScaleUnit')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "tags": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'tags')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15024519385852920772"
            },
            "name": "VPN Gateways",
            "description": "This module deploys a VPN Gateway."
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the VPN gateway."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location where all resources will be created."
              }
            },
            "vpnConnections": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The VPN connections to create in the VPN gateway."
              }
            },
            "natRules": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of all the NAT Rules to associate with the gateway."
              }
            },
            "virtualHubResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. The resource ID of a virtual Hub to connect to. Note: The virtual Hub and Gateway must be deployed into the same location."
              }
            },
            "bgpSettings": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. BGP settings details."
              }
            },
            "enableBgpRouteTranslationForNat": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable BGP routes translation for NAT on this VPN gateway."
              }
            },
            "isRoutingPreferenceInternet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable routing preference property for the public IP interface of the VPN gateway."
              }
            },
            "vpnGatewayScaleUnit": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. The scale unit for this VPN gateway."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[take(format('46d3xbcp.res.network-vpngateway.{0}.{1}', replace('0.1.5', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "vpnGateway": {
              "type": "Microsoft.Network/vpnGateways",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "copy": [
                  {
                    "name": "connections",
                    "count": "[length(parameters('vpnConnections'))]",
                    "input": {
                      "name": "[parameters('vpnConnections')[copyIndex('connections')].name]",
                      "properties": {
                        "connectionBandwidth": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'connectionBandwidth')]",
                        "enableBgp": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'enableBgp')]",
                        "enableInternetSecurity": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'enableInternetSecurity')]",
                        "remoteVpnSite": "[if(contains(parameters('vpnConnections')[copyIndex('connections')], 'remoteVpnSiteResourceId'), createObject('id', parameters('vpnConnections')[copyIndex('connections')].remoteVpnSiteResourceId), null())]",
                        "enableRateLimiting": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'enableRateLimiting')]",
                        "routingConfiguration": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'routingConfiguration')]",
                        "routingWeight": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'routingWeight')]",
                        "sharedKey": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'sharedKey')]",
                        "useLocalAzureIpAddress": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'useLocalAzureIpAddress')]",
                        "usePolicyBasedTrafficSelectors": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'usePolicyBasedTrafficSelectors')]",
                        "vpnConnectionProtocolType": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'vpnConnectionProtocolType')]",
                        "ipsecPolicies": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'ipsecPolicies')]",
                        "trafficSelectorPolicies": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'trafficSelectorPolicies')]",
                        "vpnLinkConnections": "[tryGet(parameters('vpnConnections')[copyIndex('connections')], 'vpnLinkConnections')]"
                      }
                    }
                  }
                ],
                "bgpSettings": "[parameters('bgpSettings')]",
                "enableBgpRouteTranslationForNat": "[parameters('enableBgpRouteTranslationForNat')]",
                "isRoutingPreferenceInternet": "[parameters('isRoutingPreferenceInternet')]",
                "vpnGatewayScaleUnit": "[parameters('vpnGatewayScaleUnit')]",
                "virtualHub": {
                  "id": "[parameters('virtualHubResourceId')]"
                }
              }
            },
            "vpnGateway_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/vpnGateways/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "vpnGateway"
              ]
            },
            "vpnGateway_natRules": {
              "copy": {
                "name": "vpnGateway_natRules",
                "count": "[length(parameters('natRules'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-NATRule-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('natRules')[copyIndex()].name]"
                  },
                  "vpnGatewayName": {
                    "value": "[parameters('name')]"
                  },
                  "externalMappings": {
                    "value": "[tryGet(parameters('natRules')[copyIndex()], 'externalMappings')]"
                  },
                  "internalMappings": {
                    "value": "[tryGet(parameters('natRules')[copyIndex()], 'internalMappings')]"
                  },
                  "ipConfigurationId": {
                    "value": "[tryGet(parameters('natRules')[copyIndex()], 'ipConfigurationId')]"
                  },
                  "mode": {
                    "value": "[tryGet(parameters('natRules')[copyIndex()], 'mode')]"
                  },
                  "type": {
                    "value": "[tryGet(parameters('natRules')[copyIndex()], 'type')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "16798525307838261731"
                    },
                    "name": "VPN Gateway NAT Rules",
                    "description": "This module deploys a VPN Gateway NAT Rule."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the NAT rule."
                      }
                    },
                    "vpnGatewayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent VPN gateway this NAT rule is associated with. Required if the template is used in a standalone deployment."
                      }
                    },
                    "externalMappings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An address prefix range of destination IPs on the outside network that source IPs will be mapped to. In other words, your post-NAT address prefix range."
                      }
                    },
                    "internalMappings": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. An address prefix range of source IPs on the inside network that will be mapped to a set of external IPs. In other words, your pre-NAT address prefix range."
                      }
                    },
                    "ipConfigurationId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A NAT rule must be configured to a specific VPN Gateway instance. This is applicable to Dynamic NAT only. Static NAT rules are automatically applied to both VPN Gateway instances."
                      }
                    },
                    "mode": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "EgressSnat",
                        "IngressSnat"
                      ],
                      "metadata": {
                        "description": "Optional. The type of NAT rule for VPN NAT. IngressSnat mode (also known as Ingress Source NAT) is applicable to traffic entering the Azure hub's site-to-site VPN gateway. EgressSnat mode (also known as Egress Source NAT) is applicable to traffic leaving the Azure hub's Site-to-site VPN gateway."
                      }
                    },
                    "type": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Dynamic",
                        "Static"
                      ],
                      "metadata": {
                        "description": "Optional. The type of NAT rule for VPN NAT. Static one-to-one NAT establishes a one-to-one relationship between an internal address and an external address while Dynamic NAT assigns an IP and port based on availability."
                      }
                    }
                  },
                  "resources": {
                    "vpnGateway": {
                      "existing": true,
                      "type": "Microsoft.Network/vpnGateways",
                      "apiVersion": "2023-04-01",
                      "name": "[parameters('vpnGatewayName')]"
                    },
                    "natRule": {
                      "type": "Microsoft.Network/vpnGateways/natRules",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('vpnGatewayName'), parameters('name'))]",
                      "properties": {
                        "externalMappings": "[parameters('externalMappings')]",
                        "internalMappings": "[parameters('internalMappings')]",
                        "ipConfigurationId": "[parameters('ipConfigurationId')]",
                        "mode": "[parameters('mode')]",
                        "type": "[parameters('type')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the NAT rule."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the NAT rule."
                      },
                      "value": "[resourceId('Microsoft.Network/vpnGateways/natRules', parameters('vpnGatewayName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the NAT rule was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "vpnGateway"
              ]
            },
            "vpnGateway_vpnConnections": {
              "copy": {
                "name": "vpnGateway_vpnConnections",
                "count": "[length(parameters('vpnConnections'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Connection-{1}', deployment().name, copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('vpnConnections')[copyIndex()].name]"
                  },
                  "vpnGatewayName": {
                    "value": "[parameters('name')]"
                  },
                  "connectionBandwidth": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'connectionBandwidth')]"
                  },
                  "enableBgp": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'enableBgp')]"
                  },
                  "enableInternetSecurity": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'enableInternetSecurity')]"
                  },
                  "remoteVpnSiteResourceId": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'remoteVpnSiteResourceId')]"
                  },
                  "enableRateLimiting": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'enableRateLimiting')]"
                  },
                  "routingConfiguration": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'routingConfiguration')]"
                  },
                  "routingWeight": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'routingWeight')]"
                  },
                  "sharedKey": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'sharedKey')]"
                  },
                  "useLocalAzureIpAddress": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'useLocalAzureIpAddress')]"
                  },
                  "usePolicyBasedTrafficSelectors": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'usePolicyBasedTrafficSelectors')]"
                  },
                  "vpnConnectionProtocolType": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'vpnConnectionProtocolType')]"
                  },
                  "ipsecPolicies": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'ipsecPolicies')]"
                  },
                  "trafficSelectorPolicies": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'trafficSelectorPolicies')]"
                  },
                  "vpnLinkConnections": {
                    "value": "[tryGet(parameters('vpnConnections')[copyIndex()], 'vpnLinkConnections')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "3416098738124154784"
                    },
                    "name": "VPN Gateway VPN Connections",
                    "description": "This module deploys a VPN Gateway VPN Connection."
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the VPN connection."
                      }
                    },
                    "vpnGatewayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent VPN gateway this VPN connection is associated with. Required if the template is used in a standalone deployment."
                      }
                    },
                    "ipsecPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The IPSec policies to be considered by this connection."
                      }
                    },
                    "trafficSelectorPolicies": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. The traffic selector policies to be considered by this connection."
                      }
                    },
                    "vpnLinkConnections": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of all VPN site link connections to the gateway."
                      }
                    },
                    "routingConfiguration": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Routing configuration indicating the associated and propagated route tables for this connection."
                      }
                    },
                    "usePolicyBasedTrafficSelectors": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable policy-based traffic selectors."
                      }
                    },
                    "useLocalAzureIpAddress": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Use local Azure IP to initiate connection."
                      }
                    },
                    "enableRateLimiting": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable rate limiting."
                      }
                    },
                    "enableInternetSecurity": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable internet security."
                      }
                    },
                    "enableBgp": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enable BGP flag."
                      }
                    },
                    "routingWeight": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Routing weight for VPN connection."
                      }
                    },
                    "connectionBandwidth": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Optional. Expected bandwidth in MBPS."
                      }
                    },
                    "vpnConnectionProtocolType": {
                      "type": "string",
                      "defaultValue": "IKEv2",
                      "allowedValues": [
                        "IKEv1",
                        "IKEv2"
                      ],
                      "metadata": {
                        "description": "Optional. Gateway connection protocol."
                      }
                    },
                    "sharedKey": {
                      "type": "securestring",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. SharedKey for the VPN connection."
                      }
                    },
                    "remoteVpnSiteResourceId": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Reference to a VPN site to link to."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/vpnGateways/vpnConnections",
                      "apiVersion": "2023-04-01",
                      "name": "[format('{0}/{1}', parameters('vpnGatewayName'), parameters('name'))]",
                      "properties": {
                        "connectionBandwidth": "[parameters('connectionBandwidth')]",
                        "enableBgp": "[parameters('enableBgp')]",
                        "enableInternetSecurity": "[parameters('enableInternetSecurity')]",
                        "enableRateLimiting": "[parameters('enableRateLimiting')]",
                        "ipsecPolicies": "[parameters('ipsecPolicies')]",
                        "remoteVpnSite": "[if(not(empty(parameters('remoteVpnSiteResourceId'))), createObject('id', parameters('remoteVpnSiteResourceId')), null())]",
                        "routingConfiguration": "[parameters('routingConfiguration')]",
                        "routingWeight": "[parameters('routingWeight')]",
                        "sharedKey": "[parameters('sharedKey')]",
                        "trafficSelectorPolicies": "[parameters('trafficSelectorPolicies')]",
                        "useLocalAzureIpAddress": "[parameters('useLocalAzureIpAddress')]",
                        "usePolicyBasedTrafficSelectors": "[parameters('usePolicyBasedTrafficSelectors')]",
                        "vpnConnectionProtocolType": "[parameters('vpnConnectionProtocolType')]",
                        "vpnLinkConnections": "[parameters('vpnLinkConnections')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the VPN connection."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the VPN connection."
                      },
                      "value": "[resourceId('Microsoft.Network/vpnGateways/vpnConnections', parameters('vpnGatewayName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the VPN connection was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "vpnGateway"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the VPN gateway."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the VPN gateway."
              },
              "value": "[resourceId('Microsoft.Network/vpnGateways', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the VPN gateway was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('vpnGateway', '2023-04-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[format('virtualHubModule[{0}]', copyIndex())]",
        "[format('virtualHubModule[{0}]', copyIndex())]"
      ]
    },
    "expressRouteGatewayModule": {
      "copy": {
        "name": "expressRouteGatewayModule",
        "count": "[length(parameters('virtualHubParameters'))]"
      },
      "condition": "[equals(tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'deployExpressRouteGateway'), true())]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'expressRouteGatewayName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'expressRouteGatewayName')]"
          },
          "location": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.location.value]"
          },
          "virtualHubId": {
            "value": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceId.value]"
          },
          "allowNonVirtualWanTraffic": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'allowBranchToBranchTraffic')]"
          },
          "autoScaleConfigurationBoundsMin": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'autoScaleConfigurationBoundsMin')]"
          },
          "autoScaleConfigurationBoundsMax": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'autoScaleConfigurationBoundsMax')]"
          },
          "expressRouteConnections": {
            "value": "[tryGet(tryGet(parameters('virtualHubParameters')[copyIndex()], 'expressRouteParameters'), 'expressRouteConnections')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          },
          "tags": {
            "value": "[tryGet(parameters('virtualHubParameters')[copyIndex()], 'tags')]"
          },
          "lock": {
            "value": "[coalesce(parameters('lock'), createObject())]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "8369809794543513504"
            },
            "name": "Express Route Gateways",
            "description": "This module deploys an Express Route Gateway.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Express Route Gateway."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the Firewall policy resource."
              }
            },
            "allowNonVirtualWanTraffic": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Configures this gateway to accept traffic from non Virtual WAN networks."
              }
            },
            "autoScaleConfigurationBoundsMax": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. Maximum number of scale units deployed for ExpressRoute gateway."
              }
            },
            "autoScaleConfigurationBoundsMin": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. Minimum number of scale units deployed for ExpressRoute gateway."
              }
            },
            "expressRouteConnections": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. List of ExpressRoute connections to the ExpressRoute gateway. **Note:** This parameter will overwrite existing connections, including deleting any that are not provided. This is by-design behavior of the resource provider."
              }
            },
            "virtualHubId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the Virtual Wan Hub."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.network-expressroutegateway.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "expressRouteGateway": {
              "type": "Microsoft.Network/expressRouteGateways",
              "apiVersion": "2023-04-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "allowNonVirtualWanTraffic": "[parameters('allowNonVirtualWanTraffic')]",
                "autoScaleConfiguration": {
                  "bounds": {
                    "max": "[parameters('autoScaleConfigurationBoundsMax')]",
                    "min": "[parameters('autoScaleConfigurationBoundsMin')]"
                  }
                },
                "expressRouteConnections": "[parameters('expressRouteConnections')]",
                "virtualHub": {
                  "id": "[parameters('virtualHubId')]"
                }
              }
            },
            "expressRouteGateway_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Network/expressRouteGateways/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "expressRouteGateway"
              ]
            },
            "expressRouteGateway_roleAssignments": {
              "copy": {
                "name": "expressRouteGateway_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Network/expressRouteGateways/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/expressRouteGateways', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "expressRouteGateway"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the ExpressRoute Gateway."
              },
              "value": "[resourceId('Microsoft.Network/expressRouteGateways', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the ExpressRoute Gateway was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the ExpressRoute Gateway."
              },
              "value": "[parameters('name')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('expressRouteGateway', '2023-04-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "[format('virtualHubModule[{0}]', copyIndex())]",
        "[format('virtualHubModule[{0}]', copyIndex())]"
      ]
    }
  },
  "outputs": {
    "virtualWan": {
      "type": "object",
      "metadata": {
        "description": "Object containing the Virtual WAN information."
      },
      "value": {
        "name": "[reference('virtualWan').outputs.name.value]",
        "resourceId": "[reference('virtualWan').outputs.resourceId.value]",
        "resourceGroupName": "[reference('virtualWan').outputs.resourceGroupName.value]"
      }
    },
    "virtualHubs": {
      "type": "array",
      "items": {
        "type": "object"
      },
      "metadata": {
        "description": "The array containing the Virtual Hub information."
      },
      "copy": {
        "count": "[length(parameters('virtualHubParameters'))]",
        "input": {
          "name": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.name.value]",
          "resourceId": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceId.value]",
          "resourceGroupName": "[reference(format('virtualHubModule[{0}]', copyIndex())).outputs.resourceGroupName.value]"
        }
      }
    }
  }
}