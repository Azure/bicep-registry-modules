{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "13765022652157901895"
    },
    "name": "AI Foundry Project",
    "description": "Creates an AI Foundry project and any associated Azure service connections."
  },
  "definitions": {
    "azureConnectionType": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the Azure resource for the connection."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the project connection. Will default to the resource name if not provided."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Type representing an Azure connection to an AI Foundry project."
      }
    },
    "storageAccountConnectionType": {
      "type": "object",
      "properties": {
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the Storage Account for the connection."
          }
        },
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. The name of the project connection. Will default to the resource name if not provided."
          }
        },
        "containerName": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the container in the Storage Account to use for the connection."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Type representing an Azure Storage Account connection to an AI Foundry project."
      }
    },
    "connectionAggregateType": {
      "type": "object",
      "properties": {
        "aiserviceConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectionOutputType"
          },
          "metadata": {
            "description": "Optional. List of AI Service connections created for the project."
          }
        },
        "aiSearchConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectionOutputType"
          },
          "metadata": {
            "description": "Optional. List of AI Search connections created for the project."
          }
        },
        "storageAccountConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectionOutputType"
          },
          "metadata": {
            "description": "Optional. List of Storage Account connections created for the project."
          }
        },
        "cosmosDbConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/connectionOutputType"
          },
          "metadata": {
            "description": "Optional. List of Cosmos DB connections created for the project."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom type definition for connection resource information as output."
      }
    },
    "connectionOutputType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. The name of the connection."
          }
        },
        "resourceId": {
          "type": "string",
          "metadata": {
            "description": "Required. The resource ID of the connection."
          }
        },
        "category": {
          "type": "string",
          "metadata": {
            "description": "Required. The category of the connection."
          }
        },
        "target": {
          "type": "string",
          "metadata": {
            "description": "Required. The target endpoint of the connection."
          }
        }
      },
      "metadata": {
        "__bicep_export!": true,
        "description": "Custom type definition for connection resource information as output."
      }
    },
    "lockType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the name of lock."
          }
        },
        "kind": {
          "type": "string",
          "allowedValues": [
            "CanNotDelete",
            "None",
            "ReadOnly"
          ],
          "nullable": true,
          "metadata": {
            "description": "Optional. Specify the type of lock."
          }
        }
      },
      "metadata": {
        "description": "An AVM-aligned type for a lock.",
        "__bicep_imported_from!": {
          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "minLength": 2,
      "maxLength": 64,
      "metadata": {
        "description": "Required. The name of the AI Foundry project."
      }
    },
    "displayName": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The display name of the AI Foundry project."
      }
    },
    "desc": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The description of the AI Foundry project."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Required. Specifies the location for all the Azure resources."
      }
    },
    "accountName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the existing parent Foundry Account resource."
      }
    },
    "aiServicesConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/azureConnectionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. List of Azure AI Services connections for the project."
      }
    },
    "cosmosDbConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/azureConnectionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. List of Azure Cosmos DB connections for the project."
      }
    },
    "aiSearchConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/azureConnectionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. List of Azure Cognitive Search connections for the project."
      }
    },
    "storageAccountConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/storageAccountConnectionType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. List of Azure Storage Account connections for the project."
      }
    },
    "lock": {
      "$ref": "#/definitions/lockType",
      "nullable": true,
      "metadata": {
        "description": "Optional. The lock settings of the service."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. Tags to be applied to the resources."
      }
    }
  },
  "variables": {
    "createCapabilityHost": "[and(and(not(empty(parameters('cosmosDbConnections'))), not(empty(parameters('aiSearchConnections')))), not(empty(parameters('storageAccountConnections'))))]"
  },
  "resources": {
    "foundryAccount": {
      "existing": true,
      "type": "Microsoft.CognitiveServices/accounts",
      "apiVersion": "2025-06-01",
      "name": "[parameters('accountName')]"
    },
    "project": {
      "type": "Microsoft.CognitiveServices/accounts/projects",
      "apiVersion": "2025-06-01",
      "name": "[format('{0}/{1}', parameters('accountName'), parameters('name'))]",
      "location": "[parameters('location')]",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "displayName": "[if(not(empty(parameters('displayName'))), parameters('displayName'), parameters('name'))]",
        "description": "[if(not(empty(parameters('desc'))), parameters('desc'), parameters('name'))]"
      },
      "tags": "[parameters('tags')]"
    },
    "projectCapabilityHost": {
      "condition": "[variables('createCapabilityHost')]",
      "type": "Microsoft.CognitiveServices/accounts/projects/capabilityHosts",
      "apiVersion": "2025-06-01",
      "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('name'), format('{0}-cap-host', parameters('name')))]",
      "properties": {
        "copy": [
          {
            "name": "vectorStoreConnections",
            "count": "[length(range(0, length(coalesce(parameters('aiSearchConnections'), createArray()))))]",
            "input": "[reference(format('aiSearchConns[{0}]', range(0, length(coalesce(parameters('aiSearchConnections'), createArray())))[copyIndex('vectorStoreConnections')])).outputs.name.value]"
          },
          {
            "name": "storageConnections",
            "count": "[length(range(0, length(coalesce(parameters('storageAccountConnections'), createArray()))))]",
            "input": "[reference(format('storageAccountConns[{0}]', range(0, length(coalesce(parameters('storageAccountConnections'), createArray())))[copyIndex('storageConnections')])).outputs.name.value]"
          },
          {
            "name": "threadStorageConnections",
            "count": "[length(range(0, length(coalesce(parameters('cosmosDbConnections'), createArray()))))]",
            "input": "[reference(format('cosmosDbConns[{0}]', range(0, length(coalesce(parameters('cosmosDbConnections'), createArray())))[copyIndex('threadStorageConnections')])).outputs.name.value]"
          }
        ],
        "capabilityHostKind": "Agents"
      },
      "dependsOn": [
        "aiSearchConns",
        "aiServicesConns",
        "cosmosDbConns",
        "project",
        "storageAccountConns"
      ]
    },
    "projectLock": {
      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
      "type": "Microsoft.Authorization/locks",
      "apiVersion": "2020-05-01",
      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}/projects/{1}', parameters('accountName'), parameters('name'))]",
      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
      "properties": {
        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
      },
      "dependsOn": [
        "project"
      ]
    },
    "aiServicesConns": {
      "copy": {
        "name": "aiServicesConns",
        "count": "[length(coalesce(parameters('aiServicesConnections'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-aiservices-conn-{1}', parameters('name'), take(uniqueString(coalesce(parameters('aiServicesConnections'), createArray())[copyIndex()].resourceId), 5)), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('aiServicesConnections'), createArray())[copyIndex()].name]"
          },
          "projectName": {
            "value": "[parameters('name')]"
          },
          "resourceIdOrName": {
            "value": "[coalesce(parameters('aiServicesConnections'), createArray())[copyIndex()].resourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "4794203539088193288"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the AI Service connection. If not provided, the name will default to the AI Service name."
              }
            },
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the existing AI Foundry project to connect to the AI Service."
              }
            },
            "resourceIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Resource ID or name of the existing AI Service to connect to."
              }
            }
          },
          "resources": {
            "project": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-06-01",
              "name": "[parameters('projectName')]"
            },
            "aiService": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-06-01",
              "subscriptionId": "[reference('parsedResourceId').outputs.subscriptionId.value]",
              "resourceGroup": "[reference('parsedResourceId').outputs.resourceGroupName.value]",
              "name": "[reference('parsedResourceId').outputs.name.value]",
              "dependsOn": [
                "parsedResourceId"
              ]
            },
            "connection": {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}/{2}', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]",
              "properties": {
                "category": "AIServices",
                "target": "[reference('aiService').endpoint]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', reference('parsedResourceId').outputs.subscriptionId.value, reference('parsedResourceId').outputs.resourceGroupName.value), 'Microsoft.CognitiveServices/accounts', reference('parsedResourceId').outputs.name.value)]",
                  "location": "[reference('aiService', '2025-06-01', 'full').location]"
                }
              },
              "dependsOn": [
                "aiService",
                "parsedResourceId"
              ]
            },
            "parsedResourceId": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-ai-service-conn-{1}-parse-resource-id', parameters('projectName'), take(uniqueString(parameters('resourceIdOrName')), 5)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourceIdOrName": {
                    "value": "[parameters('resourceIdOrName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "4037985259053051656"
                    }
                  },
                  "parameters": {
                    "resourceIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID or name of an existing resource."
                      }
                    }
                  },
                  "variables": {
                    "resourceParts": "[split(parameters('resourceIdOrName'), '/')]",
                    "name": "[if(not(empty(variables('resourceParts'))), last(variables('resourceParts')), parameters('resourceIdOrName'))]",
                    "subscriptionId": "[if(greater(length(variables('resourceParts')), 2), variables('resourceParts')[2], subscription().subscriptionId)]",
                    "resourceGroupName": "[if(greater(length(variables('resourceParts')), 4), variables('resourceParts')[4], resourceGroup().name)]"
                  },
                  "resources": [],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the resource."
                      },
                      "value": "[variables('name')]"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subscription ID of the resource."
                      },
                      "value": "[variables('subscriptionId')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group Name of the resource."
                      },
                      "value": "[variables('resourceGroupName')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Service connection."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects/connections', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Service connection."
              },
              "value": "[if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value)]"
            },
            "target": {
              "type": "string",
              "metadata": {
                "description": "Target endpoint of the AI Service connection."
              },
              "value": "[reference('connection').target]"
            }
          }
        }
      },
      "dependsOn": [
        "project"
      ]
    },
    "cosmosDbConns": {
      "copy": {
        "name": "cosmosDbConns",
        "count": "[length(coalesce(parameters('cosmosDbConnections'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-cosmos-conn-{1}', parameters('name'), take(uniqueString(coalesce(parameters('cosmosDbConnections'), createArray())[copyIndex()].resourceId), 5)), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('cosmosDbConnections'), createArray())[copyIndex()].name]"
          },
          "projectName": {
            "value": "[parameters('name')]"
          },
          "resourceIdOrName": {
            "value": "[coalesce(parameters('cosmosDbConnections'), createArray())[copyIndex()].resourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "16690890342852406122"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the Cosmos DB connection. If not provided, the name will default to the Cosmos DB Account name."
              }
            },
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the existing AI Foundry project to connect to the Cosmos DB Account."
              }
            },
            "resourceIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Resource ID or name of the existing Cosmos DB Account to connect to."
              }
            }
          },
          "resources": {
            "project": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-06-01",
              "name": "[parameters('projectName')]"
            },
            "cosmosDb": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2025-04-15",
              "subscriptionId": "[reference('parsedResourceId').outputs.subscriptionId.value]",
              "resourceGroup": "[reference('parsedResourceId').outputs.resourceGroupName.value]",
              "name": "[reference('parsedResourceId').outputs.name.value]",
              "dependsOn": [
                "parsedResourceId"
              ]
            },
            "connection": {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}/{2}', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]",
              "properties": {
                "category": "CosmosDB",
                "target": "[reference('cosmosDb').documentEndpoint]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', reference('parsedResourceId').outputs.subscriptionId.value, reference('parsedResourceId').outputs.resourceGroupName.value), 'Microsoft.DocumentDB/databaseAccounts', reference('parsedResourceId').outputs.name.value)]",
                  "location": "[reference('cosmosDb', '2025-04-15', 'full').location]"
                }
              },
              "dependsOn": [
                "cosmosDb",
                "parsedResourceId"
              ]
            },
            "parsedResourceId": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-cosmos-db-conn-{1}-parse-resource-id', parameters('projectName'), take(uniqueString(parameters('resourceIdOrName')), 5)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourceIdOrName": {
                    "value": "[parameters('resourceIdOrName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "4037985259053051656"
                    }
                  },
                  "parameters": {
                    "resourceIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID or name of an existing resource."
                      }
                    }
                  },
                  "variables": {
                    "resourceParts": "[split(parameters('resourceIdOrName'), '/')]",
                    "name": "[if(not(empty(variables('resourceParts'))), last(variables('resourceParts')), parameters('resourceIdOrName'))]",
                    "subscriptionId": "[if(greater(length(variables('resourceParts')), 2), variables('resourceParts')[2], subscription().subscriptionId)]",
                    "resourceGroupName": "[if(greater(length(variables('resourceParts')), 4), variables('resourceParts')[4], resourceGroup().name)]"
                  },
                  "resources": [],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the resource."
                      },
                      "value": "[variables('name')]"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subscription ID of the resource."
                      },
                      "value": "[variables('subscriptionId')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group Name of the resource."
                      },
                      "value": "[variables('resourceGroupName')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Cosmos DB connection."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects/connections', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB connection."
              },
              "value": "[if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value)]"
            },
            "target": {
              "type": "string",
              "metadata": {
                "description": "Target endpoint of the Cosmos DB connection."
              },
              "value": "[reference('connection').target]"
            }
          }
        }
      },
      "dependsOn": [
        "project"
      ]
    },
    "aiSearchConns": {
      "copy": {
        "name": "aiSearchConns",
        "count": "[length(coalesce(parameters('aiSearchConnections'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-search-conn-{1}', parameters('name'), take(uniqueString(coalesce(parameters('aiSearchConnections'), createArray())[copyIndex()].resourceId), 5)), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('aiSearchConnections'), createArray())[copyIndex()].name]"
          },
          "projectName": {
            "value": "[parameters('name')]"
          },
          "resourceIdOrName": {
            "value": "[coalesce(parameters('aiSearchConnections'), createArray())[copyIndex()].resourceId]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "5697662461036314948"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the AI Search connection. If not provided, the name will default to the AI Search name."
              }
            },
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the existing AI Foundry project to connect to the AI Search."
              }
            },
            "resourceIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Resource ID or name of the existing AI Search to connect to."
              }
            }
          },
          "resources": {
            "project": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-06-01",
              "name": "[parameters('projectName')]"
            },
            "aiSearch": {
              "existing": true,
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2025-05-01",
              "subscriptionId": "[reference('parsedResourceId').outputs.subscriptionId.value]",
              "resourceGroup": "[reference('parsedResourceId').outputs.resourceGroupName.value]",
              "name": "[reference('parsedResourceId').outputs.name.value]",
              "dependsOn": [
                "parsedResourceId"
              ]
            },
            "connection": {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}/{2}', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net/', reference('parsedResourceId').outputs.name.value)]",
                "authType": "AAD",
                "isSharedToAll": true,
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', reference('parsedResourceId').outputs.subscriptionId.value, reference('parsedResourceId').outputs.resourceGroupName.value), 'Microsoft.Search/searchServices', reference('parsedResourceId').outputs.name.value)]",
                  "location": "[reference('aiSearch', '2025-05-01', 'full').location]"
                }
              },
              "dependsOn": [
                "aiSearch",
                "parsedResourceId"
              ]
            },
            "parsedResourceId": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-ai-search-conn-{1}-parse-resource-id', parameters('projectName'), take(uniqueString(parameters('resourceIdOrName')), 5)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourceIdOrName": {
                    "value": "[parameters('resourceIdOrName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "4037985259053051656"
                    }
                  },
                  "parameters": {
                    "resourceIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID or name of an existing resource."
                      }
                    }
                  },
                  "variables": {
                    "resourceParts": "[split(parameters('resourceIdOrName'), '/')]",
                    "name": "[if(not(empty(variables('resourceParts'))), last(variables('resourceParts')), parameters('resourceIdOrName'))]",
                    "subscriptionId": "[if(greater(length(variables('resourceParts')), 2), variables('resourceParts')[2], subscription().subscriptionId)]",
                    "resourceGroupName": "[if(greater(length(variables('resourceParts')), 4), variables('resourceParts')[4], resourceGroup().name)]"
                  },
                  "resources": [],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the resource."
                      },
                      "value": "[variables('name')]"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subscription ID of the resource."
                      },
                      "value": "[variables('subscriptionId')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group Name of the resource."
                      },
                      "value": "[variables('resourceGroupName')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Search connection."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects/connections', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search connection."
              },
              "value": "[if(not(empty(parameters('name'))), parameters('name'), reference('parsedResourceId').outputs.name.value)]"
            },
            "target": {
              "type": "string",
              "metadata": {
                "description": "Target endpoint of the AI Search connection."
              },
              "value": "[reference('connection').target]"
            }
          }
        }
      },
      "dependsOn": [
        "project"
      ]
    },
    "storageAccountConns": {
      "copy": {
        "name": "storageAccountConns",
        "count": "[length(coalesce(parameters('storageAccountConnections'), createArray()))]"
      },
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('{0}-storage-conn-{1}', parameters('name'), take(uniqueString(coalesce(parameters('storageAccountConnections'), createArray())[copyIndex()].resourceId), 5)), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[coalesce(parameters('storageAccountConnections'), createArray())[copyIndex()].name]"
          },
          "projectName": {
            "value": "[parameters('name')]"
          },
          "resourceIdOrName": {
            "value": "[coalesce(parameters('storageAccountConnections'), createArray())[copyIndex()].resourceId]"
          },
          "containerName": {
            "value": "[coalesce(parameters('storageAccountConnections'), createArray())[copyIndex()].containerName]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "3619898416564822787"
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Name of the storage connection. If not provided, the name will default to the Storage Account name."
              }
            },
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the existing AI Foundry project to connect to the Storage Account."
              }
            },
            "resourceIdOrName": {
              "type": "string",
              "metadata": {
                "description": "Required. The Resource ID or name of the existing Storage Account to connect to."
              }
            },
            "containerName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the container in the Storage Account to use for the connection."
              }
            }
          },
          "resources": {
            "project": {
              "existing": true,
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-06-01",
              "name": "[parameters('projectName')]"
            },
            "storageAccount": {
              "existing": true,
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2025-01-01",
              "subscriptionId": "[reference('parsedResourceId').outputs.subscriptionId.value]",
              "resourceGroup": "[reference('parsedResourceId').outputs.resourceGroupName.value]",
              "name": "[reference('parsedResourceId').outputs.name.value]",
              "dependsOn": [
                "parsedResourceId"
              ]
            },
            "connection": {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}/{2}', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), format('{0}-{1}', reference('parsedResourceId').outputs.name.value, parameters('containerName'))))]",
              "properties": {
                "category": "AzureBlob",
                "target": "[reference('storageAccount').primaryEndpoints.blob]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', reference('parsedResourceId').outputs.subscriptionId.value, reference('parsedResourceId').outputs.resourceGroupName.value), 'Microsoft.Storage/storageAccounts', reference('parsedResourceId').outputs.name.value)]",
                  "location": "[reference('storageAccount', '2025-01-01', 'full').location]",
                  "accountName": "[reference('parsedResourceId').outputs.name.value]",
                  "containerName": "[parameters('containerName')]"
                }
              },
              "dependsOn": [
                "parsedResourceId",
                "storageAccount"
              ]
            },
            "parsedResourceId": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-storage-conn-{1}-parse-resource-id', parameters('projectName'), take(uniqueString(parameters('resourceIdOrName')), 5)), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourceIdOrName": {
                    "value": "[parameters('resourceIdOrName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "4037985259053051656"
                    }
                  },
                  "parameters": {
                    "resourceIdOrName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Resource ID or name of an existing resource."
                      }
                    }
                  },
                  "variables": {
                    "resourceParts": "[split(parameters('resourceIdOrName'), '/')]",
                    "name": "[if(not(empty(variables('resourceParts'))), last(variables('resourceParts')), parameters('resourceIdOrName'))]",
                    "subscriptionId": "[if(greater(length(variables('resourceParts')), 2), variables('resourceParts')[2], subscription().subscriptionId)]",
                    "resourceGroupName": "[if(greater(length(variables('resourceParts')), 4), variables('resourceParts')[4], resourceGroup().name)]"
                  },
                  "resources": [],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the resource."
                      },
                      "value": "[variables('name')]"
                    },
                    "subscriptionId": {
                      "type": "string",
                      "metadata": {
                        "description": "Subscription ID of the resource."
                      },
                      "value": "[variables('subscriptionId')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource Group Name of the resource."
                      },
                      "value": "[variables('resourceGroupName')]"
                    }
                  }
                }
              }
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Storage Account connection."
              },
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects/connections', split(parameters('projectName'), '/')[0], split(parameters('projectName'), '/')[1], if(not(empty(parameters('name'))), parameters('name'), format('{0}-{1}', reference('parsedResourceId').outputs.name.value, parameters('containerName'))))]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Storage Account connection."
              },
              "value": "[if(not(empty(parameters('name'))), parameters('name'), format('{0}-{1}', reference('parsedResourceId').outputs.name.value, parameters('containerName')))]"
            },
            "target": {
              "type": "string",
              "metadata": {
                "description": "Target endpoint of the Storage Account connection."
              },
              "value": "[reference('connection').target]"
            }
          }
        }
      },
      "dependsOn": [
        "project"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "Name of the deployed Azure Resource Group."
      },
      "value": "[resourceGroup().name]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "Resource ID of the Project."
      },
      "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('name'))]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "Name of the Project."
      },
      "value": "[parameters('name')]"
    },
    "displayName": {
      "type": "string",
      "metadata": {
        "description": "Display name of the Project."
      },
      "value": "[reference('project').displayName]"
    },
    "desc": {
      "type": "string",
      "metadata": {
        "description": "Description of the Project."
      },
      "value": "[reference('project').description]"
    },
    "aiServicesConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectionOutputType"
      },
      "metadata": {
        "description": "AI Services Connections for the Project."
      },
      "copy": {
        "count": "[length(range(0, length(coalesce(parameters('aiServicesConnections'), createArray()))))]",
        "input": {
          "resourceId": "[reference(format('aiServicesConns[{0}]', range(0, length(coalesce(parameters('aiServicesConnections'), createArray())))[copyIndex()])).outputs.resourceId.value]",
          "name": "[reference(format('aiServicesConns[{0}]', range(0, length(coalesce(parameters('aiServicesConnections'), createArray())))[copyIndex()])).outputs.name.value]",
          "category": "AIServices",
          "target": "[reference(format('aiServicesConns[{0}]', range(0, length(coalesce(parameters('aiServicesConnections'), createArray())))[copyIndex()])).outputs.target.value]"
        }
      }
    },
    "aiSearchConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectionOutputType"
      },
      "metadata": {
        "description": "AI Search Connections for the Project."
      },
      "copy": {
        "count": "[length(range(0, length(coalesce(parameters('aiSearchConnections'), createArray()))))]",
        "input": {
          "resourceId": "[reference(format('aiSearchConns[{0}]', range(0, length(coalesce(parameters('aiSearchConnections'), createArray())))[copyIndex()])).outputs.resourceId.value]",
          "name": "[reference(format('aiSearchConns[{0}]', range(0, length(coalesce(parameters('aiSearchConnections'), createArray())))[copyIndex()])).outputs.name.value]",
          "category": "CognitiveSearch",
          "target": "[reference(format('aiSearchConns[{0}]', range(0, length(coalesce(parameters('aiSearchConnections'), createArray())))[copyIndex()])).outputs.target.value]"
        }
      }
    },
    "storageAccountConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectionOutputType"
      },
      "metadata": {
        "description": "Storage Account Connections for the Project."
      },
      "copy": {
        "count": "[length(range(0, length(coalesce(parameters('storageAccountConnections'), createArray()))))]",
        "input": {
          "resourceId": "[reference(format('storageAccountConns[{0}]', range(0, length(coalesce(parameters('storageAccountConnections'), createArray())))[copyIndex()])).outputs.resourceId.value]",
          "name": "[reference(format('storageAccountConns[{0}]', range(0, length(coalesce(parameters('storageAccountConnections'), createArray())))[copyIndex()])).outputs.name.value]",
          "category": "AzureBlob",
          "target": "[reference(format('storageAccountConns[{0}]', range(0, length(coalesce(parameters('storageAccountConnections'), createArray())))[copyIndex()])).outputs.target.value]"
        }
      }
    },
    "cosmosDbConnections": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/connectionOutputType"
      },
      "metadata": {
        "description": "Cosmos DB Connections for the Project."
      },
      "copy": {
        "count": "[length(range(0, length(coalesce(parameters('cosmosDbConnections'), createArray()))))]",
        "input": {
          "resourceId": "[reference(format('cosmosDbConns[{0}]', range(0, length(coalesce(parameters('cosmosDbConnections'), createArray())))[copyIndex()])).outputs.resourceId.value]",
          "name": "[reference(format('cosmosDbConns[{0}]', range(0, length(coalesce(parameters('cosmosDbConnections'), createArray())))[copyIndex()])).outputs.name.value]",
          "category": "CosmosDB",
          "target": "[reference(format('cosmosDbConns[{0}]', range(0, length(coalesce(parameters('cosmosDbConnections'), createArray())))[copyIndex()])).outputs.target.value]"
        }
      }
    }
  }
}