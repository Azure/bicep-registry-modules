{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.27.1.19265",
      "templateHash": "16264732445572231050"
    },
    "name": "import-image-to-acr",
    "description": "This modules deployes an image to an Azure Container Registry.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "importedImageType": {
      "type": "object",
      "properties": {
        "originalImage": {
          "type": "string",
          "metadata": {
            "description": "The original image name."
          }
        },
        "acrHostedImage": {
          "type": "string",
          "metadata": {
            "description": "The image name in the Azure Container Registry."
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the deployment script resource."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "acrName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Azure Container Registry."
      }
    },
    "forceUpdateTag": {
      "type": "string",
      "defaultValue": "[utcNow()]",
      "metadata": {
        "description": "Optional. How the deployment script should be forced to execute. Default is to force the script to deploy the image to run every time."
      }
    },
    "rbacRoleNeeded": {
      "type": "string",
      "defaultValue": "b24988ac-6180-42a0-ab88-20f7382dd24c",
      "metadata": {
        "description": "Optional. Azure RoleId that are required for the DeploymentScript resource to import images. Default is AcrPush, which is needed to import into an ACR."
      }
    },
    "useExistingManagedIdentity": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Does the Managed Identity already exists, or should be created. Default is false."
      }
    },
    "managedIdentityName": {
      "type": "string",
      "defaultValue": "id-ContainerRegistryImport",
      "metadata": {
        "description": "Conditional. Name of the Managed Identity resource to create. Required if `useExistingManagedIdentity` is `true`. Defaults to `id-ContainerRegistryImport`."
      }
    },
    "existingManagedIdentitySubId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "Conditional. For an existing Managed Identity, the Subscription Id it is located in. Default is the current subscription. Required if `useExistingManagedIdentity` is `true`. Defaults to the curent subscription."
      }
    },
    "existingManagedIdentityResourceGroupName": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Conditional. For an existing Managed Identity, the Resource Group it is located in. Default is the current resource group. Required if `useExistingManagedIdentity` is `true`. Defaults to the current resource group."
      }
    },
    "image": {
      "type": "string",
      "metadata": {
        "example": "mcr.microsoft.com/k8se/quickstart-jobs:latest",
        "description": "Required. A fully qualified image name to import."
      }
    },
    "overwriteExistingImage": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The image will be overwritten if it already exists in the ACR with the same tag. Default is false."
      }
    },
    "initialScriptDelay": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "Optional. A delay in seconds before the script import operation starts. Primarily to allow Azure AAD Role Assignments to propagate. Default is 30s."
      }
    },
    "retryMax": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Optional. The maximum number of retries for the script import operation. Default is 3."
      }
    },
    "cleanupPreference": {
      "type": "string",
      "defaultValue": "OnExpiration",
      "allowedValues": [
        "OnSuccess",
        "OnExpiration",
        "Always"
      ],
      "metadata": {
        "description": "Optional. When the script resource is cleaned up. Default is OnExpiration and the cleanup time is after 1h."
      }
    },
    "storageAccountName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the storage account to use for the deployment script. An existing storage account is needed, if PrivateLink is going to be used for the deployment script."
      }
    },
    "subnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The subnet id to use for the deployment script. An existing subnet is needed, if PrivateLink is going to be used for the deployment script."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
        "description": "Optional. Tags of the resource."
      }
    }
  },
  "variables": {
    "storageSettings": "[if(not(empty(parameters('storageAccountName'))), createObject('storageAccountSettings', createObject('storageAccountName', parameters('storageAccountName'))), createObject())]",
    "containerSettings": "[if(not(empty(parameters('subnetId'))), createObject('containerSettings', createObject('subnetIds', createArray(createObject('id', parameters('subnetId'))), 'containerGroupName', format('{0}-infrastructure', resourceGroup().name))), createObject())]"
  },
  "resources": {
    "importImage::logs": {
      "existing": true,
      "type": "Microsoft.Resources/deploymentScripts/logs",
      "apiVersion": "2023-08-01",
      "name": "[format('{0}/{1}', format('ACR-Import-{0}-{1}', parameters('name'), last(split(replace(parameters('image'), ':', '-'), '/'))), 'default')]",
      "dependsOn": [
        "importImage"
      ]
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.deploymentscript-importimagetoacr.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "acr": {
      "existing": true,
      "type": "Microsoft.ContainerRegistry/registries",
      "apiVersion": "2023-07-01",
      "name": "[parameters('acrName')]"
    },
    "newManagedIdentity": {
      "condition": "[not(parameters('useExistingManagedIdentity'))]",
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('managedIdentityName')]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]"
    },
    "existingManagedIdentity": {
      "condition": "[parameters('useExistingManagedIdentity')]",
      "existing": true,
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "subscriptionId": "[parameters('existingManagedIdentitySubId')]",
      "resourceGroup": "[parameters('existingManagedIdentityResourceGroupName')]",
      "name": "[parameters('managedIdentityName')]"
    },
    "rbac": {
      "condition": "[not(empty(parameters('rbacRoleNeeded')))]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-08-01-preview",
      "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('acrName'))]",
      "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('acrName')), parameters('rbacRoleNeeded'), if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]",
      "properties": {
        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('rbacRoleNeeded'))]",
        "principalId": "[if(parameters('useExistingManagedIdentity'), reference('existingManagedIdentity').principalId, reference('newManagedIdentity').principalId)]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "acr",
        "existingManagedIdentity",
        "newManagedIdentity"
      ]
    },
    "importImage": {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "[format('ACR-Import-{0}-{1}', parameters('name'), last(split(replace(parameters('image'), ':', '-'), '/')))]",
      "location": "[parameters('location')]",
      "tags": "[parameters('tags')]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', if(parameters('useExistingManagedIdentity'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('existingManagedIdentitySubId'), parameters('existingManagedIdentityResourceGroupName')), 'Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('managedIdentityName'))))]": {}
        }
      },
      "kind": "AzureCLI",
      "properties": "[union(createObject('forceUpdateTag', parameters('forceUpdateTag'), 'azCliVersion', '2.59.0', 'timeout', 'PT30M', 'retentionInterval', 'PT1H', 'environmentVariables', createArray(createObject('name', 'acrName', 'value', parameters('acrName')), createObject('name', 'imageName', 'value', parameters('image')), createObject('name', 'overwriteExistingImage', 'value', toLower(string(parameters('overwriteExistingImage')))), createObject('name', 'initialDelay', 'value', format('{0}s', string(parameters('initialScriptDelay')))), createObject('name', 'retryMax', 'value', string(parameters('retryMax'))), createObject('name', 'retrySleep', 'value', '5s')), 'scriptContent', '#!/bin/bash\nset -e\n\necho \"Waiting on RBAC replication ($initialDelay)\\n\"\nsleep $initialDelay\n\n# retry loop to catch errors (usually RBAC delays, but ''Error copying blobs'' is also not unheard of)\nretryLoopCount=0\nuntil [ $retryLoopCount -ge $retryMax ]\ndo\n  echo \"Importing Image ($retryLoopCount): $imageName into ACR: $acrName\\n\"\n  if [ $overwriteExistingImage = ''true'' ]; then\n    az acr import -n $acrName --source $imageName --force && break\n  else\n    az acr import -n $acrName --source $imageName && break\n  fi\n\n  sleep $retrySleep\n  retryLoopCount=$((retryLoopCount+1))\ndone\n\necho \"done\\n\"', 'cleanupPreference', parameters('cleanupPreference')), variables('storageSettings'), variables('containerSettings'))]",
      "dependsOn": [
        "existingManagedIdentity",
        "newManagedIdentity",
        "rbac"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the deployment script was deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "deploymentScriptOutput": {
      "type": "array",
      "items": {
        "type": "string"
      },
      "metadata": {
        "description": "The script output of each image import."
      },
      "value": "[split(reference('importImage::logs').log, '\n')]"
    },
    "importedImage": {
      "$ref": "#/definitions/importedImageType",
      "metadata": {
        "description": "An array of the imported images."
      },
      "value": {
        "originalImage": "[parameters('image')]",
        "acrHostedImage": "[format('{0}{1}', reference('acr').loginServer, string(skip(parameters('image'), indexOf(parameters('image'), '/'))))]"
      }
    }
  }
}