{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "11921412446024663103"
    },
    "name": "Modernize Your Code Solution Accelerator",
    "description": "This module contains the resources required to deploy the [Modernize Your Code Solution Accelerator](https://github.com/microsoft/Modernize-your-code-solution-accelerator) for both Sandbox environments and enterprise-grade environments.\n\n> **Note:** This module is not intended for broad, generic use, as it was designed by the Commercial Solution Areas CTO team, as a Microsoft Solution Accelerator. Feature requests and bug fix requests are welcome if they support the needs of this organization but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case. This module will likely be updated to leverage AVM resource modules in the future. This may result in breaking changes in upcoming versions when these features are implemented.\n"
  },
  "parameters": {
    "solutionName": {
      "type": "string",
      "minLength": 3,
      "maxLength": 16,
      "metadata": {
        "description": "Required. A unique application/solution name for all resources in this deployment. This should be 3-16 characters long."
      }
    },
    "solutionUniqueText": {
      "type": "string",
      "defaultValue": "[substring(uniqueString(subscription().id, resourceGroup().name, parameters('solutionName')), 0, 5)]",
      "maxLength": 5,
      "metadata": {
        "description": "Optional. A unique text value for the solution. This is used to ensure resource names are unique for global resources. Defaults to a 5-character substring of the unique string generated from the subscription ID, resource group name, and solution name."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Optional. Azure region for all services. Defaults to the resource group location."
      },
      "minLength": 3
    },
    "azureAiServiceLocation": {
      "type": "string",
      "defaultValue": "[parameters('location')]",
      "allowedValues": [
        "australiaeast",
        "brazilsouth",
        "canadacentral",
        "canadaeast",
        "eastus",
        "eastus2",
        "francecentral",
        "germanywestcentral",
        "japaneast",
        "koreacentral",
        "northcentralus",
        "norwayeast",
        "polandcentral",
        "southafricanorth",
        "southcentralus",
        "southindia",
        "swedencentral",
        "switzerlandnorth",
        "uaenorth",
        "uksouth",
        "westeurope",
        "westus",
        "westus3"
      ],
      "metadata": {
        "azd": {
          "type": "location"
        },
        "description": "Optional. Location for all AI service resources. This location can be different from the resource group location."
      }
    },
    "capacity": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "Optional. AI model deployment token capacity. Defaults to 5K tokens per minute."
      }
    },
    "enableMonitoring": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable monitoring for the resources. This will enable Application Insights and Log Analytics. Defaults to false."
      }
    },
    "enableScaling": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable scaling for the container apps. Defaults to false."
      }
    },
    "enableRedundancy": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable redundancy for applicable resources. Defaults to false."
      }
    },
    "secondaryLocation": {
      "type": "string",
      "nullable": true,
      "metadata": {
        "description": "Optional. The secondary location for the Cosmos DB account if redundancy is enabled. Defaults to false."
      }
    },
    "enablePrivateNetworking": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable private networking for the resources. Set to true to enable private networking. Defaults to false."
      }
    },
    "vmAdminUsername": {
      "type": "securestring",
      "defaultValue": "[take(newGuid(), 20)]",
      "metadata": {
        "description": "Optional. Admin username for the Jumpbox Virtual Machine. Set to custom value if enablePrivateNetworking is true."
      }
    },
    "vmAdminPassword": {
      "type": "securestring",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "Optional. Admin password for the Jumpbox Virtual Machine. Set to custom value if enablePrivateNetworking is true."
      }
    },
    "backendContainerRegistryHostname": {
      "type": "string",
      "defaultValue": "cmsacontainerreg.azurecr.io",
      "metadata": {
        "description": "Optional. The Container Registry hostname where the docker images for the backend are located."
      }
    },
    "backendContainerImageName": {
      "type": "string",
      "defaultValue": "cmsabackend",
      "metadata": {
        "description": "Optional. The Container Image Name to deploy on the backend."
      }
    },
    "backendContainerImageTag": {
      "type": "string",
      "defaultValue": "latest_2025-06-24_249",
      "metadata": {
        "description": "Optional. The Container Image Tag to deploy on the backend."
      }
    },
    "frontendContainerRegistryHostname": {
      "type": "string",
      "defaultValue": "cmsacontainerreg.azurecr.io",
      "metadata": {
        "description": "Optional. The Container Registry hostname where the docker images for the frontend are located."
      }
    },
    "frontendContainerImageName": {
      "type": "string",
      "defaultValue": "cmsafrontend",
      "metadata": {
        "description": "Optional. The Container Image Name to deploy on the frontend."
      }
    },
    "frontendContainerImageTag": {
      "type": "string",
      "defaultValue": "latest_2025-06-24_249",
      "metadata": {
        "description": "Optional. The Container Image Tag to deploy on the frontend."
      }
    },
    "tags": {
      "type": "object",
      "metadata": {
        "__bicep_resource_derived_type!": {
          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
        },
        "description": "Optional. Specifies the resource tags for all the resources. Tag \"azd-env-name\" is automatically added to all resources."
      },
      "defaultValue": {}
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "variables": {
    "allTags": "[union(createObject('azd-env-name', parameters('solutionName')), parameters('tags'))]",
    "resourcesName": "[toLower(trim(replace(replace(replace(replace(replace(replace(format('{0}{1}', parameters('solutionName'), parameters('solutionUniqueText')), '-', ''), '_', ''), '.', ''), '/', ''), ' ', ''), '*', '')))]",
    "modelDeployment": {
      "name": "gpt-4o",
      "model": {
        "name": "gpt-4o",
        "format": "OpenAI",
        "version": "2024-08-06"
      },
      "sku": {
        "name": "GlobalStandard",
        "capacity": "[parameters('capacity')]"
      },
      "raiPolicyName": "Microsoft.Default"
    },
    "appStorageContainerName": "appstorage",
    "containerAppsEnvironmentName": "[format('cae-{0}', variables('resourcesName'))]"
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[take(format('46d3xbcp.ptn.sa-modernizeyourcode.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4)), 64)]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "appIdentity": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('identity-app-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('id-app-{0}', variables('resourcesName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.34.44.8038",
              "templateHash": "16707109626832623586"
            },
            "name": "User Assigned Identities",
            "description": "This module deploys a User Assigned Identity."
          },
          "definitions": {
            "federatedIdentityCredentialType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the federated identity credential."
                  }
                },
                "audiences": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The list of audiences that can appear in the issued token."
                  }
                },
                "issuer": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The URL of the issuer to be trusted."
                  }
                },
                "subject": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The identifier of the external identity."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the federated identity credential."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the User Assigned Identity."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "federatedIdentityCredentials": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/federatedIdentityCredentialType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "userAssignedIdentity": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2024-11-30",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "userAssignedIdentity_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_roleAssignments": {
              "copy": {
                "name": "userAssignedIdentity_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_federatedIdentityCredentials": {
              "copy": {
                "name": "userAssignedIdentity_federatedIdentityCredentials",
                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-UserMSI-FederatedIdentityCred-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('name')]"
                  },
                  "audiences": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                  },
                  "issuer": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                  },
                  "subject": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.34.44.8038",
                      "templateHash": "13656021764446440473"
                    },
                    "name": "User Assigned Identity Federated Identity Credential",
                    "description": "This module deploys a User Assigned Identity Federated Identity Credential."
                  },
                  "parameters": {
                    "userAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret."
                      }
                    },
                    "audiences": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                      }
                    },
                    "subject": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                      "apiVersion": "2024-11-30",
                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                      "properties": {
                        "audiences": "[parameters('audiences')]",
                        "issuer": "[parameters('issuer')]",
                        "subject": "[parameters('subject')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the federated identity credential."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the federated identity credential."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the federated identity credential was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user assigned identity."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user assigned identity."
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID (object ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID (application ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').clientId]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the user assigned identity was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('userAssignedIdentity', '2024-11-30', 'full').location]"
            }
          }
        }
      }
    },
    "logAnalyticsWorkspace": {
      "condition": "[or(parameters('enableMonitoring'), parameters('enablePrivateNetworking'))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('log-analytics-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('log-{0}', variables('resourcesName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "skuName": {
            "value": "PerGB2018"
          },
          "dataRetention": {
            "value": 30
          },
          "diagnosticSettings": {
            "value": [
              {
                "useThisWorkspace": true
              }
            ]
          },
          "features": {
            "value": {
              "enableLogAccessUsingOnlyResourcePermissions": true,
              "disableLocalAuth": "[parameters('enablePrivateNetworking')]"
            }
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "1749032521457140145"
            },
            "name": "Log Analytics Workspaces",
            "description": "This module deploys a Log Analytics Workspace."
          },
          "definitions": {
            "diagnosticSettingType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "useThisWorkspace": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              }
            },
            "gallerySolutionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                  }
                },
                "plan": {
                  "$ref": "#/definitions/solutionPlanType",
                  "metadata": {
                    "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the gallery solutions to be created in the log analytics workspace."
              }
            },
            "storageInsightsConfigType": {
              "type": "object",
              "properties": {
                "storageAccountResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the storage account to be linked."
                  }
                },
                "containers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The names of the blob containers that the workspace should read."
                  }
                },
                "tables": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of tables to be read by the workspace."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the storage insights configuration."
              }
            },
            "linkedServiceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the linked service."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                  }
                },
                "writeAccessResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked service."
              }
            },
            "linkedStorageAccountType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the link."
                  }
                },
                "storageAccountIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1,
                  "metadata": {
                    "description": "Required. Linked storage accounts resources Ids."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the linked storage account."
              }
            },
            "savedSearchType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the saved search."
                  }
                },
                "etag": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                  }
                },
                "category": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The category of the saved search. This helps the user to find a saved search faster."
                  }
                },
                "displayName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Display name for the search."
                  }
                },
                "functionAlias": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The function alias if query serves as a function."
                  }
                },
                "functionParameters": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: 'param-name1:type1 = default_value1, param-name2:type2 = default_value2'. For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                  }
                },
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The query expression for the saved search."
                  }
                },
                "tags": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The tags attached to the saved search."
                  }
                },
                "version": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version number of the query language. The current version is 2 and is the default."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the saved search."
              }
            },
            "dataExportType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data export."
                  }
                },
                "destination": {
                  "$ref": "#/definitions/destinationType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination of the data export."
                  }
                },
                "enable": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable or disable the data export."
                  }
                },
                "tableNames": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "metadata": {
                    "description": "Required. The list of table names to export."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data export."
              }
            },
            "dataSourceType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the data source."
                  }
                },
                "kind": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The kind of data source."
                  }
                },
                "linkedResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource id of the resource that will be linked to the workspace."
                  }
                },
                "eventLogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the event log to configure when kind is WindowsEvent."
                  }
                },
                "eventTypes": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The event types to configure when kind is WindowsEvent."
                  }
                },
                "objectName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "instanceName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "intervalSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                  }
                },
                "performanceCounters": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                  }
                },
                "counterName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                  }
                },
                "state": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                  }
                },
                "syslogName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. System log to configure when kind is LinuxSyslog."
                  }
                },
                "syslogSeverities": {
                  "type": "array",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Severities to configure when kind is LinuxSyslog."
                  }
                },
                "tags": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                    },
                    "description": "Optional. Tags to configure in the resource."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the data source."
              }
            },
            "tableType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the table."
                  }
                },
                "plan": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The plan for the table."
                  }
                },
                "restoredLogs": {
                  "$ref": "#/definitions/restoredLogsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The restored logs for the table."
                  }
                },
                "schema": {
                  "$ref": "#/definitions/schemaType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The schema for the table."
                  }
                },
                "searchResults": {
                  "$ref": "#/definitions/searchResultsType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search results for the table."
                  }
                },
                "retentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The retention in days for the table."
                  }
                },
                "totalRetentionInDays": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The total retention in days for the table."
                  }
                },
                "roleAssignments": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/roleAssignmentType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The role assignments for the table."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Properties of the custom table."
              }
            },
            "workspaceFeaturesType": {
              "type": "object",
              "properties": {
                "disableLocalAuth": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Disable Non-EntraID based Auth. Default is true."
                  }
                },
                "enableDataExport": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that indicate if data should be exported."
                  }
                },
                "enableLogAccessUsingOnlyResourcePermissions": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enable log access using only resource permissions. Default is false."
                  }
                },
                "immediatePurgeDataOn30Days": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Flag that describes if we want to remove the data after 30 days."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Features of the workspace."
              }
            },
            "workspaceReplicationType": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies whether the replication is enabled or not. When true, workspace configuration and data is replicated to the specified location."
                  }
                },
                "location": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The location to which the workspace is replicated. Required if replication is enabled."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Replication properties of the workspace."
              }
            },
            "_1.columnType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The column name."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "boolean",
                    "dateTime",
                    "dynamic",
                    "guid",
                    "int",
                    "long",
                    "real",
                    "string"
                  ],
                  "metadata": {
                    "description": "Required. The column type."
                  }
                },
                "dataTypeHint": {
                  "type": "string",
                  "allowedValues": [
                    "armPath",
                    "guid",
                    "ip",
                    "uri"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column data type logical hint."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The column description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Column display name."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the table column.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "destinationType": {
              "type": "object",
              "properties": {
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The destination resource ID."
                  }
                },
                "metaData": {
                  "type": "object",
                  "properties": {
                    "eventHubName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination metadata."
                  }
                }
              },
              "metadata": {
                "description": "The data export destination properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "data-export/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "restoredLogsType": {
              "type": "object",
              "properties": {
                "sourceTable": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table to restore data from."
                  }
                },
                "startRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the restore from (UTC)."
                  }
                },
                "endRestoreTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the restore by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the restore operation that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "schemaType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The table name."
                  }
                },
                "columns": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/_1.columnType"
                  },
                  "metadata": {
                    "description": "Required. A list of table custom columns."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table description."
                  }
                },
                "displayName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The table display name."
                  }
                }
              },
              "metadata": {
                "description": "The table schema.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "searchResultsType": {
              "type": "object",
              "properties": {
                "query": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The search job query."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The search description."
                  }
                },
                "limit": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Limit the search job to return up to specified number of rows."
                  }
                },
                "startSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to start the search from (UTC)."
                  }
                },
                "endSearchTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The timestamp to end the search by (UTC)."
                  }
                }
              },
              "metadata": {
                "description": "The parameters of the search job that initiated the table.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "table/main.bicep"
                }
              }
            },
            "solutionPlanType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                  }
                },
                "product": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                  }
                },
                "publisher": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/operations-management/solution:0.3.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Log Analytics workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "PerGB2018",
              "allowedValues": [
                "CapacityReservation",
                "Free",
                "LACluster",
                "PerGB2018",
                "PerNode",
                "Premium",
                "Standalone",
                "Standard"
              ],
              "metadata": {
                "description": "Optional. The name of the SKU."
              }
            },
            "skuCapacityReservationLevel": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 100,
              "maxValue": 5000,
              "metadata": {
                "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
              }
            },
            "storageInsightsConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageInsightsConfigType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of storage accounts to be read by the workspace."
              }
            },
            "linkedServices": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedServiceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of services to be linked."
              }
            },
            "linkedStorageAccounts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/linkedStorageAccountType"
              },
              "nullable": true,
              "metadata": {
                "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
              }
            },
            "savedSearches": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/savedSearchType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Kusto Query Language searches to save."
              }
            },
            "dataExports": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataExportType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data export instances to be deployed."
              }
            },
            "dataSources": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/dataSourceType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW data sources to configure."
              }
            },
            "tables": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/tableType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. LAW custom tables to be deployed."
              }
            },
            "gallerySolutions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/gallerySolutionType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
              }
            },
            "onboardWorkspaceToSentinel": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Onboard the Log Analytics Workspace to Sentinel. Requires 'SecurityInsights' solution to be in gallerySolutions."
              }
            },
            "dataRetention": {
              "type": "int",
              "defaultValue": 365,
              "minValue": 0,
              "maxValue": 730,
              "metadata": {
                "description": "Optional. Number of days data will be retained for."
              }
            },
            "dailyQuotaGb": {
              "type": "int",
              "defaultValue": -1,
              "minValue": -1,
              "metadata": {
                "description": "Optional. The workspace daily quota for ingestion."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics ingestion."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Log Analytics query."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
              }
            },
            "features": {
              "$ref": "#/definitions/workspaceFeaturesType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace features."
              }
            },
            "replication": {
              "$ref": "#/definitions/workspaceReplicationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The workspace replication properties."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "forceCmkForQuery": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.OperationalInsights/workspaces@2025-02-01#properties/tags"
                },
                "description": "Optional. Tags of the resource."
              },
              "nullable": true
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "enableReferencedModulesTelemetry": false,
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
              "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.12.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "logAnalyticsWorkspace": {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2025-02-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "features": {
                  "searchVersion": 1,
                  "enableLogAccessUsingOnlyResourcePermissions": "[coalesce(tryGet(parameters('features'), 'enableLogAccessUsingOnlyResourcePermissions'), false())]",
                  "disableLocalAuth": "[coalesce(tryGet(parameters('features'), 'disableLocalAuth'), true())]",
                  "enableDataExport": "[tryGet(parameters('features'), 'enableDataExport')]",
                  "immediatePurgeDataOn30Days": "[tryGet(parameters('features'), 'immediatePurgeDataOn30Days')]"
                },
                "sku": {
                  "name": "[parameters('skuName')]",
                  "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                },
                "retentionInDays": "[parameters('dataRetention')]",
                "workspaceCapping": {
                  "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                },
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "forceCmkForQuery": "[parameters('forceCmkForQuery')]",
                "replication": "[parameters('replication')]"
              },
              "identity": "[variables('identity')]"
            },
            "logAnalyticsWorkspace_diagnosticSettings": {
              "copy": {
                "name": "logAnalyticsWorkspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_sentinelOnboarding": {
              "condition": "[and(not(empty(filter(coalesce(parameters('gallerySolutions'), createArray()), lambda('item', startsWith(lambdaVariables('item').name, 'SecurityInsights'))))), parameters('onboardWorkspaceToSentinel'))]",
              "type": "Microsoft.SecurityInsights/onboardingStates",
              "apiVersion": "2024-03-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "default",
              "properties": {},
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_roleAssignments": {
              "copy": {
                "name": "logAnalyticsWorkspace_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_storageInsightConfigs": {
              "copy": {
                "name": "logAnalyticsWorkspace_storageInsightConfigs",
                "count": "[length(coalesce(parameters('storageInsightsConfigs'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "containers": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'containers')]"
                  },
                  "tables": {
                    "value": "[tryGet(coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()], 'tables')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[coalesce(parameters('storageInsightsConfigs'), createArray())[copyIndex()].storageAccountResourceId]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "1306323182548882150"
                    },
                    "name": "Log Analytics Workspace Storage Insight Configs",
                    "description": "This module deploys a Log Analytics Workspace Storage Insight Config."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                      "metadata": {
                        "description": "Optional. The name of the storage insights config."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Azure Resource Manager ID of the storage account resource."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the blob containers that the workspace should read."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The names of the Azure tables that the workspace should read."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "storageAccount": {
                      "existing": true,
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                    },
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "storageinsightconfig": {
                      "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "containers": "[parameters('containers')]",
                        "tables": "[parameters('tables')]",
                        "storageAccount": {
                          "id": "[parameters('storageAccountResourceId')]",
                          "key": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                        }
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage insights configuration."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the storage insight configuration is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the storage insights configuration."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedServices": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedServices",
                "count": "[length(coalesce(parameters('linkedServices'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedServices'), createArray())[copyIndex()].name]"
                  },
                  "resourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'resourceId')]"
                  },
                  "writeAccessResourceId": {
                    "value": "[tryGet(coalesce(parameters('linkedServices'), createArray())[copyIndex()], 'writeAccessResourceId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "5230241501765697269"
                    },
                    "name": "Log Analytics Workspace Linked Services",
                    "description": "This module deploys a Log Analytics Workspace Linked Service."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                      }
                    },
                    "writeAccessResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/linkedServices@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedService": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "resourceId": "[parameters('resourceId')]",
                        "writeAccessResourceId": "[parameters('writeAccessResourceId')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked service."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked service."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked service is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_linkedStorageAccounts": {
              "copy": {
                "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                "count": "[length(coalesce(parameters('linkedStorageAccounts'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].name]"
                  },
                  "storageAccountIds": {
                    "value": "[coalesce(parameters('linkedStorageAccounts'), createArray())[copyIndex()].storageAccountIds]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10372135754202496594"
                    },
                    "name": "Log Analytics Workspace Linked Storage Accounts",
                    "description": "This module deploys a Log Analytics Workspace Linked Storage Account."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "allowedValues": [
                        "Query",
                        "Alerts",
                        "CustomLogs",
                        "AzureWatson"
                      ],
                      "metadata": {
                        "description": "Required. Name of the link."
                      }
                    },
                    "storageAccountIds": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. Linked storage accounts resources Ids."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "linkedStorageAccount": {
                      "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "storageAccountIds": "[parameters('storageAccountIds')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed linked storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed linked storage account."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the linked storage account is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_savedSearches": {
              "copy": {
                "name": "logAnalyticsWorkspace_savedSearches",
                "count": "[length(coalesce(parameters('savedSearches'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[format('{0}{1}', coalesce(parameters('savedSearches'), createArray())[copyIndex()].name, uniqueString(deployment().name))]"
                  },
                  "etag": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'etag')]"
                  },
                  "displayName": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].displayName]"
                  },
                  "category": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].category]"
                  },
                  "query": {
                    "value": "[coalesce(parameters('savedSearches'), createArray())[copyIndex()].query]"
                  },
                  "functionAlias": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionAlias')]"
                  },
                  "functionParameters": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'functionParameters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'tags')]"
                  },
                  "version": {
                    "value": "[tryGet(coalesce(parameters('savedSearches'), createArray())[copyIndex()], 'version')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "9015459905306126128"
                    },
                    "name": "Log Analytics Workspace Saved Searches",
                    "description": "This module deploys a Log Analytics Workspace Saved Search."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the saved search."
                      }
                    },
                    "displayName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Display name for the search."
                      }
                    },
                    "category": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Query category."
                      }
                    },
                    "query": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Kusto Query to be stored."
                      }
                    },
                    "tags": {
                      "type": "array",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/savedSearches@2025-02-01#properties/properties/properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "functionAlias": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The function alias if query serves as a function."
                      }
                    },
                    "functionParameters": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                      }
                    },
                    "version": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The version number of the query language."
                      }
                    },
                    "etag": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "savedSearch": {
                      "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "properties": {
                        "etag": "[parameters('etag')]",
                        "tags": "[coalesce(parameters('tags'), createArray())]",
                        "displayName": "[parameters('displayName')]",
                        "category": "[parameters('category')]",
                        "query": "[parameters('query')]",
                        "functionAlias": "[parameters('functionAlias')]",
                        "functionParameters": "[parameters('functionParameters')]",
                        "version": "[parameters('version')]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed saved search."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the saved search is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed saved search."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace",
                "logAnalyticsWorkspace_linkedStorageAccounts"
              ]
            },
            "logAnalyticsWorkspace_dataExports": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataExports",
                "count": "[length(coalesce(parameters('dataExports'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataExports'), createArray())[copyIndex()].name]"
                  },
                  "destination": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'destination')]"
                  },
                  "enable": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'enable')]"
                  },
                  "tableNames": {
                    "value": "[tryGet(coalesce(parameters('dataExports'), createArray())[copyIndex()], 'tableNames')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8586520532175356447"
                    },
                    "name": "Log Analytics Workspace Data Exports",
                    "description": "This module deploys a Log Analytics Workspace Data Export."
                  },
                  "definitions": {
                    "destinationType": {
                      "type": "object",
                      "properties": {
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The destination resource ID."
                          }
                        },
                        "metaData": {
                          "type": "object",
                          "properties": {
                            "eventHubName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Allows to define an Event Hub name. Not applicable when destination is Storage Account."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The destination metadata."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The data export destination properties."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "minLength": 4,
                      "maxLength": 63,
                      "metadata": {
                        "description": "Required. The data export rule name."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "destination": {
                      "$ref": "#/definitions/destinationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Destination properties."
                      }
                    },
                    "enable": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Active when enabled."
                      }
                    },
                    "tableNames": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "minLength": 1,
                      "metadata": {
                        "description": "Required. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "dataExport": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "destination": "[parameters('destination')]",
                        "enable": "[parameters('enable')]",
                        "tableNames": "[parameters('tableNames')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the data export."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the data export."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the data export was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_dataSources": {
              "copy": {
                "name": "logAnalyticsWorkspace_dataSources",
                "count": "[length(coalesce(parameters('dataSources'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].name]"
                  },
                  "kind": {
                    "value": "[coalesce(parameters('dataSources'), createArray())[copyIndex()].kind]"
                  },
                  "linkedResourceId": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'linkedResourceId')]"
                  },
                  "eventLogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventLogName')]"
                  },
                  "eventTypes": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'eventTypes')]"
                  },
                  "objectName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'objectName')]"
                  },
                  "instanceName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'instanceName')]"
                  },
                  "intervalSeconds": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'intervalSeconds')]"
                  },
                  "counterName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'counterName')]"
                  },
                  "state": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'state')]"
                  },
                  "syslogName": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogName')]"
                  },
                  "syslogSeverities": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'syslogSeverities')]"
                  },
                  "performanceCounters": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'performanceCounters')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('dataSources'), createArray())[copyIndex()], 'tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "8336916453932906250"
                    },
                    "name": "Log Analytics Workspace Datasources",
                    "description": "This module deploys a Log Analytics Workspace Data Source."
                  },
                  "parameters": {
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the data source."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "AzureActivityLog",
                      "allowedValues": [
                        "AzureActivityLog",
                        "WindowsEvent",
                        "WindowsPerformanceCounter",
                        "IISLogs",
                        "LinuxSyslog",
                        "LinuxSyslogCollection",
                        "LinuxPerformanceObject",
                        "LinuxPerformanceCollection"
                      ],
                      "metadata": {
                        "description": "Optional. The kind of the data source."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.OperationalInsights/workspaces/dataSources@2025-02-01#properties/tags"
                        },
                        "description": "Optional. Tags to configure in the resource."
                      },
                      "nullable": true
                    },
                    "linkedResourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource ID of the resource to be linked."
                      }
                    },
                    "eventLogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                      }
                    },
                    "eventTypes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                      }
                    },
                    "objectName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "instanceName": {
                      "type": "string",
                      "defaultValue": "*",
                      "metadata": {
                        "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "intervalSeconds": {
                      "type": "int",
                      "defaultValue": 60,
                      "metadata": {
                        "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                      }
                    },
                    "performanceCounters": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                      }
                    },
                    "counterName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                      }
                    },
                    "state": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                      }
                    },
                    "syslogName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. System log to configure when kind is LinuxSyslog."
                      }
                    },
                    "syslogSeverities": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Severities to configure when kind is LinuxSyslog."
                      }
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "dataSource": {
                      "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                      "kind": "[parameters('kind')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                        "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                        "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                        "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                        "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                        "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                        "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                        "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                        "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                        "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                        "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                      }
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed data source."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the data source is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed data source."
                      },
                      "value": "[parameters('name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_tables": {
              "copy": {
                "name": "logAnalyticsWorkspace_tables",
                "count": "[length(coalesce(parameters('tables'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "workspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                  },
                  "plan": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'plan')]"
                  },
                  "schema": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'schema')]"
                  },
                  "retentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'retentionInDays')]"
                  },
                  "totalRetentionInDays": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'totalRetentionInDays')]"
                  },
                  "restoredLogs": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'restoredLogs')]"
                  },
                  "searchResults": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'searchResults')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'roleAssignments')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "315390662258960765"
                    },
                    "name": "Log Analytics Workspace Tables",
                    "description": "This module deploys a Log Analytics Workspace Table."
                  },
                  "definitions": {
                    "restoredLogsType": {
                      "type": "object",
                      "properties": {
                        "sourceTable": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table to restore data from."
                          }
                        },
                        "startRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the restore from (UTC)."
                          }
                        },
                        "endRestoreTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the restore by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the restore operation that initiated the table."
                      }
                    },
                    "schemaType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The table name."
                          }
                        },
                        "columns": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/columnType"
                          },
                          "metadata": {
                            "description": "Required. A list of table custom columns."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The table display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The table schema."
                      }
                    },
                    "columnType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The column name."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "boolean",
                            "dateTime",
                            "dynamic",
                            "guid",
                            "int",
                            "long",
                            "real",
                            "string"
                          ],
                          "metadata": {
                            "description": "Required. The column type."
                          }
                        },
                        "dataTypeHint": {
                          "type": "string",
                          "allowedValues": [
                            "armPath",
                            "guid",
                            "ip",
                            "uri"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column data type logical hint."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The column description."
                          }
                        },
                        "displayName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Column display name."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the table column."
                      }
                    },
                    "searchResultsType": {
                      "type": "object",
                      "properties": {
                        "query": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The search job query."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The search description."
                          }
                        },
                        "limit": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Limit the search job to return up to specified number of rows."
                          }
                        },
                        "startSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to start the search from (UTC)."
                          }
                        },
                        "endSearchTime": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The timestamp to end the search by (UTC)."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The parameters of the search job that initiated the table."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the table."
                      }
                    },
                    "workspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                      }
                    },
                    "plan": {
                      "type": "string",
                      "defaultValue": "Analytics",
                      "allowedValues": [
                        "Basic",
                        "Analytics"
                      ],
                      "metadata": {
                        "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                      }
                    },
                    "restoredLogs": {
                      "$ref": "#/definitions/restoredLogsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Restore parameters."
                      }
                    },
                    "retentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 730,
                      "metadata": {
                        "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                      }
                    },
                    "schema": {
                      "$ref": "#/definitions/schemaType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Table's schema."
                      }
                    },
                    "searchResults": {
                      "$ref": "#/definitions/searchResultsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Parameters of the search job that initiated this table."
                      }
                    },
                    "totalRetentionInDays": {
                      "type": "int",
                      "defaultValue": -1,
                      "minValue": -1,
                      "maxValue": 2555,
                      "metadata": {
                        "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "workspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2025-02-01",
                      "name": "[parameters('workspaceName')]"
                    },
                    "table": {
                      "type": "Microsoft.OperationalInsights/workspaces/tables",
                      "apiVersion": "2025-02-01",
                      "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                      "properties": {
                        "plan": "[parameters('plan')]",
                        "restoredLogs": "[parameters('restoredLogs')]",
                        "retentionInDays": "[parameters('retentionInDays')]",
                        "schema": "[parameters('schema')]",
                        "searchResults": "[parameters('searchResults')]",
                        "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                      }
                    },
                    "table_roleAssignments": {
                      "copy": {
                        "name": "table_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "table"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the table."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the table."
                      },
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the table was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            },
            "logAnalyticsWorkspace_solutions": {
              "copy": {
                "name": "logAnalyticsWorkspace_solutions",
                "count": "[length(coalesce(parameters('gallerySolutions'), createArray()))]"
              },
              "condition": "[not(empty(parameters('gallerySolutions')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "plan": {
                    "value": "[coalesce(parameters('gallerySolutions'), createArray())[copyIndex()].plan]"
                  },
                  "enableTelemetry": {
                    "value": "[variables('enableReferencedModulesTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.32.4.45862",
                      "templateHash": "10255889523646649592"
                    },
                    "name": "Operations Management Solutions",
                    "description": "This module deploys an Operations Management Solution.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "solutionPlanType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the solution to be created.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, it can be anything.\nThe solution type is case-sensitive.\nIf not provided, the value of the `name` parameter will be used."
                          }
                        },
                        "product": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The product name of the deployed solution.\nFor Microsoft published gallery solution it should be `OMSGallery/{solutionType}`, for example `OMSGallery/AntiMalware`.\nFor a third party solution, it can be anything.\nThis is case sensitive."
                          }
                        },
                        "publisher": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`, which is the default value."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the solution.\nFor solutions authored by Microsoft, the name must be in the pattern: `SolutionType(WorkspaceName)`, for example: `AntiMalware(contoso-Logs)`.\nFor solutions authored by third parties, the name should be in the pattern: `SolutionType[WorkspaceName]`, for example `MySolution[contoso-Logs]`.\nThe solution type is case-sensitive."
                      }
                    },
                    "plan": {
                      "$ref": "#/definitions/solutionPlanType",
                      "metadata": {
                        "description": "Required. Plan for solution object supported by the OperationsManagement resource provider."
                      }
                    },
                    "logAnalyticsWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "logAnalyticsWorkspace": {
                      "existing": true,
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2021-06-01",
                      "name": "[parameters('logAnalyticsWorkspaceName')]"
                    },
                    "solution": {
                      "type": "Microsoft.OperationsManagement/solutions",
                      "apiVersion": "2015-11-01-preview",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                      },
                      "plan": {
                        "name": "[coalesce(tryGet(parameters('plan'), 'name'), parameters('name'))]",
                        "promotionCode": "",
                        "product": "[parameters('plan').product]",
                        "publisher": "[coalesce(tryGet(parameters('plan'), 'publisher'), 'Microsoft')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed solution."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed solution."
                      },
                      "value": "[resourceId('Microsoft.OperationsManagement/solutions', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group where the solution is deployed."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('solution', '2015-11-01-preview', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "logAnalyticsWorkspace"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the deployed log analytics workspace."
              },
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group of the deployed log analytics workspace."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the deployed log analytics workspace."
              },
              "value": "[parameters('name')]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "The ID associated with the workspace."
              },
              "value": "[reference('logAnalyticsWorkspace').customerId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('logAnalyticsWorkspace', '2025-02-01', 'full').location]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('logAnalyticsWorkspace', '2025-02-01', 'full'), 'identity'), 'principalId')]"
            },
            "primarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The primary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').primarySharedKey]"
            },
            "secondarySharedKey": {
              "type": "securestring",
              "metadata": {
                "description": "The secondary shared key of the log analytics workspace."
              },
              "value": "[listKeys('logAnalyticsWorkspace', '2025-02-01').secondarySharedKey]"
            }
          }
        }
      }
    },
    "applicationInsights": {
      "condition": "[parameters('enableMonitoring')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('app-insights-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('appi-{0}', variables('resourcesName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "workspaceResourceId": {
            "value": "[reference('logAnalyticsWorkspace').outputs.resourceId.value]"
          },
          "diagnosticSettings": {
            "value": [
              {
                "workspaceResourceId": "[reference('logAnalyticsWorkspace').outputs.resourceId.value]"
              }
            ]
          },
          "disableLocalAuth": {
            "value": "[parameters('enablePrivateNetworking')]"
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "retentionInDays": {
            "value": 365
          },
          "kind": {
            "value": "web"
          },
          "disableIpMasking": {
            "value": false
          },
          "flowType": {
            "value": "Bluefield"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "5735496719243704506"
            },
            "name": "Application Insights",
            "description": "This component deploys an Application Insights instance."
          },
          "definitions": {
            "diagnosticSettingFullType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the diagnostic setting."
                  }
                },
                "logCategoriesAndGroups": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                        }
                      },
                      "categoryGroup": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                  }
                },
                "metricCategories": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                        }
                      },
                      "enabled": {
                        "type": "bool",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                        }
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                  }
                },
                "logAnalyticsDestinationType": {
                  "type": "string",
                  "allowedValues": [
                    "AzureDiagnostics",
                    "Dedicated"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                  }
                },
                "workspaceResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "storageAccountResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "eventHubAuthorizationRuleResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                  }
                },
                "eventHubName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                  }
                },
                "marketplacePartnerResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.3.0"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Application Insights."
              }
            },
            "applicationType": {
              "type": "string",
              "defaultValue": "web",
              "allowedValues": [
                "web",
                "other"
              ],
              "metadata": {
                "description": "Optional. Application type."
              }
            },
            "workspaceResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
              }
            },
            "disableIpMasking": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Disable IP masking. Default value is set to true."
              }
            },
            "disableLocalAuth": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
              }
            },
            "forceCustomerStorageForProfiler": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Force users to create their own storage account for profiler and debugger."
              }
            },
            "linkedStorageAccountResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Linked storage account resource ID."
              }
            },
            "publicNetworkAccessForIngestion": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
              }
            },
            "publicNetworkAccessForQuery": {
              "type": "string",
              "defaultValue": "Enabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
              }
            },
            "retentionInDays": {
              "type": "int",
              "defaultValue": 365,
              "allowedValues": [
                30,
                60,
                90,
                120,
                180,
                270,
                365,
                550,
                730
              ],
              "metadata": {
                "description": "Optional. Retention period in days."
              }
            },
            "samplingPercentage": {
              "type": "int",
              "defaultValue": 100,
              "minValue": 0,
              "maxValue": 100,
              "metadata": {
                "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
              }
            },
            "flowType": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Used by the Application Insights system to determine what kind of flow this component was created by. This is to be set to 'Bluefield' when creating/updating a component via the REST API."
              }
            },
            "requestSource": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Describes what tool created this Application Insights component. Customers using this API should set this to the default 'rest'."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "diagnosticSettings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/diagnosticSettingFullType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
              "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
              "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "appInsights": {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "[parameters('kind')]",
              "properties": {
                "Application_Type": "[parameters('applicationType')]",
                "DisableIpMasking": "[parameters('disableIpMasking')]",
                "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                "RetentionInDays": "[parameters('retentionInDays')]",
                "SamplingPercentage": "[parameters('samplingPercentage')]",
                "Flow_Type": "[parameters('flowType')]",
                "Request_Source": "[parameters('requestSource')]"
              }
            },
            "appInsights_roleAssignments": {
              "copy": {
                "name": "appInsights_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "appInsights_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "appInsights_diagnosticSettings": {
              "copy": {
                "name": "appInsights_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "appInsights"
              ]
            },
            "linkedStorageAccount": {
              "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "appInsightsName": {
                    "value": "[parameters('name')]"
                  },
                  "storageAccountResourceId": {
                    "value": "[coalesce(parameters('linkedStorageAccountResourceId'), '')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "10861379689695100897"
                    },
                    "name": "Application Insights Linked Storage Account",
                    "description": "This component deploys an Application Insights Linked Storage Account."
                  },
                  "parameters": {
                    "appInsightsName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                      }
                    },
                    "storageAccountResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Linked storage account resource ID."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "microsoft.insights/components/linkedStorageAccounts",
                      "apiVersion": "2020-03-01-preview",
                      "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                      "properties": {
                        "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Linked Storage Account."
                      },
                      "value": "ServiceProfiler"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Linked Storage Account."
                      },
                      "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the agent pool was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "appInsights"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the application insights component."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the application insights component."
              },
              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the application insights component was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "applicationId": {
              "type": "string",
              "metadata": {
                "description": "The application ID of the application insights component."
              },
              "value": "[reference('appInsights').AppId]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('appInsights', '2020-02-02', 'full').location]"
            },
            "instrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
              },
              "value": "[reference('appInsights').InstrumentationKey]"
            },
            "connectionString": {
              "type": "string",
              "metadata": {
                "description": "Application Insights Connection String."
              },
              "value": "[reference('appInsights').ConnectionString]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalyticsWorkspace"
      ]
    },
    "network": {
      "condition": "[parameters('enablePrivateNetworking')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('network-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourcesName": {
            "value": "[variables('resourcesName')]"
          },
          "logAnalyticsWorkSpaceResourceId": {
            "value": "[reference('logAnalyticsWorkspace').outputs.resourceId.value]"
          },
          "vmAdminUsername": {
            "value": "[parameters('vmAdminUsername')]"
          },
          "vmAdminPassword": {
            "value": "[parameters('vmAdminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "13970442413437769151"
            }
          },
          "parameters": {
            "resourcesName": {
              "type": "string",
              "metadata": {
                "description": "Required. Named used for all resource naming."
              }
            },
            "logAnalyticsWorkSpaceResourceId": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Resource ID of the Log Analytics Workspace for monitoring and diagnostics."
              }
            },
            "location": {
              "type": "string",
              "minLength": 3,
              "metadata": {
                "description": "Required. Azure region for all services."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Tags to be applied to the resources."
              },
              "defaultValue": {}
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "vmAdminUsername": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Admin username for the VM."
              }
            },
            "vmAdminPassword": {
              "type": "securestring",
              "metadata": {
                "description": "Required. Admin password for the VM."
              }
            }
          },
          "variables": {
            "denyHopOutboundRule": {
              "name": "deny-hop-outbound",
              "properties": {
                "access": "Deny",
                "destinationAddressPrefix": "*",
                "destinationPortRanges": [
                  "22",
                  "3389"
                ],
                "direction": "Outbound",
                "priority": 200,
                "protocol": "Tcp",
                "sourceAddressPrefix": "VirtualNetwork",
                "sourcePortRange": "*"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('network-{0}-create', parameters('resourcesName')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "resourcesName": {
                    "value": "[parameters('resourcesName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "logAnalyticsWorkSpaceResourceId": {
                    "value": "[parameters('logAnalyticsWorkSpaceResourceId')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "addressPrefixes": {
                    "value": [
                      "10.0.0.0/20"
                    ]
                  },
                  "subnets": {
                    "value": [
                      {
                        "name": "web",
                        "addressPrefixes": [
                          "10.0.0.0/23"
                        ],
                        "networkSecurityGroup": {
                          "name": "web-nsg",
                          "securityRules": [
                            {
                              "name": "AllowHttpsInbound",
                              "properties": {
                                "access": "Allow",
                                "direction": "Inbound",
                                "priority": 100,
                                "protocol": "Tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "443",
                                "sourceAddressPrefixes": [
                                  "0.0.0.0/0"
                                ],
                                "destinationAddressPrefixes": [
                                  "10.0.0.0/23"
                                ]
                              }
                            },
                            "[variables('denyHopOutboundRule')]"
                          ]
                        },
                        "delegation": "Microsoft.App/environments"
                      },
                      {
                        "name": "peps",
                        "addressPrefixes": [
                          "10.0.2.0/23"
                        ],
                        "privateEndpointNetworkPolicies": "Disabled",
                        "privateLinkServiceNetworkPolicies": "Disabled"
                      }
                    ]
                  },
                  "bastionConfiguration": {
                    "value": {
                      "name": "[format('bastion-{0}', parameters('resourcesName'))]",
                      "subnetAddressPrefixes": [
                        "10.0.10.0/23"
                      ]
                    }
                  },
                  "jumpboxConfiguration": {
                    "value": {
                      "name": "[format('vm-jumpbox-{0}', parameters('resourcesName'))]",
                      "size": "Standard_D2s_v3",
                      "username": "[parameters('vmAdminUsername')]",
                      "password": "[parameters('vmAdminPassword')]",
                      "subnet": {
                        "name": "jumpbox",
                        "addressPrefixes": [
                          "10.0.12.0/23"
                        ],
                        "networkSecurityGroup": {
                          "name": "jumpbox-nsg",
                          "securityRules": [
                            {
                              "name": "AllowJumpboxInbound",
                              "properties": {
                                "access": "Allow",
                                "direction": "Inbound",
                                "priority": 100,
                                "protocol": "Tcp",
                                "sourcePortRange": "*",
                                "destinationPortRange": "22",
                                "sourceAddressPrefixes": [
                                  "10.0.7.0/24"
                                ],
                                "destinationAddressPrefixes": [
                                  "10.0.12.0/23"
                                ]
                              }
                            },
                            "[variables('denyHopOutboundRule')]"
                          ]
                        }
                      }
                    }
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "9017613383873630514"
                    },
                    "name": "Secure Virtual Network Module",
                    "description": "This module creates a secure Virtual Network with optional Azure Bastion Host and Jumpbox VM. It includes NSGs for each subnet and integrates with Log Analytics for monitoring."
                  },
                  "definitions": {
                    "_1.securityRuleType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the security rule."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "access": {
                              "type": "string",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Required. Whether network traffic is allowed or denied."
                              }
                            },
                            "description": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The description of the security rule."
                              }
                            },
                            "destinationAddressPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                              }
                            },
                            "destinationAddressPrefixes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                              }
                            },
                            "destinationApplicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource IDs of the application security groups specified as destination."
                              }
                            },
                            "destinationPortRange": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "destinationPortRanges": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The destination port ranges."
                              }
                            },
                            "direction": {
                              "type": "string",
                              "allowedValues": [
                                "Inbound",
                                "Outbound"
                              ],
                              "metadata": {
                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                              }
                            },
                            "priority": {
                              "type": "int",
                              "minValue": 100,
                              "maxValue": 4096,
                              "metadata": {
                                "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                              }
                            },
                            "protocol": {
                              "type": "string",
                              "allowedValues": [
                                "*",
                                "Ah",
                                "Esp",
                                "Icmp",
                                "Tcp",
                                "Udp"
                              ],
                              "metadata": {
                                "description": "Required. Network protocol this rule applies to."
                              }
                            },
                            "sourceAddressPrefix": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                              }
                            },
                            "sourceAddressPrefixes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The CIDR or source IP ranges."
                              }
                            },
                            "sourceApplicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The resource IDs of the application security groups specified as source."
                              }
                            },
                            "sourcePortRange": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                              }
                            },
                            "sourcePortRanges": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The source port ranges."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The properties of the security rule."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type of a security rule.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-security-group:0.5.1"
                        }
                      }
                    },
                    "_2.networkSecurityGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the network security group."
                          }
                        },
                        "securityRules": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.securityRuleType"
                          },
                          "metadata": {
                            "description": "Required. The security rules for the network security group."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Custom type definition for network security group configuration",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "virtualNetwork.bicep"
                        }
                      }
                    },
                    "bastionHostConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the Bastion Host resource."
                          }
                        },
                        "subnetAddressPrefixes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of address prefixes for the subnet."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Custom type definition for establishing Bastion Host for remote connection.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "bastionHost.bicep"
                        }
                      }
                    },
                    "jumpBoxConfigurationType": {
                      "type": "secureObject",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the Virtual Machine."
                          }
                        },
                        "size": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The size of the VM."
                          }
                        },
                        "username": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. Username to access VM."
                          }
                        },
                        "password": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. Password to access VM."
                          }
                        },
                        "subnet": {
                          "$ref": "#/definitions/subnetType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Subnet configuration for the Jumpbox VM."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Custom type definition for establishing Jumpbox Virtual Machine and its associated resources.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "jumpbox.bicep"
                        }
                      }
                    },
                    "subnetOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the subnet."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the subnet."
                          }
                        },
                        "nsgName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the associated network security group, if any."
                          }
                        },
                        "nsgResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the associated network security group, if any."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Custom type definition for subnet resource information as output",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "virtualNetwork.bicep"
                        }
                      }
                    },
                    "subnetType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The Name of the subnet resource."
                          }
                        },
                        "addressPrefixes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. Prefixes for the subnet."
                          }
                        },
                        "delegation": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The delegation to enable on the subnet."
                          }
                        },
                        "privateEndpointNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled",
                            "NetworkSecurityGroupEnabled",
                            "RouteTableEnabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                          }
                        },
                        "privateLinkServiceNetworkPolicies": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                          }
                        },
                        "networkSecurityGroup": {
                          "$ref": "#/definitions/_2.networkSecurityGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Network Security Group configuration for the subnet."
                          }
                        },
                        "routeTableResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the route table to assign to the subnet."
                          }
                        },
                        "serviceEndpointPolicies": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of service endpoint policies."
                          }
                        },
                        "serviceEndpoints": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The service endpoints to enable on the subnet."
                          }
                        },
                        "defaultOutboundAccess": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                          }
                        }
                      },
                      "metadata": {
                        "description": "Custom type definition for subnet configuration",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "virtualNetwork.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "resourcesName": {
                      "type": "string",
                      "minLength": 6,
                      "maxLength": 25,
                      "metadata": {
                        "description": "Required. Name used for naming all network resources."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "minLength": 3,
                      "metadata": {
                        "description": "Optional. Azure region for all services."
                      }
                    },
                    "logAnalyticsWorkSpaceResourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. Resource ID of the Log Analytics Workspace for monitoring and diagnostics."
                      }
                    },
                    "addressPrefixes": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. Networking address prefix for the VNET."
                      }
                    },
                    "subnets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/subnetType"
                      },
                      "metadata": {
                        "description": "Required. Array of subnets to be created within the VNET."
                      }
                    },
                    "jumpboxConfiguration": {
                      "$ref": "#/definitions/jumpBoxConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for the Jumpbox VM. Leave null to omit Jumpbox creation."
                      }
                    },
                    "bastionConfiguration": {
                      "$ref": "#/definitions/bastionHostConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for the Azure Bastion Host. Leave null to omit Bastion creation."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags to be applied to the resources."
                      },
                      "defaultValue": {}
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "resources": {
                    "virtualNetwork": {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-virtualNetwork', parameters('resourcesName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('vnet-{0}', parameters('resourcesName'))]"
                          },
                          "addressPrefixes": {
                            "value": "[parameters('addressPrefixes')]"
                          },
                          "subnets": {
                            "value": "[parameters('subnets')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkSpaceResourceId')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "2277907531928238475"
                            }
                          },
                          "definitions": {
                            "subnetOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the subnet."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of the subnet."
                                  }
                                },
                                "nsgName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the associated network security group, if any."
                                  }
                                },
                                "nsgResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the associated network security group, if any."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Custom type definition for subnet resource information as output"
                              }
                            },
                            "subnetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Name of the subnet resource."
                                  }
                                },
                                "addressPrefixes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. Prefixes for the subnet."
                                  }
                                },
                                "delegation": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The delegation to enable on the subnet."
                                  }
                                },
                                "privateEndpointNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled",
                                    "NetworkSecurityGroupEnabled",
                                    "RouteTableEnabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                                  }
                                },
                                "privateLinkServiceNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                  }
                                },
                                "networkSecurityGroup": {
                                  "$ref": "#/definitions/networkSecurityGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Network Security Group configuration for the subnet."
                                  }
                                },
                                "routeTableResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                                  }
                                },
                                "serviceEndpointPolicies": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An array of service endpoint policies."
                                  }
                                },
                                "serviceEndpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The service endpoints to enable on the subnet."
                                  }
                                },
                                "defaultOutboundAccess": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Custom type definition for subnet configuration"
                              }
                            },
                            "networkSecurityGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the network security group."
                                  }
                                },
                                "securityRules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/securityRuleType"
                                  },
                                  "metadata": {
                                    "description": "Required. The security rules for the network security group."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Custom type definition for network security group configuration"
                              }
                            },
                            "securityRuleType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the security rule."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "access": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Required. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The description of the security rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "minValue": 100,
                                      "maxValue": 4096,
                                      "metadata": {
                                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource IDs of the application security groups specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The properties of the security rule."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a security rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-security-group:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the virtual network."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Azure region to deploy resources."
                              }
                            },
                            "addressPrefixes": {
                              "type": "array",
                              "metadata": {
                                "description": "Required. An Array of 1 or more IP Address Prefixes OR the resource ID of the IPAM pool to be used for the Virtual Network. When specifying an IPAM pool resource ID you must also set a value for the parameter called `ipamPoolNumberOfIpAddresses`."
                              }
                            },
                            "subnets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/subnetType"
                              },
                              "metadata": {
                                "description": "Required. An array of subnets to be created within the virtual network. Each subnet can have its own configuration and associated Network Security Group (NSG)."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                                },
                                "description": "Optional. Tags to be applied to the resources."
                              },
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Optional. The resource ID of the Log Analytics Workspace to send diagnostic logs to."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "resources": {
                            "nsgs": {
                              "copy": {
                                "name": "nsgs",
                                "count": "[length(parameters('subnets'))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "condition": "[not(empty(tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-{1}-networksecuritygroup', parameters('name'), tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup', 'name')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}-{1}', parameters('name'), tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup', 'name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "securityRules": {
                                    "value": "[tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup', 'securityRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "2305747478751645177"
                                    },
                                    "name": "Network Security Groups",
                                    "description": "This module deploys a Network security Group (NSG)."
                                  },
                                  "definitions": {
                                    "securityRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the security rule."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "access": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Allow",
                                                "Deny"
                                              ],
                                              "metadata": {
                                                "description": "Required. Whether network traffic is allowed or denied."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The description of the security rule."
                                              }
                                            },
                                            "destinationAddressPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                              }
                                            },
                                            "destinationAddressPrefixes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                              }
                                            },
                                            "destinationApplicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource IDs of the application security groups specified as destination."
                                              }
                                            },
                                            "destinationPortRange": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                              }
                                            },
                                            "destinationPortRanges": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination port ranges."
                                              }
                                            },
                                            "direction": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Inbound",
                                                "Outbound"
                                              ],
                                              "metadata": {
                                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                              }
                                            },
                                            "priority": {
                                              "type": "int",
                                              "minValue": 100,
                                              "maxValue": 4096,
                                              "metadata": {
                                                "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                              }
                                            },
                                            "protocol": {
                                              "type": "string",
                                              "allowedValues": [
                                                "*",
                                                "Ah",
                                                "Esp",
                                                "Icmp",
                                                "Tcp",
                                                "Udp"
                                              ],
                                              "metadata": {
                                                "description": "Required. Network protocol this rule applies to."
                                              }
                                            },
                                            "sourceAddressPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                              }
                                            },
                                            "sourceAddressPrefixes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The CIDR or source IP ranges."
                                              }
                                            },
                                            "sourceApplicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource IDs of the application security groups specified as source."
                                              }
                                            },
                                            "sourcePortRange": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                              }
                                            },
                                            "sourcePortRanges": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The source port ranges."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The properties of the security rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a security rule."
                                      }
                                    },
                                    "diagnosticSettingLogsOnlyType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Network Security Group."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "securityRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/securityRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                                      }
                                    },
                                    "flushConnection": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the NSG resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkSecurityGroup": {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "securityRules",
                                            "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                                            "input": {
                                              "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                                              "properties": {
                                                "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                                                "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                                                "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                                                "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                                                "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                                                "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                                                "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                                                "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                                                "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                                                "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                                                "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                                                "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                                                "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                                                "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                                                "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                                              }
                                            }
                                          }
                                        ],
                                        "flushConnection": "[parameters('flushConnection')]"
                                      }
                                    },
                                    "networkSecurityGroup_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    },
                                    "networkSecurityGroup_diagnosticSettings": {
                                      "copy": {
                                        "name": "networkSecurityGroup_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    },
                                    "networkSecurityGroup_roleAssignments": {
                                      "copy": {
                                        "name": "networkSecurityGroup_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the network security group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the network security group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the network security group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                                    }
                                  }
                                }
                              }
                            },
                            "virtualNetwork": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-virtualNetwork', parameters('name')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "addressPrefixes": {
                                    "value": "[parameters('addressPrefixes')]"
                                  },
                                  "subnets": {
                                    "copy": [
                                      {
                                        "name": "value",
                                        "count": "[length(parameters('subnets'))]",
                                        "input": "[createObject('name', parameters('subnets')[copyIndex('value')].name, 'addressPrefixes', tryGet(parameters('subnets')[copyIndex('value')], 'addressPrefixes'), 'networkSecurityGroupResourceId', if(not(empty(tryGet(parameters('subnets')[copyIndex('value')], 'networkSecurityGroup'))), reference(format('nsgs[{0}]', copyIndex('value'))).outputs.resourceId.value, null()), 'privateEndpointNetworkPolicies', tryGet(parameters('subnets')[copyIndex('value')], 'privateEndpointNetworkPolicies'), 'privateLinkServiceNetworkPolicies', tryGet(parameters('subnets')[copyIndex('value')], 'privateLinkServiceNetworkPolicies'), 'delegation', tryGet(parameters('subnets')[copyIndex('value')], 'delegation'))]"
                                      }
                                    ]
                                  },
                                  "diagnosticSettings": {
                                    "value": [
                                      {
                                        "name": "vnetDiagnostics",
                                        "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                                        "logCategoriesAndGroups": [
                                          {
                                            "categoryGroup": "allLogs",
                                            "enabled": true
                                          }
                                        ],
                                        "metricCategories": [
                                          {
                                            "category": "AllMetrics",
                                            "enabled": true
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "16195883788906927531"
                                    },
                                    "name": "Virtual Networks",
                                    "description": "This module deploys a Virtual Network (vNet)."
                                  },
                                  "definitions": {
                                    "peeringType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be peer-localVnetName-remoteVnetName."
                                          }
                                        },
                                        "remoteVirtualNetworkResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                          }
                                        },
                                        "allowForwardedTraffic": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                          }
                                        },
                                        "allowGatewayTransit": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                          }
                                        },
                                        "allowVirtualNetworkAccess": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                          }
                                        },
                                        "doNotVerifyRemoteGateways": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                                          }
                                        },
                                        "useRemoteGateways": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                          }
                                        },
                                        "remotePeeringEnabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Deploy the outbound and the inbound peering."
                                          }
                                        },
                                        "remotePeeringName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the VNET Peering resource in the remove Virtual Network. If not provided, default value will be peer-remoteVnetName-localVnetName."
                                          }
                                        },
                                        "remotePeeringAllowForwardedTraffic": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                          }
                                        },
                                        "remotePeeringAllowGatewayTransit": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                          }
                                        },
                                        "remotePeeringAllowVirtualNetworkAccess": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                          }
                                        },
                                        "remotePeeringDoNotVerifyRemoteGateways": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Do not verify the provisioning state of the remote gateway. Default is true."
                                          }
                                        },
                                        "remotePeeringUseRemoteGateways": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                          }
                                        }
                                      }
                                    },
                                    "subnetType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The Name of the subnet resource."
                                          }
                                        },
                                        "addressPrefix": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                          }
                                        },
                                        "addressPrefixes": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                          }
                                        },
                                        "ipamPoolPrefixAllocations": {
                                          "type": "array",
                                          "prefixItems": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "pool": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The Resource ID of the IPAM pool."
                                                      }
                                                    }
                                                  },
                                                  "metadata": {
                                                    "description": "Required. The Resource ID of the IPAM pool."
                                                  }
                                                },
                                                "numberOfIpAddresses": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Number of IP addresses allocated from the pool."
                                                  }
                                                }
                                              }
                                            }
                                          ],
                                          "items": false,
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty and the VNet address space configured to use IPAM Pool."
                                          }
                                        },
                                        "applicationGatewayIPConfigurations": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application gateway IP configurations of virtual network resource."
                                          }
                                        },
                                        "delegation": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The delegation to enable on the subnet."
                                          }
                                        },
                                        "natGatewayResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                          }
                                        },
                                        "networkSecurityGroupResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                          }
                                        },
                                        "privateEndpointNetworkPolicies": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled",
                                            "NetworkSecurityGroupEnabled",
                                            "RouteTableEnabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                                          }
                                        },
                                        "privateLinkServiceNetworkPolicies": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. enable or disable apply network policies on private link service in the subnet."
                                          }
                                        },
                                        "roleAssignments": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/roleAssignmentType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Array of role assignments to create."
                                          }
                                        },
                                        "routeTableResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the route table to assign to the subnet."
                                          }
                                        },
                                        "serviceEndpointPolicies": {
                                          "type": "array",
                                          "items": {
                                            "type": "object"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. An array of service endpoint policies."
                                          }
                                        },
                                        "serviceEndpoints": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The service endpoints to enable on the subnet."
                                          }
                                        },
                                        "defaultOutboundAccess": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                          }
                                        },
                                        "sharingScope": {
                                          "type": "string",
                                          "allowedValues": [
                                            "DelegatedServices",
                                            "Tenant"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Set this property to Tenant to allow sharing subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if subnet is empty."
                                          }
                                        }
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Virtual Network (vNet)."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. An Array of 1 or more IP Address Prefixes OR the resource ID of the IPAM pool to be used for the Virtual Network. When specifying an IPAM pool resource ID you must also set a value for the parameter called `ipamPoolNumberOfIpAddresses`."
                                      }
                                    },
                                    "ipamPoolNumberOfIpAddresses": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Number of IP addresses allocated from the pool. To be used only when the addressPrefix param is defined with a resource ID of an IPAM pool."
                                      }
                                    },
                                    "virtualNetworkBgpCommunity": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The BGP community associated with the virtual network."
                                      }
                                    },
                                    "subnets": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/subnetType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. An Array of subnets to deploy to the Virtual Network."
                                      }
                                    },
                                    "dnsServers": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. DNS Servers associated to the Virtual Network."
                                      }
                                    },
                                    "ddosProtectionPlanResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource ID of the DDoS protection plan to assign the VNET to. If it's left blank, DDoS protection will not be configured. If it's provided, the VNET created by this template will be attached to the referenced DDoS protection plan. The DDoS protection plan can exist in the same or in a different subscription."
                                      }
                                    },
                                    "peerings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/peeringType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Virtual Network Peering configurations."
                                      }
                                    },
                                    "vnetEncryption": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet. Requires the EnableVNetEncryption feature to be registered for the subscription and a supported region to use this property."
                                      }
                                    },
                                    "vnetEncryptionEnforcement": {
                                      "type": "string",
                                      "defaultValue": "AllowUnencrypted",
                                      "allowedValues": [
                                        "AllowUnencrypted",
                                        "DropUnencrypted"
                                      ],
                                      "metadata": {
                                        "description": "Optional. If the encrypted VNet allows VM that does not support encryption. Can only be used when vnetEncryption is enabled."
                                      }
                                    },
                                    "flowTimeoutInMinutes": {
                                      "type": "int",
                                      "defaultValue": 0,
                                      "maxValue": 30,
                                      "metadata": {
                                        "description": "Optional. The flow timeout in minutes for the Virtual Network, which is used to enable connection tracking for intra-VM flows. Possible values are between 4 and 30 minutes. Default value 0 will set the property to null."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "enableVmProtection": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Indicates if VM protection is enabled for all the subnets in the virtual network."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "enableReferencedModulesTelemetry": false,
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-virtualnetwork.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "virtualNetwork": {
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "addressSpace": "[if(contains(parameters('addressPrefixes')[0], '/Microsoft.Network/networkManagers/'), createObject('ipamPoolPrefixAllocations', createArray(createObject('pool', createObject('id', parameters('addressPrefixes')[0]), 'numberOfIpAddresses', parameters('ipamPoolNumberOfIpAddresses')))), createObject('addressPrefixes', parameters('addressPrefixes')))]",
                                        "bgpCommunities": "[if(not(empty(parameters('virtualNetworkBgpCommunity'))), createObject('virtualNetworkCommunity', parameters('virtualNetworkBgpCommunity')), null())]",
                                        "ddosProtectionPlan": "[if(not(empty(parameters('ddosProtectionPlanResourceId'))), createObject('id', parameters('ddosProtectionPlanResourceId')), null())]",
                                        "dhcpOptions": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', array(parameters('dnsServers'))), null())]",
                                        "enableDdosProtection": "[not(empty(parameters('ddosProtectionPlanResourceId')))]",
                                        "encryption": "[if(equals(parameters('vnetEncryption'), true()), createObject('enabled', parameters('vnetEncryption'), 'enforcement', parameters('vnetEncryptionEnforcement')), null())]",
                                        "flowTimeoutInMinutes": "[if(not(equals(parameters('flowTimeoutInMinutes'), 0)), parameters('flowTimeoutInMinutes'), null())]",
                                        "enableVmProtection": "[parameters('enableVmProtection')]"
                                      }
                                    },
                                    "virtualNetwork_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "virtualNetwork"
                                      ]
                                    },
                                    "virtualNetwork_diagnosticSettings": {
                                      "copy": {
                                        "name": "virtualNetwork_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "virtualNetwork"
                                      ]
                                    },
                                    "virtualNetwork_roleAssignments": {
                                      "copy": {
                                        "name": "virtualNetwork_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "virtualNetwork"
                                      ]
                                    },
                                    "virtualNetwork_subnets": {
                                      "copy": {
                                        "name": "virtualNetwork_subnets",
                                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                        "mode": "serial",
                                        "batchSize": 1
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-subnet-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualNetworkName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('subnets'), createArray())[copyIndex()].name]"
                                          },
                                          "addressPrefix": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefix')]"
                                          },
                                          "addressPrefixes": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'addressPrefixes')]"
                                          },
                                          "ipamPoolPrefixAllocations": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'ipamPoolPrefixAllocations')]"
                                          },
                                          "applicationGatewayIPConfigurations": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'applicationGatewayIPConfigurations')]"
                                          },
                                          "delegation": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'delegation')]"
                                          },
                                          "natGatewayResourceId": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'natGatewayResourceId')]"
                                          },
                                          "networkSecurityGroupResourceId": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'networkSecurityGroupResourceId')]"
                                          },
                                          "privateEndpointNetworkPolicies": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateEndpointNetworkPolicies')]"
                                          },
                                          "privateLinkServiceNetworkPolicies": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'privateLinkServiceNetworkPolicies')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "routeTableResourceId": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'routeTableResourceId')]"
                                          },
                                          "serviceEndpointPolicies": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpointPolicies')]"
                                          },
                                          "serviceEndpoints": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'serviceEndpoints')]"
                                          },
                                          "defaultOutboundAccess": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'defaultOutboundAccess')]"
                                          },
                                          "sharingScope": {
                                            "value": "[tryGet(coalesce(parameters('subnets'), createArray())[copyIndex()], 'sharingScope')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.35.1.17967",
                                              "templateHash": "9728353654559466189"
                                            },
                                            "name": "Virtual Network Subnets",
                                            "description": "This module deploys a Virtual Network Subnet."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The Name of the subnet resource."
                                              }
                                            },
                                            "virtualNetworkName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "addressPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                              }
                                            },
                                            "ipamPoolPrefixAllocations": {
                                              "type": "array",
                                              "items": {
                                                "type": "object"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                              }
                                            },
                                            "routeTableResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource ID of the route table to assign to the subnet."
                                              }
                                            },
                                            "serviceEndpoints": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The service endpoints to enable on the subnet."
                                              }
                                            },
                                            "delegation": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The delegation to enable on the subnet."
                                              }
                                            },
                                            "natGatewayResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                              }
                                            },
                                            "privateEndpointNetworkPolicies": {
                                              "type": "string",
                                              "nullable": true,
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled",
                                                "NetworkSecurityGroupEnabled",
                                                "RouteTableEnabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                                              }
                                            },
                                            "privateLinkServiceNetworkPolicies": {
                                              "type": "string",
                                              "nullable": true,
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                              }
                                            },
                                            "addressPrefixes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                              }
                                            },
                                            "defaultOutboundAccess": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                              }
                                            },
                                            "sharingScope": {
                                              "type": "string",
                                              "allowedValues": [
                                                "DelegatedServices",
                                                "Tenant"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                                              }
                                            },
                                            "applicationGatewayIPConfigurations": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. Application gateway IP configurations of virtual network resource."
                                              }
                                            },
                                            "serviceEndpointPolicies": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. An array of service endpoint policies."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "virtualNetwork": {
                                              "existing": true,
                                              "type": "Microsoft.Network/virtualNetworks",
                                              "apiVersion": "2024-01-01",
                                              "name": "[parameters('virtualNetworkName')]"
                                            },
                                            "subnet": {
                                              "type": "Microsoft.Network/virtualNetworks/subnets",
                                              "apiVersion": "2024-05-01",
                                              "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "serviceEndpoints",
                                                    "count": "[length(parameters('serviceEndpoints'))]",
                                                    "input": {
                                                      "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                                    }
                                                  }
                                                ],
                                                "addressPrefix": "[parameters('addressPrefix')]",
                                                "addressPrefixes": "[parameters('addressPrefixes')]",
                                                "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                                                "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                                "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                                "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                                "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                                "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                                "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                                "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                                "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                                "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                                "sharingScope": "[parameters('sharingScope')]"
                                              }
                                            },
                                            "subnet_roleAssignments": {
                                              "copy": {
                                                "name": "subnet_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "subnet"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the virtual network peering was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the virtual network peering."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the virtual network peering."
                                              },
                                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                            },
                                            "addressPrefix": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The address prefix for the subnet."
                                              },
                                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                                            },
                                            "addressPrefixes": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "List of address prefixes for the subnet."
                                              },
                                              "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                                            },
                                            "ipamPoolPrefixAllocations": {
                                              "type": "array",
                                              "metadata": {
                                                "description": "The IPAM pool prefix allocations for the subnet."
                                              },
                                              "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "virtualNetwork"
                                      ]
                                    },
                                    "virtualNetwork_peering_local": {
                                      "copy": {
                                        "name": "virtualNetwork_peering_local",
                                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-virtualNetworkPeering-local-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "localVnetName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "remoteVirtualNetworkResourceId": {
                                            "value": "[coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId]"
                                          },
                                          "name": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'name')]"
                                          },
                                          "allowForwardedTraffic": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowForwardedTraffic')]"
                                          },
                                          "allowGatewayTransit": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowGatewayTransit')]"
                                          },
                                          "allowVirtualNetworkAccess": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'allowVirtualNetworkAccess')]"
                                          },
                                          "doNotVerifyRemoteGateways": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'doNotVerifyRemoteGateways')]"
                                          },
                                          "useRemoteGateways": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'useRemoteGateways')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.35.1.17967",
                                              "templateHash": "11179987886456111827"
                                            },
                                            "name": "Virtual Network Peerings",
                                            "description": "This module deploys a Virtual Network Peering."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                                              "metadata": {
                                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                                              }
                                            },
                                            "localVnetName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "remoteVirtualNetworkResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                              }
                                            },
                                            "allowForwardedTraffic": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                              }
                                            },
                                            "allowGatewayTransit": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                              }
                                            },
                                            "allowVirtualNetworkAccess": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                              }
                                            },
                                            "doNotVerifyRemoteGateways": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                                              }
                                            },
                                            "useRemoteGateways": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                                              "properties": {
                                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                                "remoteVirtualNetwork": {
                                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the virtual network peering was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the virtual network peering."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the virtual network peering."
                                              },
                                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "virtualNetwork",
                                        "virtualNetwork_subnets"
                                      ]
                                    },
                                    "virtualNetwork_peering_remote": {
                                      "copy": {
                                        "name": "virtualNetwork_peering_remote",
                                        "count": "[length(coalesce(parameters('peerings'), createArray()))]"
                                      },
                                      "condition": "[coalesce(tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringEnabled'), false())]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-virtualNetworkPeering-remote-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "subscriptionId": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[2]]",
                                      "resourceGroup": "[split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/')[4]]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "localVnetName": {
                                            "value": "[last(split(coalesce(parameters('peerings'), createArray())[copyIndex()].remoteVirtualNetworkResourceId, '/'))]"
                                          },
                                          "remoteVirtualNetworkResourceId": {
                                            "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                          },
                                          "name": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringName')]"
                                          },
                                          "allowForwardedTraffic": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowForwardedTraffic')]"
                                          },
                                          "allowGatewayTransit": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowGatewayTransit')]"
                                          },
                                          "allowVirtualNetworkAccess": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringAllowVirtualNetworkAccess')]"
                                          },
                                          "doNotVerifyRemoteGateways": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringDoNotVerifyRemoteGateways')]"
                                          },
                                          "useRemoteGateways": {
                                            "value": "[tryGet(coalesce(parameters('peerings'), createArray())[copyIndex()], 'remotePeeringUseRemoteGateways')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.35.1.17967",
                                              "templateHash": "11179987886456111827"
                                            },
                                            "name": "Virtual Network Peerings",
                                            "description": "This module deploys a Virtual Network Peering."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "[format('peer-{0}-{1}', parameters('localVnetName'), last(split(parameters('remoteVirtualNetworkResourceId'), '/')))]",
                                              "metadata": {
                                                "description": "Optional. The Name of VNET Peering resource. If not provided, default value will be localVnetName-remoteVnetName."
                                              }
                                            },
                                            "localVnetName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Virtual Network to add the peering to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "remoteVirtualNetworkResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The Resource ID of the VNet that is this Local VNet is being peered to. Should be in the format of a Resource ID."
                                              }
                                            },
                                            "allowForwardedTraffic": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network. Default is true."
                                              }
                                            },
                                            "allowGatewayTransit": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If gateway links can be used in remote virtual networking to link to this virtual network. Default is false."
                                              }
                                            },
                                            "allowVirtualNetworkAccess": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space. Default is true."
                                              }
                                            },
                                            "doNotVerifyRemoteGateways": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. If we need to verify the provisioning state of the remote gateway. Default is true."
                                              }
                                            },
                                            "useRemoteGateways": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering is also true, virtual network will use gateways of remote virtual network for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a gateway. Default is false."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}', parameters('localVnetName'), parameters('name'))]",
                                              "properties": {
                                                "allowForwardedTraffic": "[parameters('allowForwardedTraffic')]",
                                                "allowGatewayTransit": "[parameters('allowGatewayTransit')]",
                                                "allowVirtualNetworkAccess": "[parameters('allowVirtualNetworkAccess')]",
                                                "doNotVerifyRemoteGateways": "[parameters('doNotVerifyRemoteGateways')]",
                                                "useRemoteGateways": "[parameters('useRemoteGateways')]",
                                                "remoteVirtualNetwork": {
                                                  "id": "[parameters('remoteVirtualNetworkResourceId')]"
                                                }
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the virtual network peering was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the virtual network peering."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the virtual network peering."
                                              },
                                              "value": "[resourceId('Microsoft.Network/virtualNetworks/virtualNetworkPeerings', parameters('localVnetName'), parameters('name'))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "virtualNetwork",
                                        "virtualNetwork_subnets"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "subnetNames": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The names of the deployed subnets."
                                      },
                                      "copy": {
                                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.name.value]"
                                      }
                                    },
                                    "subnetResourceIds": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The resource IDs of the deployed subnets."
                                      },
                                      "copy": {
                                        "count": "[length(coalesce(parameters('subnets'), createArray()))]",
                                        "input": "[reference(format('virtualNetwork_subnets[{0}]', copyIndex())).outputs.resourceId.value]"
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('virtualNetwork', '2024-05-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "nsgs"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Virtual Network resource."
                              },
                              "value": "[reference('virtualNetwork').outputs.name.value]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Virtual Network."
                              },
                              "value": "[reference('virtualNetwork').outputs.resourceId.value]"
                            },
                            "subnets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/subnetOutputType"
                              },
                              "copy": {
                                "count": "[length(parameters('subnets'))]",
                                "input": {
                                  "name": "[parameters('subnets')[copyIndex()].name]",
                                  "resourceId": "[reference('virtualNetwork').outputs.subnetResourceIds.value[copyIndex()]]",
                                  "nsgName": "[if(not(empty(tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup'))), tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup', 'name'), null())]",
                                  "nsgResourceId": "[if(not(empty(tryGet(parameters('subnets')[copyIndex()], 'networkSecurityGroup'))), reference(format('nsgs[{0}]', copyIndex())).outputs.resourceId.value, null())]"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "bastionHost": {
                      "condition": "[not(empty(parameters('bastionConfiguration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-bastionHost', parameters('resourcesName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(parameters('bastionConfiguration'), 'name'), format('bastion-{0}', parameters('resourcesName')))]"
                          },
                          "vnetId": {
                            "value": "[reference('virtualNetwork').outputs.resourceId.value]"
                          },
                          "vnetName": {
                            "value": "[reference('virtualNetwork').outputs.name.value]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkSpaceResourceId')]"
                          },
                          "subnetAddressPrefixes": {
                            "value": "[tryGet(parameters('bastionConfiguration'), 'subnetAddressPrefixes')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "8194910120480692682"
                            }
                          },
                          "definitions": {
                            "bastionHostConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the Bastion Host resource."
                                  }
                                },
                                "subnetAddressPrefixes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of address prefixes for the subnet."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Custom type definition for establishing Bastion Host for remote connection."
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Azure Bastion Host resource."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Azure region to deploy resources."
                              }
                            },
                            "subnetAddressPrefixes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. List of address prefixes for the subnet. Leave empty to skip subnet creation."
                              }
                            },
                            "vnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the Virtual Network where the Azure Bastion Host will be deployed."
                              }
                            },
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Virtual Network where the Azure Bastion Host will be deployed."
                              }
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Resource ID of the Log Analytics Workspace for monitoring and diagnostics."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                                },
                                "description": "Optional. Tags to apply to the resources."
                              },
                              "defaultValue": {}
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "resources": {
                            "bastionSubnet": {
                              "condition": "[not(empty(parameters('subnetAddressPrefixes')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('bastionSubnet-{0}', parameters('vnetName')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualNetworkName": {
                                    "value": "[parameters('vnetName')]"
                                  },
                                  "name": {
                                    "value": "AzureBastionSubnet"
                                  },
                                  "addressPrefixes": {
                                    "value": "[parameters('subnetAddressPrefixes')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "9728353654559466189"
                                    },
                                    "name": "Virtual Network Subnets",
                                    "description": "This module deploys a Virtual Network Subnet."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Name of the subnet resource."
                                      }
                                    },
                                    "virtualNetworkName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                      }
                                    },
                                    "ipamPoolPrefixAllocations": {
                                      "type": "array",
                                      "items": {
                                        "type": "object"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                      }
                                    },
                                    "routeTableResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                                      }
                                    },
                                    "serviceEndpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The service endpoints to enable on the subnet."
                                      }
                                    },
                                    "delegation": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The delegation to enable on the subnet."
                                      }
                                    },
                                    "natGatewayResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                      }
                                    },
                                    "privateEndpointNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled",
                                        "NetworkSecurityGroupEnabled",
                                        "RouteTableEnabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                                      }
                                    },
                                    "privateLinkServiceNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                      }
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                      }
                                    },
                                    "defaultOutboundAccess": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                      }
                                    },
                                    "sharingScope": {
                                      "type": "string",
                                      "allowedValues": [
                                        "DelegatedServices",
                                        "Tenant"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                                      }
                                    },
                                    "applicationGatewayIPConfigurations": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                                      }
                                    },
                                    "serviceEndpointPolicies": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. An array of service endpoint policies."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "virtualNetwork": {
                                      "existing": true,
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('virtualNetworkName')]"
                                    },
                                    "subnet": {
                                      "type": "Microsoft.Network/virtualNetworks/subnets",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "serviceEndpoints",
                                            "count": "[length(parameters('serviceEndpoints'))]",
                                            "input": {
                                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                            }
                                          }
                                        ],
                                        "addressPrefix": "[parameters('addressPrefix')]",
                                        "addressPrefixes": "[parameters('addressPrefixes')]",
                                        "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                        "sharingScope": "[parameters('sharingScope')]"
                                      }
                                    },
                                    "subnet_roleAssignments": {
                                      "copy": {
                                        "name": "subnet_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "subnet"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network peering was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network peering."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network peering."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The address prefix for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "List of address prefixes for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                                    },
                                    "ipamPoolPrefixAllocations": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IPAM pool prefix allocations for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                                    }
                                  }
                                }
                              }
                            },
                            "bastionHost": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('bastionHost-{0}-{1}', parameters('vnetName'), parameters('name')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "skuName": {
                                    "value": "Standard"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "virtualNetworkResourceId": {
                                    "value": "[parameters('vnetId')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": [
                                      {
                                        "name": "bastionDiagnostics",
                                        "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                                        "logCategoriesAndGroups": [
                                          {
                                            "categoryGroup": "allLogs",
                                            "enabled": true
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "2586599138991803385"
                                    },
                                    "name": "Bastion Hosts",
                                    "description": "This module deploys a Bastion Host."
                                  },
                                  "definitions": {
                                    "diagnosticSettingLogsOnlyType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Azure Bastion resource."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "virtualNetworkResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Shared services Virtual Network resource Id."
                                      }
                                    },
                                    "bastionSubnetPublicIpResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The Public IP resource ID to associate to the azureBastionSubnet. If empty, then the Public IP that is created as part of this module will be applied to the azureBastionSubnet. This parameter is ignored when enablePrivateOnlyBastion is true."
                                      }
                                    },
                                    "publicIPAddressObject": {
                                      "type": "object",
                                      "defaultValue": {
                                        "name": "[format('{0}-pip', parameters('name'))]"
                                      },
                                      "metadata": {
                                        "description": "Optional. Specifies the properties of the Public IP to create and be used by Azure Bastion, if no existing public IP was provided. This parameter is ignored when enablePrivateOnlyBastion is true."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "Basic",
                                      "allowedValues": [
                                        "Basic",
                                        "Developer",
                                        "Premium",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The SKU of this Bastion Host."
                                      }
                                    },
                                    "disableCopyPaste": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable Copy Paste. For Basic and Developer SKU Copy/Paste is always enabled."
                                      }
                                    },
                                    "enableFileCopy": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable File Copy. Not supported for Basic and Developer SKU."
                                      }
                                    },
                                    "enableIpConnect": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable IP Connect. Not supported for Basic and Developer SKU."
                                      }
                                    },
                                    "enableKerberos": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable Kerberos authentication. Not supported for Developer SKU."
                                      }
                                    },
                                    "enableShareableLink": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable Shareable Link. Not supported for Basic and Developer SKU."
                                      }
                                    },
                                    "enableSessionRecording": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable Session Recording feature. The Premium SKU is required for this feature. If Session Recording is enabled, the Native client support will be disabled."
                                      }
                                    },
                                    "enablePrivateOnlyBastion": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Choose to disable or enable Private-only Bastion deployment. The Premium SKU is required for this feature."
                                      }
                                    },
                                    "scaleUnits": {
                                      "type": "int",
                                      "defaultValue": 2,
                                      "metadata": {
                                        "description": "Optional. The scale units for the Bastion Host resource. The Basic and Developer SKU only support 2 scale units."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "items": {
                                        "type": "int"
                                      },
                                      "defaultValue": [],
                                      "allowedValues": [
                                        1,
                                        2,
                                        3
                                      ],
                                      "metadata": {
                                        "description": "Optional. A list of availability zones denoting where the Bastion Host resource needs to come from. This is not supported for the Developer SKU."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "enableReferencedModulesTelemetry": false,
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-bastionhost.{0}.{1}', replace('0.6.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "azureBastion": {
                                      "type": "Microsoft.Network/bastionHosts",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[coalesce(parameters('tags'), createObject())]",
                                      "sku": {
                                        "name": "[parameters('skuName')]"
                                      },
                                      "zones": "[if(equals(parameters('skuName'), 'Developer'), createArray(), map(parameters('zones'), lambda('zone', string(lambdaVariables('zone')))))]",
                                      "properties": "[union(createObject('scaleUnits', if(or(equals(parameters('skuName'), 'Basic'), equals(parameters('skuName'), 'Developer')), 2, parameters('scaleUnits')), 'ipConfigurations', if(equals(parameters('skuName'), 'Developer'), createArray(), createArray(createObject('name', 'IpConfAzureBastionSubnet', 'properties', union(createObject('subnet', createObject('id', format('{0}/subnets/AzureBastionSubnet', parameters('virtualNetworkResourceId')))), if(not(parameters('enablePrivateOnlyBastion')), createObject('publicIPAddress', createObject('id', if(not(empty(parameters('bastionSubnetPublicIpResourceId'))), parameters('bastionSubnetPublicIpResourceId'), reference('publicIPAddress').outputs.resourceId.value))), createObject())))))), if(equals(parameters('skuName'), 'Developer'), createObject('virtualNetwork', createObject('id', parameters('virtualNetworkResourceId'))), createObject()), if(or(or(equals(parameters('skuName'), 'Basic'), equals(parameters('skuName'), 'Standard')), equals(parameters('skuName'), 'Premium')), createObject('enableKerberos', parameters('enableKerberos')), createObject()), if(or(equals(parameters('skuName'), 'Standard'), equals(parameters('skuName'), 'Premium')), createObject('enableTunneling', if(equals(parameters('skuName'), 'Standard'), true(), if(parameters('enableSessionRecording'), false(), true())), 'disableCopyPaste', parameters('disableCopyPaste'), 'enableFileCopy', parameters('enableFileCopy'), 'enableIpConnect', parameters('enableIpConnect'), 'enableShareableLink', parameters('enableShareableLink')), createObject()), if(equals(parameters('skuName'), 'Premium'), createObject('enableSessionRecording', parameters('enableSessionRecording'), 'enablePrivateOnlyBastion', parameters('enablePrivateOnlyBastion')), createObject()))]",
                                      "dependsOn": [
                                        "publicIPAddress"
                                      ]
                                    },
                                    "azureBastion_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "azureBastion"
                                      ]
                                    },
                                    "azureBastion_diagnosticSettings": {
                                      "copy": {
                                        "name": "azureBastion_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "azureBastion"
                                      ]
                                    },
                                    "azureBastion_roleAssignments": {
                                      "copy": {
                                        "name": "azureBastion_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/bastionHosts/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/bastionHosts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "azureBastion"
                                      ]
                                    },
                                    "publicIPAddress": {
                                      "condition": "[and(and(empty(parameters('bastionSubnetPublicIpResourceId')), not(equals(parameters('skuName'), 'Developer'))), not(parameters('enablePrivateOnlyBastion')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Bastion-PIP', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('publicIPAddressObject').name]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'diagnosticSettings')]"
                                          },
                                          "publicIPAddressVersion": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIPAddressVersion')]"
                                          },
                                          "publicIPAllocationMethod": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIPAllocationMethod')]"
                                          },
                                          "publicIpPrefixResourceId": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'publicIPPrefixResourceId')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'roleAssignments')]"
                                          },
                                          "skuName": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'skuName')]"
                                          },
                                          "skuTier": {
                                            "value": "[tryGet(parameters('publicIPAddressObject'), 'skuTier')]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'tags'), parameters('tags'))]"
                                          },
                                          "zones": {
                                            "value": "[coalesce(tryGet(parameters('publicIPAddressObject'), 'zones'), if(greater(length(parameters('zones')), 0), parameters('zones'), null()))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "5168739580767459761"
                                            },
                                            "name": "Public IP Addresses",
                                            "description": "This module deploys a Public IP Address."
                                          },
                                          "definitions": {
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "ipTagType": {
                                              "type": "object",
                                              "properties": {
                                                "ipTagType": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IP tag type."
                                                  }
                                                },
                                                "tag": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IP tag."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            },
                                            "diagnosticSettingFullType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the diagnostic setting."
                                                  }
                                                },
                                                "logCategoriesAndGroups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "category": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                        }
                                                      },
                                                      "categoryGroup": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                        }
                                                      },
                                                      "enabled": {
                                                        "type": "bool",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                  }
                                                },
                                                "metricCategories": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "category": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                        }
                                                      },
                                                      "enabled": {
                                                        "type": "bool",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                  }
                                                },
                                                "logAnalyticsDestinationType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "AzureDiagnostics",
                                                    "Dedicated"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                  }
                                                },
                                                "workspaceResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "storageAccountResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "eventHubAuthorizationRuleResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                  }
                                                },
                                                "eventHubName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "marketplacePartnerResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                }
                                              }
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a lock.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                }
                                              }
                                            },
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the Public IP Address."
                                              }
                                            },
                                            "publicIpPrefixResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                              }
                                            },
                                            "publicIPAllocationMethod": {
                                              "type": "string",
                                              "defaultValue": "Static",
                                              "allowedValues": [
                                                "Dynamic",
                                                "Static"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The public IP address allocation method."
                                              }
                                            },
                                            "zones": {
                                              "type": "array",
                                              "items": {
                                                "type": "int"
                                              },
                                              "defaultValue": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "allowedValues": [
                                                1,
                                                2,
                                                3
                                              ],
                                              "metadata": {
                                                "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                              }
                                            },
                                            "publicIPAddressVersion": {
                                              "type": "string",
                                              "defaultValue": "IPv4",
                                              "allowedValues": [
                                                "IPv4",
                                                "IPv6"
                                              ],
                                              "metadata": {
                                                "description": "Optional. IP address version."
                                              }
                                            },
                                            "dnsSettings": {
                                              "$ref": "#/definitions/dnsSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DNS settings of the public IP address."
                                              }
                                            },
                                            "ipTags": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/ipTagType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The list of tags associated with the public IP address."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "skuName": {
                                              "type": "string",
                                              "defaultValue": "Standard",
                                              "allowedValues": [
                                                "Basic",
                                                "Standard"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Name of a public IP address SKU."
                                              }
                                            },
                                            "skuTier": {
                                              "type": "string",
                                              "defaultValue": "Regional",
                                              "allowedValues": [
                                                "Global",
                                                "Regional"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Tier of a public IP address SKU."
                                              }
                                            },
                                            "ddosSettings": {
                                              "$ref": "#/definitions/ddosSettingsType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "idleTimeoutInMinutes": {
                                              "type": "int",
                                              "defaultValue": 4,
                                              "metadata": {
                                                "description": "Optional. The idle timeout of the public IP address."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/diagnosticSettingFullType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "publicIpAddress": {
                                              "type": "Microsoft.Network/publicIPAddresses",
                                              "apiVersion": "2024-05-01",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "sku": {
                                                "name": "[parameters('skuName')]",
                                                "tier": "[parameters('skuTier')]"
                                              },
                                              "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                              "properties": {
                                                "ddosSettings": "[parameters('ddosSettings')]",
                                                "dnsSettings": "[parameters('dnsSettings')]",
                                                "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                "ipTags": "[parameters('ipTags')]"
                                              }
                                            },
                                            "publicIpAddress_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_roleAssignments": {
                                              "copy": {
                                                "name": "publicIpAddress_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            },
                                            "publicIpAddress_diagnosticSettings": {
                                              "copy": {
                                                "name": "publicIpAddress_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "publicIpAddress"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the public IP address was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the public IP address."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the public IP address."
                                              },
                                              "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                            },
                                            "ipAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The public IP address of the public IP address resource."
                                              },
                                              "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the Azure Bastion was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name the Azure Bastion."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID the Azure Bastion."
                                      },
                                      "value": "[resourceId('Microsoft.Network/bastionHosts', parameters('name'))]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('azureBastion', '2024-05-01', 'full').location]"
                                    },
                                    "ipConfAzureBastionSubnet": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "The Public IPconfiguration object for the AzureBastionSubnet."
                                      },
                                      "value": "[if(equals(parameters('skuName'), 'Developer'), createObject(), reference('azureBastion').ipConfigurations[0])]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Azure Bastion Host resource."
                              },
                              "value": "[reference('bastionHost').outputs.name.value]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Azure Bastion Host resource."
                              },
                              "value": "[reference('bastionHost').outputs.resourceId.value]"
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Bastion Host subnet."
                              },
                              "value": "[reference('bastionSubnet').outputs.resourceId.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Bastion Host subnet."
                              },
                              "value": "[reference('bastionSubnet').outputs.name.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    },
                    "jumpbox": {
                      "condition": "[not(empty(parameters('jumpboxConfiguration')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-jumpbox', parameters('resourcesName'))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(parameters('jumpboxConfiguration'), 'name'), format('vm-jumpbox-{0}', parameters('resourcesName')))]"
                          },
                          "vnetName": {
                            "value": "[reference('virtualNetwork').outputs.name.value]"
                          },
                          "size": {
                            "value": "[coalesce(tryGet(parameters('jumpboxConfiguration'), 'size'), 'Standard_D2s_v3')]"
                          },
                          "logAnalyticsWorkspaceId": {
                            "value": "[parameters('logAnalyticsWorkSpaceResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "subnet": {
                            "value": "[tryGet(parameters('jumpboxConfiguration'), 'subnet')]"
                          },
                          "username": {
                            "value": "[coalesce(tryGet(parameters('jumpboxConfiguration'), 'username'), '')]"
                          },
                          "password": {
                            "value": "[coalesce(tryGet(parameters('jumpboxConfiguration'), 'password'), '')]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "11353990117260256710"
                            }
                          },
                          "definitions": {
                            "jumpBoxConfigurationType": {
                              "type": "secureObject",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the Virtual Machine."
                                  }
                                },
                                "size": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The size of the VM."
                                  }
                                },
                                "username": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. Username to access VM."
                                  }
                                },
                                "password": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. Password to access VM."
                                  }
                                },
                                "subnet": {
                                  "$ref": "#/definitions/subnetType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Subnet configuration for the Jumpbox VM."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "Custom type definition for establishing Jumpbox Virtual Machine and its associated resources."
                              }
                            },
                            "_1.securityRuleType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the security rule."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "access": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Allow",
                                        "Deny"
                                      ],
                                      "metadata": {
                                        "description": "Required. Whether network traffic is allowed or denied."
                                      }
                                    },
                                    "description": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The description of the security rule."
                                      }
                                    },
                                    "destinationAddressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                      }
                                    },
                                    "destinationAddressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                      }
                                    },
                                    "destinationApplicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource IDs of the application security groups specified as destination."
                                      }
                                    },
                                    "destinationPortRange": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "destinationPortRanges": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The destination port ranges."
                                      }
                                    },
                                    "direction": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Inbound",
                                        "Outbound"
                                      ],
                                      "metadata": {
                                        "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                      }
                                    },
                                    "priority": {
                                      "type": "int",
                                      "minValue": 100,
                                      "maxValue": 4096,
                                      "metadata": {
                                        "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                      }
                                    },
                                    "protocol": {
                                      "type": "string",
                                      "allowedValues": [
                                        "*",
                                        "Ah",
                                        "Esp",
                                        "Icmp",
                                        "Tcp",
                                        "Udp"
                                      ],
                                      "metadata": {
                                        "description": "Required. Network protocol this rule applies to."
                                      }
                                    },
                                    "sourceAddressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                      }
                                    },
                                    "sourceAddressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The CIDR or source IP ranges."
                                      }
                                    },
                                    "sourceApplicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource IDs of the application security groups specified as source."
                                      }
                                    },
                                    "sourcePortRange": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                      }
                                    },
                                    "sourcePortRanges": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The source port ranges."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The properties of the security rule."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type of a security rule.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-security-group:0.5.1"
                                }
                              }
                            },
                            "_2.networkSecurityGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the network security group."
                                  }
                                },
                                "securityRules": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.securityRuleType"
                                  },
                                  "metadata": {
                                    "description": "Required. The security rules for the network security group."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "Custom type definition for network security group configuration",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "virtualNetwork.bicep"
                                }
                              }
                            },
                            "subnetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The Name of the subnet resource."
                                  }
                                },
                                "addressPrefixes": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. Prefixes for the subnet."
                                  }
                                },
                                "delegation": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The delegation to enable on the subnet."
                                  }
                                },
                                "privateEndpointNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled",
                                    "NetworkSecurityGroupEnabled",
                                    "RouteTableEnabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. enable or disable apply network policies on private endpoint in the subnet."
                                  }
                                },
                                "privateLinkServiceNetworkPolicies": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Disabled",
                                    "Enabled"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                  }
                                },
                                "networkSecurityGroup": {
                                  "$ref": "#/definitions/_2.networkSecurityGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Network Security Group configuration for the subnet."
                                  }
                                },
                                "routeTableResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the route table to assign to the subnet."
                                  }
                                },
                                "serviceEndpointPolicies": {
                                  "type": "array",
                                  "items": {
                                    "type": "object"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. An array of service endpoint policies."
                                  }
                                },
                                "serviceEndpoints": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The service endpoints to enable on the subnet."
                                  }
                                },
                                "defaultOutboundAccess": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "Custom type definition for subnet configuration",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "virtualNetwork.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Jumpbox Virtual Machine."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Azure region to deploy resources."
                              }
                            },
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Virtual Network where the Jumpbox VM will be deployed."
                              }
                            },
                            "size": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Size of the Jumpbox Virtual Machine."
                              }
                            },
                            "subnet": {
                              "$ref": "#/definitions/subnetType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Subnet configuration for the Jumpbox VM."
                              }
                            },
                            "username": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Username to access the Jumpbox VM."
                              }
                            },
                            "password": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Password to access the Jumpbox VM."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                                },
                                "description": "Optional. Tags to apply to the resources."
                              },
                              "defaultValue": {}
                            },
                            "logAnalyticsWorkspaceId": {
                              "type": "securestring",
                              "metadata": {
                                "description": "Required. Log Analytics Workspace Resource ID for VM diagnostics."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "vmName": "[take(parameters('name'), 15)]"
                          },
                          "resources": {
                            "nsg": {
                              "condition": "[not(empty(parameters('subnet')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-{1}', parameters('vnetName'), tryGet(parameters('subnet'), 'networkSecurityGroup', 'name'))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('{0}-{1}', parameters('vnetName'), tryGet(parameters('subnet'), 'networkSecurityGroup', 'name'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "securityRules": {
                                    "value": "[tryGet(parameters('subnet'), 'networkSecurityGroup', 'securityRules')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "2305747478751645177"
                                    },
                                    "name": "Network Security Groups",
                                    "description": "This module deploys a Network security Group (NSG)."
                                  },
                                  "definitions": {
                                    "securityRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the security rule."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "access": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Allow",
                                                "Deny"
                                              ],
                                              "metadata": {
                                                "description": "Required. Whether network traffic is allowed or denied."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The description of the security rule."
                                              }
                                            },
                                            "destinationAddressPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Optional. The destination address prefix. CIDR or destination IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used."
                                              }
                                            },
                                            "destinationAddressPrefixes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination address prefixes. CIDR or destination IP ranges."
                                              }
                                            },
                                            "destinationApplicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource IDs of the application security groups specified as destination."
                                              }
                                            },
                                            "destinationPortRange": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                              }
                                            },
                                            "destinationPortRanges": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The destination port ranges."
                                              }
                                            },
                                            "direction": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Inbound",
                                                "Outbound"
                                              ],
                                              "metadata": {
                                                "description": "Required. The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic."
                                              }
                                            },
                                            "priority": {
                                              "type": "int",
                                              "minValue": 100,
                                              "maxValue": 4096,
                                              "metadata": {
                                                "description": "Required. Required. The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule."
                                              }
                                            },
                                            "protocol": {
                                              "type": "string",
                                              "allowedValues": [
                                                "*",
                                                "Ah",
                                                "Esp",
                                                "Icmp",
                                                "Tcp",
                                                "Udp"
                                              ],
                                              "metadata": {
                                                "description": "Required. Network protocol this rule applies to."
                                              }
                                            },
                                            "sourceAddressPrefix": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The CIDR or source IP range. Asterisk \"*\" can also be used to match all source IPs. Default tags such as \"VirtualNetwork\", \"AzureLoadBalancer\" and \"Internet\" can also be used. If this is an ingress rule, specifies where network traffic originates from."
                                              }
                                            },
                                            "sourceAddressPrefixes": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The CIDR or source IP ranges."
                                              }
                                            },
                                            "sourceApplicationSecurityGroupResourceIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The resource IDs of the application security groups specified as source."
                                              }
                                            },
                                            "sourcePortRange": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The source port or range. Integer or range between 0 and 65535. Asterisk \"*\" can also be used to match all ports."
                                              }
                                            },
                                            "sourcePortRanges": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The source port ranges."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The properties of the security rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type of a security rule."
                                      }
                                    },
                                    "diagnosticSettingLogsOnlyType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if only logs are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Network Security Group."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "securityRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/securityRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of Security Rules to deploy to the Network Security Group. When not provided, an NSG including only the built-in roles will be deployed."
                                      }
                                    },
                                    "flushConnection": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial enablement will trigger re-evaluation. Network Security Group connection flushing is not available in all regions."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingLogsOnlyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the NSG resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-networksecuritygroup.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "networkSecurityGroup": {
                                      "type": "Microsoft.Network/networkSecurityGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "securityRules",
                                            "count": "[length(coalesce(parameters('securityRules'), createArray()))]",
                                            "input": {
                                              "name": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].name]",
                                              "properties": {
                                                "access": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.access]",
                                                "description": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'description'), '')]",
                                                "destinationAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefix'), '')]",
                                                "destinationAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationAddressPrefixes'), createArray())]",
                                                "destinationApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationApplicationSecurityGroupResourceIds'), createArray()), lambda('destinationApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('destinationApplicationSecurityGroupResourceId'))))]",
                                                "destinationPortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRange'), '')]",
                                                "destinationPortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'destinationPortRanges'), createArray())]",
                                                "direction": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.direction]",
                                                "priority": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.priority]",
                                                "protocol": "[coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties.protocol]",
                                                "sourceAddressPrefix": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefix'), '')]",
                                                "sourceAddressPrefixes": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceAddressPrefixes'), createArray())]",
                                                "sourceApplicationSecurityGroups": "[map(coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourceApplicationSecurityGroupResourceIds'), createArray()), lambda('sourceApplicationSecurityGroupResourceId', createObject('id', lambdaVariables('sourceApplicationSecurityGroupResourceId'))))]",
                                                "sourcePortRange": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRange'), '')]",
                                                "sourcePortRanges": "[coalesce(tryGet(coalesce(parameters('securityRules'), createArray())[copyIndex('securityRules')].properties, 'sourcePortRanges'), createArray())]"
                                              }
                                            }
                                          }
                                        ],
                                        "flushConnection": "[parameters('flushConnection')]"
                                      }
                                    },
                                    "networkSecurityGroup_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    },
                                    "networkSecurityGroup_diagnosticSettings": {
                                      "copy": {
                                        "name": "networkSecurityGroup_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    },
                                    "networkSecurityGroup_roleAssignments": {
                                      "copy": {
                                        "name": "networkSecurityGroup_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/networkSecurityGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkSecurityGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "networkSecurityGroup"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the network security group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the network security group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the network security group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('networkSecurityGroup', '2023-11-01', 'full').location]"
                                    }
                                  }
                                }
                              }
                            },
                            "subnetResource": {
                              "condition": "[not(empty(parameters('subnet')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[coalesce(tryGet(parameters('subnet'), 'name'), format('{0}-jumpbox-subnet', parameters('vnetName')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "virtualNetworkName": {
                                    "value": "[parameters('vnetName')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(parameters('subnet'), 'name'), '')]"
                                  },
                                  "addressPrefixes": {
                                    "value": "[tryGet(parameters('subnet'), 'addressPrefixes')]"
                                  },
                                  "networkSecurityGroupResourceId": {
                                    "value": "[reference('nsg').outputs.resourceId.value]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "9728353654559466189"
                                    },
                                    "name": "Virtual Network Subnets",
                                    "description": "This module deploys a Virtual Network Subnet."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The Name of the subnet resource."
                                      }
                                    },
                                    "virtualNetworkName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent virtual network. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The address prefix for the subnet. Required if `addressPrefixes` is empty."
                                      }
                                    },
                                    "ipamPoolPrefixAllocations": {
                                      "type": "array",
                                      "items": {
                                        "type": "object"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. The address space for the subnet, deployed from IPAM Pool. Required if `addressPrefixes` and `addressPrefix` is empty."
                                      }
                                    },
                                    "networkSecurityGroupResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the network security group to assign to the subnet."
                                      }
                                    },
                                    "routeTableResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the route table to assign to the subnet."
                                      }
                                    },
                                    "serviceEndpoints": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The service endpoints to enable on the subnet."
                                      }
                                    },
                                    "delegation": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The delegation to enable on the subnet."
                                      }
                                    },
                                    "natGatewayResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the NAT Gateway to use for the subnet."
                                      }
                                    },
                                    "privateEndpointNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled",
                                        "NetworkSecurityGroupEnabled",
                                        "RouteTableEnabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private endpoint in the subnet."
                                      }
                                    },
                                    "privateLinkServiceNetworkPolicies": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Enable or disable apply network policies on private link service in the subnet."
                                      }
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. List of address prefixes for the subnet. Required if `addressPrefix` is empty."
                                      }
                                    },
                                    "defaultOutboundAccess": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to false to disable default outbound connectivity for all VMs in the subnet. This property can only be set at the time of subnet creation and cannot be updated for an existing subnet."
                                      }
                                    },
                                    "sharingScope": {
                                      "type": "string",
                                      "allowedValues": [
                                        "DelegatedServices",
                                        "Tenant"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Set this property to Tenant to allow sharing the subnet with other subscriptions in your AAD tenant. This property can only be set if defaultOutboundAccess is set to false, both properties can only be set if the subnet is empty."
                                      }
                                    },
                                    "applicationGatewayIPConfigurations": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Application gateway IP configurations of virtual network resource."
                                      }
                                    },
                                    "serviceEndpointPolicies": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. An array of service endpoint policies."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-virtualnetworksubnet.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "virtualNetwork": {
                                      "existing": true,
                                      "type": "Microsoft.Network/virtualNetworks",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('virtualNetworkName')]"
                                    },
                                    "subnet": {
                                      "type": "Microsoft.Network/virtualNetworks/subnets",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "serviceEndpoints",
                                            "count": "[length(parameters('serviceEndpoints'))]",
                                            "input": {
                                              "service": "[parameters('serviceEndpoints')[copyIndex('serviceEndpoints')]]"
                                            }
                                          }
                                        ],
                                        "addressPrefix": "[parameters('addressPrefix')]",
                                        "addressPrefixes": "[parameters('addressPrefixes')]",
                                        "ipamPoolPrefixAllocations": "[parameters('ipamPoolPrefixAllocations')]",
                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]",
                                        "routeTable": "[if(not(empty(parameters('routeTableResourceId'))), createObject('id', parameters('routeTableResourceId')), null())]",
                                        "natGateway": "[if(not(empty(parameters('natGatewayResourceId'))), createObject('id', parameters('natGatewayResourceId')), null())]",
                                        "delegations": "[if(not(empty(parameters('delegation'))), createArray(createObject('name', parameters('delegation'), 'properties', createObject('serviceName', parameters('delegation')))), createArray())]",
                                        "privateEndpointNetworkPolicies": "[parameters('privateEndpointNetworkPolicies')]",
                                        "privateLinkServiceNetworkPolicies": "[parameters('privateLinkServiceNetworkPolicies')]",
                                        "applicationGatewayIPConfigurations": "[parameters('applicationGatewayIPConfigurations')]",
                                        "serviceEndpointPolicies": "[parameters('serviceEndpointPolicies')]",
                                        "defaultOutboundAccess": "[parameters('defaultOutboundAccess')]",
                                        "sharingScope": "[parameters('sharingScope')]"
                                      }
                                    },
                                    "subnet_roleAssignments": {
                                      "copy": {
                                        "name": "subnet_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/virtualNetworks/{0}/subnets/{1}', parameters('virtualNetworkName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "subnet"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the virtual network peering was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the virtual network peering."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the virtual network peering."
                                      },
                                      "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), parameters('name'))]"
                                    },
                                    "addressPrefix": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The address prefix for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefix'), '')]"
                                    },
                                    "addressPrefixes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "List of address prefixes for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'addressPrefixes'), createArray())]"
                                    },
                                    "ipamPoolPrefixAllocations": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The IPAM pool prefix allocations for the subnet."
                                      },
                                      "value": "[coalesce(tryGet(reference('subnet'), 'ipamPoolPrefixAllocations'), createArray())]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "nsg"
                              ]
                            },
                            "maintenanceConfiguration": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-jumpbox-maintenance-config', variables('vmName')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('mc-{0}', variables('vmName'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  },
                                  "extensionProperties": {
                                    "value": {
                                      "InGuestPatchMode": "User"
                                    }
                                  },
                                  "maintenanceScope": {
                                    "value": "InGuestPatch"
                                  },
                                  "maintenanceWindow": {
                                    "value": {
                                      "startDateTime": "2024-06-16 00:00",
                                      "duration": "03:55",
                                      "timeZone": "W. Europe Standard Time",
                                      "recurEvery": "1Day"
                                    }
                                  },
                                  "visibility": {
                                    "value": "Custom"
                                  },
                                  "installPatches": {
                                    "value": {
                                      "rebootSetting": "IfRequired",
                                      "windowsParameters": {
                                        "classificationsToInclude": [
                                          "Critical",
                                          "Security"
                                        ]
                                      },
                                      "linuxParameters": {
                                        "classificationsToInclude": [
                                          "Critical",
                                          "Security"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "16060601297152129929"
                                    },
                                    "name": "Maintenance Configurations",
                                    "description": "This module deploys a Maintenance Configuration."
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Maintenance Configuration Name."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "extensionProperties": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Gets or sets extensionProperties of the maintenanceConfiguration."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "maintenanceScope": {
                                      "type": "string",
                                      "defaultValue": "Host",
                                      "allowedValues": [
                                        "Host",
                                        "OSImage",
                                        "Extension",
                                        "InGuestPatch",
                                        "SQLDB",
                                        "SQLManagedInstance"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Gets or sets maintenanceScope of the configuration."
                                      }
                                    },
                                    "maintenanceWindow": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Definition of a MaintenanceWindow."
                                      }
                                    },
                                    "namespace": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Gets or sets namespace of the resource."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Gets or sets tags of the resource."
                                      }
                                    },
                                    "visibility": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "",
                                        "Custom",
                                        "Public"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Gets or sets the visibility of the configuration. The default value is 'Custom'."
                                      }
                                    },
                                    "installPatches": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Configuration settings for VM guest patching with Azure Update Manager."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Scheduled Patching Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cd08ab90-6b14-449c-ad9a-8f8e549482c6')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.maintenance-maintenanceconfiguration.{0}.{1}', replace('0.3.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "maintenanceConfiguration": {
                                      "type": "Microsoft.Maintenance/maintenanceConfigurations",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "extensionProperties": "[parameters('extensionProperties')]",
                                        "maintenanceScope": "[parameters('maintenanceScope')]",
                                        "maintenanceWindow": "[parameters('maintenanceWindow')]",
                                        "namespace": "[parameters('namespace')]",
                                        "visibility": "[parameters('visibility')]",
                                        "installPatches": "[if(equals(parameters('maintenanceScope'), 'InGuestPatch'), parameters('installPatches'), null())]"
                                      }
                                    },
                                    "maintenanceConfiguration_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Maintenance/maintenanceConfigurations/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "maintenanceConfiguration"
                                      ]
                                    },
                                    "maintenanceConfiguration_roleAssignments": {
                                      "copy": {
                                        "name": "maintenanceConfiguration_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Maintenance/maintenanceConfigurations/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Maintenance/maintenanceConfigurations', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "maintenanceConfiguration"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Maintenance Configuration."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Maintenance Configuration."
                                      },
                                      "value": "[resourceId('Microsoft.Maintenance/maintenanceConfigurations', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the Maintenance Configuration was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the Maintenance Configuration was created in."
                                      },
                                      "value": "[reference('maintenanceConfiguration', '2023-04-01', 'full').location]"
                                    }
                                  }
                                }
                              }
                            },
                            "windowsVmDataCollectionRules": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-jumpbox-data-collection-rule', variables('vmName')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('dcr-{0}', variables('vmName'))]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "dataCollectionRuleProperties": {
                                    "value": {
                                      "kind": "Windows",
                                      "dataSources": {
                                        "performanceCounters": [
                                          {
                                            "streams": [
                                              "Microsoft-Perf"
                                            ],
                                            "samplingFrequencyInSeconds": 60,
                                            "counterSpecifiers": [
                                              "\\Processor Information(_Total)\\% Processor Time",
                                              "\\Processor Information(_Total)\\% Privileged Time",
                                              "\\Processor Information(_Total)\\% User Time",
                                              "\\Processor Information(_Total)\\Processor Frequency",
                                              "\\System\\Processes",
                                              "\\Process(_Total)\\Thread Count",
                                              "\\Process(_Total)\\Handle Count",
                                              "\\System\\System Up Time",
                                              "\\System\\Context Switches/sec",
                                              "\\System\\Processor Queue Length",
                                              "\\Memory\\% Committed Bytes In Use",
                                              "\\Memory\\Available Bytes",
                                              "\\Memory\\Committed Bytes",
                                              "\\Memory\\Cache Bytes",
                                              "\\Memory\\Pool Paged Bytes",
                                              "\\Memory\\Pool Nonpaged Bytes",
                                              "\\Memory\\Pages/sec",
                                              "\\Memory\\Page Faults/sec",
                                              "\\Process(_Total)\\Working Set",
                                              "\\Process(_Total)\\Working Set - Private",
                                              "\\LogicalDisk(_Total)\\% Disk Time",
                                              "\\LogicalDisk(_Total)\\% Disk Read Time",
                                              "\\LogicalDisk(_Total)\\% Disk Write Time",
                                              "\\LogicalDisk(_Total)\\% Idle Time",
                                              "\\LogicalDisk(_Total)\\Disk Bytes/sec",
                                              "\\LogicalDisk(_Total)\\Disk Read Bytes/sec",
                                              "\\LogicalDisk(_Total)\\Disk Write Bytes/sec",
                                              "\\LogicalDisk(_Total)\\Disk Transfers/sec",
                                              "\\LogicalDisk(_Total)\\Disk Reads/sec",
                                              "\\LogicalDisk(_Total)\\Disk Writes/sec",
                                              "\\LogicalDisk(_Total)\\Avg. Disk sec/Transfer",
                                              "\\LogicalDisk(_Total)\\Avg. Disk sec/Read",
                                              "\\LogicalDisk(_Total)\\Avg. Disk sec/Write",
                                              "\\LogicalDisk(_Total)\\Avg. Disk Queue Length",
                                              "\\LogicalDisk(_Total)\\Avg. Disk Read Queue Length",
                                              "\\LogicalDisk(_Total)\\Avg. Disk Write Queue Length",
                                              "\\LogicalDisk(_Total)\\% Free Space",
                                              "\\LogicalDisk(_Total)\\Free Megabytes",
                                              "\\Network Interface(*)\\Bytes Total/sec",
                                              "\\Network Interface(*)\\Bytes Sent/sec",
                                              "\\Network Interface(*)\\Bytes Received/sec",
                                              "\\Network Interface(*)\\Packets/sec",
                                              "\\Network Interface(*)\\Packets Sent/sec",
                                              "\\Network Interface(*)\\Packets Received/sec",
                                              "\\Network Interface(*)\\Packets Outbound Errors",
                                              "\\Network Interface(*)\\Packets Received Errors"
                                            ],
                                            "name": "perfCounterDataSource60"
                                          }
                                        ]
                                      },
                                      "destinations": {
                                        "logAnalytics": [
                                          {
                                            "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                                            "name": "la--1264800308"
                                          }
                                        ]
                                      },
                                      "dataFlows": [
                                        {
                                          "streams": [
                                            "Microsoft-Perf"
                                          ],
                                          "destinations": [
                                            "la--1264800308"
                                          ],
                                          "transformKql": "source",
                                          "outputStream": "Microsoft-Perf"
                                        }
                                      ]
                                    }
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "8044804383919916904"
                                    },
                                    "name": "Data Collection Rules",
                                    "description": "This module deploys a Data Collection Rule."
                                  },
                                  "definitions": {
                                    "dataCollectionRulePropertiesType": {
                                      "type": "object",
                                      "discriminator": {
                                        "propertyName": "kind",
                                        "mapping": {
                                          "Linux": {
                                            "$ref": "#/definitions/linuxDcrPropertiesType"
                                          },
                                          "Windows": {
                                            "$ref": "#/definitions/windowsDcrPropertiesType"
                                          },
                                          "All": {
                                            "$ref": "#/definitions/allPlatformsDcrPropertiesType"
                                          },
                                          "AgentSettings": {
                                            "$ref": "#/definitions/agentSettingsDcrPropertiesType"
                                          },
                                          "Direct": {
                                            "$ref": "#/definitions/directDcrPropertiesType"
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for data collection rule properties. Depending on the kind, the properties will be different."
                                      }
                                    },
                                    "linuxDcrPropertiesType": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Linux"
                                          ],
                                          "metadata": {
                                            "description": "Required. The platform type specifies the type of resources this rule can apply to."
                                          }
                                        },
                                        "dataSources": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of data sources that will be collected."
                                          }
                                        },
                                        "dataFlows": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The specification of data flows."
                                          }
                                        },
                                        "destinations": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of destinations that can be used in data flows."
                                          }
                                        },
                                        "dataCollectionEndpointResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the data collection endpoint that this rule can be used with."
                                          }
                                        },
                                        "streamDeclarations": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Declaration of custom streams used in this rule."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description of the data collection rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the properties of the 'Linux' data collection rule."
                                      }
                                    },
                                    "windowsDcrPropertiesType": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Windows"
                                          ],
                                          "metadata": {
                                            "description": "Required. The platform type specifies the type of resources this rule can apply to."
                                          }
                                        },
                                        "dataSources": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of data sources that will be collected."
                                          }
                                        },
                                        "dataFlows": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The specification of data flows."
                                          }
                                        },
                                        "destinations": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of destinations that can be used in data flows."
                                          }
                                        },
                                        "dataCollectionEndpointResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the data collection endpoint that this rule can be used with."
                                          }
                                        },
                                        "streamDeclarations": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Declaration of custom streams used in this rule."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description of the data collection rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the properties of the 'Windows' data collection rule."
                                      }
                                    },
                                    "allPlatformsDcrPropertiesType": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "All"
                                          ],
                                          "metadata": {
                                            "description": "Required. The platform type specifies the type of resources this rule can apply to."
                                          }
                                        },
                                        "dataSources": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of data sources that will be collected."
                                          }
                                        },
                                        "dataFlows": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The specification of data flows."
                                          }
                                        },
                                        "destinations": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of destinations that can be used in data flows."
                                          }
                                        },
                                        "dataCollectionEndpointResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the data collection endpoint that this rule can be used with."
                                          }
                                        },
                                        "streamDeclarations": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Declaration of custom streams used in this rule."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description of the data collection rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the properties of the data collection rule of the kind 'All'."
                                      }
                                    },
                                    "agentSettingsDcrPropertiesType": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AgentSettings"
                                          ],
                                          "metadata": {
                                            "description": "Required. The platform type specifies the type of resources this rule can apply to."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description of the data collection rule."
                                          }
                                        },
                                        "agentSettings": {
                                          "$ref": "#/definitions/agentSettingsType",
                                          "metadata": {
                                            "description": "Required. Agent settings used to modify agent behavior on a given host."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the properties of the 'AgentSettings' data collection rule."
                                      }
                                    },
                                    "agentSettingsType": {
                                      "type": "object",
                                      "properties": {
                                        "logs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/agentSettingType"
                                          },
                                          "metadata": {
                                            "description": "Required. All the settings that are applicable to the logs agent (AMA)."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the agent settings."
                                      }
                                    },
                                    "agentSettingType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "allowedValues": [
                                            "MaxDiskQuotaInMB",
                                            "UseTimeReceivedForForwardedEvents"
                                          ],
                                          "metadata": {
                                            "description": "Required. The name of the agent setting."
                                          }
                                        },
                                        "value": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The value of the agent setting."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the (single) agent setting."
                                      }
                                    },
                                    "directDcrPropertiesType": {
                                      "type": "object",
                                      "properties": {
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Direct"
                                          ],
                                          "metadata": {
                                            "description": "Required. The platform type specifies the type of resources this rule can apply to."
                                          }
                                        },
                                        "dataFlows": {
                                          "type": "array",
                                          "metadata": {
                                            "description": "Required. The specification of data flows."
                                          }
                                        },
                                        "destinations": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Specification of destinations that can be used in data flows."
                                          }
                                        },
                                        "dataCollectionEndpointResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the data collection endpoint that this rule can be used with."
                                          }
                                        },
                                        "streamDeclarations": {
                                          "type": "object",
                                          "metadata": {
                                            "description": "Required. Declaration of custom streams used in this rule."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description of the data collection rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the properties of the 'Direct' data collection rule."
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "managedIdentityAllType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the data collection rule. The name is case insensitive."
                                      }
                                    },
                                    "dataCollectionRuleProperties": {
                                      "$ref": "#/definitions/dataCollectionRulePropertiesType",
                                      "metadata": {
                                        "description": "Required. The kind of data collection rule."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentityAllType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    },
                                    "dataCollectionRulePropertiesUnion": "[union(createObject('description', tryGet(parameters('dataCollectionRuleProperties'), 'description')), if(or(or(equals(parameters('dataCollectionRuleProperties').kind, 'Linux'), equals(parameters('dataCollectionRuleProperties').kind, 'Windows')), equals(parameters('dataCollectionRuleProperties').kind, 'All')), createObject('dataSources', parameters('dataCollectionRuleProperties').dataSources), createObject()), if(or(or(or(equals(parameters('dataCollectionRuleProperties').kind, 'Linux'), equals(parameters('dataCollectionRuleProperties').kind, 'Windows')), equals(parameters('dataCollectionRuleProperties').kind, 'All')), equals(parameters('dataCollectionRuleProperties').kind, 'Direct')), createObject('dataFlows', parameters('dataCollectionRuleProperties').dataFlows, 'destinations', parameters('dataCollectionRuleProperties').destinations, 'dataCollectionEndpointId', tryGet(parameters('dataCollectionRuleProperties'), 'dataCollectionEndpointResourceId'), 'streamDeclarations', tryGet(parameters('dataCollectionRuleProperties'), 'streamDeclarations')), createObject()), if(equals(parameters('dataCollectionRuleProperties').kind, 'AgentSettings'), createObject('agentSettings', parameters('dataCollectionRuleProperties').agentSettings), createObject()))]"
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.insights-datacollectionrule.{0}.{1}', replace('0.6.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "dataCollectionRule": {
                                      "condition": "[not(equals(parameters('dataCollectionRuleProperties').kind, 'All'))]",
                                      "type": "Microsoft.Insights/dataCollectionRules",
                                      "apiVersion": "2023-03-11",
                                      "name": "[parameters('name')]",
                                      "kind": "[parameters('dataCollectionRuleProperties').kind]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": "[variables('dataCollectionRulePropertiesUnion')]"
                                    },
                                    "dataCollectionRuleAll": {
                                      "condition": "[equals(parameters('dataCollectionRuleProperties').kind, 'All')]",
                                      "type": "Microsoft.Insights/dataCollectionRules",
                                      "apiVersion": "2023-03-11",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "identity": "[variables('identity')]",
                                      "properties": "[variables('dataCollectionRulePropertiesUnion')]"
                                    },
                                    "dataCollectionRule_conditionalScopeResources": {
                                      "condition": "[or(and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None'))), not(empty(coalesce(parameters('roleAssignments'), createArray()))))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-DCR-ConditionalScope', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "dataCollectionRuleName": "[if(equals(parameters('dataCollectionRuleProperties').kind, 'All'), createObject('value', parameters('name')), createObject('value', parameters('name')))]",
                                          "builtInRoleNames": {
                                            "value": "[variables('builtInRoleNames')]"
                                          },
                                          "lock": {
                                            "value": "[parameters('lock')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[parameters('roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "5528885836196228785"
                                            }
                                          },
                                          "definitions": {
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a lock.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            },
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "builtInRoleNames": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Built-in role names."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "dataCollectionRuleName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the Data Collection Rule to assign the role(s) to."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(parameters('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "dataCollectionRule": {
                                              "existing": true,
                                              "type": "Microsoft.Insights/dataCollectionRules",
                                              "apiVersion": "2023-03-11",
                                              "name": "[parameters('dataCollectionRuleName')]"
                                            },
                                            "dataCollectionRule_roleAssignments": {
                                              "copy": {
                                                "name": "dataCollectionRule_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Insights/dataCollectionRules/{0}', parameters('dataCollectionRuleName'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceGroup().id, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              }
                                            },
                                            "dataCollectionRule_lock": {
                                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                              "type": "Microsoft.Authorization/locks",
                                              "apiVersion": "2020-05-01",
                                              "scope": "[format('Microsoft.Insights/dataCollectionRules/{0}', parameters('dataCollectionRuleName'))]",
                                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('dataCollectionRuleName')))]",
                                              "properties": {
                                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "dataCollectionRule",
                                        "dataCollectionRuleAll"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the dataCollectionRule."
                                      },
                                      "value": "[if(equals(parameters('dataCollectionRuleProperties').kind, 'All'), parameters('name'), parameters('name'))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the dataCollectionRule."
                                      },
                                      "value": "[if(equals(parameters('dataCollectionRuleProperties').kind, 'All'), resourceId('Microsoft.Insights/dataCollectionRules', parameters('name')), resourceId('Microsoft.Insights/dataCollectionRules', parameters('name')))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the dataCollectionRule was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[if(equals(parameters('dataCollectionRuleProperties').kind, 'All'), reference('dataCollectionRuleAll', '2023-03-11', 'full').location, reference('dataCollectionRule', '2023-03-11', 'full').location)]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[if(equals(parameters('dataCollectionRuleProperties').kind, 'All'), tryGet(tryGet(reference('dataCollectionRuleAll', '2023-03-11', 'full'), 'identity'), 'principalId'), tryGet(tryGet(reference('dataCollectionRule', '2023-03-11', 'full'), 'identity'), 'principalId'))]"
                                    }
                                  }
                                }
                              }
                            },
                            "proximityPlacementGroup": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-jumpbox-prox-place-group', variables('vmName')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[format('ppg-{0}', variables('vmName'))]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "5270161295544128972"
                                    },
                                    "name": "Proximity Placement Groups",
                                    "description": "This module deploys a Proximity Placement Group."
                                  },
                                  "definitions": {
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the proximity placement group that is being created."
                                      }
                                    },
                                    "type": {
                                      "type": "string",
                                      "defaultValue": "Standard",
                                      "allowedValues": [
                                        "Standard",
                                        "Ultra"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the type of the proximity placement group."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Resource location."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the proximity placement group resource."
                                      }
                                    },
                                    "zones": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the Availability Zone where virtual machine, virtual machine scale set or availability set associated with the proximity placement group can be created."
                                      }
                                    },
                                    "colocationStatus": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Describes colocation status of the Proximity Placement Group."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "intent": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the user intent of the proximity placement group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.compute-proximityplacementgroup.{0}.{1}', replace('0.3.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "proximityPlacementGroup": {
                                      "type": "Microsoft.Compute/proximityPlacementGroups",
                                      "apiVersion": "2022-08-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "zones": "[parameters('zones')]",
                                      "properties": {
                                        "proximityPlacementGroupType": "[parameters('type')]",
                                        "colocationStatus": "[parameters('colocationStatus')]",
                                        "intent": "[parameters('intent')]"
                                      }
                                    },
                                    "proximityPlacementGroup_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Compute/proximityPlacementGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "proximityPlacementGroup"
                                      ]
                                    },
                                    "proximityPlacementGroup_roleAssignments": {
                                      "copy": {
                                        "name": "proximityPlacementGroup_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Compute/proximityPlacementGroups/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "proximityPlacementGroup"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the proximity placement group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resourceId the proximity placement group."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/proximityPlacementGroups', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the proximity placement group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('proximityPlacementGroup', '2022-08-01', 'full').location]"
                                    }
                                  }
                                }
                              }
                            },
                            "vm": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[take(format('{0}-jumpbox', variables('vmName')), 64)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[variables('vmName')]"
                                  },
                                  "vmSize": {
                                    "value": "[parameters('size')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "computerName": {
                                    "value": "[variables('vmName')]"
                                  },
                                  "adminUsername": {
                                    "value": "[parameters('username')]"
                                  },
                                  "adminPassword": {
                                    "value": "[parameters('password')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "zone": {
                                    "value": 2
                                  },
                                  "imageReference": {
                                    "value": {
                                      "offer": "WindowsServer",
                                      "publisher": "MicrosoftWindowsServer",
                                      "sku": "2019-datacenter",
                                      "version": "latest"
                                    }
                                  },
                                  "osType": {
                                    "value": "Windows"
                                  },
                                  "osDisk": {
                                    "value": {
                                      "managedDisk": {
                                        "storageAccountType": "Standard_LRS"
                                      }
                                    }
                                  },
                                  "patchMode": {
                                    "value": "AutomaticByPlatform"
                                  },
                                  "bypassPlatformSafetyChecksOnUserSchedule": {
                                    "value": true
                                  },
                                  "enableAutomaticUpdates": {
                                    "value": true
                                  },
                                  "maintenanceConfigurationResourceId": {
                                    "value": "[reference('maintenanceConfiguration').outputs.resourceId.value]"
                                  },
                                  "proximityPlacementGroupResourceId": {
                                    "value": "[reference('proximityPlacementGroup').outputs.resourceId.value]"
                                  },
                                  "encryptionAtHost": {
                                    "value": false
                                  },
                                  "nicConfigurations": {
                                    "value": [
                                      {
                                        "name": "[format('{0}-nic', variables('vmName'))]",
                                        "ipConfigurations": [
                                          {
                                            "name": "ipconfig1",
                                            "subnetResourceId": "[reference('subnetResource').outputs.resourceId.value]"
                                          }
                                        ],
                                        "networkSecurityGroupResourceId": "[reference('nsg').outputs.resourceId.value]",
                                        "diagnosticSettings": [
                                          {
                                            "name": "jumpboxDiagnostics",
                                            "workspaceResourceId": "[parameters('logAnalyticsWorkspaceId')]",
                                            "logCategoriesAndGroups": [
                                              {
                                                "categoryGroup": "allLogs",
                                                "enabled": true
                                              }
                                            ],
                                            "metricCategories": [
                                              {
                                                "category": "AllMetrics",
                                                "enabled": true
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  },
                                  "extensionAadJoinConfig": {
                                    "value": {
                                      "enabled": true,
                                      "tags": "[parameters('tags')]",
                                      "typeHandlerVersion": "1.0"
                                    }
                                  },
                                  "extensionAntiMalwareConfig": {
                                    "value": {
                                      "enabled": true,
                                      "settings": {
                                        "AntimalwareEnabled": "true",
                                        "Exclusions": {},
                                        "RealtimeProtectionEnabled": "true",
                                        "ScheduledScanSettings": {
                                          "day": "7",
                                          "isEnabled": "true",
                                          "scanType": "Quick",
                                          "time": "120"
                                        }
                                      },
                                      "tags": "[parameters('tags')]"
                                    }
                                  },
                                  "extensionNetworkWatcherAgentConfig": {
                                    "value": {
                                      "enabled": true,
                                      "tags": "[parameters('tags')]"
                                    }
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "2656369421652316938"
                                    },
                                    "name": "Virtual Machines",
                                    "description": "This module deploys a Virtual Machine with one or multiple NICs and optionally one or multiple public IPs."
                                  },
                                  "definitions": {
                                    "osDiskType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The disk name."
                                          }
                                        },
                                        "diskSizeGB": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the size of an empty data disk in gigabytes."
                                          }
                                        },
                                        "createOption": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Attach",
                                            "Empty",
                                            "FromImage"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies how the virtual machine should be created."
                                          }
                                        },
                                        "deleteOption": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Delete",
                                            "Detach"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion."
                                          }
                                        },
                                        "caching": {
                                          "type": "string",
                                          "allowedValues": [
                                            "None",
                                            "ReadOnly",
                                            "ReadWrite"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the caching requirements."
                                          }
                                        },
                                        "diffDiskSettings": {
                                          "type": "object",
                                          "properties": {
                                            "placement": {
                                              "type": "string",
                                              "allowedValues": [
                                                "CacheDisk",
                                                "NvmeDisk",
                                                "ResourceDisk"
                                              ],
                                              "metadata": {
                                                "description": "Required. Specifies the ephemeral disk placement for the operating system disk."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the ephemeral Disk Settings for the operating system disk."
                                          }
                                        },
                                        "managedDisk": {
                                          "type": "object",
                                          "properties": {
                                            "storageAccountType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "PremiumV2_LRS",
                                                "Premium_LRS",
                                                "Premium_ZRS",
                                                "StandardSSD_LRS",
                                                "StandardSSD_ZRS",
                                                "Standard_LRS",
                                                "UltraSSD_LRS"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Specifies the storage account type for the managed disk."
                                              }
                                            },
                                            "diskEncryptionSetResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The managed disk parameters."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing an OS disk."
                                      }
                                    },
                                    "dataDiskType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The disk name. When attaching a pre-existing disk, this name is ignored and the name of the existing disk is used."
                                          }
                                        },
                                        "lun": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the logical unit number of the data disk."
                                          }
                                        },
                                        "diskSizeGB": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the size of an empty data disk in gigabytes. This property is ignored when attaching a pre-existing disk."
                                          }
                                        },
                                        "createOption": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Attach",
                                            "Empty",
                                            "FromImage"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies how the virtual machine should be created. This property is automatically set to 'Attach' when attaching a pre-existing disk."
                                          }
                                        },
                                        "deleteOption": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Delete",
                                            "Detach"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies whether data disk should be deleted or detached upon VM deletion. This property is automatically set to 'Detach' when attaching a pre-existing disk."
                                          }
                                        },
                                        "caching": {
                                          "type": "string",
                                          "allowedValues": [
                                            "None",
                                            "ReadOnly",
                                            "ReadWrite"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the caching requirements. This property is automatically set to 'None' when attaching a pre-existing disk."
                                          }
                                        },
                                        "diskIOPSReadWrite": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k bytes. Ignored when attaching a pre-existing disk."
                                          }
                                        },
                                        "diskMBpsReadWrite": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here uses the ISO notation, of powers of 10. Ignored when attaching a pre-existing disk."
                                          }
                                        },
                                        "managedDisk": {
                                          "type": "object",
                                          "properties": {
                                            "storageAccountType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "PremiumV2_LRS",
                                                "Premium_LRS",
                                                "Premium_ZRS",
                                                "StandardSSD_LRS",
                                                "StandardSSD_ZRS",
                                                "Standard_LRS",
                                                "UltraSSD_LRS"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Specifies the storage account type for the managed disk. Ignored when attaching a pre-existing disk."
                                              }
                                            },
                                            "diskEncryptionSetResourceId": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Specifies the customer managed disk encryption set resource id for the managed disk."
                                              }
                                            },
                                            "id": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Specifies the resource id of a pre-existing managed disk. If the disk should be created, this property should be empty."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. The managed disk parameters."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tags of the public IP address. Valid only when creating a new managed disk."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing a data disk."
                                      }
                                    },
                                    "publicKeyType": {
                                      "type": "object",
                                      "properties": {
                                        "keyData": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Specifies the SSH public key data used to authenticate through ssh."
                                          }
                                        },
                                        "path": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key is appended to the file."
                                          }
                                        }
                                      }
                                    },
                                    "nicConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the NIC configuration."
                                          }
                                        },
                                        "nicSuffix": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The suffix to append to the NIC name."
                                          }
                                        },
                                        "enableIPForwarding": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                          }
                                        },
                                        "enableAcceleratedNetworking": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If the network interface is accelerated networking enabled."
                                          }
                                        },
                                        "deleteOption": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Delete",
                                            "Detach"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify what happens to the network interface when the VM is deleted."
                                          }
                                        },
                                        "dnsServers": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                          }
                                        },
                                        "networkSecurityGroupResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The network security group (NSG) to attach to the network interface."
                                          }
                                        },
                                        "ipConfigurations": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/ipConfigurationType"
                                          },
                                          "metadata": {
                                            "description": "Required. The IP configurations of the network interface."
                                          }
                                        },
                                        "lock": {
                                          "$ref": "#/definitions/lockType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The lock settings of the service."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tags of the public IP address."
                                          }
                                        },
                                        "enableTelemetry": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable/Disable usage telemetry for the module."
                                          }
                                        },
                                        "diagnosticSettings": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/diagnosticSettingFullType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The diagnostic settings of the IP configuration."
                                          }
                                        },
                                        "roleAssignments": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/roleAssignmentType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Array of role assignments to create."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for the NIC configuration."
                                      }
                                    },
                                    "imageReferenceType": {
                                      "type": "object",
                                      "properties": {
                                        "communityGalleryImageId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET call."
                                          }
                                        },
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource Id of the image reference."
                                          }
                                        },
                                        "offer": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the offer of the platform image or marketplace image used to create the virtual machine."
                                          }
                                        },
                                        "publisher": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The image publisher."
                                          }
                                        },
                                        "sku": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The SKU of the image."
                                          }
                                        },
                                        "version": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available."
                                          }
                                        },
                                        "sharedGalleryImageId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing the image reference."
                                      }
                                    },
                                    "planType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the plan."
                                          }
                                        },
                                        "product": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the product of the image from the marketplace."
                                          }
                                        },
                                        "publisher": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The publisher ID."
                                          }
                                        },
                                        "promotionCode": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The promotion code."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "Specifies information about the marketplace image used to create the virtual machine."
                                      }
                                    },
                                    "autoShutDownConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "status": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Disabled",
                                            "Enabled"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The status of the auto shutdown configuration."
                                          }
                                        },
                                        "timeZone": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The time zone ID (e.g. China Standard Time, Greenland Standard Time, Pacific Standard time, etc.)."
                                          }
                                        },
                                        "dailyRecurrenceTime": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The time of day the schedule will occur."
                                          }
                                        },
                                        "notificationSettings": {
                                          "type": "object",
                                          "properties": {
                                            "status": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Disabled",
                                                "Enabled"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The status of the notification settings."
                                              }
                                            },
                                            "emailRecipient": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The email address to send notifications to (can be a list of semi-colon separated email addresses)."
                                              }
                                            },
                                            "notificationLocale": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The locale to use when sending a notification (fallback for unsupported languages is EN)."
                                              }
                                            },
                                            "webhookUrl": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The webhook URL to which the notification will be sent."
                                              }
                                            },
                                            "timeInMinutes": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The time in minutes before shutdown to send notifications."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the schedule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing the configuration profile."
                                      }
                                    },
                                    "vaultSecretGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "sourceVault": {
                                          "$ref": "#/definitions/subResourceType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The relative URL of the Key Vault containing all of the certificates in VaultCertificates."
                                          }
                                        },
                                        "vaultCertificates": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "certificateStore": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified certificate store is implicitly in the LocalMachine account. For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt for the X509 certificate file and <UppercaseThumbprint>.prv for private key. Both of these files are .pem formatted."
                                                }
                                              },
                                              "certificateUrl": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. This is the URL of a certificate that has been uploaded to Key Vault as a secret."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The list of key vault references in SourceVault which contain certificates."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing the set of certificates that should be installed onto the virtual machine."
                                      }
                                    },
                                    "vmGalleryApplicationType": {
                                      "type": "object",
                                      "properties": {
                                        "packageReferenceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Specifies the GalleryApplicationVersion resource id on the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}."
                                          }
                                        },
                                        "configurationReference": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the uri to an azure blob that will replace the default configuration for the package if provided."
                                          }
                                        },
                                        "enableAutomaticUpgrade": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If set to true, when a new Gallery Application version is available in PIR/SIG, it will be automatically updated for the VM/VMSS."
                                          }
                                        },
                                        "order": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the order in which the packages have to be installed."
                                          }
                                        },
                                        "tags": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies a passthrough value for more generic context."
                                          }
                                        },
                                        "treatFailureAsDeploymentFailure": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. If true, any failure for any operation in the VmApplication will fail the deployment."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing the gallery application that should be made available to the VM/VMSS."
                                      }
                                    },
                                    "additionalUnattendContentType": {
                                      "type": "object",
                                      "properties": {
                                        "settingName": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AutoLogon",
                                            "FirstLogonCommands"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the name of the setting to which the content applies."
                                          }
                                        },
                                        "content": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML must be less than 4KB and must include the root element for the setting or feature that is being inserted."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup."
                                      }
                                    },
                                    "winRMListenerType": {
                                      "type": "object",
                                      "properties": {
                                        "certificateUrl": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The URL of a certificate that has been uploaded to Key Vault as a secret."
                                          }
                                        },
                                        "protocol": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Http",
                                            "Https"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specifies the protocol of WinRM listener."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing a Windows Remote Management listener."
                                      }
                                    },
                                    "nicConfigurationOutputType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the NIC configuration."
                                          }
                                        },
                                        "ipConfigurations": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
                                          },
                                          "metadata": {
                                            "description": "Required. List of IP configurations of the NIC configuration."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type describing the network interface configuration output."
                                      }
                                    },
                                    "_1.applicationGatewayBackendAddressPoolsType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the backend address pool."
                                          }
                                        },
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "backendAddresses": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "ipAddress": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. IP address of the backend address."
                                                    }
                                                  },
                                                  "fqdn": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. FQDN of the backend address."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Backend addresses."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of the application gateway backend address pool."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the application gateway backend address pool.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "_1.applicationSecurityGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the application security group."
                                          }
                                        },
                                        "location": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Location of the application security group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of the application security group."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Tags of the application security group."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the application security group.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "_1.backendAddressPoolType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the backend address pool."
                                          }
                                        },
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the backend address pool."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The properties of the backend address pool."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for a backend address pool.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "_1.inboundNatRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the inbound NAT rule."
                                          }
                                        },
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "backendAddressPool": {
                                              "$ref": "#/definitions/subResourceType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A reference to backendAddressPool resource."
                                              }
                                            },
                                            "backendPort": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
                                              }
                                            },
                                            "enableFloatingIP": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
                                              }
                                            },
                                            "enableTcpReset": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
                                              }
                                            },
                                            "frontendIPConfiguration": {
                                              "$ref": "#/definitions/subResourceType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A reference to frontend IP addresses."
                                              }
                                            },
                                            "frontendPort": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
                                              }
                                            },
                                            "frontendPortRangeStart": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                              }
                                            },
                                            "frontendPortRangeEnd": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                              }
                                            },
                                            "protocol": {
                                              "type": "string",
                                              "allowedValues": [
                                                "All",
                                                "Tcp",
                                                "Udp"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The reference to the transport protocol used by the load balancing rule."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of the inbound NAT rule."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the inbound NAT rule.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "_1.virtualNetworkTapType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the virtual network tap."
                                          }
                                        },
                                        "location": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Location of the virtual network tap."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Properties of the virtual network tap."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Tags of the virtual network tap."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the virtual network tap.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "_2.ddosSettingsType": {
                                      "type": "object",
                                      "properties": {
                                        "ddosProtectionPlan": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                                          }
                                        },
                                        "protectionMode": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Enabled"
                                          ],
                                          "metadata": {
                                            "description": "Required. The DDoS protection policy customizations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                                        }
                                      }
                                    },
                                    "_2.dnsSettingsType": {
                                      "type": "object",
                                      "properties": {
                                        "domainNameLabel": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                          }
                                        },
                                        "domainNameLabelScope": {
                                          "type": "string",
                                          "allowedValues": [
                                            "NoReuse",
                                            "ResourceGroupReuse",
                                            "SubscriptionReuse",
                                            "TenantReuse"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                          }
                                        },
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                          }
                                        },
                                        "reverseFqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                                        }
                                      }
                                    },
                                    "_3.publicIPConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Public IP Address."
                                          }
                                        },
                                        "publicIPAddressResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID of the public IP address."
                                          }
                                        },
                                        "diagnosticSettings": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/diagnosticSettingFullType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Diagnostic settings for the public IP address."
                                          }
                                        },
                                        "location": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The idle timeout in minutes."
                                          }
                                        },
                                        "lock": {
                                          "$ref": "#/definitions/lockType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The lock settings of the public IP address."
                                          }
                                        },
                                        "idleTimeoutInMinutes": {
                                          "type": "int",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The idle timeout of the public IP address."
                                          }
                                        },
                                        "ddosSettings": {
                                          "$ref": "#/definitions/_2.ddosSettingsType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                          }
                                        },
                                        "dnsSettings": {
                                          "$ref": "#/definitions/_2.dnsSettingsType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The DNS settings of the public IP address."
                                          }
                                        },
                                        "publicIPAddressVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "IPv4",
                                            "IPv6"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The public IP address version."
                                          }
                                        },
                                        "publicIPAllocationMethod": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Dynamic",
                                            "Static"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The public IP address allocation method."
                                          }
                                        },
                                        "publicIpPrefixResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                          }
                                        },
                                        "publicIpNameSuffix": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name suffix of the public IP address resource."
                                          }
                                        },
                                        "roleAssignments": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/roleAssignmentType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Array of role assignments to create."
                                          }
                                        },
                                        "skuName": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Basic",
                                            "Standard"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The SKU name of the public IP address."
                                          }
                                        },
                                        "skuTier": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Global",
                                            "Regional"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The SKU tier of the public IP address."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tags of the public IP address."
                                          }
                                        },
                                        "zones": {
                                          "type": "array",
                                          "allowedValues": [
                                            1,
                                            2,
                                            3
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The zones of the public IP address."
                                          }
                                        },
                                        "enableTelemetry": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable/Disable usage telemetry for the module."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the public IP address configuration.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "modules/nic-configuration.bicep"
                                        }
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the IP configuration."
                                          }
                                        },
                                        "privateIPAllocationMethod": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Dynamic",
                                            "Static"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The private IP address allocation method."
                                          }
                                        },
                                        "privateIPAddress": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The private IP address."
                                          }
                                        },
                                        "subnetResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource ID of the subnet."
                                          }
                                        },
                                        "loadBalancerBackendAddressPools": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.backendAddressPoolType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The load balancer backend address pools."
                                          }
                                        },
                                        "applicationSecurityGroups": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.applicationSecurityGroupType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The application security groups."
                                          }
                                        },
                                        "applicationGatewayBackendAddressPools": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.applicationGatewayBackendAddressPoolsType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The application gateway backend address pools."
                                          }
                                        },
                                        "gatewayLoadBalancer": {
                                          "$ref": "#/definitions/subResourceType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The gateway load balancer settings."
                                          }
                                        },
                                        "loadBalancerInboundNatRules": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.inboundNatRuleType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The load balancer inbound NAT rules."
                                          }
                                        },
                                        "privateIPAddressVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "IPv4",
                                            "IPv6"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The private IP address version."
                                          }
                                        },
                                        "virtualNetworkTaps": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/_1.virtualNetworkTapType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The virtual network taps."
                                          }
                                        },
                                        "pipConfiguration": {
                                          "$ref": "#/definitions/_3.publicIPConfigurationType",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The public IP address configuration."
                                          }
                                        },
                                        "diagnosticSettings": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/diagnosticSettingFullType"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The diagnostic settings of the IP configuration."
                                          }
                                        },
                                        "tags": {
                                          "type": "object",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tags of the public IP address."
                                          }
                                        },
                                        "enableTelemetry": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable/Disable usage telemetry for the module."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the IP configuration.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "modules/nic-configuration.bicep"
                                        }
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "managedIdentityAllType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "networkInterfaceIPConfigurationOutputType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The name of the IP configuration."
                                          }
                                        },
                                        "privateIP": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "The private IP address."
                                          }
                                        },
                                        "publicIP": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "The public IP address."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "subResourceType": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the sub resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "The type for the sub resource.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the virtual machine to be created. You should use a unique prefix to reduce name collisions in Active Directory."
                                      }
                                    },
                                    "computerName": {
                                      "type": "string",
                                      "defaultValue": "[parameters('name')]",
                                      "metadata": {
                                        "description": "Optional. Can be used if the computer name needs to be different from the Azure VM resource name. If not used, the resource name will be used as computer name."
                                      }
                                    },
                                    "vmSize": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Specifies the size for the VMs."
                                      }
                                    },
                                    "encryptionAtHost": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine. This will enable the encryption for all the disks including Resource/Temp disk at host itself. For security reasons, it is recommended to set encryptionAtHost to True. Restrictions: Cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                                      }
                                    },
                                    "securityType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "",
                                        "ConfidentialVM",
                                        "TrustedLaunch"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings. The default behavior is: UefiSettings will not be enabled unless this property is set."
                                      }
                                    },
                                    "secureBootEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Specifies whether secure boot should be enabled on the virtual machine. This parameter is part of the UefiSettings. SecurityType should be set to TrustedLaunch to enable UefiSettings."
                                      }
                                    },
                                    "vTpmEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Specifies whether vTPM should be enabled on the virtual machine. This parameter is part of the UefiSettings.  SecurityType should be set to TrustedLaunch to enable UefiSettings."
                                      }
                                    },
                                    "imageReference": {
                                      "$ref": "#/definitions/imageReferenceType",
                                      "metadata": {
                                        "description": "Required. OS image reference. In case of marketplace images, it's the combination of the publisher, offer, sku, version attributes. In case of custom images it's the resource ID of the custom image."
                                      }
                                    },
                                    "plan": {
                                      "$ref": "#/definitions/planType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use."
                                      }
                                    },
                                    "osDisk": {
                                      "$ref": "#/definitions/osDiskType",
                                      "metadata": {
                                        "description": "Required. Specifies the OS disk. For security reasons, it is recommended to specify DiskEncryptionSet into the osDisk object.  Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                                      }
                                    },
                                    "dataDisks": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/dataDiskType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the data disks. For security reasons, it is recommended to specify DiskEncryptionSet into the dataDisk object. Restrictions: DiskEncryptionSet cannot be enabled if Azure Disk Encryption (guest-VM encryption using bitlocker/DM-Crypt) is enabled on your VMs."
                                      }
                                    },
                                    "ultraSSDEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS. Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled."
                                      }
                                    },
                                    "hibernationEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The flag that enables or disables hibernation capability on the VM."
                                      }
                                    },
                                    "adminUsername": {
                                      "type": "securestring",
                                      "metadata": {
                                        "description": "Required. Administrator username."
                                      }
                                    },
                                    "adminPassword": {
                                      "type": "securestring",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. When specifying a Windows Virtual Machine, this value should be passed."
                                      }
                                    },
                                    "userData": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here."
                                      }
                                    },
                                    "customData": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Custom data associated to the VM, this value will be automatically converted into base64 to account for the expected VM format."
                                      }
                                    },
                                    "certificatesToBeInstalled": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/vaultSecretGroupType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies set of certificates that should be installed onto the virtual machine."
                                      }
                                    },
                                    "priority": {
                                      "type": "string",
                                      "nullable": true,
                                      "allowedValues": [
                                        "Regular",
                                        "Low",
                                        "Spot"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the priority for the virtual machine."
                                      }
                                    },
                                    "evictionPolicy": {
                                      "type": "string",
                                      "defaultValue": "Deallocate",
                                      "allowedValues": [
                                        "Deallocate",
                                        "Delete"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the eviction policy for the low priority virtual machine."
                                      }
                                    },
                                    "maxPriceForLowPriorityVm": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specifies the maximum price you are willing to pay for a low priority VM/VMSS. This price is in US Dollars."
                                      }
                                    },
                                    "dedicatedHostId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specifies resource ID about the dedicated host that the virtual machine resides in."
                                      }
                                    },
                                    "licenseType": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "RHEL_BYOS",
                                        "SLES_BYOS",
                                        "Windows_Client",
                                        "Windows_Server",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies that the image or disk that is being used was licensed on-premises."
                                      }
                                    },
                                    "publicKeys": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/publicKeyType"
                                      },
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The list of SSH public keys used to authenticate with linux based VMs."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentityAllType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource. The system-assigned managed identity will automatically be enabled if extensionAadJoinConfig.enabled = \"True\"."
                                      }
                                    },
                                    "bootDiagnostics": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Whether boot diagnostics should be enabled on the Virtual Machine. Boot diagnostics will be enabled with a managed storage account if no bootDiagnosticsStorageAccountName value is provided. If bootDiagnostics and bootDiagnosticsStorageAccountName values are not provided, boot diagnostics will be disabled."
                                      }
                                    },
                                    "bootDiagnosticStorageAccountName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Custom storage account used to store boot diagnostic information. Boot diagnostics will be enabled with a custom storage account if a value is provided."
                                      }
                                    },
                                    "bootDiagnosticStorageAccountUri": {
                                      "type": "string",
                                      "defaultValue": "[format('.blob.{0}/', environment().suffixes.storage)]",
                                      "metadata": {
                                        "description": "Optional. Storage account boot diagnostic base URI."
                                      }
                                    },
                                    "proximityPlacementGroupResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of a proximity placement group."
                                      }
                                    },
                                    "virtualMachineScaleSetResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of a virtual machine scale set, where the VM should be added."
                                      }
                                    },
                                    "availabilitySetResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Resource ID of an availability set. Cannot be used in combination with availability zone nor scale set."
                                      }
                                    },
                                    "galleryApplications": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/vmGalleryApplicationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the gallery applications that should be made available to the VM/VMSS."
                                      }
                                    },
                                    "zone": {
                                      "type": "int",
                                      "allowedValues": [
                                        0,
                                        1,
                                        2,
                                        3
                                      ],
                                      "metadata": {
                                        "description": "Required. If set to 1, 2 or 3, the availability zone for all VMs is hardcoded to that value. If zero, then availability zones is not used. Cannot be used in combination with availability set nor scale set."
                                      }
                                    },
                                    "nicConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/nicConfigurationType"
                                      },
                                      "metadata": {
                                        "description": "Required. Configures NICs and PIPs."
                                      }
                                    },
                                    "backupVaultName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Recovery service vault name to add VMs to backup."
                                      }
                                    },
                                    "backupVaultResourceGroup": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().name]",
                                      "metadata": {
                                        "description": "Optional. Resource group of the backup recovery service vault. If not provided the current resource group name is considered by default."
                                      }
                                    },
                                    "backupPolicyName": {
                                      "type": "string",
                                      "defaultValue": "DefaultPolicy",
                                      "metadata": {
                                        "description": "Optional. Backup policy the VMs should be using for backup. If not provided, it will use the DefaultPolicy from the backup recovery service vault."
                                      }
                                    },
                                    "autoShutdownConfig": {
                                      "$ref": "#/definitions/autoShutDownConfigType",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The configuration for auto-shutdown."
                                      }
                                    },
                                    "maintenanceConfigurationResourceId": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource Id of a maintenance configuration for this VM."
                                      }
                                    },
                                    "allowExtensionOperations": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Specifies whether extension operations should be allowed on the virtual machine. This may only be set to False when no extensions are present on the virtual machine."
                                      }
                                    },
                                    "extensionDomainJoinPassword": {
                                      "type": "securestring",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Required if name is specified. Password of the user specified in user parameter."
                                      }
                                    },
                                    "extensionDomainJoinConfig": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Domain Join] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionAadJoinConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [AAD Join] extension. Must at least contain the [\"enabled\": true] property to be executed. To enroll in Intune, add the setting mdmId: \"0000000a-0000-0000-c000-000000000000\"."
                                      }
                                    },
                                    "extensionAntiMalwareConfig": {
                                      "type": "object",
                                      "defaultValue": "[if(equals(parameters('osType'), 'Windows'), createObject('enabled', true()), createObject('enabled', false()))]",
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Anti Malware] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionMonitoringAgentConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false,
                                        "dataCollectionRuleAssociations": []
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Monitoring Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionDependencyAgentConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Dependency Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionNetworkWatcherAgentConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Network Watcher Agent] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionAzureDiskEncryptionConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Azure Disk Encryption] extension. Must at least contain the [\"enabled\": true] property to be executed. Restrictions: Cannot be enabled on disks that have encryption at host enabled. Managed disks encrypted using Azure Disk Encryption cannot be encrypted using customer-managed keys."
                                      }
                                    },
                                    "extensionDSCConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Desired State Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionCustomScriptConfig": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false,
                                        "fileData": []
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Custom Script] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionNvidiaGpuDriverWindows": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Nvidia Gpu Driver Windows] extension. Must at least contain the [\"enabled\": true] property to be executed."
                                      }
                                    },
                                    "extensionHostPoolRegistration": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Host Pool Registration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                                      }
                                    },
                                    "extensionGuestConfigurationExtension": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": false
                                      },
                                      "metadata": {
                                        "description": "Optional. The configuration for the [Guest Configuration] extension. Must at least contain the [\"enabled\": true] property to be executed. Needs a managed identy."
                                      }
                                    },
                                    "guestConfiguration": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The guest configuration for the virtual machine. Needs the Guest Configuration extension to be enabled."
                                      }
                                    },
                                    "extensionCustomScriptProtectedSetting": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. An object that contains the extension specific protected settings."
                                      }
                                    },
                                    "extensionGuestConfigurationExtensionProtectedSettings": {
                                      "type": "secureObject",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. An object that contains the extension specific protected settings."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "baseTime": {
                                      "type": "string",
                                      "defaultValue": "[utcNow('u')]",
                                      "metadata": {
                                        "description": "Generated. Do not provide a value! This date value is used to generate a registration token."
                                      }
                                    },
                                    "sasTokenValidityLength": {
                                      "type": "string",
                                      "defaultValue": "PT8H",
                                      "metadata": {
                                        "description": "Optional. SAS token validity length to use to download files from storage accounts. Usage: 'PT8H' - valid for 8 hours; 'P5D' - valid for 5 days; 'P1Y' - valid for 1 year. When not provided, the SAS token will be valid for 8 hours."
                                      }
                                    },
                                    "osType": {
                                      "type": "string",
                                      "allowedValues": [
                                        "Windows",
                                        "Linux"
                                      ],
                                      "metadata": {
                                        "description": "Required. The chosen OS type."
                                      }
                                    },
                                    "disablePasswordAuthentication": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Specifies whether password authentication should be disabled."
                                      }
                                    },
                                    "provisionVMAgent": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Indicates whether virtual machine agent should be provisioned on the virtual machine. When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM Agent is installed on the VM so that extensions can be added to the VM later."
                                      }
                                    },
                                    "enableAutomaticUpdates": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true. When patchMode is set to Manual, this parameter must be set to false. For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning."
                                      }
                                    },
                                    "patchMode": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "allowedValues": [
                                        "AutomaticByPlatform",
                                        "AutomaticByOS",
                                        "Manual",
                                        "ImageDefault",
                                        ""
                                      ],
                                      "metadata": {
                                        "description": "Optional. VM guest patching orchestration mode. 'AutomaticByOS' & 'Manual' are for Windows only, 'ImageDefault' for Linux only. Refer to 'https://learn.microsoft.com/en-us/azure/virtual-machines/automatic-vm-guest-patching'."
                                      }
                                    },
                                    "bypassPlatformSafetyChecksOnUserSchedule": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enables customer to schedule patching without accidental upgrades."
                                      }
                                    },
                                    "rebootSetting": {
                                      "type": "string",
                                      "defaultValue": "IfRequired",
                                      "allowedValues": [
                                        "Always",
                                        "IfRequired",
                                        "Never",
                                        "Unknown"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies the reboot setting for all AutomaticByPlatform patch installation operations."
                                      }
                                    },
                                    "patchAssessmentMode": {
                                      "type": "string",
                                      "defaultValue": "ImageDefault",
                                      "allowedValues": [
                                        "AutomaticByPlatform",
                                        "ImageDefault"
                                      ],
                                      "metadata": {
                                        "description": "Optional. VM guest patching assessment mode. Set it to 'AutomaticByPlatform' to enable automatically check for updates every 24 hours."
                                      }
                                    },
                                    "enableHotpatching": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must be set to true and 'patchMode' must be set to 'AutomaticByPlatform'."
                                      }
                                    },
                                    "timeZone": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Specifies the time zone of the virtual machine. e.g. 'Pacific Standard Time'. Possible values can be `TimeZoneInfo.id` value from time zones returned by `TimeZoneInfo.GetSystemTimeZones`."
                                      }
                                    },
                                    "additionalUnattendContent": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/additionalUnattendContentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies additional XML formatted information that can be included in the Unattend.xml file, which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in which the content is applied."
                                      }
                                    },
                                    "winRMListeners": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/winRMListenerType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell."
                                      }
                                    },
                                    "configurationProfile": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The configuration profile of automanage. Either '/providers/Microsoft.Automanage/bestPractices/AzureBestPracticesProduction', 'providers/Microsoft.Automanage/bestPractices/AzureBestPracticesDevTest' or the resource Id of custom profile."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "publicKeysFormatted",
                                        "count": "[length(parameters('publicKeys'))]",
                                        "input": {
                                          "path": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].path]",
                                          "keyData": "[parameters('publicKeys')[copyIndex('publicKeysFormatted')].keyData]"
                                        }
                                      },
                                      {
                                        "name": "additionalUnattendContentFormatted",
                                        "count": "[length(coalesce(parameters('additionalUnattendContent'), createArray()))]",
                                        "input": {
                                          "settingName": "[coalesce(parameters('additionalUnattendContent'), createArray())[copyIndex('additionalUnattendContentFormatted')].settingName]",
                                          "content": "[coalesce(parameters('additionalUnattendContent'), createArray())[copyIndex('additionalUnattendContentFormatted')].content]",
                                          "componentName": "Microsoft-Windows-Shell-Setup",
                                          "passName": "OobeSystem"
                                        }
                                      },
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "enableReferencedModulesTelemetry": false,
                                    "linuxConfiguration": {
                                      "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                                      "ssh": {
                                        "publicKeys": "[variables('publicKeysFormatted')]"
                                      },
                                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                                      "patchSettings": "[if(and(parameters('provisionVMAgent'), or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('ImageDefault')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]"
                                    },
                                    "windowsConfiguration": {
                                      "provisionVMAgent": "[parameters('provisionVMAgent')]",
                                      "enableAutomaticUpdates": "[parameters('enableAutomaticUpdates')]",
                                      "patchSettings": "[if(and(parameters('provisionVMAgent'), or(or(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), equals(toLower(parameters('patchMode')), toLower('AutomaticByOS'))), equals(toLower(parameters('patchMode')), toLower('Manual')))), createObject('patchMode', parameters('patchMode'), 'assessmentMode', parameters('patchAssessmentMode'), 'enableHotpatching', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), parameters('enableHotpatching'), false()), 'automaticByPlatformSettings', if(equals(toLower(parameters('patchMode')), toLower('AutomaticByPlatform')), createObject('bypassPlatformSafetyChecksOnUserSchedule', parameters('bypassPlatformSafetyChecksOnUserSchedule'), 'rebootSetting', parameters('rebootSetting')), null())), null())]",
                                      "timeZone": "[if(empty(parameters('timeZone')), null(), parameters('timeZone'))]",
                                      "additionalUnattendContent": "[if(empty(parameters('additionalUnattendContent')), null(), variables('additionalUnattendContentFormatted'))]",
                                      "winRM": "[if(not(empty(parameters('winRMListeners'))), createObject('listeners', parameters('winRMListeners')), null())]"
                                    },
                                    "accountSasProperties": {
                                      "signedServices": "b",
                                      "signedPermission": "r",
                                      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), parameters('sasTokenValidityLength'))]",
                                      "signedResourceTypes": "o",
                                      "signedProtocol": "https"
                                    },
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(if(parameters('extensionAadJoinConfig').enabled, true(), coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false())), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Data Operator for Managed Disks": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '959f8984-c045-4866-89c7-12bf9737be2e')]",
                                      "Desktop Virtualization Power On Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '489581de-a3bd-480d-9518-53dea7416b33')]",
                                      "Desktop Virtualization Power On Off Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '40c5ff49-9181-41f8-ae61-143b0e78555e')]",
                                      "Desktop Virtualization Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a959dbd1-f747-45e3-8ba6-dd80f235f97c')]",
                                      "DevTest Labs User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76283e04-6283-4c54-8f91-bcf1374a3c64')]",
                                      "Disk Backup Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3e5e47e6-65f7-47ef-90b5-e5dd4d455f24')]",
                                      "Disk Pool Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '60fc6e62-5479-42d4-8bf4-67625fcc2840')]",
                                      "Disk Restore Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b50d9833-a0cb-478e-945f-707fcc997c13')]",
                                      "Disk Snapshot Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7efff54f-a5b4-42b5-a1c5-5411624893ce')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                      "Virtual Machine Administrator Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1c0163c0-47e6-4577-8991-ea5c82e286e4')]",
                                      "Virtual Machine Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9980e02c-c2be-4d73-94e8-173b1dc7cf3c')]",
                                      "Virtual Machine User Login": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb879df8-f326-4884-b1cf-06f3ad86be52')]",
                                      "VM Scanner Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'd24ecba3-c1f4-40fa-a7bb-4588a071e8fd')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.compute-virtualmachine.{0}.{1}', replace('0.15.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "managedDataDisks": {
                                      "copy": {
                                        "name": "managedDataDisks",
                                        "count": "[length(coalesce(parameters('dataDisks'), createArray()))]"
                                      },
                                      "condition": "[empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'id'))]",
                                      "type": "Microsoft.Compute/disks",
                                      "apiVersion": "2024-03-02",
                                      "name": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex(), 1), 2, '0')))]",
                                      "location": "[parameters('location')]",
                                      "sku": {
                                        "name": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'storageAccountType')]"
                                      },
                                      "properties": {
                                        "diskSizeGB": "[coalesce(parameters('dataDisks'), createArray())[copyIndex()].diskSizeGB]",
                                        "creationData": {
                                          "createOption": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'createoption'), 'Empty')]"
                                        },
                                        "diskIOPSReadWrite": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'diskIOPSReadWrite')]",
                                        "diskMBpsReadWrite": "[tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'diskMBpsReadWrite')]"
                                      },
                                      "zones": "[if(and(not(equals(parameters('zone'), 0)), not(contains(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()].managedDisk, 'storageAccountType'), 'ZRS'))), array(string(parameters('zone'))), null())]",
                                      "tags": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                    },
                                    "vm": {
                                      "type": "Microsoft.Compute/virtualMachines",
                                      "apiVersion": "2024-07-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "identity": "[variables('identity')]",
                                      "tags": "[parameters('tags')]",
                                      "zones": "[if(not(equals(parameters('zone'), 0)), array(string(parameters('zone'))), null())]",
                                      "plan": "[parameters('plan')]",
                                      "properties": {
                                        "hardwareProfile": {
                                          "vmSize": "[parameters('vmSize')]"
                                        },
                                        "securityProfile": {
                                          "encryptionAtHost": "[if(parameters('encryptionAtHost'), parameters('encryptionAtHost'), null())]",
                                          "securityType": "[parameters('securityType')]",
                                          "uefiSettings": "[if(equals(parameters('securityType'), 'TrustedLaunch'), createObject('secureBootEnabled', parameters('secureBootEnabled'), 'vTpmEnabled', parameters('vTpmEnabled')), null())]"
                                        },
                                        "storageProfile": {
                                          "copy": [
                                            {
                                              "name": "dataDisks",
                                              "count": "[length(coalesce(parameters('dataDisks'), createArray()))]",
                                              "input": {
                                                "lun": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'lun'), copyIndex('dataDisks'))]",
                                                "name": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), last(split(coalesce(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.id, ''), '/')), coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0'))))]",
                                                "createOption": "[if(or(not(equals(resourceId('Microsoft.Compute/disks', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))), null())), not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id')))), 'Attach', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'createoption'), 'Empty'))]",
                                                "deleteOption": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), 'Detach', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'deleteOption'), 'Delete'))]",
                                                "caching": "[if(not(empty(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'))), 'None', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'caching'), 'ReadOnly'))]",
                                                "managedDisk": {
                                                  "id": "[coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'id'), resourceId('Microsoft.Compute/disks', coalesce(tryGet(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')], 'name'), format('{0}-disk-data-{1}', parameters('name'), padLeft(add(copyIndex('dataDisks'), 1), 2, '0')))))]",
                                                  "diskEncryptionSet": "[if(contains(coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk, 'diskEncryptionSet'), createObject('id', coalesce(parameters('dataDisks'), createArray())[copyIndex('dataDisks')].managedDisk.diskEncryptionSet.id), null())]"
                                                }
                                              }
                                            }
                                          ],
                                          "imageReference": "[parameters('imageReference')]",
                                          "osDisk": {
                                            "name": "[coalesce(tryGet(parameters('osDisk'), 'name'), format('{0}-disk-os-01', parameters('name')))]",
                                            "createOption": "[coalesce(tryGet(parameters('osDisk'), 'createOption'), 'FromImage')]",
                                            "deleteOption": "[coalesce(tryGet(parameters('osDisk'), 'deleteOption'), 'Delete')]",
                                            "diffDiskSettings": "[if(empty(coalesce(tryGet(parameters('osDisk'), 'diffDiskSettings'), createObject())), null(), createObject('option', 'Local', 'placement', parameters('osDisk').diffDiskSettings.placement))]",
                                            "diskSizeGB": "[tryGet(parameters('osDisk'), 'diskSizeGB')]",
                                            "caching": "[coalesce(tryGet(parameters('osDisk'), 'caching'), 'ReadOnly')]",
                                            "managedDisk": {
                                              "storageAccountType": "[tryGet(parameters('osDisk').managedDisk, 'storageAccountType')]",
                                              "diskEncryptionSet": {
                                                "id": "[tryGet(parameters('osDisk').managedDisk, 'diskEncryptionSetResourceId')]"
                                              }
                                            }
                                          }
                                        },
                                        "additionalCapabilities": {
                                          "ultraSSDEnabled": "[parameters('ultraSSDEnabled')]",
                                          "hibernationEnabled": "[parameters('hibernationEnabled')]"
                                        },
                                        "osProfile": {
                                          "computerName": "[parameters('computerName')]",
                                          "adminUsername": "[parameters('adminUsername')]",
                                          "adminPassword": "[parameters('adminPassword')]",
                                          "customData": "[if(not(empty(parameters('customData'))), base64(parameters('customData')), null())]",
                                          "windowsConfiguration": "[if(equals(parameters('osType'), 'Windows'), variables('windowsConfiguration'), null())]",
                                          "linuxConfiguration": "[if(equals(parameters('osType'), 'Linux'), variables('linuxConfiguration'), null())]",
                                          "secrets": "[parameters('certificatesToBeInstalled')]",
                                          "allowExtensionOperations": "[parameters('allowExtensionOperations')]"
                                        },
                                        "networkProfile": {
                                          "copy": [
                                            {
                                              "name": "networkInterfaces",
                                              "count": "[length(parameters('nicConfigurations'))]",
                                              "input": {
                                                "properties": {
                                                  "deleteOption": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'deleteOption'), 'Delete')]",
                                                  "primary": "[if(equals(copyIndex('networkInterfaces'), 0), true(), false())]"
                                                },
                                                "id": "[resourceId('Microsoft.Network/networkInterfaces', coalesce(tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'name'), format('{0}{1}', parameters('name'), tryGet(parameters('nicConfigurations')[copyIndex('networkInterfaces')], 'nicSuffix'))))]"
                                              }
                                            }
                                          ]
                                        },
                                        "diagnosticsProfile": {
                                          "bootDiagnostics": {
                                            "enabled": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), true(), parameters('bootDiagnostics'))]",
                                            "storageUri": "[if(not(empty(parameters('bootDiagnosticStorageAccountName'))), format('https://{0}{1}', parameters('bootDiagnosticStorageAccountName'), parameters('bootDiagnosticStorageAccountUri')), null())]"
                                          }
                                        },
                                        "applicationProfile": "[if(not(empty(parameters('galleryApplications'))), createObject('galleryApplications', parameters('galleryApplications')), null())]",
                                        "availabilitySet": "[if(not(empty(parameters('availabilitySetResourceId'))), createObject('id', parameters('availabilitySetResourceId')), null())]",
                                        "proximityPlacementGroup": "[if(not(empty(parameters('proximityPlacementGroupResourceId'))), createObject('id', parameters('proximityPlacementGroupResourceId')), null())]",
                                        "virtualMachineScaleSet": "[if(not(empty(parameters('virtualMachineScaleSetResourceId'))), createObject('id', parameters('virtualMachineScaleSetResourceId')), null())]",
                                        "priority": "[parameters('priority')]",
                                        "evictionPolicy": "[if(and(not(empty(parameters('priority'))), not(equals(parameters('priority'), 'Regular'))), parameters('evictionPolicy'), null())]",
                                        "billingProfile": "[if(and(not(empty(parameters('priority'))), not(empty(parameters('maxPriceForLowPriorityVm')))), createObject('maxPrice', json(parameters('maxPriceForLowPriorityVm'))), null())]",
                                        "host": "[if(not(empty(parameters('dedicatedHostId'))), createObject('id', parameters('dedicatedHostId')), null())]",
                                        "licenseType": "[if(not(empty(parameters('licenseType'))), parameters('licenseType'), null())]",
                                        "userData": "[if(not(empty(parameters('userData'))), base64(parameters('userData')), null())]"
                                      },
                                      "dependsOn": [
                                        "managedDataDisks",
                                        "vm_nic"
                                      ]
                                    },
                                    "vm_configurationAssignment": {
                                      "condition": "[not(empty(parameters('maintenanceConfigurationResourceId')))]",
                                      "type": "Microsoft.Maintenance/configurationAssignments",
                                      "apiVersion": "2023-04-01",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "[format('{0}assignment', parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "maintenanceConfigurationId": "[parameters('maintenanceConfigurationResourceId')]",
                                        "resourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_configurationProfileAssignment": {
                                      "condition": "[not(empty(parameters('configurationProfile')))]",
                                      "type": "Microsoft.Automanage/configurationProfileAssignments",
                                      "apiVersion": "2022-05-04",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "default",
                                      "properties": {
                                        "configurationProfile": "[parameters('configurationProfile')]"
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_autoShutdownConfiguration": {
                                      "condition": "[not(empty(parameters('autoShutdownConfig')))]",
                                      "type": "Microsoft.DevTestLab/schedules",
                                      "apiVersion": "2018-09-15",
                                      "name": "[format('shutdown-computevm-{0}', parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "status": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'status'), 'Disabled')]",
                                        "targetResourceId": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]",
                                        "taskType": "ComputeVmShutdownTask",
                                        "dailyRecurrence": {
                                          "time": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'dailyRecurrenceTime'), '19:00')]"
                                        },
                                        "timeZoneId": "[coalesce(tryGet(parameters('autoShutdownConfig'), 'timeZone'), 'UTC')]",
                                        "notificationSettings": "[if(contains(parameters('autoShutdownConfig'), 'notificationSettings'), createObject('status', coalesce(tryGet(parameters('autoShutdownConfig'), 'status'), 'Disabled'), 'emailRecipient', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'emailRecipient'), ''), 'notificationLocale', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'notificationLocale'), 'en'), 'webhookUrl', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'webhookUrl'), ''), 'timeInMinutes', coalesce(tryGet(tryGet(parameters('autoShutdownConfig'), 'notificationSettings'), 'timeInMinutes'), 30)), null())]"
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_dataCollectionRuleAssociations": {
                                      "copy": {
                                        "name": "vm_dataCollectionRuleAssociations",
                                        "count": "[length(parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations)]"
                                      },
                                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                                      "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                                      "apiVersion": "2023-03-11",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "[parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations[copyIndex()].name]",
                                      "properties": {
                                        "dataCollectionRuleId": "[parameters('extensionMonitoringAgentConfig').dataCollectionRuleAssociations[copyIndex()].dataCollectionRuleResourceId]"
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_azureMonitorAgentExtension"
                                      ]
                                    },
                                    "AzureWindowsBaseline": {
                                      "condition": "[not(empty(parameters('guestConfiguration')))]",
                                      "type": "Microsoft.GuestConfiguration/guestConfigurationAssignments",
                                      "apiVersion": "2020-06-25",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('guestConfiguration'), 'name'), 'AzureWindowsBaseline')]",
                                      "location": "[parameters('location')]",
                                      "properties": {
                                        "guestConfiguration": "[parameters('guestConfiguration')]"
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_azureGuestConfigurationExtension"
                                      ]
                                    },
                                    "vm_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_roleAssignments": {
                                      "copy": {
                                        "name": "vm_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Compute/virtualMachines/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_nic": {
                                      "copy": {
                                        "name": "vm_nic",
                                        "count": "[length(parameters('nicConfigurations'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-Nic-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "networkInterfaceName": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'name'), format('{0}{1}', parameters('name'), tryGet(parameters('nicConfigurations')[copyIndex()], 'nicSuffix')))]"
                                          },
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "enableIPForwarding": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableIPForwarding'), false())]"
                                          },
                                          "enableAcceleratedNetworking": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'enableAcceleratedNetworking'), true())]"
                                          },
                                          "dnsServers": "[if(contains(parameters('nicConfigurations')[copyIndex()], 'dnsServers'), if(not(empty(tryGet(parameters('nicConfigurations')[copyIndex()], 'dnsServers'))), createObject('value', tryGet(parameters('nicConfigurations')[copyIndex()], 'dnsServers')), createObject('value', createArray())), createObject('value', createArray()))]",
                                          "networkSecurityGroupResourceId": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'networkSecurityGroupResourceId'), '')]"
                                          },
                                          "ipConfigurations": {
                                            "value": "[parameters('nicConfigurations')[copyIndex()].ipConfigurations]"
                                          },
                                          "lock": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'lock'), parameters('lock'))]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('nicConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                          },
                                          "diagnosticSettings": {
                                            "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'diagnosticSettings')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(parameters('nicConfigurations')[copyIndex()], 'roleAssignments')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[variables('enableReferencedModulesTelemetry')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "2958498370438766793"
                                            }
                                          },
                                          "definitions": {
                                            "publicIPConfigurationType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the Public IP Address."
                                                  }
                                                },
                                                "publicIPAddressResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The resource ID of the public IP address."
                                                  }
                                                },
                                                "diagnosticSettings": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/diagnosticSettingFullType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Diagnostic settings for the public IP address."
                                                  }
                                                },
                                                "location": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The idle timeout in minutes."
                                                  }
                                                },
                                                "lock": {
                                                  "$ref": "#/definitions/lockType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The lock settings of the public IP address."
                                                  }
                                                },
                                                "idleTimeoutInMinutes": {
                                                  "type": "int",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The idle timeout of the public IP address."
                                                  }
                                                },
                                                "ddosSettings": {
                                                  "$ref": "#/definitions/ddosSettingsType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                                  }
                                                },
                                                "dnsSettings": {
                                                  "$ref": "#/definitions/dnsSettingsType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DNS settings of the public IP address."
                                                  }
                                                },
                                                "publicIPAddressVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "IPv4",
                                                    "IPv6"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The public IP address version."
                                                  }
                                                },
                                                "publicIPAllocationMethod": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Dynamic",
                                                    "Static"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The public IP address allocation method."
                                                  }
                                                },
                                                "publicIpPrefixResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                                  }
                                                },
                                                "publicIpNameSuffix": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name suffix of the public IP address resource."
                                                  }
                                                },
                                                "roleAssignments": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/roleAssignmentType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Array of role assignments to create."
                                                  }
                                                },
                                                "skuName": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Basic",
                                                    "Standard"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The SKU name of the public IP address."
                                                  }
                                                },
                                                "skuTier": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Global",
                                                    "Regional"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The SKU tier of the public IP address."
                                                  }
                                                },
                                                "tags": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The tags of the public IP address."
                                                  }
                                                },
                                                "zones": {
                                                  "type": "array",
                                                  "allowedValues": [
                                                    1,
                                                    2,
                                                    3
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The zones of the public IP address."
                                                  }
                                                },
                                                "enableTelemetry": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable/Disable usage telemetry for the module."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true,
                                                "description": "The type for the public IP address configuration."
                                              }
                                            },
                                            "ipConfigurationType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the IP configuration."
                                                  }
                                                },
                                                "privateIPAllocationMethod": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Dynamic",
                                                    "Static"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The private IP address allocation method."
                                                  }
                                                },
                                                "privateIPAddress": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The private IP address."
                                                  }
                                                },
                                                "subnetResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource ID of the subnet."
                                                  }
                                                },
                                                "loadBalancerBackendAddressPools": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/backendAddressPoolType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The load balancer backend address pools."
                                                  }
                                                },
                                                "applicationSecurityGroups": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/applicationSecurityGroupType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The application security groups."
                                                  }
                                                },
                                                "applicationGatewayBackendAddressPools": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/applicationGatewayBackendAddressPoolsType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The application gateway backend address pools."
                                                  }
                                                },
                                                "gatewayLoadBalancer": {
                                                  "$ref": "#/definitions/subResourceType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The gateway load balancer settings."
                                                  }
                                                },
                                                "loadBalancerInboundNatRules": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/inboundNatRuleType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The load balancer inbound NAT rules."
                                                  }
                                                },
                                                "privateIPAddressVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "IPv4",
                                                    "IPv6"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The private IP address version."
                                                  }
                                                },
                                                "virtualNetworkTaps": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/virtualNetworkTapType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The virtual network taps."
                                                  }
                                                },
                                                "pipConfiguration": {
                                                  "$ref": "#/definitions/publicIPConfigurationType",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The public IP address configuration."
                                                  }
                                                },
                                                "diagnosticSettings": {
                                                  "type": "array",
                                                  "items": {
                                                    "$ref": "#/definitions/diagnosticSettingFullType"
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The diagnostic settings of the IP configuration."
                                                  }
                                                },
                                                "tags": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The tags of the public IP address."
                                                  }
                                                },
                                                "enableTelemetry": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable/Disable usage telemetry for the module."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true,
                                                "description": "The type for the IP configuration."
                                              }
                                            },
                                            "applicationGatewayBackendAddressPoolsType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the backend address pool."
                                                  }
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "backendAddresses": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "ipAddress": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. IP address of the backend address."
                                                            }
                                                          },
                                                          "fqdn": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. FQDN of the backend address."
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Backend addresses."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of the application gateway backend address pool."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for the application gateway backend address pool.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "applicationSecurityGroupType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the application security group."
                                                  }
                                                },
                                                "location": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Location of the application security group."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of the application security group."
                                                  }
                                                },
                                                "tags": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Tags of the application security group."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for the application security group.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "backendAddressPoolType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The resource ID of the backend address pool."
                                                  }
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the backend address pool."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The properties of the backend address pool."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for a backend address pool.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "ddosSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "ddosProtectionPlan": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                  }
                                                },
                                                "protectionMode": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Enabled"
                                                  ],
                                                  "metadata": {
                                                    "description": "Required. The DDoS protection policy customizations."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                                                }
                                              }
                                            },
                                            "diagnosticSettingFullType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the diagnostic setting."
                                                  }
                                                },
                                                "logCategoriesAndGroups": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "category": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                        }
                                                      },
                                                      "categoryGroup": {
                                                        "type": "string",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                        }
                                                      },
                                                      "enabled": {
                                                        "type": "bool",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                  }
                                                },
                                                "metricCategories": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "object",
                                                    "properties": {
                                                      "category": {
                                                        "type": "string",
                                                        "metadata": {
                                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                        }
                                                      },
                                                      "enabled": {
                                                        "type": "bool",
                                                        "nullable": true,
                                                        "metadata": {
                                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                  }
                                                },
                                                "logAnalyticsDestinationType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "AzureDiagnostics",
                                                    "Dedicated"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                  }
                                                },
                                                "workspaceResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "storageAccountResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "eventHubAuthorizationRuleResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                  }
                                                },
                                                "eventHubName": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                  }
                                                },
                                                "marketplacePartnerResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            },
                                            "dnsSettingsType": {
                                              "type": "object",
                                              "properties": {
                                                "domainNameLabel": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                  }
                                                },
                                                "domainNameLabelScope": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "NoReuse",
                                                    "ResourceGroupReuse",
                                                    "SubscriptionReuse",
                                                    "TenantReuse"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                  }
                                                },
                                                "fqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                  }
                                                },
                                                "reverseFqdn": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                                                }
                                              }
                                            },
                                            "inboundNatRuleType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the inbound NAT rule."
                                                  }
                                                },
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "properties": {
                                                    "backendAddressPool": {
                                                      "$ref": "#/definitions/subResourceType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A reference to backendAddressPool resource."
                                                      }
                                                    },
                                                    "backendPort": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
                                                      }
                                                    },
                                                    "enableFloatingIP": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
                                                      }
                                                    },
                                                    "enableTcpReset": {
                                                      "type": "bool",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
                                                      }
                                                    },
                                                    "frontendIPConfiguration": {
                                                      "$ref": "#/definitions/subResourceType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. A reference to frontend IP addresses."
                                                      }
                                                    },
                                                    "frontendPort": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
                                                      }
                                                    },
                                                    "frontendPortRangeStart": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                                      }
                                                    },
                                                    "frontendPortRangeEnd": {
                                                      "type": "int",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                                      }
                                                    },
                                                    "protocol": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "All",
                                                        "Tcp",
                                                        "Udp"
                                                      ],
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The reference to the transport protocol used by the load balancing rule."
                                                      }
                                                    }
                                                  },
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of the inbound NAT rule."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for the inbound NAT rule.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "ipTagType": {
                                              "type": "object",
                                              "properties": {
                                                "ipTagType": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IP tag type."
                                                  }
                                                },
                                                "tag": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The IP tag."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/public-ip-address:0.8.0"
                                                }
                                              }
                                            },
                                            "lockType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the name of lock."
                                                  }
                                                },
                                                "kind": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "CanNotDelete",
                                                    "None",
                                                    "ReadOnly"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Specify the type of lock."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a lock.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            },
                                            "networkInterfaceIPConfigurationOutputType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "The name of the IP configuration."
                                                  }
                                                },
                                                "privateIP": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "The private IP address."
                                                  }
                                                },
                                                "publicIP": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "The public IP address."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            },
                                            "subResourceType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the sub resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for the sub resource.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            },
                                            "virtualNetworkTapType": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Resource ID of the virtual network tap."
                                                  }
                                                },
                                                "location": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Location of the virtual network tap."
                                                  }
                                                },
                                                "properties": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Properties of the virtual network tap."
                                                  }
                                                },
                                                "tags": {
                                                  "type": "object",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Tags of the virtual network tap."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "The type for the virtual network tap.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/network/network-interface:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "networkInterfaceName": {
                                              "type": "string"
                                            },
                                            "virtualMachineName": {
                                              "type": "string"
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/ipConfigurationType"
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "enableIPForwarding": {
                                              "type": "bool",
                                              "defaultValue": false
                                            },
                                            "enableAcceleratedNetworking": {
                                              "type": "bool",
                                              "defaultValue": false
                                            },
                                            "dnsServers": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "defaultValue": []
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Enable telemetry via a Globally Unique Identifier (GUID)."
                                              }
                                            },
                                            "networkSecurityGroupResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The network security group (NSG) to attach to the network interface."
                                              }
                                            },
                                            "lock": {
                                              "$ref": "#/definitions/lockType",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The lock settings of the service."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/diagnosticSettingFullType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "networkInterface_publicIPAddresses": {
                                              "copy": {
                                                "name": "networkInterface_publicIPAddresses",
                                                "count": "[length(parameters('ipConfigurations'))]"
                                              },
                                              "condition": "[and(not(empty(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'))), empty(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAddressResourceId')))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-publicIP-{1}', deployment().name, copyIndex())]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'name'), format('{0}{1}', parameters('virtualMachineName'), tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIpNameSuffix')))]"
                                                  },
                                                  "diagnosticSettings": {
                                                    "value": "[coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'diagnosticSettings'), tryGet(parameters('ipConfigurations')[copyIndex()], 'diagnosticSettings'))]"
                                                  },
                                                  "location": {
                                                    "value": "[parameters('location')]"
                                                  },
                                                  "lock": {
                                                    "value": "[parameters('lock')]"
                                                  },
                                                  "idleTimeoutInMinutes": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'idleTimeoutInMinutes')]"
                                                  },
                                                  "ddosSettings": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'ddosSettings')]"
                                                  },
                                                  "dnsSettings": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'dnsSettings')]"
                                                  },
                                                  "publicIPAddressVersion": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAddressVersion')]"
                                                  },
                                                  "publicIPAllocationMethod": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIPAllocationMethod')]"
                                                  },
                                                  "publicIpPrefixResourceId": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'publicIpPrefixResourceId')]"
                                                  },
                                                  "roleAssignments": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'roleAssignments')]"
                                                  },
                                                  "skuName": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'skuName')]"
                                                  },
                                                  "skuTier": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'skuTier')]"
                                                  },
                                                  "tags": {
                                                    "value": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'tags'), parameters('tags'))]"
                                                  },
                                                  "zones": {
                                                    "value": "[tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'zones')]"
                                                  },
                                                  "enableTelemetry": {
                                                    "value": "[coalesce(coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex()], 'pipConfiguration'), 'enableTelemetry'), tryGet(parameters('ipConfigurations')[copyIndex()], 'enableTelemetry')), parameters('enableTelemetry'))]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.33.93.31351",
                                                      "templateHash": "5168739580767459761"
                                                    },
                                                    "name": "Public IP Addresses",
                                                    "description": "This module deploys a Public IP Address."
                                                  },
                                                  "definitions": {
                                                    "dnsSettingsType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "domainNameLabel": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system."
                                                          }
                                                        },
                                                        "domainNameLabelScope": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "NoReuse",
                                                            "ResourceGroupReuse",
                                                            "SubscriptionReuse",
                                                            "TenantReuse"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The domain name label scope. If a domain name label and a domain name label scope are specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system with a hashed value includes in FQDN."
                                                          }
                                                        },
                                                        "fqdn": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel and the regionalized DNS zone."
                                                          }
                                                        },
                                                        "reverseFqdn": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn is specified, then a PTR DNS record is created pointing from the IP address in the in-addr.arpa domain to the reverse FQDN."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    },
                                                    "ddosSettingsType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "ddosProtectionPlan": {
                                                          "type": "object",
                                                          "properties": {
                                                            "id": {
                                                              "type": "string",
                                                              "metadata": {
                                                                "description": "Required. The resource ID of the DDOS protection plan associated with the public IP address."
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The DDoS protection plan associated with the public IP address."
                                                          }
                                                        },
                                                        "protectionMode": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "Enabled"
                                                          ],
                                                          "metadata": {
                                                            "description": "Required. The DDoS protection policy customizations."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    },
                                                    "ipTagType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "ipTagType": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The IP tag type."
                                                          }
                                                        },
                                                        "tag": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The IP tag."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    },
                                                    "diagnosticSettingFullType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the diagnostic setting."
                                                          }
                                                        },
                                                        "logCategoriesAndGroups": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "category": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                                }
                                                              },
                                                              "categoryGroup": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                                }
                                                              },
                                                              "enabled": {
                                                                "type": "bool",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                          }
                                                        },
                                                        "metricCategories": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "category": {
                                                                "type": "string",
                                                                "metadata": {
                                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                                }
                                                              },
                                                              "enabled": {
                                                                "type": "bool",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                          }
                                                        },
                                                        "logAnalyticsDestinationType": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "AzureDiagnostics",
                                                            "Dedicated"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                          }
                                                        },
                                                        "workspaceResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "storageAccountResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "eventHubAuthorizationRuleResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                          }
                                                        },
                                                        "eventHubName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "marketplacePartnerResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                        }
                                                      }
                                                    },
                                                    "lockType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the name of lock."
                                                          }
                                                        },
                                                        "kind": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "CanNotDelete",
                                                            "None",
                                                            "ReadOnly"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the type of lock."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a lock.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                        }
                                                      }
                                                    },
                                                    "roleAssignmentType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                          }
                                                        },
                                                        "roleDefinitionIdOrName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                          }
                                                        },
                                                        "principalId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                          }
                                                        },
                                                        "principalType": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "Device",
                                                            "ForeignGroup",
                                                            "Group",
                                                            "ServicePrincipal",
                                                            "User"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The principal type of the assigned principal ID."
                                                          }
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The description of the role assignment."
                                                          }
                                                        },
                                                        "condition": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                          }
                                                        },
                                                        "conditionVersion": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "2.0"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Version of the condition."
                                                          }
                                                        },
                                                        "delegatedManagedIdentityResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a role assignment.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.2.1"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "parameters": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The name of the Public IP Address."
                                                      }
                                                    },
                                                    "publicIpPrefixResourceId": {
                                                      "type": "string",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Resource ID of the Public IP Prefix object. This is only needed if you want your Public IPs created in a PIP Prefix."
                                                      }
                                                    },
                                                    "publicIPAllocationMethod": {
                                                      "type": "string",
                                                      "defaultValue": "Static",
                                                      "allowedValues": [
                                                        "Dynamic",
                                                        "Static"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. The public IP address allocation method."
                                                      }
                                                    },
                                                    "zones": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "int"
                                                      },
                                                      "defaultValue": [
                                                        1,
                                                        2,
                                                        3
                                                      ],
                                                      "allowedValues": [
                                                        1,
                                                        2,
                                                        3
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. A list of availability zones denoting the IP allocated for the resource needs to come from."
                                                      }
                                                    },
                                                    "publicIPAddressVersion": {
                                                      "type": "string",
                                                      "defaultValue": "IPv4",
                                                      "allowedValues": [
                                                        "IPv4",
                                                        "IPv6"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. IP address version."
                                                      }
                                                    },
                                                    "dnsSettings": {
                                                      "$ref": "#/definitions/dnsSettingsType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The DNS settings of the public IP address."
                                                      }
                                                    },
                                                    "ipTags": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/ipTagType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The list of tags associated with the public IP address."
                                                      }
                                                    },
                                                    "lock": {
                                                      "$ref": "#/definitions/lockType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The lock settings of the service."
                                                      }
                                                    },
                                                    "skuName": {
                                                      "type": "string",
                                                      "defaultValue": "Standard",
                                                      "allowedValues": [
                                                        "Basic",
                                                        "Standard"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. Name of a public IP address SKU."
                                                      }
                                                    },
                                                    "skuTier": {
                                                      "type": "string",
                                                      "defaultValue": "Regional",
                                                      "allowedValues": [
                                                        "Global",
                                                        "Regional"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. Tier of a public IP address SKU."
                                                      }
                                                    },
                                                    "ddosSettings": {
                                                      "$ref": "#/definitions/ddosSettingsType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The DDoS protection plan configuration associated with the public IP address."
                                                      }
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "defaultValue": "[resourceGroup().location]",
                                                      "metadata": {
                                                        "description": "Optional. Location for all resources."
                                                      }
                                                    },
                                                    "roleAssignments": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/roleAssignmentType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Array of role assignments to create."
                                                      }
                                                    },
                                                    "enableTelemetry": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                                      }
                                                    },
                                                    "idleTimeoutInMinutes": {
                                                      "type": "int",
                                                      "defaultValue": 4,
                                                      "metadata": {
                                                        "description": "Optional. The idle timeout of the public IP address."
                                                      }
                                                    },
                                                    "tags": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Tags of the resource."
                                                      }
                                                    },
                                                    "diagnosticSettings": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The diagnostic settings of the service."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "copy": [
                                                      {
                                                        "name": "formattedRoleAssignments",
                                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                                      }
                                                    ],
                                                    "builtInRoleNames": {
                                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                                    }
                                                  },
                                                  "resources": {
                                                    "avmTelemetry": {
                                                      "condition": "[parameters('enableTelemetry')]",
                                                      "type": "Microsoft.Resources/deployments",
                                                      "apiVersion": "2024-03-01",
                                                      "name": "[format('46d3xbcp.res.network-publicipaddress.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                                      "properties": {
                                                        "mode": "Incremental",
                                                        "template": {
                                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                          "contentVersion": "1.0.0.0",
                                                          "resources": [],
                                                          "outputs": {
                                                            "telemetry": {
                                                              "type": "String",
                                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "publicIpAddress": {
                                                      "type": "Microsoft.Network/publicIPAddresses",
                                                      "apiVersion": "2024-05-01",
                                                      "name": "[parameters('name')]",
                                                      "location": "[parameters('location')]",
                                                      "tags": "[parameters('tags')]",
                                                      "sku": {
                                                        "name": "[parameters('skuName')]",
                                                        "tier": "[parameters('skuTier')]"
                                                      },
                                                      "zones": "[map(parameters('zones'), lambda('zone', string(lambdaVariables('zone'))))]",
                                                      "properties": {
                                                        "ddosSettings": "[parameters('ddosSettings')]",
                                                        "dnsSettings": "[parameters('dnsSettings')]",
                                                        "publicIPAddressVersion": "[parameters('publicIPAddressVersion')]",
                                                        "publicIPAllocationMethod": "[parameters('publicIPAllocationMethod')]",
                                                        "publicIPPrefix": "[if(not(empty(parameters('publicIpPrefixResourceId'))), createObject('id', parameters('publicIpPrefixResourceId')), null())]",
                                                        "idleTimeoutInMinutes": "[parameters('idleTimeoutInMinutes')]",
                                                        "ipTags": "[parameters('ipTags')]"
                                                      }
                                                    },
                                                    "publicIpAddress_lock": {
                                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                                      "type": "Microsoft.Authorization/locks",
                                                      "apiVersion": "2020-05-01",
                                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                                      "properties": {
                                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                                      },
                                                      "dependsOn": [
                                                        "publicIpAddress"
                                                      ]
                                                    },
                                                    "publicIpAddress_roleAssignments": {
                                                      "copy": {
                                                        "name": "publicIpAddress_roleAssignments",
                                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                                      },
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2022-04-01",
                                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                                      "properties": {
                                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                      },
                                                      "dependsOn": [
                                                        "publicIpAddress"
                                                      ]
                                                    },
                                                    "publicIpAddress_diagnosticSettings": {
                                                      "copy": {
                                                        "name": "publicIpAddress_diagnosticSettings",
                                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                                      },
                                                      "type": "Microsoft.Insights/diagnosticSettings",
                                                      "apiVersion": "2021-05-01-preview",
                                                      "scope": "[format('Microsoft.Network/publicIPAddresses/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                                      "properties": {
                                                        "copy": [
                                                          {
                                                            "name": "metrics",
                                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                            "input": {
                                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                              "timeGrain": null
                                                            }
                                                          },
                                                          {
                                                            "name": "logs",
                                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                            "input": {
                                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                            }
                                                          }
                                                        ],
                                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                                      },
                                                      "dependsOn": [
                                                        "publicIpAddress"
                                                      ]
                                                    }
                                                  },
                                                  "outputs": {
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group the public IP address was deployed into."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the public IP address."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the public IP address."
                                                      },
                                                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                                                    },
                                                    "ipAddress": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The public IP address of the public IP address resource."
                                                      },
                                                      "value": "[coalesce(tryGet(reference('publicIpAddress'), 'ipAddress'), '')]"
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The location the resource was deployed into."
                                                      },
                                                      "value": "[reference('publicIpAddress', '2024-05-01', 'full').location]"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "networkInterface": {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-NetworkInterface', deployment().name)]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[parameters('networkInterfaceName')]"
                                                  },
                                                  "ipConfigurations": {
                                                    "copy": [
                                                      {
                                                        "name": "value",
                                                        "count": "[length(parameters('ipConfigurations'))]",
                                                        "input": "[createObject('name', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'name'), 'privateIPAllocationMethod', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAllocationMethod'), 'privateIPAddress', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddress'), 'publicIPAddressResourceId', if(not(empty(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'))), if(not(contains(coalesce(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), createObject()), 'publicIPAddressResourceId')), resourceId('Microsoft.Network/publicIPAddresses', coalesce(tryGet(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), 'name'), format('{0}{1}', parameters('virtualMachineName'), tryGet(tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration'), 'publicIpNameSuffix')))), tryGet(parameters('ipConfigurations')[copyIndex('value')], 'pipConfiguration', 'publicIPAddressResourceId')), null()), 'subnetResourceId', parameters('ipConfigurations')[copyIndex('value')].subnetResourceId, 'loadBalancerBackendAddressPools', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerBackendAddressPools'), 'applicationSecurityGroups', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationSecurityGroups'), 'applicationGatewayBackendAddressPools', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'applicationGatewayBackendAddressPools'), 'gatewayLoadBalancer', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'gatewayLoadBalancer'), 'loadBalancerInboundNatRules', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'loadBalancerInboundNatRules'), 'privateIPAddressVersion', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'privateIPAddressVersion'), 'virtualNetworkTaps', tryGet(parameters('ipConfigurations')[copyIndex('value')], 'virtualNetworkTaps'))]"
                                                      }
                                                    ]
                                                  },
                                                  "location": {
                                                    "value": "[parameters('location')]"
                                                  },
                                                  "tags": {
                                                    "value": "[parameters('tags')]"
                                                  },
                                                  "diagnosticSettings": {
                                                    "value": "[parameters('diagnosticSettings')]"
                                                  },
                                                  "dnsServers": {
                                                    "value": "[parameters('dnsServers')]"
                                                  },
                                                  "enableAcceleratedNetworking": {
                                                    "value": "[parameters('enableAcceleratedNetworking')]"
                                                  },
                                                  "enableTelemetry": {
                                                    "value": "[parameters('enableTelemetry')]"
                                                  },
                                                  "enableIPForwarding": {
                                                    "value": "[parameters('enableIPForwarding')]"
                                                  },
                                                  "lock": {
                                                    "value": "[parameters('lock')]"
                                                  },
                                                  "networkSecurityGroupResourceId": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('value', parameters('networkSecurityGroupResourceId')), createObject('value', ''))]",
                                                  "roleAssignments": {
                                                    "value": "[parameters('roleAssignments')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.34.44.8038",
                                                      "templateHash": "8196054567469390015"
                                                    },
                                                    "name": "Network Interface",
                                                    "description": "This module deploys a Network Interface."
                                                  },
                                                  "definitions": {
                                                    "networkInterfaceIPConfigurationType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the IP configuration."
                                                          }
                                                        },
                                                        "privateIPAllocationMethod": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "Dynamic",
                                                            "Static"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The private IP address allocation method."
                                                          }
                                                        },
                                                        "privateIPAddress": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The private IP address."
                                                          }
                                                        },
                                                        "publicIPAddressResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The resource ID of the public IP address."
                                                          }
                                                        },
                                                        "subnetResourceId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The resource ID of the subnet."
                                                          }
                                                        },
                                                        "loadBalancerBackendAddressPools": {
                                                          "type": "array",
                                                          "items": {
                                                            "$ref": "#/definitions/backendAddressPoolType"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Array of load balancer backend address pools."
                                                          }
                                                        },
                                                        "loadBalancerInboundNatRules": {
                                                          "type": "array",
                                                          "items": {
                                                            "$ref": "#/definitions/inboundNatRuleType"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A list of references of LoadBalancerInboundNatRules."
                                                          }
                                                        },
                                                        "applicationSecurityGroups": {
                                                          "type": "array",
                                                          "items": {
                                                            "$ref": "#/definitions/applicationSecurityGroupType"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Application security groups in which the IP configuration is included."
                                                          }
                                                        },
                                                        "applicationGatewayBackendAddressPools": {
                                                          "type": "array",
                                                          "items": {
                                                            "$ref": "#/definitions/applicationGatewayBackendAddressPoolsType"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The reference to Application Gateway Backend Address Pools."
                                                          }
                                                        },
                                                        "gatewayLoadBalancer": {
                                                          "$ref": "#/definitions/subResourceType",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The reference to gateway load balancer frontend IP."
                                                          }
                                                        },
                                                        "privateIPAddressVersion": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "IPv4",
                                                            "IPv6"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Whether the specific IP configuration is IPv4 or IPv6."
                                                          }
                                                        },
                                                        "virtualNetworkTaps": {
                                                          "type": "array",
                                                          "items": {
                                                            "$ref": "#/definitions/virtualNetworkTapType"
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The reference to Virtual Network Taps."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The resource ID of the deployed resource."
                                                      }
                                                    },
                                                    "backendAddressPoolType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The resource ID of the backend address pool."
                                                          }
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the backend address pool."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The properties of the backend address pool."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for a backend address pool."
                                                      }
                                                    },
                                                    "applicationSecurityGroupType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the application security group."
                                                          }
                                                        },
                                                        "location": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Location of the application security group."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of the application security group."
                                                          }
                                                        },
                                                        "tags": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Tags of the application security group."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for the application security group."
                                                      }
                                                    },
                                                    "applicationGatewayBackendAddressPoolsType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the backend address pool."
                                                          }
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of the backend address pool that is unique within an Application Gateway."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "properties": {
                                                            "backendAddresses": {
                                                              "type": "array",
                                                              "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                  "ipAddress": {
                                                                    "type": "string",
                                                                    "nullable": true,
                                                                    "metadata": {
                                                                      "description": "Optional. IP address of the backend address."
                                                                    }
                                                                  },
                                                                  "fqdn": {
                                                                    "type": "string",
                                                                    "nullable": true,
                                                                    "metadata": {
                                                                      "description": "Optional. FQDN of the backend address."
                                                                    }
                                                                  }
                                                                }
                                                              },
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. Backend addresses."
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of the application gateway backend address pool."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for the application gateway backend address pool."
                                                      }
                                                    },
                                                    "subResourceType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the sub resource."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for the sub resource."
                                                      }
                                                    },
                                                    "inboundNatRuleType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the inbound NAT rule."
                                                          }
                                                        },
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be used to access the resource."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "properties": {
                                                            "backendAddressPool": {
                                                              "$ref": "#/definitions/subResourceType",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. A reference to backendAddressPool resource."
                                                              }
                                                            },
                                                            "backendPort": {
                                                              "type": "int",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The port used for the internal endpoint. Acceptable values range from 1 to 65535."
                                                              }
                                                            },
                                                            "enableFloatingIP": {
                                                              "type": "bool",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability Group. This setting is required when using the SQL AlwaysOn Availability Groups in SQL server. This setting can't be changed after you create the endpoint."
                                                              }
                                                            },
                                                            "enableTcpReset": {
                                                              "type": "bool",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used when the protocol is set to TCP."
                                                              }
                                                            },
                                                            "frontendIPConfiguration": {
                                                              "$ref": "#/definitions/subResourceType",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. A reference to frontend IP addresses."
                                                              }
                                                            },
                                                            "frontendPort": {
                                                              "type": "int",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values range from 1 to 65534."
                                                              }
                                                            },
                                                            "frontendPortRangeStart": {
                                                              "type": "int",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                                              }
                                                            },
                                                            "frontendPortRangeEnd": {
                                                              "type": "int",
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart. Individual inbound NAT rule port mappings will be created for each backend address from BackendAddressPool. Acceptable values range from 1 to 65534."
                                                              }
                                                            },
                                                            "protocol": {
                                                              "type": "string",
                                                              "allowedValues": [
                                                                "All",
                                                                "Tcp",
                                                                "Udp"
                                                              ],
                                                              "nullable": true,
                                                              "metadata": {
                                                                "description": "Optional. The reference to the transport protocol used by the load balancing rule."
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of the inbound NAT rule."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for the inbound NAT rule."
                                                      }
                                                    },
                                                    "virtualNetworkTapType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "id": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the virtual network tap."
                                                          }
                                                        },
                                                        "location": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Location of the virtual network tap."
                                                          }
                                                        },
                                                        "properties": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Properties of the virtual network tap."
                                                          }
                                                        },
                                                        "tags": {
                                                          "type": "object",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Tags of the virtual network tap."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true,
                                                        "description": "The type for the virtual network tap."
                                                      }
                                                    },
                                                    "networkInterfaceIPConfigurationOutputType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "The name of the IP configuration."
                                                          }
                                                        },
                                                        "privateIP": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "The private IP address."
                                                          }
                                                        },
                                                        "publicIP": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "The public IP address."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "__bicep_export!": true
                                                      }
                                                    },
                                                    "diagnosticSettingFullType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of the diagnostic setting."
                                                          }
                                                        },
                                                        "logCategoriesAndGroups": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "category": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                                }
                                                              },
                                                              "categoryGroup": {
                                                                "type": "string",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                                }
                                                              },
                                                              "enabled": {
                                                                "type": "bool",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                          }
                                                        },
                                                        "metricCategories": {
                                                          "type": "array",
                                                          "items": {
                                                            "type": "object",
                                                            "properties": {
                                                              "category": {
                                                                "type": "string",
                                                                "metadata": {
                                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                                }
                                                              },
                                                              "enabled": {
                                                                "type": "bool",
                                                                "nullable": true,
                                                                "metadata": {
                                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                                }
                                                              }
                                                            }
                                                          },
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                          }
                                                        },
                                                        "logAnalyticsDestinationType": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "AzureDiagnostics",
                                                            "Dedicated"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                          }
                                                        },
                                                        "workspaceResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "storageAccountResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "eventHubAuthorizationRuleResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                          }
                                                        },
                                                        "eventHubName": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                          }
                                                        },
                                                        "marketplacePartnerResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                        }
                                                      }
                                                    },
                                                    "lockType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the name of lock."
                                                          }
                                                        },
                                                        "kind": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "CanNotDelete",
                                                            "None",
                                                            "ReadOnly"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the type of lock."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a lock.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                        }
                                                      }
                                                    },
                                                    "roleAssignmentType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                          }
                                                        },
                                                        "roleDefinitionIdOrName": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                          }
                                                        },
                                                        "principalId": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                          }
                                                        },
                                                        "principalType": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "Device",
                                                            "ForeignGroup",
                                                            "Group",
                                                            "ServicePrincipal",
                                                            "User"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The principal type of the assigned principal ID."
                                                          }
                                                        },
                                                        "description": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The description of the role assignment."
                                                          }
                                                        },
                                                        "condition": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                          }
                                                        },
                                                        "conditionVersion": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "2.0"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Version of the condition."
                                                          }
                                                        },
                                                        "delegatedManagedIdentityResourceId": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                          }
                                                        }
                                                      },
                                                      "metadata": {
                                                        "description": "An AVM-aligned type for a role assignment.",
                                                        "__bicep_imported_from!": {
                                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                        }
                                                      }
                                                    }
                                                  },
                                                  "parameters": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The name of the network interface."
                                                      }
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "defaultValue": "[resourceGroup().location]",
                                                      "metadata": {
                                                        "description": "Optional. Location for all resources."
                                                      }
                                                    },
                                                    "tags": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Resource tags."
                                                      }
                                                    },
                                                    "enableTelemetry": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                                      }
                                                    },
                                                    "enableIPForwarding": {
                                                      "type": "bool",
                                                      "defaultValue": false,
                                                      "metadata": {
                                                        "description": "Optional. Indicates whether IP forwarding is enabled on this network interface."
                                                      }
                                                    },
                                                    "enableAcceleratedNetworking": {
                                                      "type": "bool",
                                                      "defaultValue": false,
                                                      "metadata": {
                                                        "description": "Optional. If the network interface is accelerated networking enabled."
                                                      }
                                                    },
                                                    "dnsServers": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "string"
                                                      },
                                                      "defaultValue": [],
                                                      "metadata": {
                                                        "description": "Optional. List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS' value cannot be combined with other IPs, it must be the only value in dnsServers collection."
                                                      }
                                                    },
                                                    "networkSecurityGroupResourceId": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The network security group (NSG) to attach to the network interface."
                                                      }
                                                    },
                                                    "auxiliaryMode": {
                                                      "type": "string",
                                                      "defaultValue": "None",
                                                      "allowedValues": [
                                                        "Floating",
                                                        "MaxConnections",
                                                        "None"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. Auxiliary mode of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                                      }
                                                    },
                                                    "auxiliarySku": {
                                                      "type": "string",
                                                      "defaultValue": "None",
                                                      "allowedValues": [
                                                        "A1",
                                                        "A2",
                                                        "A4",
                                                        "A8",
                                                        "None"
                                                      ],
                                                      "metadata": {
                                                        "description": "Optional. Auxiliary sku of Network Interface resource. Not all regions are enabled for Auxiliary Mode Nic."
                                                      }
                                                    },
                                                    "disableTcpStateTracking": {
                                                      "type": "bool",
                                                      "defaultValue": false,
                                                      "metadata": {
                                                        "description": "Optional. Indicates whether to disable tcp state tracking. Subscription must be registered for the Microsoft.Network/AllowDisableTcpStateTracking feature before this property can be set to true."
                                                      }
                                                    },
                                                    "ipConfigurations": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/networkInterfaceIPConfigurationType"
                                                      },
                                                      "metadata": {
                                                        "description": "Required. A list of IPConfigurations of the network interface."
                                                      }
                                                    },
                                                    "lock": {
                                                      "$ref": "#/definitions/lockType",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The lock settings of the service."
                                                      }
                                                    },
                                                    "roleAssignments": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/roleAssignmentType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Array of role assignments to create."
                                                      }
                                                    },
                                                    "diagnosticSettings": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                                      },
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The diagnostic settings of the service."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "copy": [
                                                      {
                                                        "name": "formattedRoleAssignments",
                                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                                      }
                                                    ],
                                                    "builtInRoleNames": {
                                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                                    }
                                                  },
                                                  "resources": {
                                                    "publicIp": {
                                                      "copy": {
                                                        "name": "publicIp",
                                                        "count": "[length(parameters('ipConfigurations'))]"
                                                      },
                                                      "condition": "[and(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), not(equals(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), null())))]",
                                                      "existing": true,
                                                      "type": "Microsoft.Network/publicIPAddresses",
                                                      "apiVersion": "2024-05-01",
                                                      "resourceGroup": "[split(coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), ''), '/')[4]]",
                                                      "name": "[last(split(coalesce(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), ''), '/'))]"
                                                    },
                                                    "avmTelemetry": {
                                                      "condition": "[parameters('enableTelemetry')]",
                                                      "type": "Microsoft.Resources/deployments",
                                                      "apiVersion": "2024-03-01",
                                                      "name": "[format('46d3xbcp.res.network-networkinterface.{0}.{1}', replace('0.5.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                                      "properties": {
                                                        "mode": "Incremental",
                                                        "template": {
                                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                          "contentVersion": "1.0.0.0",
                                                          "resources": [],
                                                          "outputs": {
                                                            "telemetry": {
                                                              "type": "String",
                                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "networkInterface": {
                                                      "type": "Microsoft.Network/networkInterfaces",
                                                      "apiVersion": "2024-05-01",
                                                      "name": "[parameters('name')]",
                                                      "location": "[parameters('location')]",
                                                      "tags": "[parameters('tags')]",
                                                      "properties": {
                                                        "copy": [
                                                          {
                                                            "name": "ipConfigurations",
                                                            "count": "[length(parameters('ipConfigurations'))]",
                                                            "input": {
                                                              "name": "[coalesce(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'name'), format('ipconfig0{0}', add(copyIndex('ipConfigurations'), 1)))]",
                                                              "properties": {
                                                                "primary": "[if(equals(copyIndex('ipConfigurations'), 0), true(), false())]",
                                                                "privateIPAllocationMethod": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAllocationMethod')]",
                                                                "privateIPAddress": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddress')]",
                                                                "publicIPAddress": "[if(contains(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), if(not(equals(tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId'), null())), createObject('id', tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'publicIPAddressResourceId')), null()), null())]",
                                                                "subnet": {
                                                                  "id": "[parameters('ipConfigurations')[copyIndex('ipConfigurations')].subnetResourceId]"
                                                                },
                                                                "loadBalancerBackendAddressPools": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerBackendAddressPools')]",
                                                                "applicationSecurityGroups": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationSecurityGroups')]",
                                                                "applicationGatewayBackendAddressPools": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'applicationGatewayBackendAddressPools')]",
                                                                "gatewayLoadBalancer": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'gatewayLoadBalancer')]",
                                                                "loadBalancerInboundNatRules": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'loadBalancerInboundNatRules')]",
                                                                "privateIPAddressVersion": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'privateIPAddressVersion')]",
                                                                "virtualNetworkTaps": "[tryGet(parameters('ipConfigurations')[copyIndex('ipConfigurations')], 'virtualNetworkTaps')]"
                                                              }
                                                            }
                                                          }
                                                        ],
                                                        "auxiliaryMode": "[parameters('auxiliaryMode')]",
                                                        "auxiliarySku": "[parameters('auxiliarySku')]",
                                                        "disableTcpStateTracking": "[parameters('disableTcpStateTracking')]",
                                                        "dnsSettings": "[if(not(empty(parameters('dnsServers'))), createObject('dnsServers', parameters('dnsServers')), null())]",
                                                        "enableAcceleratedNetworking": "[parameters('enableAcceleratedNetworking')]",
                                                        "enableIPForwarding": "[parameters('enableIPForwarding')]",
                                                        "networkSecurityGroup": "[if(not(empty(parameters('networkSecurityGroupResourceId'))), createObject('id', parameters('networkSecurityGroupResourceId')), null())]"
                                                      }
                                                    },
                                                    "networkInterface_lock": {
                                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                                      "type": "Microsoft.Authorization/locks",
                                                      "apiVersion": "2020-05-01",
                                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                                      "properties": {
                                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                                      },
                                                      "dependsOn": [
                                                        "networkInterface"
                                                      ]
                                                    },
                                                    "networkInterface_diagnosticSettings": {
                                                      "copy": {
                                                        "name": "networkInterface_diagnosticSettings",
                                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                                      },
                                                      "type": "Microsoft.Insights/diagnosticSettings",
                                                      "apiVersion": "2021-05-01-preview",
                                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                                      "properties": {
                                                        "copy": [
                                                          {
                                                            "name": "metrics",
                                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                            "input": {
                                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                              "timeGrain": null
                                                            }
                                                          }
                                                        ],
                                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                                      },
                                                      "dependsOn": [
                                                        "networkInterface"
                                                      ]
                                                    },
                                                    "networkInterface_roleAssignments": {
                                                      "copy": {
                                                        "name": "networkInterface_roleAssignments",
                                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                                      },
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2022-04-01",
                                                      "scope": "[format('Microsoft.Network/networkInterfaces/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/networkInterfaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                                      "properties": {
                                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                      },
                                                      "dependsOn": [
                                                        "networkInterface"
                                                      ]
                                                    }
                                                  },
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the deployed resource."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the deployed resource."
                                                      },
                                                      "value": "[resourceId('Microsoft.Network/networkInterfaces', parameters('name'))]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group of the deployed resource."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The location the resource was deployed into."
                                                      },
                                                      "value": "[reference('networkInterface', '2024-05-01', 'full').location]"
                                                    },
                                                    "ipConfigurations": {
                                                      "type": "array",
                                                      "items": {
                                                        "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
                                                      },
                                                      "metadata": {
                                                        "description": "The list of IP configurations of the network interface."
                                                      },
                                                      "copy": {
                                                        "count": "[length(parameters('ipConfigurations'))]",
                                                        "input": {
                                                          "name": "[reference('networkInterface').ipConfigurations[copyIndex()].name]",
                                                          "privateIP": "[coalesce(tryGet(reference('networkInterface').ipConfigurations[copyIndex()].properties, 'privateIPAddress'), '')]",
                                                          "publicIP": "[if(and(contains(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), not(equals(tryGet(parameters('ipConfigurations')[copyIndex()], 'publicIPAddressResourceId'), null()))), coalesce(reference(format('publicIp[{0}]', copyIndex())).ipAddress, ''), '')]"
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "networkInterface_publicIPAddresses"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the network interface."
                                              },
                                              "value": "[reference('networkInterface').outputs.name.value]"
                                            },
                                            "ipConfigurations": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/networkInterfaceIPConfigurationOutputType"
                                              },
                                              "metadata": {
                                                "description": "The list of IP configurations of the network interface."
                                              },
                                              "value": "[reference('networkInterface').outputs.ipConfigurations.value]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "vm_domainJoinExtension": {
                                      "condition": "[and(contains(parameters('extensionDomainJoinConfig'), 'enabled'), parameters('extensionDomainJoinConfig').enabled)]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-DomainJoin', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'name'), 'DomainJoin')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Compute"
                                          },
                                          "type": {
                                            "value": "JsonADDomainExtension"
                                          },
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'typeHandlerVersion'), '1.3')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": "[parameters('extensionDomainJoinConfig').settings]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionDomainJoinConfig'), 'tags'), parameters('tags'))]"
                                          },
                                          "protectedSettings": {
                                            "value": {
                                              "Password": "[parameters('extensionDomainJoinPassword')]"
                                            }
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm"
                                      ]
                                    },
                                    "vm_aadJoinExtension": {
                                      "condition": "[parameters('extensionAadJoinConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-AADLogin', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'name'), 'AADLogin')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.ActiveDirectory"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AADLoginForWindows'), createObject('value', 'AADSSHLoginforLinux'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.0', '1.0'))]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'settings'), createObject())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionAadJoinConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_domainJoinExtension"
                                      ]
                                    },
                                    "vm_microsoftAntiMalwareExtension": {
                                      "condition": "[parameters('extensionAntiMalwareConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-MicrosoftAntiMalware', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'name'), 'MicrosoftAntiMalware')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.Security"
                                          },
                                          "type": {
                                            "value": "IaaSAntimalware"
                                          },
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'typeHandlerVersion'), '1.3')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'settings'), createObject('AntimalwareEnabled', 'true', 'Exclusions', createObject(), 'RealtimeProtectionEnabled', 'true', 'ScheduledScanSettings', createObject('day', '7', 'isEnabled', 'true', 'scanType', 'Quick', 'time', '120')))]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionAntiMalwareConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_aadJoinExtension"
                                      ]
                                    },
                                    "vm_azureMonitorAgentExtension": {
                                      "condition": "[parameters('extensionMonitoringAgentConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-AzureMonitorAgent', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'name'), 'AzureMonitorAgent')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.Monitor"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureMonitorWindowsAgent'), createObject('value', 'AzureMonitorLinuxAgent'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.22', '1.29'))]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionMonitoringAgentConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_microsoftAntiMalwareExtension"
                                      ]
                                    },
                                    "vm_dependencyAgentExtension": {
                                      "condition": "[parameters('extensionDependencyAgentConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-DependencyAgent', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'name'), 'DependencyAgent')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.Monitoring.DependencyAgent"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'DependencyAgentWindows'), createObject('value', 'DependencyAgentLinux'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'typeHandlerVersion'), '9.10')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAutomaticUpgrade'), true())]"
                                          },
                                          "settings": {
                                            "value": {
                                              "enableAMA": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'enableAMA'), true())]"
                                            }
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionDependencyAgentConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_azureMonitorAgentExtension"
                                      ]
                                    },
                                    "vm_networkWatcherAgentExtension": {
                                      "condition": "[parameters('extensionNetworkWatcherAgentConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-NetworkWatcherAgent', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'name'), 'NetworkWatcherAgent')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.NetworkWatcher"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'NetworkWatcherAgentWindows'), createObject('value', 'NetworkWatcherAgentLinux'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'typeHandlerVersion'), '1.4')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionNetworkWatcherAgentConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_dependencyAgentExtension"
                                      ]
                                    },
                                    "vm_desiredStateConfigurationExtension": {
                                      "condition": "[parameters('extensionDSCConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-DesiredStateConfiguration', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'name'), 'DesiredStateConfiguration')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Powershell"
                                          },
                                          "type": {
                                            "value": "DSC"
                                          },
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'typeHandlerVersion'), '2.77')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'settings'), createObject())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'tags'), parameters('tags'))]"
                                          },
                                          "protectedSettings": {
                                            "value": "[coalesce(tryGet(parameters('extensionDSCConfig'), 'protectedSettings'), createObject())]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_networkWatcherAgentExtension"
                                      ]
                                    },
                                    "vm_customScriptExtension": {
                                      "condition": "[parameters('extensionCustomScriptConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-CustomScriptExtension', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'name'), 'CustomScriptExtension')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'Microsoft.Compute'), createObject('value', 'Microsoft.Azure.Extensions'))]",
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'CustomScriptExtension'), createObject('value', 'CustomScript'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.10', '2.1'))]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": {
                                              "copy": [
                                                {
                                                  "name": "fileUris",
                                                  "count": "[length(parameters('extensionCustomScriptConfig').fileData)]",
                                                  "input": "[if(contains(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')], 'storageAccountId'), format('{0}?{1}', parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri, listAccountSas(parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].storageAccountId, '2019-04-01', variables('accountSasProperties')).accountSasToken), parameters('extensionCustomScriptConfig').fileData[copyIndex('fileUris')].uri)]"
                                                }
                                              ]
                                            }
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionCustomScriptConfig'), 'tags'), parameters('tags'))]"
                                          },
                                          "protectedSettings": {
                                            "value": "[parameters('extensionCustomScriptProtectedSetting')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_desiredStateConfigurationExtension"
                                      ]
                                    },
                                    "vm_azureDiskEncryptionExtension": {
                                      "condition": "[parameters('extensionAzureDiskEncryptionConfig').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-AzureDiskEncryption', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'name'), 'AzureDiskEncryption')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.Azure.Security"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'AzureDiskEncryption'), createObject('value', 'AzureDiskEncryptionForLinux'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '2.2', '1.1'))]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "forceUpdateTag": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'forceUpdateTag'), '1.0')]"
                                          },
                                          "settings": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'settings'), createObject())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionAzureDiskEncryptionConfig'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_customScriptExtension"
                                      ]
                                    },
                                    "vm_nvidiaGpuDriverWindowsExtension": {
                                      "condition": "[parameters('extensionNvidiaGpuDriverWindows').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-NvidiaGpuDriverWindows', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'name'), 'NvidiaGpuDriverWindows')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.HpcCompute"
                                          },
                                          "type": {
                                            "value": "NvidiaGpuDriverWindows"
                                          },
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'typeHandlerVersion'), '1.4')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'supressFailures'), false())]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionNvidiaGpuDriverWindows'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_azureDiskEncryptionExtension"
                                      ]
                                    },
                                    "vm_hostPoolRegistrationExtension": {
                                      "condition": "[parameters('extensionHostPoolRegistration').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-HostPoolRegistration', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'name'), 'HostPoolRegistration')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.PowerShell"
                                          },
                                          "type": {
                                            "value": "DSC"
                                          },
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'typeHandlerVersion'), '2.77')]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'enableAutomaticUpgrade'), false())]"
                                          },
                                          "settings": {
                                            "value": {
                                              "modulesUrl": "[parameters('extensionHostPoolRegistration').modulesUrl]",
                                              "configurationFunction": "[parameters('extensionHostPoolRegistration').configurationFunction]",
                                              "properties": {
                                                "hostPoolName": "[parameters('extensionHostPoolRegistration').hostPoolName]",
                                                "registrationInfoToken": "[parameters('extensionHostPoolRegistration').registrationInfoToken]",
                                                "aadJoin": true
                                              },
                                              "supressFailures": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'supressFailures'), false())]"
                                            }
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionHostPoolRegistration'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_nvidiaGpuDriverWindowsExtension"
                                      ]
                                    },
                                    "vm_azureGuestConfigurationExtension": {
                                      "condition": "[parameters('extensionGuestConfigurationExtension').enabled]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-GuestConfiguration', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "virtualMachineName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": "[if(coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'name'), equals(parameters('osType'), 'Windows')), createObject('value', 'AzurePolicyforWindows'), createObject('value', 'AzurePolicyforLinux'))]",
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "publisher": {
                                            "value": "Microsoft.GuestConfiguration"
                                          },
                                          "type": "[if(equals(parameters('osType'), 'Windows'), createObject('value', 'ConfigurationforWindows'), createObject('value', 'ConfigurationForLinux'))]",
                                          "typeHandlerVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'typeHandlerVersion'), if(equals(parameters('osType'), 'Windows'), '1.0', '1.0'))]"
                                          },
                                          "autoUpgradeMinorVersion": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'autoUpgradeMinorVersion'), true())]"
                                          },
                                          "enableAutomaticUpgrade": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'enableAutomaticUpgrade'), true())]"
                                          },
                                          "forceUpdateTag": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'forceUpdateTag'), '1.0')]"
                                          },
                                          "settings": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'settings'), createObject())]"
                                          },
                                          "supressFailures": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'supressFailures'), false())]"
                                          },
                                          "protectedSettings": {
                                            "value": "[parameters('extensionGuestConfigurationExtensionProtectedSettings')]"
                                          },
                                          "tags": {
                                            "value": "[coalesce(tryGet(parameters('extensionGuestConfigurationExtension'), 'tags'), parameters('tags'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "4125647230047670832"
                                            },
                                            "name": "Virtual Machine Extensions",
                                            "description": "This module deploys a Virtual Machine Extension."
                                          },
                                          "parameters": {
                                            "virtualMachineName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent virtual machine that extension is provisioned for. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the virtual machine extension."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. The location the extension is deployed to."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the extension handler publisher."
                                              }
                                            },
                                            "type": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the type of the extension; an example is \"CustomScriptExtension\"."
                                              }
                                            },
                                            "typeHandlerVersion": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Specifies the version of the script handler."
                                              }
                                            },
                                            "autoUpgradeMinorVersion": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true."
                                              }
                                            },
                                            "forceUpdateTag": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. How the extension handler should be forced to update even if the extension configuration has not changed."
                                              }
                                            },
                                            "settings": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific settings."
                                              }
                                            },
                                            "protectedSettings": {
                                              "type": "secureObject",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Any object that contains the extension specific protected settings."
                                              }
                                            },
                                            "supressFailures": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting to the VM will not be suppressed regardless of this value). The default is false."
                                              }
                                            },
                                            "enableAutomaticUpgrade": {
                                              "type": "bool",
                                              "metadata": {
                                                "description": "Required. Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension available."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "virtualMachine": {
                                              "existing": true,
                                              "type": "Microsoft.Compute/virtualMachines",
                                              "apiVersion": "2022-11-01",
                                              "name": "[parameters('virtualMachineName')]"
                                            },
                                            "extension": {
                                              "type": "Microsoft.Compute/virtualMachines/extensions",
                                              "apiVersion": "2022-11-01",
                                              "name": "[format('{0}/{1}', parameters('virtualMachineName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "publisher": "[parameters('publisher')]",
                                                "type": "[parameters('type')]",
                                                "typeHandlerVersion": "[parameters('typeHandlerVersion')]",
                                                "autoUpgradeMinorVersion": "[parameters('autoUpgradeMinorVersion')]",
                                                "enableAutomaticUpgrade": "[parameters('enableAutomaticUpgrade')]",
                                                "forceUpdateTag": "[if(not(empty(parameters('forceUpdateTag'))), parameters('forceUpdateTag'), null())]",
                                                "settings": "[if(not(empty(parameters('settings'))), parameters('settings'), null())]",
                                                "protectedSettings": "[if(not(empty(parameters('protectedSettings'))), parameters('protectedSettings'), null())]",
                                                "suppressFailures": "[parameters('supressFailures')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the extension."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the extension."
                                              },
                                              "value": "[resourceId('Microsoft.Compute/virtualMachines/extensions', parameters('virtualMachineName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the extension was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('extension', '2022-11-01', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_hostPoolRegistrationExtension"
                                      ]
                                    },
                                    "vm_backup": {
                                      "condition": "[not(empty(parameters('backupVaultName')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-VM-Backup', uniqueString(deployment().name, parameters('location')))]",
                                      "resourceGroup": "[parameters('backupVaultResourceGroup')]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[format('vm;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "policyId": {
                                            "value": "[resourceId(parameters('backupVaultResourceGroup'), 'Microsoft.RecoveryServices/vaults/backupPolicies', parameters('backupVaultName'), parameters('backupPolicyName'))]"
                                          },
                                          "protectedItemType": {
                                            "value": "Microsoft.Compute/virtualMachines"
                                          },
                                          "protectionContainerName": {
                                            "value": "[format('iaasvmcontainer;iaasvmcontainerv2;{0};{1}', resourceGroup().name, parameters('name'))]"
                                          },
                                          "recoveryVaultName": {
                                            "value": "[parameters('backupVaultName')]"
                                          },
                                          "sourceResourceId": {
                                            "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "7803302576034373529"
                                            },
                                            "name": "Recovery Service Vaults Protection Container Protected Item",
                                            "description": "This module deploys a Recovery Services Vault Protection Container Protected Item."
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the resource."
                                              }
                                            },
                                            "protectionContainerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. Name of the Azure Recovery Service Vault Protection Container. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "recoveryVaultName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Azure Recovery Service Vault. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "protectedItemType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "AzureFileShareProtectedItem",
                                                "AzureVmWorkloadSAPAseDatabase",
                                                "AzureVmWorkloadSAPHanaDatabase",
                                                "AzureVmWorkloadSQLDatabase",
                                                "DPMProtectedItem",
                                                "GenericProtectedItem",
                                                "MabFileFolderProtectedItem",
                                                "Microsoft.ClassicCompute/virtualMachines",
                                                "Microsoft.Compute/virtualMachines",
                                                "Microsoft.Sql/servers/databases"
                                              ],
                                              "metadata": {
                                                "description": "Required. The backup item type."
                                              }
                                            },
                                            "policyId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. ID of the backup policy with which this item is backed up."
                                              }
                                            },
                                            "sourceResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Resource ID of the resource to back up."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems",
                                              "apiVersion": "2023-01-01",
                                              "name": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]",
                                              "location": "[parameters('location')]",
                                              "properties": {
                                                "protectedItemType": "[parameters('protectedItemType')]",
                                                "policyId": "[parameters('policyId')]",
                                                "sourceResourceId": "[parameters('sourceResourceId')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the Resource Group the protected item was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the protected item."
                                              },
                                              "value": "[resourceId('Microsoft.RecoveryServices/vaults/backupFabrics/protectionContainers/protectedItems', split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[0], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[1], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[2], split(format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name')), '/')[3])]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The Name of the protected item."
                                              },
                                              "value": "[format('{0}/Azure/{1}/{2}', parameters('recoveryVaultName'), parameters('protectionContainerName'), parameters('name'))]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "vm",
                                        "vm_azureGuestConfigurationExtension"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the VM."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the VM."
                                      },
                                      "value": "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the VM was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[tryGet(tryGet(reference('vm', '2024-07-01', 'full'), 'identity'), 'principalId')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('vm', '2024-07-01', 'full').location]"
                                    },
                                    "nicConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/nicConfigurationOutputType"
                                      },
                                      "metadata": {
                                        "description": "The list of NIC configurations of the virtual machine."
                                      },
                                      "copy": {
                                        "count": "[length(parameters('nicConfigurations'))]",
                                        "input": {
                                          "name": "[reference(format('vm_nic[{0}]', copyIndex())).outputs.name.value]",
                                          "ipConfigurations": "[reference(format('vm_nic[{0}]', copyIndex())).outputs.ipConfigurations.value]"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "maintenanceConfiguration",
                                "nsg",
                                "proximityPlacementGroup",
                                "subnetResource"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Jumpbox Virtual Machine."
                              },
                              "value": "[reference('vm').outputs.name.value]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Jumpbox Virtual Machine."
                              },
                              "value": "[reference('vm').outputs.resourceId.value]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "Location of the Jumpbox Virtual Machine."
                              },
                              "value": "[reference('vm').outputs.location.value]"
                            },
                            "subnetId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Jumpbox Subnet."
                              },
                              "value": "[reference('subnetResource').outputs.resourceId.value]"
                            },
                            "subnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Jumpbox Subnet."
                              },
                              "value": "[reference('subnetResource').outputs.name.value]"
                            },
                            "nsgId": {
                              "type": "string",
                              "metadata": {
                                "description": "Resource ID of the Jumpbox Network Security Group."
                              },
                              "value": "[reference('nsg').outputs.resourceId.value]"
                            },
                            "nsgName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the Jumpbox Network Security Group."
                              },
                              "value": "[reference('nsg').outputs.name.value]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "virtualNetwork"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the resources were deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Virtual Network resource."
                      },
                      "value": "[reference('virtualNetwork').outputs.name.value]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the Virtual Network."
                      },
                      "value": "[reference('virtualNetwork').outputs.resourceId.value]"
                    },
                    "subnets": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/subnetOutputType"
                      },
                      "metadata": {
                        "description": "Array of subnets created in the Virtual Network."
                      },
                      "value": "[reference('virtualNetwork').outputs.subnets.value]"
                    },
                    "bastionSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the Bastion subnet."
                      },
                      "value": "[reference('bastionHost').outputs.subnetId.value]"
                    },
                    "bastionSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Bastion subnet."
                      },
                      "value": "[reference('bastionHost').outputs.subnetName.value]"
                    },
                    "bastionHostId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the Bastion Host."
                      },
                      "value": "[reference('bastionHost').outputs.resourceId.value]"
                    },
                    "bastionHostName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Bastion Host."
                      },
                      "value": "[reference('bastionHost').outputs.name.value]"
                    },
                    "jumpboxSubnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Jumpbox subnet."
                      },
                      "value": "[reference('jumpbox').outputs.subnetName.value]"
                    },
                    "jumpboxSubnetId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the Jumpbox subnet."
                      },
                      "value": "[reference('jumpbox').outputs.subnetId.value]"
                    },
                    "jumpboxName": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the Jumpbox VM."
                      },
                      "value": "[reference('jumpbox').outputs.name.value]"
                    },
                    "jumpboxResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the Jumpbox VM."
                      },
                      "value": "[reference('jumpbox').outputs.resourceId.value]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Virtual Network resource."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('network-{0}-create', parameters('resourcesName')), 64)), '2022-09-01').outputs.name.value]"
            },
            "vnetResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Virtual Network."
              },
              "value": "[reference(resourceId('Microsoft.Resources/deployments', take(format('network-{0}-create', parameters('resourcesName')), 64)), '2022-09-01').outputs.resourceId.value]"
            },
            "subnetWebResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the \"web\" subnet."
              },
              "value": "[coalesce(tryGet(first(filter(reference(resourceId('Microsoft.Resources/deployments', take(format('network-{0}-create', parameters('resourcesName')), 64)), '2022-09-01').outputs.subnets.value, lambda('s', equals(lambdaVariables('s').name, 'web')))), 'resourceId'), '')]"
            },
            "subnetPrivateEndpointsResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the \"peps\" subnet for Private Endpoints."
              },
              "value": "[coalesce(tryGet(first(filter(reference(resourceId('Microsoft.Resources/deployments', take(format('network-{0}-create', parameters('resourcesName')), 64)), '2022-09-01').outputs.subnets.value, lambda('s', equals(lambdaVariables('s').name, 'peps')))), 'resourceId'), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "logAnalyticsWorkspace"
      ]
    },
    "aiServices": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('aiservices-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[format('ais-{0}', variables('resourcesName'))]"
          },
          "location": {
            "value": "[parameters('azureAiServiceLocation')]"
          },
          "sku": {
            "value": "S0"
          },
          "kind": {
            "value": "AIServices"
          },
          "deployments": {
            "value": [
              "[variables('modelDeployment')]"
            ]
          },
          "projectName": {
            "value": "[format('proj-{0}', variables('resourcesName'))]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference('logAnalyticsWorkspace').outputs.resourceId.value), createObject('value', ''))]",
          "privateNetworking": "[if(parameters('enablePrivateNetworking'), createObject('value', createObject('virtualNetworkResourceId', reference('network').outputs.vnetResourceId.value, 'subnetResourceId', reference('network').outputs.subnetPrivateEndpointsResourceId.value)), createObject('value', null()))]",
          "roleAssignments": {
            "value": [
              {
                "principalId": "[reference('appIdentity').outputs.principalId.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionIdOrName": "Cognitive Services OpenAI Contributor"
              },
              {
                "principalId": "[reference('appIdentity').outputs.principalId.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionIdOrName": "64702f94-c441-49e6-a78b-ef80e0188fee"
              },
              {
                "principalId": "[reference('appIdentity').outputs.principalId.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionIdOrName": "53ca6127-db72-4b80-b1b0-d745d6d5456d"
              }
            ]
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "15767522715261793871"
            },
            "name": "AI Services and Project Module",
            "description": "This module creates an AI Services resource and an AI Foundry project within it. It supports private networking, OpenAI deployments, and role assignments."
          },
          "definitions": {
            "aiServicesRoleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the role definition GUID or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "A custom AVM-aligned type for a role assignment for AI Services and Project."
              }
            },
            "aiServicesPrivateNetworkingType": {
              "type": "object",
              "properties": {
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the virtual network."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the subnet to establish the Private Endpoint(s)."
                  }
                },
                "cogServicesPrivateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing \"cognitiveservices\" Private DNS Zone Resource to link to the virtual network. If not provided, a new \"cognitiveservices\" Private DNS Zone(s) will be created."
                  }
                },
                "openAIPrivateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing \"openai\" Private DNS Zone Resource to link to the virtual network. If not provided, a new \"openai\" Private DNS Zone(s) will be created."
                  }
                },
                "aiServicesPrivateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing \"services.ai\" Private DNS Zone Resource to link to the virtual network. If not provided, a new \"services.ai\" Private DNS Zone(s) will be created."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Values to establish private networking for resources that support createing private endpoints."
              }
            },
            "aiProjectOutputType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the AI project."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Resource ID of the AI project."
                  }
                },
                "apiEndpoint": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. API endpoint for the AI project."
                  }
                }
              },
              "metadata": {
                "description": "Output type representing AI project information.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "project.bicep"
                }
              }
            },
            "deploymentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of cognitive service account deployment."
                  }
                },
                "model": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of Cognitive Services account deployment model."
                      }
                    },
                    "format": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The format of Cognitive Services account deployment model."
                      }
                    },
                    "version": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The version of Cognitive Services account deployment model."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Properties of Cognitive Services account deployment model."
                  }
                },
                "sku": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the resource model definition representing SKU."
                      }
                    },
                    "capacity": {
                      "type": "int",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The capacity of the resource model definition representing SKU."
                      }
                    },
                    "tier": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The tier of the resource model definition representing SKU."
                      }
                    },
                    "size": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The size of the resource model definition representing SKU."
                      }
                    },
                    "family": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The family of the resource model definition representing SKU."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource model definition representing SKU."
                  }
                },
                "raiPolicyName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of RAI policy."
                  }
                },
                "versionUpgradeOption": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version upgrade option."
                  }
                }
              },
              "metadata": {
                "description": "The type for a cognitive services account deployment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/res/cognitive-services/account:0.10.2"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Cognitive Services resource. Must be unique in the resource group."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. The location of the Cognitive Services resource."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "AIServices",
              "allowedValues": [
                "AIServices",
                "AnomalyDetector",
                "CognitiveServices",
                "ComputerVision",
                "ContentModerator",
                "ContentSafety",
                "ConversationalLanguageUnderstanding",
                "CustomVision.Prediction",
                "CustomVision.Training",
                "Face",
                "FormRecognizer",
                "HealthInsights",
                "ImmersiveReader",
                "Internal.AllInOne",
                "LUIS",
                "LUIS.Authoring",
                "LanguageAuthoring",
                "MetricsAdvisor",
                "OpenAI",
                "Personalizer",
                "QnAMaker.v2",
                "SpeechServices",
                "TextAnalytics",
                "TextTranslation"
              ],
              "metadata": {
                "description": "Optional. Kind of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "sku": {
              "type": "string",
              "defaultValue": "S0",
              "allowedValues": [
                "S",
                "S0",
                "S1",
                "S2",
                "S3",
                "S4",
                "S5",
                "S6",
                "S7",
                "S8"
              ],
              "metadata": {
                "description": "Optional. The SKU of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
              }
            },
            "projectName": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the AI Foundry project to create."
              }
            },
            "projectDescription": {
              "type": "string",
              "defaultValue": "[parameters('projectName')]",
              "metadata": {
                "description": "Optional. The description of the AI Foundry project to create."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the Log Analytics workspace to use for diagnostic settings."
              }
            },
            "deployments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deploymentType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Specifies the OpenAI deployments to create."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "privateNetworking": {
              "$ref": "#/definitions/aiServicesPrivateNetworkingType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Values to establish private networking for the AI Services resource."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Tags to be applied to the resources."
              },
              "defaultValue": {}
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "cognitiveServicesPrivateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'cogServicesPrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-cognitiveservices-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.cognitiveservices.{0}', if(equals(toLower(environment().name), 'azureusgovernment'), 'azure.us', 'azure.com'))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "openAiPrivateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'openAIPrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-openai-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.openai.{0}', if(equals(toLower(environment().name), 'azureusgovernment'), 'azure.us', 'azure.com'))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "aiServicesPrivateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'aiServicesPrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-ai-services-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.services.ai.{0}', if(equals(toLower(environment().name), 'azureusgovernment'), 'azure.us', 'azure.com'))]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "cognitiveService": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-aiservices-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "sku": {
                    "value": "[parameters('sku')]"
                  },
                  "kind": {
                    "value": "[parameters('kind')]"
                  },
                  "allowProjectManagement": {
                    "value": true
                  },
                  "managedIdentities": {
                    "value": {
                      "systemAssigned": true
                    }
                  },
                  "deployments": {
                    "value": "[parameters('deployments')]"
                  },
                  "customSubDomainName": {
                    "value": "[parameters('name')]"
                  },
                  "disableLocalAuth": {
                    "value": "[not(equals(parameters('privateNetworking'), null()))]"
                  },
                  "publicNetworkAccess": "[if(not(equals(parameters('privateNetworking'), null())), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "diagnosticSettings": "[if(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), createObject('value', createArray(createObject('workspaceResourceId', parameters('logAnalyticsWorkspaceResourceId')))), createObject('value', createArray()))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "privateEndpoints": "[if(not(equals(parameters('privateNetworking'), null())), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'cogServicesPrivateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('cognitiveServicesPrivateDnsZone', '2022-09-01').resourceId, ''), tryGet(parameters('privateNetworking'), 'cogServicesPrivateDnsZoneResourceId')), '')), createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'openAIPrivateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('openAiPrivateDnsZone', '2022-09-01').resourceId, ''), tryGet(parameters('privateNetworking'), 'openAIPrivateDnsZoneResourceId')), '')), createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'aiServicesPrivateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('aiServicesPrivateDnsZone', '2022-09-01').resourceId, ''), tryGet(parameters('privateNetworking'), 'aiServicesPrivateDnsZoneResourceId')), '')))), 'subnetResourceId', coalesce(tryGet(parameters('privateNetworking'), 'subnetResourceId'), '')))), createObject('value', createArray()))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "16135659971302525380"
                    },
                    "name": "Cognitive Services",
                    "description": "This module deploys a Cognitive Service."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the private endpoint output."
                      }
                    },
                    "deploymentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of cognitive service account deployment."
                          }
                        },
                        "model": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of Cognitive Services account deployment model."
                              }
                            },
                            "format": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The format of Cognitive Services account deployment model."
                              }
                            },
                            "version": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The version of Cognitive Services account deployment model."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of Cognitive Services account deployment model."
                          }
                        },
                        "sku": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the resource model definition representing SKU."
                              }
                            },
                            "capacity": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The capacity of the resource model definition representing SKU."
                              }
                            },
                            "tier": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The tier of the resource model definition representing SKU."
                              }
                            },
                            "size": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The size of the resource model definition representing SKU."
                              }
                            },
                            "family": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The family of the resource model definition representing SKU."
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource model definition representing SKU."
                          }
                        },
                        "raiPolicyName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of RAI policy."
                          }
                        },
                        "versionUpgradeOption": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version upgrade option."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cognitive services account deployment."
                      }
                    },
                    "endpointType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Type of the endpoint."
                          }
                        },
                        "endpoint": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The endpoint URI."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for a cognitive services account endpoint."
                      }
                    },
                    "secretsExportConfigurationType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                          }
                        },
                        "accessKey1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name for the accessKey1 secret to create."
                          }
                        },
                        "accessKey2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name for the accessKey2 secret to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type of the secrets exported to the provided Key Vault."
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "customerManagedKeyType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, the deployment will use the latest version available at deployment time."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type does not support auto-rotation of the customer-managed key.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateEndpointSingleServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private Endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the Private Endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "secretsOutputType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/definitions/_1.secretSetOutputType",
                        "metadata": {
                          "description": "An exported secret's references."
                        }
                      },
                      "metadata": {
                        "description": "A map of the exported secrets",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of Cognitive Services account."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "allowedValues": [
                        "AIServices",
                        "AnomalyDetector",
                        "CognitiveServices",
                        "ComputerVision",
                        "ContentModerator",
                        "ContentSafety",
                        "ConversationalLanguageUnderstanding",
                        "CustomVision.Prediction",
                        "CustomVision.Training",
                        "Face",
                        "FormRecognizer",
                        "HealthInsights",
                        "ImmersiveReader",
                        "Internal.AllInOne",
                        "LUIS",
                        "LUIS.Authoring",
                        "LanguageAuthoring",
                        "MetricsAdvisor",
                        "OpenAI",
                        "Personalizer",
                        "QnAMaker.v2",
                        "SpeechServices",
                        "TextAnalytics",
                        "TextTranslation"
                      ],
                      "metadata": {
                        "description": "Required. Kind of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "defaultValue": "S0",
                      "allowedValues": [
                        "C2",
                        "C3",
                        "C4",
                        "F0",
                        "F1",
                        "S",
                        "S0",
                        "S1",
                        "S10",
                        "S2",
                        "S3",
                        "S4",
                        "S5",
                        "S6",
                        "S7",
                        "S8",
                        "S9"
                      ],
                      "metadata": {
                        "description": "Optional. SKU of the Cognitive Services account. Use 'Get-AzCognitiveServicesAccountSku' to determine a valid combinations of 'kind' and 'SKU' for your Azure region."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "customSubDomainName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. Subdomain name used for token-based authentication. Required if 'networkAcls' or 'privateEndpoints' are set."
                      }
                    },
                    "networkAcls": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A collection of rules governing the accessibility from specific network locations."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointSingleServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "allowedFqdnList": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of allowed FQDN."
                      }
                    },
                    "apiProperties": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The API properties for special APIs."
                      }
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allow only Azure AD authentication. Should be enabled for security reasons."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "dynamicThrottlingEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. The flag to enable dynamic throttling."
                      }
                    },
                    "migrationToken": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Resource migration token."
                      }
                    },
                    "restore": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Restore a soft-deleted cognitive service at deployment time. Will fail if no such soft-deleted resource exists."
                      }
                    },
                    "restrictOutboundNetworkAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Restrict outbound network access."
                      }
                    },
                    "userOwnedStorage": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The storage accounts for this resource."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "deployments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/deploymentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of deployments about cognitive service accounts to create."
                      }
                    },
                    "secretsExportConfiguration": {
                      "$ref": "#/definitions/secretsExportConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                      }
                    },
                    "allowProjectManagement": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable project management feature for AI Foundry."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned, UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Cognitive Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '25fbc0a9-bd7c-42a3-aa1a-3b75d497ee68')]",
                      "Cognitive Services Custom Vision Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c1ff6cc2-c111-46fe-8896-e0ef812ad9f3')]",
                      "Cognitive Services Custom Vision Deployment": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5c4089e1-6d96-4d2f-b296-c1bc7137275f')]",
                      "Cognitive Services Custom Vision Labeler": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '88424f51-ebe7-446f-bc41-7fa16989e96c')]",
                      "Cognitive Services Custom Vision Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '93586559-c37d-4a6b-ba08-b9f0940c2d73')]",
                      "Cognitive Services Custom Vision Trainer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a5ae4ab-0d65-4eeb-be61-29fc9b54394b')]",
                      "Cognitive Services Data Reader (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b59867f0-fa02-499b-be73-45a86b5b3e1c')]",
                      "Cognitive Services Face Recognizer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '9894cab4-e18a-44aa-828b-cb588cd6f2d7')]",
                      "Cognitive Services Immersive Reader User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b2de6794-95db-4659-8781-7e080d3f2b9d')]",
                      "Cognitive Services Language Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f07febfe-79bc-46b1-8b37-790e26e6e498')]",
                      "Cognitive Services Language Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7628b7b8-a8b2-4cdc-b46f-e9b35248918e')]",
                      "Cognitive Services Language Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2310ca1-dc64-4889-bb49-c8e0fa3d47a8')]",
                      "Cognitive Services LUIS Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f72c8140-2111-481c-87ff-72b910f6e3f8')]",
                      "Cognitive Services LUIS Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18e81cdc-4e98-4e29-a639-e7d10c5a6226')]",
                      "Cognitive Services LUIS Writer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6322a993-d5c9-4bed-b113-e49bbea25b27')]",
                      "Cognitive Services Metrics Advisor Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cb43c632-a144-4ec5-977c-e80c4affc34a')]",
                      "Cognitive Services Metrics Advisor User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3b20f47b-3825-43cb-8114-4bd2201156a8')]",
                      "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
                      "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                      "Cognitive Services QnA Maker Editor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f4cc2bf9-21be-47a1-bdf1-5c5804381025')]",
                      "Cognitive Services QnA Maker Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '466ccd10-b268-4a11-b098-b4849f024126')]",
                      "Cognitive Services Speech Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0e75ca1e-0464-4b4d-8b93-68208a576181')]",
                      "Cognitive Services Speech User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f2dc8367-1007-4938-bd23-fe263f013447')]",
                      "Cognitive Services User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a97b65f3-24c7-4388-baec-2e87135dc908')]",
                      "Azure AI Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '64702f94-c441-49e6-a78b-ef80e0188fee')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2023-07-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.cognitiveservices-account.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2023-07-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2025-01-31-preview",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                    },
                    "cognitiveService": {
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[parameters('name')]",
                      "kind": "[parameters('kind')]",
                      "identity": "[variables('identity')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "[parameters('sku')]"
                      },
                      "properties": {
                        "allowProjectManagement": "[parameters('allowProjectManagement')]",
                        "customSubDomainName": "[parameters('customSubDomainName')]",
                        "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                        "publicNetworkAccess": "[if(not(equals(parameters('publicNetworkAccess'), null())), parameters('publicNetworkAccess'), if(not(empty(parameters('networkAcls'))), 'Enabled', 'Disabled'))]",
                        "allowedFqdnList": "[parameters('allowedFqdnList')]",
                        "apiProperties": "[parameters('apiProperties')]",
                        "disableLocalAuth": "[parameters('disableLocalAuth')]",
                        "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('keySource', 'Microsoft.KeyVault', 'keyVaultProperties', createObject('identityClientId', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyVaultUri', reference('cMKKeyVault').vaultUri, 'keyName', parameters('customerManagedKey').keyName, 'keyVersion', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), tryGet(parameters('customerManagedKey'), 'keyVersion'), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null())]",
                        "migrationToken": "[parameters('migrationToken')]",
                        "restore": "[parameters('restore')]",
                        "restrictOutboundNetworkAccess": "[parameters('restrictOutboundNetworkAccess')]",
                        "userOwnedStorage": "[parameters('userOwnedStorage')]",
                        "dynamicThrottlingEnabled": "[parameters('dynamicThrottlingEnabled')]"
                      },
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKKeyVault::cMKKey",
                        "cMKUserAssignedIdentity"
                      ]
                    },
                    "cognitiveService_deployments": {
                      "copy": {
                        "name": "cognitiveService_deployments",
                        "count": "[length(coalesce(parameters('deployments'), createArray()))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.CognitiveServices/accounts/deployments",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('name'), coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'name'), format('{0}-deployments', parameters('name'))))]",
                      "properties": {
                        "model": "[coalesce(parameters('deployments'), createArray())[copyIndex()].model]",
                        "raiPolicyName": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'raiPolicyName')]",
                        "versionUpgradeOption": "[tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'versionUpgradeOption')]"
                      },
                      "sku": "[coalesce(tryGet(coalesce(parameters('deployments'), createArray())[copyIndex()], 'sku'), createObject('name', parameters('sku'), 'capacity', tryGet(parameters('sku'), 'capacity'), 'tier', tryGet(parameters('sku'), 'tier'), 'size', tryGet(parameters('sku'), 'size'), 'family', tryGet(parameters('sku'), 'family')))]",
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_diagnosticSettings": {
                      "copy": {
                        "name": "cognitiveService_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_roleAssignments": {
                      "copy": {
                        "name": "cognitiveService_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.CognitiveServices/accounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "cognitiveService_privateEndpoints": {
                      "copy": {
                        "name": "cognitiveService_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-cognitiveService-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.CognitiveServices/accounts', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'account')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    },
                    "secretsExport": {
                      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                          },
                          "secretsToSet": {
                            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('cognitiveService', '2025-04-01-preview').key1)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('cognitiveService', '2025-04-01-preview').key2)), createArray()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1200612323329026557"
                            }
                          },
                          "definitions": {
                            "secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "secretToSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret to set."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret to set."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Key Vault to set the ecrets in."
                              }
                            },
                            "secretsToSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretToSetType"
                              },
                              "metadata": {
                                "description": "Required. The secrets to set in the Key Vault."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-07-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secrets": {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(parameters('secretsToSet'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                              "properties": {
                                "value": "[parameters('secretsToSet')[copyIndex()].value]"
                              }
                            }
                          },
                          "outputs": {
                            "secretsSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretSetOutputType"
                              },
                              "metadata": {
                                "description": "The references to the secrets exported to the provided Key Vault."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                "input": {
                                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                  "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "cognitiveService"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the cognitive services account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the cognitive services account."
                      },
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the cognitive services account was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "endpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The service endpoint of the cognitive services account."
                      },
                      "value": "[reference('cognitiveService').endpoint]"
                    },
                    "endpoints": {
                      "$ref": "#/definitions/endpointType",
                      "metadata": {
                        "description": "All endpoints available for the cognitive services account, types depends on the cognitive service kind."
                      },
                      "value": "[reference('cognitiveService').endpoints]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('cognitiveService', '2025-04-01-preview', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('cognitiveService', '2025-04-01-preview', 'full').location]"
                    },
                    "exportedSecrets": {
                      "$ref": "#/definitions/secretsOutputType",
                      "metadata": {
                        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                      },
                      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the congitive services account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('cognitiveService_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    }
                  }
                }
              },
              "dependsOn": [
                "aiServicesPrivateDnsZone",
                "cognitiveServicesPrivateDnsZone",
                "openAiPrivateDnsZone"
              ]
            },
            "aiProject": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-ai-project-{1}-deployment', parameters('name'), parameters('projectName')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('projectName')]"
                  },
                  "desc": {
                    "value": "[parameters('projectDescription')]"
                  },
                  "aiServicesName": {
                    "value": "[reference('cognitiveService').outputs.name.value]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "12248728725671717667"
                    }
                  },
                  "definitions": {
                    "aiProjectOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the AI project."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the AI project."
                          }
                        },
                        "apiEndpoint": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. API endpoint for the AI project."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "Output type representing AI project information."
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the AI Services project."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Required. The location of the Project resource."
                      }
                    },
                    "desc": {
                      "type": "string",
                      "defaultValue": "[parameters('name')]",
                      "metadata": {
                        "description": "Optional. The description of the AI Foundry project to create. Defaults to the project name."
                      }
                    },
                    "aiServicesName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the existing Cognitive Services resource to create the AI Foundry project in."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags to be applied to the resources."
                      },
                      "defaultValue": {}
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Cognitive Services OpenAI Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a001fd3d-188f-4b5d-821b-7da978bf7442')]",
                      "Cognitive Services OpenAI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5e0bd9bd-7b93-4f28-af87-19fc36ad61bd')]",
                      "Azure AI Developer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '64702f94-c441-49e6-a78b-ef80e0188fee')]",
                      "Azure AI User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '53ca6127-db72-4b80-b1b0-d745d6d5456d')]"
                    }
                  },
                  "resources": {
                    "cogServiceReference": {
                      "existing": true,
                      "type": "Microsoft.CognitiveServices/accounts",
                      "apiVersion": "2024-10-01",
                      "name": "[parameters('aiServicesName')]"
                    },
                    "aiProject": {
                      "type": "Microsoft.CognitiveServices/accounts/projects",
                      "apiVersion": "2025-04-01-preview",
                      "name": "[format('{0}/{1}', parameters('aiServicesName'), parameters('name'))]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "description": "[parameters('desc')]",
                        "displayName": "[parameters('name')]"
                      }
                    },
                    "aiProjectRoleAssignement": {
                      "copy": {
                        "name": "aiProjectRoleAssignement",
                        "count": "[length(variables('formattedRoleAssignments'))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('avm.ptn.authorization.resource-role-assignment.{0}', uniqueString(parameters('name'), variables('formattedRoleAssignments')[copyIndex()].roleDefinitionId, variables('formattedRoleAssignments')[copyIndex()].principalId))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "roleDefinitionId": {
                            "value": "[variables('formattedRoleAssignments')[copyIndex()].roleDefinitionId]"
                          },
                          "principalId": {
                            "value": "[variables('formattedRoleAssignments')[copyIndex()].principalId]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('name'))]"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.32.4.45862",
                              "templateHash": "14634305923902101494"
                            },
                            "name": "Resource-scoped role assignment",
                            "description": "This module deploys a Role Assignment for a specific resource."
                          },
                          "parameters": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The scope for the role assignment, fully qualified resourceId."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[guid(parameters('resourceId'), parameters('principalId'), if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))))]",
                              "metadata": {
                                "description": "Optional. The unique guid name for the role assignment."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The role definition ID for the role assignment."
                              }
                            },
                            "roleName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name for the role, used for logging."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of role assignment."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "parameters": {
                                "scope": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "roleDefinitionId": {
                                  "type": "string"
                                },
                                "principalId": {
                                  "type": "string"
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User",
                                    ""
                                  ],
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Authorization/roleAssignments",
                                  "apiVersion": "2022-04-01",
                                  "scope": "[[parameters('scope')]",
                                  "name": "[[parameters('name')]",
                                  "properties": {
                                    "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                    "principalId": "[[parameters('principalId')]",
                                    "principalType": "[[parameters('principalType')]",
                                    "description": "[[parameters('description')]"
                                  }
                                }
                              ],
                              "outputs": {
                                "roleAssignmentId": {
                                  "type": "string",
                                  "value": "[[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.ptn.authorization-resourceroleassignment.{0}.{1}', replace('0.1.2', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[variables('$fxv#0')]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId')))]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  },
                                  "description": {
                                    "value": "[parameters('description')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[parameters('name')]"
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name for the role, used for logging."
                              },
                              "value": "[parameters('roleName')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))), '2023-07-01').outputs.roleAssignmentId.value]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "aiProject"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Name of the AI Foundry project."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Resource ID of the AI Foundry project."
                      },
                      "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('aiServicesName'), parameters('name'))]"
                    },
                    "apiEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "API endpoint for the AI Foundry project."
                      },
                      "value": "[reference('aiProject').endpoints['AI Foundry API']]"
                    }
                  }
                }
              },
              "dependsOn": [
                "cognitiveService"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the resources were deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cognitive Services resource."
              },
              "value": "[reference('cognitiveService').outputs.name.value]"
            },
            "resourceId": {
              "type": "securestring",
              "metadata": {
                "description": "Resource ID of the Cognitive Services resource."
              },
              "value": "[reference('cognitiveService').outputs.resourceId.value]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Principal ID of the system assigned managed identity for the Cognitive Services resource. This is only available if the resource has a system assigned managed identity."
              },
              "value": "[tryGet(tryGet(reference('cognitiveService').outputs, 'systemAssignedMIPrincipalId'), 'value')]"
            },
            "endpoint": {
              "type": "string",
              "metadata": {
                "description": "The endpoint of the Cognitive Services resource."
              },
              "value": "[reference('cognitiveService').outputs.endpoint.value]"
            },
            "project": {
              "$ref": "#/definitions/aiProjectOutputType",
              "metadata": {
                "description": "AI Foundry Project information."
              },
              "value": {
                "name": "[take(format('{0}-ai-project-{1}-deployment', parameters('name'), parameters('projectName')), 64)]",
                "resourceId": "[reference('aiProject').outputs.resourceId.value]",
                "apiEndpoint": "[reference('aiProject').outputs.apiEndpoint.value]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "appIdentity",
        "logAnalyticsWorkspace",
        "network"
      ]
    },
    "storageAccount": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('storage-account-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('st{0}', variables('resourcesName')), 24)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "skuName": "[if(parameters('enableRedundancy'), createObject('value', 'Standard_GZRS'), createObject('value', 'Standard_GRS'))]",
          "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference('logAnalyticsWorkspace').outputs.resourceId.value), createObject('value', ''))]",
          "privateNetworking": "[if(parameters('enablePrivateNetworking'), createObject('value', createObject('virtualNetworkResourceId', reference('network').outputs.vnetResourceId.value, 'subnetResourceId', reference('network').outputs.subnetPrivateEndpointsResourceId.value)), createObject('value', null()))]",
          "containers": {
            "value": [
              {
                "name": "[variables('appStorageContainerName')]",
                "properties": {
                  "publicAccess": "None"
                }
              }
            ]
          },
          "roleAssignments": {
            "value": [
              {
                "principalId": "[reference('appIdentity').outputs.principalId.value]",
                "principalType": "ServicePrincipal",
                "roleDefinitionIdOrName": "Storage Blob Data Contributor"
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7255469486907950736"
            }
          },
          "definitions": {
            "storageAccountPrivateNetworkingType": {
              "type": "object",
              "properties": {
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the virtual network."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the subnet to establish the Private Endpoint(s)."
                  }
                },
                "filePrivateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing \"file\" Private DNS Zone Resource to link to the virtual network. If not provided, a new \"file\" Private DNS Zone(s) will be created."
                  }
                },
                "blobPrivateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing \"blob\" Private DNS Zone Resource to link to the virtual network. If not provided, a new \"blob\" Private DNS Zone(s) will be created."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "Values to establish private networking for resources that support createing private endpoints."
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Storage Account."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for all the Azure resources."
              }
            },
            "skuName": {
              "type": "string",
              "defaultValue": "Standard_GRS",
              "allowedValues": [
                "Standard_LRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_ZRS",
                "Premium_LRS",
                "Premium_ZRS",
                "Standard_GZRS",
                "Standard_RAGZRS"
              ],
              "metadata": {
                "description": "Optional. Storage Account Sku Name. Defaults to Standard_GRS."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Tags to be applied to the resources."
              },
              "defaultValue": {}
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource ID of the Log Analytics workspace to use for diagnostic settings."
              }
            },
            "privateNetworking": {
              "$ref": "#/definitions/storageAccountPrivateNetworkingType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Values to establish private networking for the Storage Account."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "containers": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. List of the blob storage containers to create in the Storage Account."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "resources": {
            "blobPrivateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'blobPrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-blob-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.blob.{0}', environment().suffixes.storage)]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "filePrivateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'filePrivateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-file-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('privatelink.file.{0}', environment().suffixes.storage)]"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "storageAccount": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-sa-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "kind": {
                    "value": "StorageV2"
                  },
                  "skuName": {
                    "value": "[parameters('skuName')]"
                  },
                  "accessTier": {
                    "value": "Hot"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "publicNetworkAccess": "[if(not(equals(parameters('privateNetworking'), null())), createObject('value', 'Disabled'), createObject('value', 'Enabled'))]",
                  "allowBlobPublicAccess": {
                    "value": false
                  },
                  "allowSharedKeyAccess": {
                    "value": false
                  },
                  "allowCrossTenantReplication": {
                    "value": false
                  },
                  "minimumTlsVersion": {
                    "value": "TLS1_2"
                  },
                  "requireInfrastructureEncryption": {
                    "value": false
                  },
                  "keyType": {
                    "value": "Service"
                  },
                  "enableHierarchicalNamespace": {
                    "value": false
                  },
                  "enableNfsV3": {
                    "value": false
                  },
                  "largeFileSharesState": {
                    "value": "Disabled"
                  },
                  "networkAcls": {
                    "value": {
                      "defaultAction": "[if(not(equals(parameters('privateNetworking'), null())), 'Deny', 'Allow')]",
                      "bypass": "AzureServices"
                    }
                  },
                  "supportsHttpsTrafficOnly": {
                    "value": true
                  },
                  "diagnosticSettings": "[if(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), createObject('value', createArray(createObject('workspaceResourceId', parameters('logAnalyticsWorkspaceResourceId')))), createObject('value', createArray()))]",
                  "privateEndpoints": "[if(not(equals(parameters('privateNetworking'), null())), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'blobPrivateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('blobPrivateDnsZone', '2022-09-01').resourceId, ''), tryGet(parameters('privateNetworking'), 'blobPrivateDnsZoneResourceId')), '')))), 'service', 'blob', 'subnetResourceId', coalesce(tryGet(parameters('privateNetworking'), 'subnetResourceId'), '')), createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'filePrivateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('filePrivateDnsZone', '2022-09-01').resourceId, ''), tryGet(parameters('privateNetworking'), 'filePrivateDnsZoneResourceId')), '')))), 'service', 'file', 'subnetResourceId', coalesce(tryGet(parameters('privateNetworking'), 'subnetResourceId'), '')))), createObject('value', createArray()))]",
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "blobServices": {
                    "value": {
                      "containers": "[coalesce(parameters('containers'), createArray())]",
                      "corsRules": [],
                      "containerDeleteRetentionPolicyEnabled": true,
                      "containerDeleteRetentionPolicyDays": 7,
                      "deleteRetentionPolicyEnabled": true,
                      "deleteRetentionPolicyDays": 6,
                      "diagnosticSettings": "[if(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), createArray(createObject('workspaceResourceId', parameters('logAnalyticsWorkspaceResourceId'))), createArray())]"
                    }
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "11337232077129027386"
                    },
                    "name": "Storage Accounts",
                    "description": "This module deploys a Storage Account."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group Id for the private endpoint Group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "FQDN that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses of the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "networkAclsType": {
                      "type": "object",
                      "properties": {
                        "resourceAccessRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "tenantId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of the tenant in which the resource resides in."
                                }
                              },
                              "resourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                          }
                        },
                        "bypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "AzureServices, Logging",
                            "AzureServices, Logging, Metrics",
                            "AzureServices, Metrics",
                            "Logging",
                            "Logging, Metrics",
                            "Metrics",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the virtual network rules."
                          }
                        },
                        "ipRules": {
                          "type": "array",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Sets the IP ACL rules."
                          }
                        },
                        "defaultAction": {
                          "type": "string",
                          "allowedValues": [
                            "Allow",
                            "Deny"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "secretsExportConfigurationType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                          }
                        },
                        "accessKey1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The accessKey1 secret name to create."
                          }
                        },
                        "connectionString1Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The connectionString1 secret name to create."
                          }
                        },
                        "accessKey2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The accessKey2 secret name to create."
                          }
                        },
                        "connectionString2Name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The connectionString2 secret name to create."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "localUserType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the local user used for SFTP Authentication."
                          }
                        },
                        "hasSharedKey": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                          }
                        },
                        "hasSshKey": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                          }
                        },
                        "hasSshPassword": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                          }
                        },
                        "homeDirectory": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The local user home directory."
                          }
                        },
                        "permissionScopes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/permissionScopeType"
                          },
                          "metadata": {
                            "description": "Required. The permission scopes of the local user."
                          }
                        },
                        "sshAuthorizedKeys": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sshAuthorizedKeyType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The local user SSH authorized keys for SFTP."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "_1.secretSetOutputType": {
                      "type": "object",
                      "properties": {
                        "secretResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resourceId of the exported secret."
                          }
                        },
                        "secretUri": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI of the exported secret."
                          }
                        },
                        "secretUriWithVersion": {
                          "type": "string",
                          "metadata": {
                            "description": "The secret URI with version of the exported secret."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "customerManagedKeyWithAutoRotateType": {
                      "type": "object",
                      "properties": {
                        "keyVaultResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                          }
                        },
                        "keyName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the customer managed key to use for encryption."
                          }
                        },
                        "keyVersion": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                          }
                        },
                        "autoRotationEnabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                          }
                        },
                        "userAssignedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "notes": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the notes of the lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "permissionScopeType": {
                      "type": "object",
                      "properties": {
                        "permissions": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                          }
                        },
                        "resourceName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service used by the local user, e.g. blob, file."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "local-user/main.bicep"
                        }
                      }
                    },
                    "privateEndpointMultiServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the private endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS zone group to configure for the private endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the private endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "secretsOutputType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "$ref": "#/definitions/_1.secretSetOutputType",
                        "metadata": {
                          "description": "An exported secret's references."
                        }
                      },
                      "metadata": {
                        "description": "A map of the exported secrets",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                        }
                      }
                    },
                    "sshAuthorizedKeyType": {
                      "type": "object",
                      "properties": {
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Description used to store the function/usage of the key."
                          }
                        },
                        "key": {
                          "type": "securestring",
                          "metadata": {
                            "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "local-user/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "maxLength": 24,
                      "metadata": {
                        "description": "Required. Name of the Storage Account. Must be lower-case."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all resources."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "kind": {
                      "type": "string",
                      "defaultValue": "StorageV2",
                      "allowedValues": [
                        "Storage",
                        "StorageV2",
                        "BlobStorage",
                        "FileStorage",
                        "BlockBlobStorage"
                      ],
                      "metadata": {
                        "description": "Optional. Type of Storage Account to create."
                      }
                    },
                    "skuName": {
                      "type": "string",
                      "defaultValue": "Standard_GRS",
                      "allowedValues": [
                        "Standard_LRS",
                        "Standard_ZRS",
                        "Standard_GRS",
                        "Standard_GZRS",
                        "Standard_RAGRS",
                        "Standard_RAGZRS",
                        "StandardV2_LRS",
                        "StandardV2_ZRS",
                        "StandardV2_GRS",
                        "StandardV2_GZRS",
                        "Premium_LRS",
                        "Premium_ZRS",
                        "PremiumV2_LRS",
                        "PremiumV2_ZRS"
                      ],
                      "metadata": {
                        "description": "Optional. Storage Account Sku Name - note: certain V2 SKUs require the use of: kind = FileStorage."
                      }
                    },
                    "accessTier": {
                      "type": "string",
                      "defaultValue": "Hot",
                      "allowedValues": [
                        "Premium",
                        "Hot",
                        "Cool",
                        "Cold"
                      ],
                      "metadata": {
                        "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
                      }
                    },
                    "largeFileSharesState": {
                      "type": "string",
                      "defaultValue": "Disabled",
                      "allowedValues": [
                        "Disabled",
                        "Enabled"
                      ],
                      "metadata": {
                        "description": "Optional. Allow large file shares if set to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
                      }
                    },
                    "azureFilesIdentityBasedAuthentication": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/properties/properties/azureFilesIdentityBasedAuthentication"
                        },
                        "description": "Optional. Provides the identity based authentication settings for Azure Files."
                      },
                      "nullable": true
                    },
                    "defaultToOAuthAuthentication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
                      }
                    },
                    "allowSharedKeyAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointMultiServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                      }
                    },
                    "managementPolicyRules": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The Storage Account ManagementPolicies Rules."
                      }
                    },
                    "networkAcls": {
                      "$ref": "#/definitions/networkAclsType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
                      }
                    },
                    "requireInfrastructureEncryption": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                      }
                    },
                    "allowCrossTenantReplication": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Allow or disallow cross AAD tenant object replication."
                      }
                    },
                    "customDomainName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
                      }
                    },
                    "customDomainUseSubDomainName": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
                      }
                    },
                    "dnsEndpointType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "AzureDnsZone",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
                      }
                    },
                    "blobServices": {
                      "type": "object",
                      "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
                      "metadata": {
                        "description": "Optional. Blob service and containers to deploy."
                      }
                    },
                    "fileServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. File service and shares to deploy."
                      }
                    },
                    "queueServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Queue service and queues to create."
                      }
                    },
                    "tableServices": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Table service and tables to create."
                      }
                    },
                    "allowBlobPublicAccess": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "TLS1_2",
                      "allowedValues": [
                        "TLS1_2"
                      ],
                      "metadata": {
                        "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
                      }
                    },
                    "enableHierarchicalNamespace": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
                      }
                    },
                    "enableSftp": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "localUsers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/localUserType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Local users to deploy for SFTP authentication."
                      }
                    },
                    "isLocalUserEnabled": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables local users feature, if set to true."
                      }
                    },
                    "enableNfsV3": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings of the service."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Storage/storageAccounts@2024-01-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "allowedCopyScope": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "AAD",
                        "PrivateLink"
                      ],
                      "metadata": {
                        "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
                      }
                    },
                    "publicNetworkAccess": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Enabled",
                        "Disabled"
                      ],
                      "metadata": {
                        "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                      }
                    },
                    "supportsHttpsTrafficOnly": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                      }
                    },
                    "customerManagedKey": {
                      "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The customer managed key definition."
                      }
                    },
                    "sasExpirationPeriod": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
                      }
                    },
                    "sasExpirationAction": {
                      "type": "string",
                      "defaultValue": "Log",
                      "allowedValues": [
                        "Block",
                        "Log"
                      ],
                      "metadata": {
                        "description": "Optional. The SAS expiration action. Allowed values are Block and Log."
                      }
                    },
                    "keyType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Account",
                        "Service"
                      ],
                      "metadata": {
                        "description": "Optional. The keyType to use with Queue & Table services."
                      }
                    },
                    "secretsExportConfiguration": {
                      "$ref": "#/definitions/secretsExportConfigurationType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                      "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
                      "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "cMKKeyVault::cMKKey": {
                      "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults/keys",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                    },
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.25.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "cMKKeyVault": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2024-11-01",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                    },
                    "cMKUserAssignedIdentity": {
                      "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                      "existing": true,
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                      "apiVersion": "2024-11-30",
                      "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                      "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                    },
                    "storageAccount": {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2024-01-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "kind": "[parameters('kind')]",
                      "sku": {
                        "name": "[parameters('skuName')]"
                      },
                      "identity": "[variables('identity')]",
                      "tags": "[parameters('tags')]",
                      "properties": "[shallowMerge(createArray(createObject('allowSharedKeyAccess', parameters('allowSharedKeyAccess'), 'defaultToOAuthAuthentication', parameters('defaultToOAuthAuthentication'), 'allowCrossTenantReplication', parameters('allowCrossTenantReplication'), 'allowedCopyScope', parameters('allowedCopyScope'), 'customDomain', createObject('name', parameters('customDomainName'), 'useSubDomainName', parameters('customDomainUseSubDomainName')), 'dnsEndpointType', parameters('dnsEndpointType'), 'isLocalUserEnabled', parameters('isLocalUserEnabled'), 'encryption', union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject())), 'accessTier', if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null()), 'sasPolicy', if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', parameters('sasExpirationAction'), 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null()), 'supportsHttpsTrafficOnly', parameters('supportsHttpsTrafficOnly'), 'isSftpEnabled', parameters('enableSftp'), 'isNfsV3Enabled', if(parameters('enableNfsV3'), parameters('enableNfsV3'), ''), 'largeFileSharesState', if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null()), 'minimumTlsVersion', parameters('minimumTlsVersion'), 'networkAcls', if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny')), 'allowBlobPublicAccess', parameters('allowBlobPublicAccess'), 'publicNetworkAccess', if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))), if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), createObject('azureFilesIdentityBasedAuthentication', parameters('azureFilesIdentityBasedAuthentication')), createObject()), if(not(equals(parameters('enableHierarchicalNamespace'), null())), createObject('isHnsEnabled', parameters('enableHierarchicalNamespace')), createObject())))]",
                      "dependsOn": [
                        "cMKKeyVault",
                        "cMKKeyVault::cMKKey"
                      ]
                    },
                    "storageAccount_diagnosticSettings": {
                      "copy": {
                        "name": "storageAccount_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[coalesce(tryGet(parameters('lock'), 'notes'), if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.'))]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_roleAssignments": {
                      "copy": {
                        "name": "storageAccount_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_privateEndpoints": {
                      "copy": {
                        "name": "storageAccount_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sa-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.34.44.8038",
                              "templateHash": "12389807800450456797"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.11.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2024-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.34.44.8038",
                                      "templateHash": "13997305779829540948"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2024-05-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2024-05-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2024-05-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_managementPolicies": {
                      "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "rules": {
                            "value": "[parameters('managementPolicyRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "15460042769205098170"
                            },
                            "name": "Storage Account Management Policies",
                            "description": "This module deploys a Storage Account Management Policy."
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "rules": {
                              "type": "array",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/managementPolicies@2024-01-01#properties/properties/properties/policy/properties/rules"
                                },
                                "description": "Required. The Storage Account ManagementPolicies Rules."
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                              "properties": {
                                "policy": {
                                  "rules": "[parameters('rules')]"
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed management policy."
                              },
                              "value": "default"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed management policy."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount",
                        "storageAccount_blobServices"
                      ]
                    },
                    "storageAccount_localUsers": {
                      "copy": {
                        "name": "storageAccount_localUsers",
                        "count": "[length(coalesce(parameters('localUsers'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].name]"
                          },
                          "hasSshKey": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshKey]"
                          },
                          "hasSshPassword": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshPassword]"
                          },
                          "permissionScopes": {
                            "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].permissionScopes]"
                          },
                          "hasSharedKey": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'hasSharedKey')]"
                          },
                          "homeDirectory": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'homeDirectory')]"
                          },
                          "sshAuthorizedKeys": {
                            "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'sshAuthorizedKeys')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "9887081627902627152"
                            },
                            "name": "Storage Account Local Users",
                            "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication."
                          },
                          "definitions": {
                            "sshAuthorizedKeyType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Description used to store the function/usage of the key."
                                  }
                                },
                                "key": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "permissionScopeType": {
                              "type": "object",
                              "properties": {
                                "permissions": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                  }
                                },
                                "resourceName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service used by the local user, e.g. blob, file."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the local user used for SFTP Authentication."
                              }
                            },
                            "hasSharedKey": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                              }
                            },
                            "hasSshKey": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                              }
                            },
                            "hasSshPassword": {
                              "type": "bool",
                              "metadata": {
                                "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                              }
                            },
                            "homeDirectory": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The local user home directory."
                              }
                            },
                            "permissionScopes": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/permissionScopeType"
                              },
                              "metadata": {
                                "description": "Required. The permission scopes of the local user."
                              }
                            },
                            "sshAuthorizedKeys": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sshAuthorizedKeyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The local user SSH authorized keys for SFTP."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "localUsers": {
                              "type": "Microsoft.Storage/storageAccounts/localUsers",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "hasSharedKey": "[parameters('hasSharedKey')]",
                                "hasSshKey": "[parameters('hasSshKey')]",
                                "hasSshPassword": "[parameters('hasSshPassword')]",
                                "homeDirectory": "[parameters('homeDirectory')]",
                                "permissionScopes": "[parameters('permissionScopes')]",
                                "sshAuthorizedKeys": "[parameters('sshAuthorizedKeys')]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed local user."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed local user."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed local user."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_blobServices": {
                      "condition": "[not(empty(parameters('blobServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "containers": {
                            "value": "[tryGet(parameters('blobServices'), 'containers')]"
                          },
                          "automaticSnapshotPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                          },
                          "changeFeedEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                          },
                          "changeFeedRetentionInDays": {
                            "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                          },
                          "containerDeleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                          },
                          "containerDeleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                          },
                          "containerDeleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                          },
                          "defaultServiceVersion": {
                            "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                          },
                          "deleteRetentionPolicyAllowPermanentDelete": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                          },
                          "deleteRetentionPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                          },
                          "deleteRetentionPolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                          },
                          "isVersioningEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                          },
                          "lastAccessTimeTrackingPolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                          },
                          "restorePolicyEnabled": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                          },
                          "restorePolicyDays": {
                            "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "2268741299785261985"
                            },
                            "name": "Storage Account blob Services",
                            "description": "This module deploys a Storage Account Blob Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "automaticSnapshotPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Automatic Snapshot is enabled if set to true."
                              }
                            },
                            "changeFeedEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                              }
                            },
                            "changeFeedRetentionInDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 146000,
                              "metadata": {
                                "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                              }
                            },
                            "containerDeleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                              }
                            },
                            "containerDeleteRetentionPolicyDays": {
                              "type": "int",
                              "nullable": true,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted item should be retained."
                              }
                            },
                            "containerDeleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "defaultServiceVersion": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                              }
                            },
                            "deleteRetentionPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob soft delete."
                              }
                            },
                            "deleteRetentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "minValue": 1,
                              "maxValue": 365,
                              "metadata": {
                                "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                              }
                            },
                            "deleteRetentionPolicyAllowPermanentDelete": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                              }
                            },
                            "isVersioningEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                              }
                            },
                            "lastAccessTimeTrackingPolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                              }
                            },
                            "restorePolicyEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                              }
                            },
                            "restorePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "minValue": 1,
                              "metadata": {
                                "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Blob containers to create."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "enableReferencedModulesTelemetry": false,
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "blobServices": {
                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                                "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                                "containerDeleteRetentionPolicy": {
                                  "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                                },
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                "defaultServiceVersion": "[parameters('defaultServiceVersion')]",
                                "deleteRetentionPolicy": {
                                  "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                                  "days": "[parameters('deleteRetentionPolicyDays')]",
                                  "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                                },
                                "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                                "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                                "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "blobServices_diagnosticSettings": {
                              "copy": {
                                "name": "blobServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "blobServices"
                              ]
                            },
                            "blobServices_container": {
                              "copy": {
                                "name": "blobServices_container",
                                "count": "[length(coalesce(parameters('containers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "blobServiceName": {
                                    "value": "[variables('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                  },
                                  "defaultEncryptionScope": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                                  },
                                  "denyEncryptionScopeOverride": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                                  },
                                  "enableNfsV3AllSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                                  },
                                  "enableNfsV3RootSquash": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                                  },
                                  "immutableStorageWithVersioningEnabled": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "publicAccess": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "immutabilityPolicyProperties": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "16916608328363874370"
                                    },
                                    "name": "Storage Account Blob Containers",
                                    "description": "This module deploys a Storage Account Blob Container."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "blobServiceName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the parent Blob Service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Storage Container to deploy."
                                      }
                                    },
                                    "defaultEncryptionScope": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Default the container to use specified encryption scope for all writes."
                                      }
                                    },
                                    "denyEncryptionScopeOverride": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Block override of encryption scope from the container default."
                                      }
                                    },
                                    "enableNfsV3AllSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 all squash on blob container."
                                      }
                                    },
                                    "enableNfsV3RootSquash": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Enable NFSv3 root squash on blob container."
                                      }
                                    },
                                    "immutableStorageWithVersioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                                      }
                                    },
                                    "immutabilityPolicyName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. Name of the immutable policy."
                                      }
                                    },
                                    "immutabilityPolicyProperties": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Configure immutability policy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/blobServices/containers@2024-01-01#properties/properties/properties/metadata"
                                        },
                                        "description": "Optional. A name-value pair to associate with the container as metadata."
                                      },
                                      "defaultValue": {}
                                    },
                                    "publicAccess": {
                                      "type": "string",
                                      "defaultValue": "None",
                                      "allowedValues": [
                                        "Container",
                                        "Blob",
                                        "None"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                      "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                      "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                      "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::blobServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('blobServiceName'))]"
                                    },
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.storage-blobcontainer.{0}.{1}', replace('0.2.0', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "container": {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                      "properties": {
                                        "defaultEncryptionScope": "[parameters('defaultEncryptionScope')]",
                                        "denyEncryptionScopeOverride": "[parameters('denyEncryptionScopeOverride')]",
                                        "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                        "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                        "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                        "metadata": "[parameters('metadata')]",
                                        "publicAccess": "[parameters('publicAccess')]"
                                      }
                                    },
                                    "container_roleAssignments": {
                                      "copy": {
                                        "name": "container_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "container"
                                      ]
                                    },
                                    "immutabilityPolicy": {
                                      "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-{1}', parameters('name'), parameters('immutabilityPolicyName'))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "containerName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "immutabilityPeriodSinceCreationInDays": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                          },
                                          "allowProtectedAppendWrites": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                          },
                                          "allowProtectedAppendWritesAll": {
                                            "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.36.1.42791",
                                              "templateHash": "8550034166416361637"
                                            },
                                            "name": "Storage Account Blob Container Immutability Policies",
                                            "description": "This module deploys a Storage Account Blob Container Immutability Policy."
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "containerName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "immutabilityPeriodSinceCreationInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "metadata": {
                                                "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                              }
                                            },
                                            "allowProtectedAppendWrites": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                              }
                                            },
                                            "allowProtectedAppendWritesAll": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                              "apiVersion": "2024-01-01",
                                              "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                              "properties": {
                                                "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                                "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed immutability policy."
                                              },
                                              "value": "default"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed immutability policy."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed immutability policy."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "container"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed container."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed container."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed container."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "blobServices"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed blob service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed blob service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_fileServices": {
                      "condition": "[not(empty(parameters('fileServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                          },
                          "protocolSettings": {
                            "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                          },
                          "shareDeleteRetentionPolicy": {
                            "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                          },
                          "shares": {
                            "value": "[tryGet(parameters('fileServices'), 'shares')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "1154226771534321833"
                            },
                            "name": "Storage Account File Share Services",
                            "description": "This module deploys a Storage Account File Share Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the file service."
                              }
                            },
                            "protocolSettings": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/protocolSettings"
                                },
                                "description": "Optional. Protocol settings for file service."
                              },
                              "defaultValue": {}
                            },
                            "shareDeleteRetentionPolicy": {
                              "type": "object",
                              "metadata": {
                                "__bicep_resource_derived_type!": {
                                  "source": "Microsoft.Storage/storageAccounts/fileServices@2024-01-01#properties/properties/properties/shareDeleteRetentionPolicy"
                                },
                                "description": "Optional. The service properties for soft delete."
                              },
                              "defaultValue": {
                                "enabled": true,
                                "days": 7
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "shares": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. File shares to create."
                              }
                            }
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "fileServices": {
                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                "protocolSettings": "[parameters('protocolSettings')]",
                                "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                              }
                            },
                            "fileServices_diagnosticSettings": {
                              "copy": {
                                "name": "fileServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "fileServices"
                              ]
                            },
                            "fileServices_shares": {
                              "copy": {
                                "name": "fileServices_shares",
                                "count": "[length(coalesce(parameters('shares'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "fileServicesName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                                  },
                                  "accessTier": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2024-01-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                                  },
                                  "enabledProtocols": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                                  },
                                  "rootSquash": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                                  },
                                  "shareQuota": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "10293576827034199934"
                                    },
                                    "name": "Storage Account File Shares",
                                    "description": "This module deploys a Storage Account File Share."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "fileServicesName": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the file share to create."
                                      }
                                    },
                                    "accessTier": {
                                      "type": "string",
                                      "defaultValue": "TransactionOptimized",
                                      "allowedValues": [
                                        "Premium",
                                        "Hot",
                                        "Cool",
                                        "TransactionOptimized"
                                      ],
                                      "metadata": {
                                        "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                                      }
                                    },
                                    "shareQuota": {
                                      "type": "int",
                                      "defaultValue": 5120,
                                      "metadata": {
                                        "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                                      }
                                    },
                                    "enabledProtocols": {
                                      "type": "string",
                                      "defaultValue": "SMB",
                                      "allowedValues": [
                                        "NFS",
                                        "SMB"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                      }
                                    },
                                    "rootSquash": {
                                      "type": "string",
                                      "defaultValue": "NoRootSquash",
                                      "allowedValues": [
                                        "AllSquash",
                                        "NoRootSquash",
                                        "RootSquash"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                      "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                      "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::fileService": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]"
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "fileShare": {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                      "properties": {
                                        "accessTier": "[parameters('accessTier')]",
                                        "shareQuota": "[parameters('shareQuota')]",
                                        "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                        "enabledProtocols": "[parameters('enabledProtocols')]"
                                      }
                                    },
                                    "fileShare_roleAssignments": {
                                      "copy": {
                                        "name": "fileShare_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "scope": {
                                            "value": "[replace(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), '/shares/', '/fileshares/')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]"
                                          },
                                          "roleDefinitionId": {
                                            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                                          },
                                          "principalId": {
                                            "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
                                          },
                                          "principalType": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                          },
                                          "condition": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
                                          },
                                          "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
                                          "delegatedManagedIdentityResourceId": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                          },
                                          "description": {
                                            "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "parameters": {
                                            "scope": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The scope to deploy the role assignment to."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the role assignment."
                                              }
                                            },
                                            "roleDefinitionId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The role definition Id to assign."
                                              }
                                            },
                                            "principalId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                              }
                                            },
                                            "principalType": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Device",
                                                "ForeignGroup",
                                                "Group",
                                                "ServicePrincipal",
                                                "User",
                                                ""
                                              ],
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The principal type of the assigned principal ID."
                                              }
                                            },
                                            "description": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The description of the role assignment."
                                              }
                                            },
                                            "condition": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                              }
                                            },
                                            "conditionVersion": {
                                              "type": "string",
                                              "allowedValues": [
                                                "2.0"
                                              ],
                                              "defaultValue": "2.0",
                                              "metadata": {
                                                "description": "Optional. Version of the condition."
                                              }
                                            },
                                            "delegatedManagedIdentityResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The Resource Id of the delegated managed identity resource."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[parameters('scope')]",
                                              "name": "[parameters('name')]",
                                              "properties": {
                                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                "principalId": "[parameters('principalId')]",
                                                "description": "[parameters('description')]",
                                                "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                              }
                                            }
                                          ]
                                        }
                                      },
                                      "dependsOn": [
                                        "fileShare"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "fileServices",
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_queueServices": {
                      "condition": "[not(empty(parameters('queueServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                          },
                          "queues": {
                            "value": "[tryGet(parameters('queueServices'), 'queues')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "12471258242431737986"
                            },
                            "name": "Storage Account Queue Services",
                            "description": "This module deploys a Storage Account Queue Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "queues": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Queues to create."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "queueServices": {
                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                              }
                            },
                            "queueServices_diagnosticSettings": {
                              "copy": {
                                "name": "queueServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "queueServices"
                              ]
                            },
                            "queueServices_queues": {
                              "copy": {
                                "name": "queueServices_queues",
                                "count": "[length(coalesce(parameters('queues'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                  },
                                  "metadata": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "4374879850096827769"
                                    },
                                    "name": "Storage Account Queues",
                                    "description": "This module deploys a Storage Account Queue."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the storage queue to deploy."
                                      }
                                    },
                                    "metadata": {
                                      "type": "object",
                                      "metadata": {
                                        "__bicep_resource_derived_type!": {
                                          "source": "Microsoft.Storage/storageAccounts/queueServices/queues@2024-01-01#properties/properties/properties/metadata"
                                        },
                                        "description": "Optional. A name-value pair that represents queue metadata."
                                      },
                                      "defaultValue": {}
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                      "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                      "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                      "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::queueServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "queue": {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "properties": {
                                        "metadata": "[parameters('metadata')]"
                                      }
                                    },
                                    "queue_roleAssignments": {
                                      "copy": {
                                        "name": "queue_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "queue"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed queue."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed queue."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed queue."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed file share service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed file share service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed file share service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "storageAccount_tableServices": {
                      "condition": "[not(empty(parameters('tableServices')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "storageAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "diagnosticSettings": {
                            "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                          },
                          "tables": {
                            "value": "[tryGet(parameters('tableServices'), 'tables')]"
                          },
                          "corsRules": {
                            "value": "[tryGet(parameters('tableServices'), 'corsRules')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "14024954014872913175"
                            },
                            "name": "Storage Account Table Services",
                            "description": "This module deploys a Storage Account Table Service."
                          },
                          "definitions": {
                            "corsRuleType": {
                              "type": "object",
                              "properties": {
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "allowedValues": [
                                    "CONNECT",
                                    "DELETE",
                                    "GET",
                                    "HEAD",
                                    "MERGE",
                                    "OPTIONS",
                                    "PATCH",
                                    "POST",
                                    "PUT",
                                    "TRACE"
                                  ],
                                  "metadata": {
                                    "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                  }
                                },
                                "exposedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of response headers to expose to CORS clients."
                                  }
                                },
                                "maxAgeInSeconds": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a cors rule."
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "storageAccountName": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "tables": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. tables to create."
                              }
                            },
                            "corsRules": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/corsRuleType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            }
                          },
                          "variables": {
                            "name": "default"
                          },
                          "resources": {
                            "storageAccount": {
                              "existing": true,
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2024-01-01",
                              "name": "[parameters('storageAccountName')]"
                            },
                            "tableServices": {
                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                              "apiVersion": "2024-01-01",
                              "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                              "properties": {
                                "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                              }
                            },
                            "tableServices_diagnosticSettings": {
                              "copy": {
                                "name": "tableServices_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "tableServices"
                              ]
                            },
                            "tableServices_tables": {
                              "copy": {
                                "name": "tableServices_tables",
                                "count": "[length(parameters('tables'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('tables')[copyIndex()].name]"
                                  },
                                  "storageAccountName": {
                                    "value": "[parameters('storageAccountName')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.36.1.42791",
                                      "templateHash": "9958350701479452427"
                                    },
                                    "name": "Storage Account Table",
                                    "description": "This module deploys a Storage Account Table."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the table."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                      "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                      "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                      "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                      "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "storageAccount::tableServices": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                    },
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2024-01-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "table": {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                      "apiVersion": "2024-01-01",
                                      "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "table_roleAssignments": {
                                      "copy": {
                                        "name": "table_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "table"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed table service."
                              },
                              "value": "[variables('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed table service."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed table service."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    },
                    "secretsExport": {
                      "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                      "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                      "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "keyVaultName": {
                            "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                          },
                          "secretsToSet": {
                            "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[0].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString1Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys('storageAccount', '2024-01-01').keys[1].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString2Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage))), createArray()))]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.1.42791",
                              "templateHash": "8001412005028765743"
                            }
                          },
                          "definitions": {
                            "secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            },
                            "secretToSetType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret to set."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret to set."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.6.0"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "keyVaultName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The name of the Key Vault to set the ecrets in."
                              }
                            },
                            "secretsToSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretToSetType"
                              },
                              "metadata": {
                                "description": "Required. The secrets to set in the Key Vault."
                              }
                            }
                          },
                          "resources": {
                            "keyVault": {
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2024-11-01",
                              "name": "[parameters('keyVaultName')]"
                            },
                            "secrets": {
                              "copy": {
                                "name": "secrets",
                                "count": "[length(parameters('secretsToSet'))]"
                              },
                              "type": "Microsoft.KeyVault/vaults/secrets",
                              "apiVersion": "2024-11-01",
                              "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                              "properties": {
                                "value": "[parameters('secretsToSet')[copyIndex()].value]"
                              }
                            }
                          },
                          "outputs": {
                            "secretsSet": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretSetOutputType"
                              },
                              "metadata": {
                                "description": "The references to the secrets exported to the provided Key Vault."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                "input": {
                                  "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                  "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                  "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                }
                              }
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "storageAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the deployed storage account."
                      },
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the deployed storage account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group of the deployed storage account."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "primaryBlobEndpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The primary blob endpoint reference if blob services are deployed."
                      },
                      "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('storageAccount', '2024-01-01', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('storageAccount', '2024-01-01', 'full').location]"
                    },
                    "serviceEndpoints": {
                      "type": "object",
                      "metadata": {
                        "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
                      },
                      "value": "[reference('storageAccount').primaryEndpoints]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the Storage Account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "exportedSecrets": {
                      "$ref": "#/definitions/secretsOutputType",
                      "metadata": {
                        "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                      },
                      "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                    },
                    "primaryAccessKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary access key of the storage account."
                      },
                      "value": "[listKeys('storageAccount', '2024-01-01').keys[0].value]"
                    },
                    "secondaryAccessKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary access key of the storage account."
                      },
                      "value": "[listKeys('storageAccount', '2024-01-01').keys[1].value]"
                    },
                    "primaryConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary connection string of the storage account."
                      },
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[0].value, environment().suffixes.storage)]"
                    },
                    "secondaryConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary connection string of the storage account."
                      },
                      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys('storageAccount', '2024-01-01').keys[1].value, environment().suffixes.storage)]"
                    }
                  }
                }
              },
              "dependsOn": [
                "blobPrivateDnsZone",
                "filePrivateDnsZone"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Storage Account."
              },
              "value": "[reference('storageAccount').outputs.name.value]"
            },
            "resourceId": {
              "type": "securestring",
              "metadata": {
                "description": "Resource ID of the Storage Account."
              },
              "value": "[reference('storageAccount').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "appIdentity",
        "logAnalyticsWorkspace",
        "network"
      ]
    },
    "cosmosDb": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('cosmos-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('cosmos-{0}', variables('resourcesName')), 44)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "dataAccessIdentityPrincipalId": {
            "value": "[reference('appIdentity').outputs.principalId.value]"
          },
          "logAnalyticsWorkspaceResourceId": "[if(parameters('enableMonitoring'), createObject('value', reference('logAnalyticsWorkspace').outputs.resourceId.value), createObject('value', ''))]",
          "zoneRedundant": {
            "value": "[parameters('enableRedundancy')]"
          },
          "secondaryLocation": "[if(and(parameters('enableRedundancy'), not(empty(parameters('secondaryLocation')))), createObject('value', parameters('secondaryLocation')), createObject('value', ''))]",
          "privateNetworking": "[if(parameters('enablePrivateNetworking'), createObject('value', createObject('virtualNetworkResourceId', reference('network').outputs.vnetResourceId.value, 'subnetResourceId', reference('network').outputs.subnetPrivateEndpointsResourceId.value)), createObject('value', null()))]",
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "970388626825967760"
            }
          },
          "definitions": {
            "resourcePrivateNetworkingType": {
              "type": "object",
              "properties": {
                "virtualNetworkResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the virtual network."
                  }
                },
                "subnetResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The Resource ID of the subnet to establish the Private Endpoint(s)."
                  }
                },
                "privateDnsZoneResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource ID of an existing Private DNS Zone Resource to link to the virtual network. If not provided, a new Private DNS Zone(s) will be created."
                  }
                }
              },
              "metadata": {
                "description": "Values to establish private networking for resources that support createing private endpoints.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "customTypes.bicep"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Cosmos DB Account."
              }
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "Required. Specifies the location for all the Azure resources."
              }
            },
            "tags": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                },
                "description": "Optional. Tags to be applied to the resources."
              },
              "defaultValue": {}
            },
            "dataAccessIdentityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Required. Managed Identity princpial to assign data plane roles for the Cosmos DB Account."
              }
            },
            "logAnalyticsWorkspaceResourceId": {
              "type": "securestring",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of an existing Log Analytics workspace to associate with AI Foundry for monitoring."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "metadata": {
                "description": "Required. Indicates whether the single-region account is zone redundant. This property is ignored for multi-region accounts."
              }
            },
            "secondaryLocation": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The secondary location for the Cosmos DB Account for failover and multiple writes."
              }
            },
            "privateNetworking": {
              "$ref": "#/definitions/resourcePrivateNetworkingType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Values to establish private networking for the Cosmos DB resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "databaseName": "cmsadb",
            "batchContainerName": "cmsabatch",
            "fileContainerName": "cmsafile",
            "logContainerName": "cmsalog"
          },
          "resources": {
            "sqlContributorRoleDefinition": {
              "existing": true,
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
              "apiVersion": "2024-11-15",
              "name": "[format('{0}/00000000-0000-0000-0000-000000000002', parameters('name'))]"
            },
            "privateDnsZone": {
              "condition": "[and(not(equals(parameters('privateNetworking'), null())), empty(tryGet(parameters('privateNetworking'), 'privateDnsZoneResourceId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-documents-pdns-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "privatelink.documents.azure.com"
                  },
                  "virtualNetworkResourceId": {
                    "value": "[coalesce(tryGet(parameters('privateNetworking'), 'virtualNetworkResourceId'), '')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "3193390016268446606"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Private DNS zone name."
                      }
                    },
                    "virtualNetworkResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the virtual network to link."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.Resources/resourceGroups@2025-04-01#properties/tags"
                        },
                        "description": "Optional. Tags of the resource."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "privateDnsZone": {
                      "type": "Microsoft.Network/privateDnsZones",
                      "apiVersion": "2024-06-01",
                      "name": "[parameters('name')]",
                      "location": "global",
                      "tags": "[parameters('tags')]"
                    },
                    "virtualNetworkLink": {
                      "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
                      "apiVersion": "2024-06-01",
                      "name": "[format('{0}/{1}', parameters('name'), format('{0}-vnetlink', parameters('name')))]",
                      "location": "global",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                          "id": "[parameters('virtualNetworkResourceId')]"
                        }
                      },
                      "dependsOn": [
                        "privateDnsZone"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private DNS zone was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private DNS zone."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The resource ID of the private DNS zone."
                      },
                      "value": "[resourceId('Microsoft.Network/privateDnsZones', parameters('name'))]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateDnsZone', '2024-06-01', 'full').location]"
                    }
                  }
                }
              }
            },
            "cosmosAccount": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[take(format('{0}-account-deployment', parameters('name')), 64)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "enableAnalyticalStorage": {
                    "value": true
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "minimumTlsVersion": {
                    "value": "Tls12"
                  },
                  "defaultConsistencyLevel": {
                    "value": "Session"
                  },
                  "networkRestrictions": {
                    "value": {
                      "networkAclBypass": "AzureServices",
                      "publicNetworkAccess": "[if(not(equals(parameters('privateNetworking'), null())), 'Disabled', 'Enabled')]",
                      "ipRules": [],
                      "virtualNetworkRules": []
                    }
                  },
                  "zoneRedundant": {
                    "value": "[parameters('zoneRedundant')]"
                  },
                  "automaticFailover": {
                    "value": "[not(empty(parameters('secondaryLocation')))]"
                  },
                  "failoverLocations": "[if(not(empty(parameters('secondaryLocation'))), createObject('value', createArray(createObject('failoverPriority', 0, 'isZoneRedundant', parameters('zoneRedundant'), 'locationName', parameters('location')), createObject('failoverPriority', 0, 'isZoneRedundant', parameters('zoneRedundant'), 'locationName', parameters('secondaryLocation')))), createObject('value', createArray()))]",
                  "enableMultipleWriteLocations": {
                    "value": "[not(empty(parameters('secondaryLocation')))]"
                  },
                  "backupPolicyType": "[if(not(empty(parameters('secondaryLocation'))), createObject('value', 'Periodic'), createObject('value', 'Continuous'))]",
                  "backupStorageRedundancy": "[if(parameters('zoneRedundant'), createObject('value', 'Zone'), createObject('value', 'Local'))]",
                  "disableKeyBasedMetadataWriteAccess": {
                    "value": true
                  },
                  "disableLocalAuthentication": {
                    "value": "[not(equals(parameters('privateNetworking'), null()))]"
                  },
                  "diagnosticSettings": "[if(not(empty(parameters('logAnalyticsWorkspaceResourceId'))), createObject('value', createArray(createObject('workspaceResourceId', parameters('logAnalyticsWorkspaceResourceId')))), createObject('value', createArray()))]",
                  "privateEndpoints": "[if(not(equals(parameters('privateNetworking'), null())), createObject('value', createArray(createObject('privateDnsZoneGroup', createObject('privateDnsZoneGroupConfigs', createArray(createObject('privateDnsZoneResourceId', if(not(equals(parameters('privateNetworking'), null())), if(empty(tryGet(parameters('privateNetworking'), 'privateDnsZoneResourceId')), coalesce(listOutputsWithSecureValues('privateDnsZone', '2022-09-01').resourceId, ''), coalesce(tryGet(parameters('privateNetworking'), 'privateDnsZoneResourceId'), '')), '')))), 'service', 'Sql', 'subnetResourceId', coalesce(tryGet(parameters('privateNetworking'), 'subnetResourceId'), '')))), createObject('value', createArray()))]",
                  "sqlDatabases": {
                    "value": [
                      {
                        "containers": [
                          {
                            "indexingPolicy": {
                              "automatic": true
                            },
                            "name": "[variables('batchContainerName')]",
                            "paths": [
                              "/batch_id"
                            ]
                          },
                          {
                            "indexingPolicy": {
                              "automatic": true
                            },
                            "name": "[variables('fileContainerName')]",
                            "paths": [
                              "/file_id"
                            ]
                          },
                          {
                            "indexingPolicy": {
                              "automatic": true
                            },
                            "name": "[variables('logContainerName')]",
                            "paths": [
                              "/log_id"
                            ]
                          }
                        ],
                        "name": "[variables('databaseName')]"
                      }
                    ]
                  },
                  "dataPlaneRoleAssignments": {
                    "value": [
                      {
                        "principalId": "[parameters('dataAccessIdentityPrincipalId')]",
                        "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('name')), '/')[0], split(format('{0}/00000000-0000-0000-0000-000000000002', parameters('name')), '/')[1])]"
                      }
                    ]
                  },
                  "roleAssignments": {
                    "value": "[parameters('roleAssignments')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "8020152823352819436"
                    },
                    "name": "Azure Cosmos DB account",
                    "description": "This module deploys an Azure Cosmos DB account. The API used for the account is determined by the child resources that are deployed."
                  },
                  "definitions": {
                    "privateEndpointOutputType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "The name of the private endpoint."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "The resource ID of the private endpoint."
                          }
                        },
                        "groupId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "The group ID for the private endpoint group."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "fqdn": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "fully-qualified domain name (FQDN) that resolves to private endpoint IP address."
                                }
                              },
                              "ipAddresses": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "A list of private IP addresses for the private endpoint."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "The custom DNS configurations of the private endpoint."
                          }
                        },
                        "networkInterfaceResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "The IDs of the network interfaces associated with the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the private endpoint output."
                      }
                    },
                    "failoverLocationType": {
                      "type": "object",
                      "properties": {
                        "failoverPriority": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists."
                          }
                        },
                        "isZoneRedundant": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Flag to indicate whether or not this region is an AvailabilityZone region. Defaults to true."
                          }
                        },
                        "locationName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the region."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the failover location."
                      }
                    },
                    "dataPlaneRoleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The unique name of the role assignment."
                          }
                        },
                        "roleDefinitionId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier of the Azure Cosmos DB for NoSQL native role-based access control definition."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier for the associated Microsoft Entra ID principal to which access is being granted through this role-based access control assignment. The tenant ID for the principal is inferred using the tenant associated with the subscription."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL native role-based access control assignment."
                      }
                    },
                    "dataPlaneRoleDefinitionType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The unique identifier of the role-based access control definition."
                          }
                        },
                        "roleName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. A user-friendly name for the role-based access control definition. This must be unique within the database account."
                          }
                        },
                        "dataActions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of data actions that are allowed."
                          }
                        },
                        "assignableScopes": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A set of fully-qualified scopes at or below which role-based access control assignments may be created using this definition. This setting allows application of this definition on the entire account or any underlying resource. This setting must have at least one element. Scopes higher than the account level are not enforceable as assignable scopes. Resources referenced in assignable scopes do not need to exist at creation. Defaults to the current account scope."
                          }
                        },
                        "assignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/sqlRoleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. An array of role-based access control assignments to be created for the definition."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL or Table native role-based access control definition."
                      }
                    },
                    "sqlDatabaseType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the database ."
                          }
                        },
                        "throughput": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Request units per second. Will be ignored if `autoscaleSettingsMaxThroughput` is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level. Defaults to 400."
                          }
                        },
                        "autoscaleSettingsMaxThroughput": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the autoscale settings and represents maximum throughput the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If the value is not set, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                          }
                        },
                        "containers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of the container."
                                }
                              },
                              "paths": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "minLength": 1,
                                "maxLength": 3,
                                "metadata": {
                                  "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                                }
                              },
                              "analyticalStorageTtl": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                                }
                              },
                              "autoscaleSettingsMaxThroughput": {
                                "type": "int",
                                "nullable": true,
                                "maxValue": 1000000,
                                "metadata": {
                                  "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level."
                                }
                              },
                              "conflictResolutionPolicy": {
                                "type": "object",
                                "properties": {
                                  "conflictResolutionPath": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Conditional. The conflict resolution path in the case of LastWriterWins mode. Required if `mode` is set to 'LastWriterWins'."
                                    }
                                  },
                                  "conflictResolutionProcedure": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Conditional. The procedure to resolve conflicts in the case of custom mode. Required if `mode` is set to 'Custom'."
                                    }
                                  },
                                  "mode": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Custom",
                                      "LastWriterWins"
                                    ],
                                    "metadata": {
                                      "description": "Required. Indicates the conflict resolution mode."
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                                }
                              },
                              "defaultTtl": {
                                "type": "int",
                                "nullable": true,
                                "minValue": -1,
                                "maxValue": 2147483647,
                                "metadata": {
                                  "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                                }
                              },
                              "indexingPolicy": {
                                "type": "object",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Indexing policy of the container."
                                }
                              },
                              "kind": {
                                "type": "string",
                                "allowedValues": [
                                  "Hash",
                                  "MultiHash"
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                                }
                              },
                              "version": {
                                "type": "int",
                                "allowedValues": [
                                  1,
                                  2
                                ],
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                                }
                              },
                              "throughput": {
                                "type": "int",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used."
                                }
                              },
                              "uniqueKeyPolicyKeys": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "paths": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. List of paths must be unique for each document in the Azure Cosmos DB service."
                                      }
                                    }
                                  }
                                },
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Set of containers to deploy in the database."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for an Azure Cosmos DB for NoSQL database."
                      }
                    },
                    "networkRestrictionType": {
                      "type": "object",
                      "properties": {
                        "ipRules": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A single IPv4 address or a single IPv4 address range in Classless Inter-Domain Routing (CIDR) format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: `10.0.0.0/8`, `100.64.0.0/10`, `172.16.0.0/12`, `192.168.0.0/16`, since these are not enforceable by the IP address filter. Example of valid inputs: `23.40.210.245` or `23.40.210.0/8`."
                          }
                        },
                        "networkAclBypass": {
                          "type": "string",
                          "allowedValues": [
                            "AzureServices",
                            "None"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the network ACL bypass for Azure services. Default to \"None\"."
                          }
                        },
                        "publicNetworkAccess": {
                          "type": "string",
                          "allowedValues": [
                            "Disabled",
                            "Enabled"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Whether requests from the public network are allowed. Default to \"Disabled\"."
                          }
                        },
                        "virtualNetworkRules": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "subnetResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Resource ID of a subnet."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of virtual network access control list (ACL) rules configured for the account."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the network restriction."
                      }
                    },
                    "_1.privateEndpointCustomDnsConfigType": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointIpConfigurationType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "_1.privateEndpointPrivateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. The name of the private DNS Zone Group config."
                                }
                              },
                              "privateDnsZoneResourceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of the private DNS zone."
                                }
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "diagnosticSettingFullType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the diagnostic setting."
                          }
                        },
                        "logCategoriesAndGroups": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                }
                              },
                              "categoryGroup": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                          }
                        },
                        "metricCategories": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "category": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                }
                              },
                              "enabled": {
                                "type": "bool",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                }
                              }
                            }
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                          }
                        },
                        "logAnalyticsDestinationType": {
                          "type": "string",
                          "allowedValues": [
                            "AzureDiagnostics",
                            "Dedicated"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                          }
                        },
                        "workspaceResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "storageAccountResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "eventHubAuthorizationRuleResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                          }
                        },
                        "eventHubName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                          }
                        },
                        "marketplacePartnerResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a lock.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "managedIdentityAllType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "privateEndpointMultiServiceType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private endpoint."
                          }
                        },
                        "location": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The location to deploy the private endpoint to."
                          }
                        },
                        "privateLinkServiceConnectionName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private link connection to create."
                          }
                        },
                        "service": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                          }
                        },
                        "subnetResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                          }
                        },
                        "resourceGroupResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                          }
                        },
                        "privateDnsZoneGroup": {
                          "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The private DNS zone group to configure for the private endpoint."
                          }
                        },
                        "isManualConnection": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. If Manual Private Link Connection is required."
                          }
                        },
                        "manualConnectionRequestMessage": {
                          "type": "string",
                          "nullable": true,
                          "maxLength": 140,
                          "metadata": {
                            "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                          }
                        },
                        "customDnsConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom DNS configurations."
                          }
                        },
                        "ipConfigurations": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                          }
                        },
                        "applicationSecurityGroupResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                          }
                        },
                        "customNetworkInterfaceName": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The custom name of the network interface attached to the private endpoint."
                          }
                        },
                        "lock": {
                          "$ref": "#/definitions/lockType",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        },
                        "roleAssignments": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/roleAssignmentType"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Array of role assignments to create."
                          }
                        },
                        "tags": {
                          "type": "object",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                          }
                        },
                        "enableTelemetry": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable/Disable usage telemetry for module."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                          }
                        },
                        "roleDefinitionIdOrName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                          }
                        },
                        "principalType": {
                          "type": "string",
                          "allowedValues": [
                            "Device",
                            "ForeignGroup",
                            "Group",
                            "ServicePrincipal",
                            "User"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The principal type of the assigned principal ID."
                          }
                        },
                        "description": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The description of the role assignment."
                          }
                        },
                        "condition": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                          }
                        },
                        "conditionVersion": {
                          "type": "string",
                          "allowedValues": [
                            "2.0"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Version of the condition."
                          }
                        },
                        "delegatedManagedIdentityResourceId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                          }
                        }
                      },
                      "metadata": {
                        "description": "An AVM-aligned type for a role assignment.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                        }
                      }
                    },
                    "sqlRoleAssignmentType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name unique identifier of the SQL Role Assignment."
                          }
                        },
                        "principalId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                          }
                        }
                      },
                      "metadata": {
                        "description": "The type for the SQL Role Assignments.",
                        "__bicep_imported_from!": {
                          "sourceTemplate": "sql-role-definition/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the account."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Defaults to the current resource group scope location. Location for all resources."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.DocumentDB/databaseAccounts@2024-11-15#properties/tags"
                        },
                        "description": "Optional. Tags for the resource."
                      },
                      "nullable": true
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentityAllType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "databaseAccountOfferType": {
                      "type": "string",
                      "defaultValue": "Standard",
                      "allowedValues": [
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. The offer type for the account. Defaults to \"Standard\"."
                      }
                    },
                    "failoverLocations": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/failoverLocationType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The set of locations enabled for the account. Defaults to the location where the account is deployed."
                      }
                    },
                    "zoneRedundant": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the single-region account is zone redundant. Defaults to true. This property is ignored for multi-region accounts."
                      }
                    },
                    "defaultConsistencyLevel": {
                      "type": "string",
                      "defaultValue": "Session",
                      "allowedValues": [
                        "Eventual",
                        "ConsistentPrefix",
                        "Session",
                        "BoundedStaleness",
                        "Strong"
                      ],
                      "metadata": {
                        "description": "Optional. The default consistency level of the account. Defaults to \"Session\"."
                      }
                    },
                    "disableLocalAuthentication": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Opt-out of local authentication and ensure that only Microsoft Entra can be used exclusively for authentication. Defaults to true."
                      }
                    },
                    "enableAnalyticalStorage": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Flag to indicate whether to enable storage analytics. Defaults to false."
                      }
                    },
                    "automaticFailover": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable automatic failover for regions. Defaults to true."
                      }
                    },
                    "enableFreeTier": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Flag to indicate whether \"Free Tier\" is enabled. Defaults to false."
                      }
                    },
                    "enableMultipleWriteLocations": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Enables the account to write in multiple locations. Periodic backup must be used if enabled. Defaults to false."
                      }
                    },
                    "disableKeyBasedMetadataWriteAccess": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Disable write operations on metadata resources (databases, containers, throughput) via account keys. Defaults to true."
                      }
                    },
                    "maxStalenessPrefix": {
                      "type": "int",
                      "defaultValue": 100000,
                      "minValue": 1,
                      "maxValue": 2147483647,
                      "metadata": {
                        "description": "Optional. The maximum stale requests. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 10 to 1000000. Multi Region: 100000 to 1000000. Defaults to 100000."
                      }
                    },
                    "maxIntervalInSeconds": {
                      "type": "int",
                      "defaultValue": 300,
                      "minValue": 5,
                      "maxValue": 86400,
                      "metadata": {
                        "description": "Optional. The maximum lag time in minutes. Required for \"BoundedStaleness\" consistency level. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400. Defaults to 300."
                      }
                    },
                    "serverVersion": {
                      "type": "string",
                      "defaultValue": "4.2",
                      "allowedValues": [
                        "3.2",
                        "3.6",
                        "4.0",
                        "4.2",
                        "5.0",
                        "6.0",
                        "7.0"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the MongoDB server version to use if using Azure Cosmos DB for MongoDB RU. Defaults to \"4.2\"."
                      }
                    },
                    "sqlDatabases": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/sqlDatabaseType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for NoSQL."
                      }
                    },
                    "mongodbDatabases": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for MongoDB RU."
                      }
                    },
                    "gremlinDatabases": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for Apache Gremlin."
                      }
                    },
                    "tables": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration for databases when using Azure Cosmos DB for Table."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "totalThroughputLimit": {
                      "type": "int",
                      "defaultValue": -1,
                      "metadata": {
                        "description": "Optional. The total throughput limit imposed on this account in request units per second (RU/s). Default to unlimited throughput."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/roleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. An array of control plane Azure role-based access control assignments."
                      }
                    },
                    "dataPlaneRoleDefinitions": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/dataPlaneRoleDefinitionType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control definitions. Allows the creations of custom role definitions."
                      }
                    },
                    "dataPlaneRoleAssignments": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/dataPlaneRoleAssignmentType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configurations for Azure Cosmos DB for NoSQL native role-based access control assignments."
                      }
                    },
                    "diagnosticSettings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/diagnosticSettingFullType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The diagnostic settings for the service."
                      }
                    },
                    "capabilitiesToAdd": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "allowedValues": [
                        "EnableCassandra",
                        "EnableTable",
                        "EnableGremlin",
                        "EnableMongo",
                        "DisableRateLimitingResponses",
                        "EnableServerless",
                        "EnableNoSQLVectorSearch",
                        "EnableNoSQLFullTextSearch",
                        "EnableMaterializedViews",
                        "DeleteAllItemsByPartitionKey"
                      ],
                      "metadata": {
                        "description": "Optional. A list of Azure Cosmos DB specific capabilities for the account."
                      }
                    },
                    "backupPolicyType": {
                      "type": "string",
                      "defaultValue": "Continuous",
                      "allowedValues": [
                        "Periodic",
                        "Continuous"
                      ],
                      "metadata": {
                        "description": "Optional. Configures the backup mode. Periodic backup must be used if multiple write locations are used. Defaults to \"Continuous\"."
                      }
                    },
                    "backupPolicyContinuousTier": {
                      "type": "string",
                      "defaultValue": "Continuous30Days",
                      "allowedValues": [
                        "Continuous30Days",
                        "Continuous7Days"
                      ],
                      "metadata": {
                        "description": "Optional. Configuration values to specify the retention period for continuous mode backup. Default to \"Continuous30Days\"."
                      }
                    },
                    "backupIntervalInMinutes": {
                      "type": "int",
                      "defaultValue": 240,
                      "minValue": 60,
                      "maxValue": 1440,
                      "metadata": {
                        "description": "Optional. An integer representing the interval in minutes between two backups. This setting only applies to the periodic backup type. Defaults to 240."
                      }
                    },
                    "backupRetentionIntervalInHours": {
                      "type": "int",
                      "defaultValue": 8,
                      "minValue": 2,
                      "maxValue": 720,
                      "metadata": {
                        "description": "Optional. An integer representing the time (in hours) that each backup is retained. This setting only applies to the periodic backup type. Defaults to 8."
                      }
                    },
                    "backupStorageRedundancy": {
                      "type": "string",
                      "defaultValue": "Local",
                      "allowedValues": [
                        "Geo",
                        "Local",
                        "Zone"
                      ],
                      "metadata": {
                        "description": "Optional. Setting that indicates the type of backup residency. This setting only applies to the periodic backup type. Defaults to \"Local\"."
                      }
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointMultiServiceType"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Configuration details for private endpoints. For security reasons, it is advised to use private endpoints whenever possible."
                      }
                    },
                    "networkRestrictions": {
                      "$ref": "#/definitions/networkRestrictionType",
                      "defaultValue": {
                        "ipRules": [],
                        "virtualNetworkRules": [],
                        "publicNetworkAccess": "Disabled"
                      },
                      "metadata": {
                        "description": "Optional. The network configuration of this module. Defaults to `{ ipRules: [], virtualNetworkRules: [], publicNetworkAccess: 'Disabled' }`."
                      }
                    },
                    "minimumTlsVersion": {
                      "type": "string",
                      "defaultValue": "Tls12",
                      "allowedValues": [
                        "Tls12"
                      ],
                      "metadata": {
                        "description": "Optional. Setting that indicates the minimum allowed TLS version. Azure Cosmos DB for MongoDB RU and Apache Cassandra only work with TLS 1.2 or later. Defaults to \"Tls12\" (TLS 1.2)."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInControlPlaneRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "enableReferencedModulesTelemetry": false,
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInControlPlaneRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Cosmos DB Account Reader Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fbdf93bf-df7d-467e-a4d2-9458aa1360c8')]",
                      "Cosmos DB Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                      "CosmosBackupOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db7b14f2-5adf-42da-9f96-f2ee17bab5cb')]",
                      "CosmosRestoreOperator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5432c526-bc82-444a-b7ba-57c5b0b5b34f')]",
                      "DocumentDB Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '5bd9cd88-fe45-4216-938b-f97437e15450')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-07-01",
                      "name": "[format('46d3xbcp.res.documentdb-databaseaccount.{0}.{1}', replace('0.15.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "databaseAccount": {
                      "type": "Microsoft.DocumentDB/databaseAccounts",
                      "apiVersion": "2024-11-15",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": "[variables('identity')]",
                      "kind": "[if(not(empty(parameters('mongodbDatabases'))), 'MongoDB', 'GlobalDocumentDB')]",
                      "properties": "[shallowMerge(createArray(createObject('databaseAccountOfferType', parameters('databaseAccountOfferType'), 'backupPolicy', shallowMerge(createArray(createObject('type', parameters('backupPolicyType')), if(equals(parameters('backupPolicyType'), 'Continuous'), createObject('continuousModeProperties', createObject('tier', parameters('backupPolicyContinuousTier'))), createObject()), if(equals(parameters('backupPolicyType'), 'Periodic'), createObject('periodicModeProperties', createObject('backupIntervalInMinutes', parameters('backupIntervalInMinutes'), 'backupRetentionIntervalInHours', parameters('backupRetentionIntervalInHours'), 'backupStorageRedundancy', parameters('backupStorageRedundancy'))), createObject()))), 'capabilities', map(coalesce(parameters('capabilitiesToAdd'), createArray()), lambda('capability', createObject('name', lambdaVariables('capability')))), 'minimalTlsVersion', parameters('minimumTlsVersion'), 'capacity', createObject('totalThroughputLimit', parameters('totalThroughputLimit')), 'publicNetworkAccess', coalesce(tryGet(parameters('networkRestrictions'), 'publicNetworkAccess'), 'Disabled')), if(or(or(or(not(empty(parameters('sqlDatabases'))), not(empty(parameters('mongodbDatabases')))), not(empty(parameters('gremlinDatabases')))), not(empty(parameters('tables')))), createObject('consistencyPolicy', shallowMerge(createArray(createObject('defaultConsistencyLevel', parameters('defaultConsistencyLevel')), if(equals(parameters('defaultConsistencyLevel'), 'BoundedStaleness'), createObject('maxStalenessPrefix', parameters('maxStalenessPrefix'), 'maxIntervalInSeconds', parameters('maxIntervalInSeconds')), createObject()))), 'enableMultipleWriteLocations', parameters('enableMultipleWriteLocations'), 'locations', if(not(empty(parameters('failoverLocations'))), map(parameters('failoverLocations'), lambda('failoverLocation', createObject('failoverPriority', lambdaVariables('failoverLocation').failoverPriority, 'locationName', lambdaVariables('failoverLocation').locationName, 'isZoneRedundant', coalesce(tryGet(lambdaVariables('failoverLocation'), 'isZoneRedundant'), true())))), createArray(createObject('failoverPriority', 0, 'locationName', parameters('location'), 'isZoneRedundant', parameters('zoneRedundant')))), 'ipRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'ipRules'), createArray()), lambda('ipRule', createObject('ipAddressOrRange', lambdaVariables('ipRule')))), 'virtualNetworkRules', map(coalesce(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules'), createArray()), lambda('rule', createObject('id', lambdaVariables('rule').subnetResourceId, 'ignoreMissingVNetServiceEndpoint', false()))), 'networkAclBypass', coalesce(tryGet(parameters('networkRestrictions'), 'networkAclBypass'), 'None'), 'isVirtualNetworkFilterEnabled', or(not(empty(tryGet(parameters('networkRestrictions'), 'ipRules'))), not(empty(tryGet(parameters('networkRestrictions'), 'virtualNetworkRules')))), 'enableFreeTier', parameters('enableFreeTier'), 'enableAutomaticFailover', parameters('automaticFailover'), 'enableAnalyticalStorage', parameters('enableAnalyticalStorage')), createObject()), if(or(not(empty(parameters('mongodbDatabases'))), not(empty(parameters('gremlinDatabases')))), createObject('disableLocalAuth', false(), 'disableKeyBasedMetadataWriteAccess', false()), createObject('disableLocalAuth', parameters('disableLocalAuthentication'), 'disableKeyBasedMetadataWriteAccess', parameters('disableKeyBasedMetadataWriteAccess'))), if(not(empty(parameters('mongodbDatabases'))), createObject('apiProperties', createObject('serverVersion', parameters('serverVersion'))), createObject())))]"
                    },
                    "databaseAccount_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_diagnosticSettings": {
                      "copy": {
                        "name": "databaseAccount_diagnosticSettings",
                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                      },
                      "type": "Microsoft.Insights/diagnosticSettings",
                      "apiVersion": "2021-05-01-preview",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                      "properties": {
                        "copy": [
                          {
                            "name": "metrics",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                            "input": {
                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                              "timeGrain": null
                            }
                          },
                          {
                            "name": "logs",
                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                            "input": {
                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                            }
                          }
                        ],
                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_roleAssignments": {
                      "copy": {
                        "name": "databaseAccount_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlDatabases": {
                      "copy": {
                        "name": "databaseAccount_sqlDatabases",
                        "count": "[length(coalesce(parameters('sqlDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(parameters('sqlDatabases'), createArray())[copyIndex()].name]"
                          },
                          "containers": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'containers')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'throughput')]"
                          },
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "autoscaleSettingsMaxThroughput": {
                            "value": "[tryGet(coalesce(parameters('sqlDatabases'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "6801379641184405078"
                            },
                            "name": "DocumentDB Database Account SQL Databases",
                            "description": "This module deploys a SQL Database in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the SQL database ."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "type": "object"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of containers to deploy in the SQL database."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "autoscaleSettingsMaxThroughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. Setting throughput at the database level is only recommended for development/test or when workload across all containers in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the SQL database resource."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]"
                                },
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(equals(parameters('autoscaleSettingsMaxThroughput'), null()), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "container": {
                              "copy": {
                                "name": "container",
                                "count": "[length(coalesce(parameters('containers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-sqldb-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('containers'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "sqlDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                  },
                                  "analyticalStorageTtl": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'analyticalStorageTtl')]"
                                  },
                                  "autoscaleSettingsMaxThroughput": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'autoscaleSettingsMaxThroughput')]"
                                  },
                                  "conflictResolutionPolicy": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'conflictResolutionPolicy')]"
                                  },
                                  "defaultTtl": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultTtl')]"
                                  },
                                  "indexingPolicy": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'indexingPolicy')]"
                                  },
                                  "kind": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'kind')]"
                                  },
                                  "version": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'version')]"
                                  },
                                  "paths": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'paths')]"
                                  },
                                  "throughput": "[if(and(or(not(equals(parameters('throughput'), null())), not(equals(parameters('autoscaleSettingsMaxThroughput'), null()))), equals(tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput'), null())), createObject('value', -1), createObject('value', tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'throughput')))]",
                                  "uniqueKeyPolicyKeys": {
                                    "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'uniqueKeyPolicyKeys')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "5467755913632158534"
                                    },
                                    "name": "DocumentDB Database Account SQL Database Containers",
                                    "description": "This module deploys a SQL Database Container in a CosmosDB Account."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "sqlDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent SQL Database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the container."
                                      }
                                    },
                                    "analyticalStorageTtl": {
                                      "type": "int",
                                      "defaultValue": 0,
                                      "metadata": {
                                        "description": "Optional. Default to 0. Indicates how long data should be retained in the analytical store, for a container. Analytical store is enabled when ATTL is set with a value other than 0. If the value is set to -1, the analytical store retains all historical data, irrespective of the retention of the data in the transactional store."
                                      }
                                    },
                                    "conflictResolutionPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. The conflict resolution policy for the container. Conflicts and conflict resolution policies are applicable if the Azure Cosmos DB account is configured with multiple write regions."
                                      }
                                    },
                                    "defaultTtl": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "maxValue": 2147483647,
                                      "metadata": {
                                        "description": "Optional. Default to -1. Default time to live (in seconds). With Time to Live or TTL, Azure Cosmos DB provides the ability to delete items automatically from a container after a certain time period. If the value is set to \"-1\", it is equal to infinity, and items don't expire by default."
                                      }
                                    },
                                    "throughput": {
                                      "type": "int",
                                      "defaultValue": 400,
                                      "metadata": {
                                        "description": "Optional. Default to 400. Request Units per second. Will be ignored if autoscaleSettingsMaxThroughput is used. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                                      }
                                    },
                                    "autoscaleSettingsMaxThroughput": {
                                      "type": "int",
                                      "nullable": true,
                                      "maxValue": 1000000,
                                      "metadata": {
                                        "description": "Optional. Specifies the Autoscale settings and represents maximum throughput, the resource can scale up to. The autoscale throughput should have valid throughput values between 1000 and 1000000 inclusive in increments of 1000. If value is set to null, then autoscale will be disabled. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the container level and not at the database level."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the SQL Database resource."
                                      }
                                    },
                                    "paths": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "minLength": 1,
                                      "maxLength": 3,
                                      "metadata": {
                                        "description": "Required. List of paths using which data within the container can be partitioned. For kind=MultiHash it can be up to 3. For anything else it needs to be exactly 1."
                                      }
                                    },
                                    "indexingPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Indexing policy of the container."
                                      }
                                    },
                                    "uniqueKeyPolicyKeys": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. The unique key policy configuration containing a list of unique keys that enforces uniqueness constraint on documents in the collection in the Azure Cosmos DB service."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "Hash",
                                      "allowedValues": [
                                        "Hash",
                                        "MultiHash"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Default to Hash. Indicates the kind of algorithm used for partitioning."
                                      }
                                    },
                                    "version": {
                                      "type": "int",
                                      "defaultValue": 1,
                                      "allowedValues": [
                                        1,
                                        2
                                      ],
                                      "metadata": {
                                        "description": "Optional. Default to 1 for Hash and 2 for MultiHash - 1 is not allowed for MultiHash. Version of the partition key definition."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "partitionKeyPaths",
                                        "count": "[length(parameters('paths'))]",
                                        "input": "[if(startsWith(parameters('paths')[copyIndex('partitionKeyPaths')], '/'), parameters('paths')[copyIndex('partitionKeyPaths')], format('/{0}', parameters('paths')[copyIndex('partitionKeyPaths')]))]"
                                      }
                                    ],
                                    "containerResourceParams": "[union(createObject('conflictResolutionPolicy', parameters('conflictResolutionPolicy'), 'defaultTtl', parameters('defaultTtl'), 'id', parameters('name'), 'indexingPolicy', if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null()), 'partitionKey', createObject('paths', variables('partitionKeyPaths'), 'kind', parameters('kind'), 'version', if(equals(parameters('kind'), 'MultiHash'), 2, parameters('version'))), 'uniqueKeyPolicy', if(not(empty(parameters('uniqueKeyPolicyKeys'))), createObject('uniqueKeys', parameters('uniqueKeyPolicyKeys')), null())), if(not(equals(parameters('analyticalStorageTtl'), 0)), createObject('analyticalStorageTtl', parameters('analyticalStorageTtl')), createObject()))]"
                                  },
                                  "resources": {
                                    "databaseAccount::sqlDatabase": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('sqlDatabaseName'))]"
                                    },
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "container": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resource": "[variables('containerResourceParams')]",
                                        "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', if(and(equals(parameters('autoscaleSettingsMaxThroughput'), null()), not(equals(parameters('throughput'), -1))), parameters('throughput'), null()), 'autoscaleSettings', if(not(equals(parameters('autoscaleSettingsMaxThroughput'), null())), createObject('maxThroughput', parameters('autoscaleSettingsMaxThroughput')), null())))]"
                                      },
                                      "dependsOn": [
                                        "databaseAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the container."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the container."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('databaseAccountName'), parameters('sqlDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the container was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "sqlDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlRoleDefinitions": {
                      "copy": {
                        "name": "databaseAccount_sqlRoleDefinitions",
                        "count": "[length(coalesce(parameters('dataPlaneRoleDefinitions'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqlrd-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'name')]"
                          },
                          "dataActions": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'dataActions')]"
                          },
                          "roleName": {
                            "value": "[coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()].roleName]"
                          },
                          "assignableScopes": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignableScopes')]"
                          },
                          "sqlRoleAssignments": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleDefinitions'), createArray())[copyIndex()], 'assignments')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "12119240119487993734"
                            },
                            "name": "DocumentDB Database Account SQL Role Definitions.",
                            "description": "This module deploys a SQL Role Definision in a CosmosDB Account."
                          },
                          "definitions": {
                            "sqlRoleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name unique identifier of the SQL Role Assignment."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for the SQL Role Assignments."
                              }
                            }
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The unique identifier of the Role Definition."
                              }
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A user-friendly name for the Role Definition. Must be unique for the database account."
                              }
                            },
                            "dataActions": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. An array of data actions that are allowed."
                              }
                            },
                            "assignableScopes": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A set of fully qualified Scopes at or below which Role Assignments may be created using this Role Definition. This will allow application of this Role Definition on the entire database account or any underlying Database / Collection. Must have at least one element. Scopes higher than Database account are not enforceable as assignable Scopes. Note that resources referenced in assignable Scopes need not exist. Defaults to the current account."
                              }
                            },
                            "sqlRoleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/sqlRoleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. An array of SQL Role Assignments to be created for the SQL Role Definition."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlRoleDefinition": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]",
                              "properties": {
                                "assignableScopes": "[coalesce(parameters('assignableScopes'), createArray(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]",
                                "permissions": [
                                  {
                                    "dataActions": "[parameters('dataActions')]"
                                  }
                                ],
                                "roleName": "[parameters('roleName')]",
                                "type": "CustomRole"
                              }
                            },
                            "databaseAccount_sqlRoleAssignments": {
                              "copy": {
                                "name": "databaseAccount_sqlRoleAssignments",
                                "count": "[length(coalesce(parameters('sqlRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                                  },
                                  "principalId": {
                                    "value": "[coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()].principalId]"
                                  },
                                  "name": {
                                    "value": "[tryGet(coalesce(parameters('sqlRoleAssignments'), createArray())[copyIndex()], 'name')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "11941443499827753966"
                                    },
                                    "name": "DocumentDB Database Account SQL Role Assignments.",
                                    "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Name unique identifier of the SQL Role Assignment."
                                      }
                                    },
                                    "principalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                                      }
                                    },
                                    "roleDefinitionId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The unique identifier of the associated SQL Role Definition."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "sqlRoleAssignment": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                                      "properties": {
                                        "principalId": "[parameters('principalId')]",
                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                        "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the SQL Role Assignment."
                                      },
                                      "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the SQL Role Assignment."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the SQL Role Definition was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "sqlRoleDefinition"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL Role Definition."
                              },
                              "value": "[coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role'))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL Role Definition."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('databaseAccountName'), coalesce(parameters('name'), guid(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), parameters('databaseAccountName'), 'sql-role')))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL Role Definition was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "The role name of the SQL Role Definition."
                              },
                              "value": "[reference('sqlRoleDefinition').roleName]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_sqlRoleAssignments": {
                      "copy": {
                        "name": "databaseAccount_sqlRoleAssignments",
                        "count": "[length(coalesce(parameters('dataPlaneRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-sqlra-{1}', uniqueString(deployment().name), copyIndex())]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "roleDefinitionId": {
                            "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                          },
                          "principalId": {
                            "value": "[coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()].principalId]"
                          },
                          "name": {
                            "value": "[tryGet(coalesce(parameters('dataPlaneRoleAssignments'), createArray())[copyIndex()], 'name')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "11941443499827753966"
                            },
                            "name": "DocumentDB Database Account SQL Role Assignments.",
                            "description": "This module deploys a SQL Role Assignment in a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Name unique identifier of the SQL Role Assignment."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier for the associated AAD principal in the AAD graph to which access is being granted through this Role Assignment. Tenant ID for the principal is inferred using the tenant associated with the subscription."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The unique identifier of the associated SQL Role Definition."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "sqlRoleAssignment": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]",
                              "properties": {
                                "principalId": "[parameters('principalId')]",
                                "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                "scope": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))]"
                              }
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the SQL Role Assignment."
                              },
                              "value": "[coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName'))))]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the SQL Role Assignment."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments', parameters('databaseAccountName'), coalesce(parameters('name'), guid(parameters('roleDefinitionId'), parameters('principalId'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')))))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the SQL Role Definition was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_mongodbDatabases": {
                      "copy": {
                        "name": "databaseAccount_mongodbDatabases",
                        "count": "[length(coalesce(parameters('mongodbDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-mongodb-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "collections": {
                            "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'collections')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('mongodbDatabases'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "16911349070369924403"
                            },
                            "name": "DocumentDB Database Account MongoDB Databases",
                            "description": "This module deploys a MongoDB Database within a CosmosDB Account."
                          },
                          "parameters": {
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the mongodb database."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "defaultValue": 400,
                              "metadata": {
                                "description": "Optional. Request Units per second. Setting throughput at the database level is only recommended for development/test or when workload across all collections in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                              }
                            },
                            "collections": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Collections in the mongodb database."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "mongodbDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "resource": {
                                  "id": "[parameters('name')]"
                                },
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]"
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "mongodbDatabase_collections": {
                              "copy": {
                                "name": "mongodbDatabase_collections",
                                "count": "[length(coalesce(parameters('collections'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-collection-{1}', uniqueString(deployment().name, parameters('name')), coalesce(parameters('collections'), createArray())[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "mongodbDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].name]"
                                  },
                                  "indexes": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].indexes]"
                                  },
                                  "shardKey": {
                                    "value": "[coalesce(parameters('collections'), createArray())[copyIndex()].shardKey]"
                                  },
                                  "throughput": {
                                    "value": "[tryGet(coalesce(parameters('collections'), createArray())[copyIndex()], 'throughput')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "7802955893269337475"
                                    },
                                    "name": "DocumentDB Database Account MongoDB Database Collections",
                                    "description": "This module deploys a MongoDB Database Collection."
                                  },
                                  "parameters": {
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Cosmos DB database account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "mongodbDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent mongodb database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the collection."
                                      }
                                    },
                                    "throughput": {
                                      "type": "int",
                                      "defaultValue": 400,
                                      "metadata": {
                                        "description": "Optional. Request Units per second. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the collection level and not at the database level."
                                      }
                                    },
                                    "indexes": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. Indexes for the collection."
                                      }
                                    },
                                    "shardKey": {
                                      "type": "object",
                                      "metadata": {
                                        "description": "Required. ShardKey for the collection."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]",
                                      "properties": {
                                        "options": "[if(contains(reference(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('databaseAccountName')), '2024-11-15').capabilities, createObject('name', 'EnableServerless')), null(), createObject('throughput', parameters('throughput')))]",
                                        "resource": {
                                          "id": "[parameters('name')]",
                                          "indexes": "[parameters('indexes')]",
                                          "shardKey": "[parameters('shardKey')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the mongodb database collection."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the mongodb database collection."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases/collections', parameters('databaseAccountName'), parameters('mongodbDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the mongodb database collection was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "mongodbDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the mongodb database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the mongodb database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/mongodbDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the mongodb database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_gremlinDatabases": {
                      "copy": {
                        "name": "databaseAccount_gremlinDatabases",
                        "count": "[length(coalesce(parameters('gremlinDatabases'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-gremlin-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "graphs": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'graphs')]"
                          },
                          "maxThroughput": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'maxThroughput')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('gremlinDatabases'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "4743052544503629108"
                            },
                            "name": "DocumentDB Database Account Gremlin Databases",
                            "description": "This module deploys a Gremlin Database within a CosmosDB Account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Gremlin database."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the Gremlin database resource."
                              }
                            },
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Gremlin database. Required if the template is used in a standalone deployment."
                              }
                            },
                            "graphs": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Array of graphs to deploy in the Gremlin database."
                              }
                            },
                            "maxThroughput": {
                              "type": "int",
                              "defaultValue": 4000,
                              "metadata": {
                                "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`. Setting throughput at the database level is only recommended for development/test or when workload across all graphs in the shared throughput database is uniform. For best performance for large production workloads, it is recommended to set dedicated throughput (autoscale or manual) at the graph level and not at the database level."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "gremlinDatabase": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                                "resource": {
                                  "id": "[parameters('name')]"
                                }
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            },
                            "gremlinDatabase_gremlinGraphs": {
                              "copy": {
                                "name": "gremlinDatabase_gremlinGraphs",
                                "count": "[length(parameters('graphs'))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-gremlindb-{1}', uniqueString(deployment().name, parameters('name')), parameters('graphs')[copyIndex()].name)]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('graphs')[copyIndex()].name]"
                                  },
                                  "gremlinDatabaseName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "databaseAccountName": {
                                    "value": "[parameters('databaseAccountName')]"
                                  },
                                  "indexingPolicy": {
                                    "value": "[tryGet(parameters('graphs')[copyIndex()], 'indexingPolicy')]"
                                  },
                                  "partitionKeyPaths": "[if(not(empty(parameters('graphs')[copyIndex()].partitionKeyPaths)), createObject('value', parameters('graphs')[copyIndex()].partitionKeyPaths), createObject('value', createArray()))]"
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.35.1.17967",
                                      "templateHash": "9587717186996793648"
                                    },
                                    "name": "DocumentDB Database Accounts Gremlin Databases Graphs",
                                    "description": "This module deploys a DocumentDB Database Accounts Gremlin Database Graph."
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the graph."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the Gremlin graph resource."
                                      }
                                    },
                                    "databaseAccountName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Database Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "gremlinDatabaseName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Gremlin Database. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "indexingPolicy": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Indexing policy of the graph."
                                      }
                                    },
                                    "partitionKeyPaths": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of paths using which data within the container can be partitioned."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "databaseAccount::gremlinDatabase": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'))]"
                                    },
                                    "databaseAccount": {
                                      "existing": true,
                                      "type": "Microsoft.DocumentDB/databaseAccounts",
                                      "apiVersion": "2024-11-15",
                                      "name": "[parameters('databaseAccountName')]"
                                    },
                                    "gremlinGraph": {
                                      "type": "Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs",
                                      "apiVersion": "2024-11-15",
                                      "name": "[format('{0}/{1}/{2}', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "resource": {
                                          "id": "[parameters('name')]",
                                          "indexingPolicy": "[if(not(empty(parameters('indexingPolicy'))), parameters('indexingPolicy'), null())]",
                                          "partitionKey": {
                                            "paths": "[if(not(empty(parameters('partitionKeyPaths'))), parameters('partitionKeyPaths'), null())]"
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the graph."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the graph."
                                      },
                                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases/graphs', parameters('databaseAccountName'), parameters('gremlinDatabaseName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the graph was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "gremlinDatabase"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Gremlin database."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Gremlin database."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/gremlinDatabases', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Gremlin database was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_tables": {
                      "copy": {
                        "name": "databaseAccount_tables",
                        "count": "[length(coalesce(parameters('tables'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-table-{1}', uniqueString(deployment().name, parameters('location')), coalesce(parameters('tables'), createArray())[copyIndex()].name)]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "databaseAccountName": {
                            "value": "[parameters('name')]"
                          },
                          "name": {
                            "value": "[coalesce(parameters('tables'), createArray())[copyIndex()].name]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "maxThroughput": {
                            "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'maxThroughput')]"
                          },
                          "throughput": {
                            "value": "[tryGet(coalesce(parameters('tables'), createArray())[copyIndex()], 'throughput')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.35.1.17967",
                              "templateHash": "14106261468136691896"
                            },
                            "name": "Azure Cosmos DB account tables",
                            "description": "This module deploys a table within an Azure Cosmos DB Account."
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the table."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags for the table."
                              }
                            },
                            "databaseAccountName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent Azure Cosmos DB account. Required if the template is used in a standalone deployment."
                              }
                            },
                            "maxThroughput": {
                              "type": "int",
                              "defaultValue": 4000,
                              "metadata": {
                                "description": "Optional. Represents maximum throughput, the resource can scale up to. Cannot be set together with `throughput`. If `throughput` is set to something else than -1, this autoscale setting is ignored."
                              }
                            },
                            "throughput": {
                              "type": "int",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Request Units per second (for example 10000). Cannot be set together with `maxThroughput`."
                              }
                            }
                          },
                          "resources": {
                            "databaseAccount": {
                              "existing": true,
                              "type": "Microsoft.DocumentDB/databaseAccounts",
                              "apiVersion": "2024-11-15",
                              "name": "[parameters('databaseAccountName')]"
                            },
                            "table": {
                              "type": "Microsoft.DocumentDB/databaseAccounts/tables",
                              "apiVersion": "2024-11-15",
                              "name": "[format('{0}/{1}', parameters('databaseAccountName'), parameters('name'))]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "options": "[if(contains(reference('databaseAccount').capabilities, createObject('name', 'EnableServerless')), createObject(), createObject('autoscaleSettings', if(equals(parameters('throughput'), null()), createObject('maxThroughput', parameters('maxThroughput')), null()), 'throughput', parameters('throughput')))]",
                                "resource": {
                                  "id": "[parameters('name')]"
                                }
                              },
                              "dependsOn": [
                                "databaseAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the table."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the table."
                              },
                              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/tables', parameters('databaseAccountName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the table was created in."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    },
                    "databaseAccount_privateEndpoints": {
                      "copy": {
                        "name": "databaseAccount_privateEndpoints",
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-dbAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                      "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                      "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                          },
                          "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                          "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                          "subnetResourceId": {
                            "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                          },
                          "enableTelemetry": {
                            "value": "[variables('enableReferencedModulesTelemetry')]"
                          },
                          "location": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                          },
                          "lock": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                          },
                          "privateDnsZoneGroup": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                          },
                          "roleAssignments": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                          },
                          "tags": {
                            "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                          },
                          "customDnsConfigs": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                          },
                          "ipConfigurations": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                          },
                          "applicationSecurityGroupResourceIds": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                          },
                          "customNetworkInterfaceName": {
                            "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.13.18514",
                              "templateHash": "15954548978129725136"
                            },
                            "name": "Private Endpoints",
                            "description": "This module deploys a Private Endpoint."
                          },
                          "definitions": {
                            "privateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "ipConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "privateLinkServiceConnectionType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the private link service connection."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                      }
                                    },
                                    "privateLinkServiceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource id of private link service."
                                      }
                                    },
                                    "requestMessage": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private link service connection."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "customDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "private-dns-zone-group/main.bicep"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the private endpoint resource to create."
                              }
                            },
                            "subnetResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                              }
                            },
                            "applicationSecurityGroupResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                              }
                            },
                            "customNetworkInterfaceName": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The custom name of the network interface attached to the private endpoint."
                              }
                            },
                            "ipConfigurations": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/ipConfigurationType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                              }
                            },
                            "privateDnsZoneGroup": {
                              "$ref": "#/definitions/privateDnsZoneGroupType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The private DNS zone group to configure for the private endpoint."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                              }
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Custom DNS configurations."
                              }
                            },
                            "manualPrivateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                              }
                            },
                            "privateLinkServiceConnections": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateLinkServiceConnectionType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                              "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                              "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                              "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                              "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "privateEndpoint": {
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "applicationSecurityGroups",
                                    "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                    "input": {
                                      "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                    }
                                  }
                                ],
                                "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                "subnet": {
                                  "id": "[parameters('subnetResourceId')]"
                                }
                              }
                            },
                            "privateEndpoint_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_roleAssignments": {
                              "copy": {
                                "name": "privateEndpoint_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            },
                            "privateEndpoint_privateDnsZoneGroup": {
                              "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                  },
                                  "privateEndpointName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "privateDnsZoneConfigs": {
                                    "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "5440815542537978381"
                                    },
                                    "name": "Private Endpoint Private DNS Zone Groups",
                                    "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "privateEndpointName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "privateDnsZoneConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                      },
                                      "minLength": 1,
                                      "maxLength": 5,
                                      "metadata": {
                                        "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "privateDnsZoneConfigsVar",
                                        "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                        "input": {
                                          "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                          "properties": {
                                            "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  "resources": {
                                    "privateEndpoint": {
                                      "existing": true,
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('privateEndpointName')]"
                                    },
                                    "privateDnsZoneGroup": {
                                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                      "apiVersion": "2023-11-01",
                                      "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                      "properties": {
                                        "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint DNS zone group."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint DNS zone group."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint DNS zone group was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint."
                              },
                              "value": "[parameters('name')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                            },
                            "customDnsConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/customDnsConfigType"
                              },
                              "metadata": {
                                "description": "The custom DNS configurations of the private endpoint."
                              },
                              "value": "[reference('privateEndpoint').customDnsConfigs]"
                            },
                            "networkInterfaceResourceIds": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              },
                              "metadata": {
                                "description": "The resource IDs of the network interfaces associated with the private endpoint."
                              },
                              "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                            },
                            "groupId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The group Id for the private endpoint Group."
                              },
                              "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "databaseAccount"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the database account."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the database account."
                      },
                      "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the database account was created in."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[tryGet(tryGet(reference('databaseAccount', '2024-11-15', 'full'), 'identity'), 'principalId')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('databaseAccount', '2024-11-15', 'full').location]"
                    },
                    "endpoint": {
                      "type": "string",
                      "metadata": {
                        "description": "The endpoint of the database account."
                      },
                      "value": "[reference('databaseAccount').documentEndpoint]"
                    },
                    "privateEndpoints": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/privateEndpointOutputType"
                      },
                      "metadata": {
                        "description": "The private endpoints of the database account."
                      },
                      "copy": {
                        "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                        "input": {
                          "name": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                          "resourceId": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                          "groupId": "[tryGet(tryGet(reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                          "customDnsConfigs": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                          "networkInterfaceResourceIds": "[reference(format('databaseAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                        }
                      }
                    },
                    "primaryReadWriteKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-write key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').primaryMasterKey]"
                    },
                    "primaryReadOnlyKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-only key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').primaryReadonlyMasterKey]"
                    },
                    "primaryReadWriteConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-write connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[0].connectionString]"
                    },
                    "primaryReadOnlyConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The primary read-only connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[2].connectionString]"
                    },
                    "secondaryReadWriteKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-write key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').secondaryMasterKey]"
                    },
                    "secondaryReadOnlyKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-only key."
                      },
                      "value": "[listKeys('databaseAccount', '2024-11-15').secondaryReadonlyMasterKey]"
                    },
                    "secondaryReadWriteConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-write connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[1].connectionString]"
                    },
                    "secondaryReadOnlyConnectionString": {
                      "type": "securestring",
                      "metadata": {
                        "description": "The secondary read-only connection string."
                      },
                      "value": "[listConnectionStrings('databaseAccount', '2024-11-15').connectionStrings[3].connectionString]"
                    }
                  }
                }
              },
              "dependsOn": [
                "privateDnsZone"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB Account resource."
              },
              "value": "[reference('cosmosAccount').outputs.name.value]"
            },
            "resourceId": {
              "type": "securestring",
              "metadata": {
                "description": "Resource ID of the Cosmos DB Account."
              },
              "value": "[reference('cosmosAccount').outputs.resourceId.value]"
            },
            "endpoint": {
              "type": "securestring",
              "metadata": {
                "description": "Endpoint of the Cosmos DB Account."
              },
              "value": "[reference('cosmosAccount').outputs.endpoint.value]"
            },
            "databaseName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB database."
              },
              "value": "[variables('databaseName')]"
            },
            "containerNames": {
              "type": "object",
              "metadata": {
                "description": "Complex object containing the names of the Cosmos DB containers."
              },
              "value": {
                "batch": "[variables('batchContainerName')]",
                "file": "[variables('fileContainerName')]",
                "log": "[variables('logContainerName')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "appIdentity",
        "logAnalyticsWorkspace",
        "network"
      ]
    },
    "containerAppsEnvironment": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('container-env-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[variables('containerAppsEnvironmentName')]"
          },
          "infrastructureResourceGroupName": {
            "value": "[format('{0}-ME-{1}', resourceGroup().name, variables('containerAppsEnvironmentName'))]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "zoneRedundant": {
            "value": "[and(parameters('enableRedundancy'), parameters('enablePrivateNetworking'))]"
          },
          "publicNetworkAccess": {
            "value": "Enabled"
          },
          "infrastructureSubnetResourceId": "[if(parameters('enablePrivateNetworking'), createObject('value', reference('network').outputs.subnetWebResourceId.value), createObject('value', null()))]",
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference('appIdentity').outputs.resourceId.value]"
              ]
            }
          },
          "appInsightsConnectionString": "[if(parameters('enableMonitoring'), createObject('value', reference('applicationInsights').outputs.connectionString.value), createObject('value', null()))]",
          "appLogsConfiguration": "[if(parameters('enableMonitoring'), createObject('value', createObject('destination', 'log-analytics', 'logAnalyticsConfiguration', createObject('customerId', reference('logAnalyticsWorkspace').outputs.logAnalyticsWorkspaceId.value, 'sharedKey', listOutputsWithSecureValues('logAnalyticsWorkspace', '2022-09-01').primarySharedKey))), createObject('value', createObject()))]",
          "workloadProfiles": "[if(parameters('enableRedundancy'), createObject('value', createArray(createObject('maximumCount', 3, 'minimumCount', 3, 'name', 'CAW01', 'workloadProfileType', 'D4'))), createObject('value', createArray(createObject('name', 'Consumption', 'workloadProfileType', 'Consumption'))))]",
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.35.1.17967",
              "templateHash": "10777649424390064640"
            },
            "name": "App ManagedEnvironments",
            "description": "This module deploys an App Managed Environment (also known as a Container App Environment)."
          },
          "definitions": {
            "certificateType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the certificate."
                  }
                },
                "certificateType": {
                  "type": "string",
                  "allowedValues": [
                    "ImagePullTrustedCA",
                    "ServerSSLCertificate"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The type of the certificate."
                  }
                },
                "certificateValue": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The value of the certificate. PFX or PEM blob."
                  }
                },
                "certificatePassword": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The password of the certificate."
                  }
                },
                "certificateKeyVaultProperties": {
                  "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. A key vault reference."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a certificate."
              }
            },
            "storageType": {
              "type": "object",
              "properties": {
                "accessMode": {
                  "type": "string",
                  "allowedValues": [
                    "ReadOnly",
                    "ReadWrite"
                  ],
                  "metadata": {
                    "description": "Required. Access mode for storage: \"ReadOnly\" or \"ReadWrite\"."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "NFS",
                    "SMB"
                  ],
                  "metadata": {
                    "description": "Required. Type of storage: \"SMB\" or \"NFS\"."
                  }
                },
                "storageAccountName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Storage account name."
                  }
                },
                "shareName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. File share name."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type of the storage."
              }
            },
            "appLogsConfigurationType": {
              "type": "object",
              "properties": {
                "destination": {
                  "type": "string",
                  "allowedValues": [
                    "azure-monitor",
                    "log-analytics",
                    "none"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The destination of the logs."
                  }
                },
                "logAnalyticsConfiguration": {
                  "type": "object",
                  "properties": {
                    "customerId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The Log Analytics Workspace ID."
                      }
                    },
                    "sharedKey": {
                      "type": "securestring",
                      "metadata": {
                        "description": "Required. The shared key of the Log Analytics workspace."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The Log Analytics configuration. Required if `destination` is `log-analytics`."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the App Logs Configuration."
              }
            },
            "certificateKeyVaultPropertiesType": {
              "type": "object",
              "properties": {
                "identityResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                  }
                },
                "keyVaultUrl": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                  }
                }
              },
              "metadata": {
                "description": "The type for the certificate's key vault properties.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "certificates/main.bicep"
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Container Apps Managed Environment."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "appInsightsConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Application Insights connection string."
              }
            },
            "daprAIConnectionString": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
              }
            },
            "daprAIInstrumentationKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
              }
            },
            "dockerBridgeCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "infrastructureSubnetResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "internal": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "platformReservedCidr": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
              }
            },
            "platformReservedDnsIP": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "peerTrafficEncryption": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not to encrypt peer traffic."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether to allow or block all public traffic."
              }
            },
            "zoneRedundant": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Whether or not this Managed Environment is zone-redundant."
              }
            },
            "certificatePassword": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Password of the certificate used by the custom domain."
              }
            },
            "certificateValue": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
              }
            },
            "dnsSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. DNS suffix for the environment domain."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "openTelemetryConfiguration": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. Open Telemetry configuration."
              }
            },
            "workloadProfiles": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "infrastructureResourceGroupName": {
              "type": "string",
              "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
              "metadata": {
                "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
              }
            },
            "storages": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/storageType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of storages to mount on the environment."
              }
            },
            "certificate": {
              "$ref": "#/definitions/certificateType",
              "nullable": true,
              "metadata": {
                "description": "Optional. A Managed Environment Certificate."
              }
            },
            "appLogsConfiguration": {
              "$ref": "#/definitions/appLogsConfigurationType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The AppLogsConfiguration for the Managed Environment."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "managedEnvironment::storage": {
              "copy": {
                "name": "managedEnvironment::storage",
                "count": "[length(coalesce(parameters('storages'), createArray()))]"
              },
              "type": "Microsoft.App/managedEnvironments/storages",
              "apiVersion": "2024-10-02-preview",
              "name": "[format('{0}/{1}', parameters('name'), coalesce(parameters('storages'), createArray())[copyIndex()].shareName)]",
              "properties": {
                "nfsAzureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'NFS'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'server', format('{0}.file.{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, environment().suffixes.storage), 'shareName', format('/{0}/{1}', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, coalesce(parameters('storages'), createArray())[copyIndex()].shareName)), null())]",
                "azureFile": "[if(equals(coalesce(parameters('storages'), createArray())[copyIndex()].kind, 'SMB'), createObject('accessMode', coalesce(parameters('storages'), createArray())[copyIndex()].accessMode, 'accountName', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName, 'accountKey', listkeys(resourceId('Microsoft.Storage/storageAccounts', coalesce(parameters('storages'), createArray())[copyIndex()].storageAccountName), '2023-01-01').keys[0].value, 'shareName', coalesce(parameters('storages'), createArray())[copyIndex()].shareName), null())]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-11-01",
              "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.11.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "managedEnvironment": {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-10-02-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": "[variables('identity')]",
              "properties": {
                "appInsightsConfiguration": {
                  "connectionString": "[parameters('appInsightsConnectionString')]"
                },
                "appLogsConfiguration": "[parameters('appLogsConfiguration')]",
                "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                "customDomainConfiguration": {
                  "certificatePassword": "[parameters('certificatePassword')]",
                  "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                  "dnsSuffix": "[parameters('dnsSuffix')]",
                  "certificateKeyVaultProperties": "[if(not(empty(tryGet(parameters('certificate'), 'certificateKeyVaultProperties'))), createObject('identity', tryGet(parameters('certificate'), 'certificateKeyVaultProperties', 'identityResourceId'), 'keyVaultUrl', tryGet(parameters('certificate'), 'certificateKeyVaultProperties', 'keyVaultUrl')), null())]"
                },
                "openTelemetryConfiguration": "[if(not(empty(parameters('openTelemetryConfiguration'))), parameters('openTelemetryConfiguration'), null())]",
                "peerTrafficConfiguration": {
                  "encryption": {
                    "enabled": "[parameters('peerTrafficEncryption')]"
                  }
                },
                "publicNetworkAccess": "[parameters('publicNetworkAccess')]",
                "vnetConfiguration": {
                  "internal": "[parameters('internal')]",
                  "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetResourceId'))), parameters('infrastructureSubnetResourceId'), null())]",
                  "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetResourceId'))), parameters('dockerBridgeCidr'), null())]",
                  "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetResourceId')))), parameters('platformReservedCidr'), null())]",
                  "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetResourceId')))), parameters('platformReservedDnsIP'), null())]"
                },
                "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                "zoneRedundant": "[parameters('zoneRedundant')]",
                "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
              }
            },
            "managedEnvironment_roleAssignments": {
              "copy": {
                "name": "managedEnvironment_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "managedEnvironment_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            },
            "managedEnvironment_certificate": {
              "condition": "[not(empty(parameters('certificate')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-Managed-Environment-Certificate', uniqueString(deployment().name))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(parameters('certificate'), 'name'), format('cert-{0}', parameters('name')))]"
                  },
                  "managedEnvironmentName": {
                    "value": "[parameters('name')]"
                  },
                  "certificateKeyVaultProperties": {
                    "value": "[tryGet(parameters('certificate'), 'certificateKeyVaultProperties')]"
                  },
                  "certificateType": {
                    "value": "[tryGet(parameters('certificate'), 'certificateType')]"
                  },
                  "certificateValue": {
                    "value": "[tryGet(parameters('certificate'), 'certificateValue')]"
                  },
                  "certificatePassword": {
                    "value": "[tryGet(parameters('certificate'), 'certificatePassword')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.35.1.17967",
                      "templateHash": "18123249047188753287"
                    },
                    "name": "App ManagedEnvironments Certificates",
                    "description": "This module deploys a App Managed Environment Certificate."
                  },
                  "definitions": {
                    "certificateKeyVaultPropertiesType": {
                      "type": "object",
                      "properties": {
                        "identityResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource ID of the identity. This is the identity that will be used to access the key vault."
                          }
                        },
                        "keyVaultUrl": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. A key vault URL referencing the wildcard certificate that will be used for the custom domain."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true,
                        "description": "The type for the certificate's key vault properties."
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container Apps Managed Environment Certificate."
                      }
                    },
                    "managedEnvironmentName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent app managed environment. Required if the template is used in a standalone deployment."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "certificateKeyVaultProperties": {
                      "$ref": "#/definitions/certificateKeyVaultPropertiesType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. A key vault reference to the certificate to use for the custom domain."
                      }
                    },
                    "certificateType": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "ServerSSLCertificate",
                        "ImagePullTrustedCA"
                      ],
                      "metadata": {
                        "description": "Optional. The type of the certificate."
                      }
                    },
                    "certificateValue": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The value of the certificate. PFX or PEM blob."
                      }
                    },
                    "certificatePassword": {
                      "type": "securestring",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The password of the certificate."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    }
                  },
                  "resources": {
                    "managedEnvironment": {
                      "existing": true,
                      "type": "Microsoft.App/managedEnvironments",
                      "apiVersion": "2024-10-02-preview",
                      "name": "[parameters('managedEnvironmentName')]"
                    },
                    "managedEnvironmentCertificate": {
                      "type": "Microsoft.App/managedEnvironments/certificates",
                      "apiVersion": "2024-10-02-preview",
                      "name": "[format('{0}/{1}', parameters('managedEnvironmentName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "certificateKeyVaultProperties": "[if(not(empty(parameters('certificateKeyVaultProperties'))), createObject('identity', parameters('certificateKeyVaultProperties').identityResourceId, 'keyVaultUrl', parameters('certificateKeyVaultProperties').keyVaultUrl), null())]",
                        "certificateType": "[parameters('certificateType')]",
                        "password": "[parameters('certificatePassword')]",
                        "value": "[parameters('certificateValue')]"
                      },
                      "tags": "[parameters('tags')]"
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the key values."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the key values."
                      },
                      "value": "[resourceId('Microsoft.App/managedEnvironments/certificates', parameters('managedEnvironmentName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the batch account was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "managedEnvironment"
              ]
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Managed Environment was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('managedEnvironment', '2024-10-02-preview', 'full').location]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Managed Environment."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Managed Environment."
              },
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('managedEnvironment', '2024-10-02-preview', 'full'), 'identity'), 'principalId')]"
            },
            "defaultDomain": {
              "type": "string",
              "metadata": {
                "description": "The Default domain of the Managed Environment."
              },
              "value": "[reference('managedEnvironment').defaultDomain]"
            },
            "staticIp": {
              "type": "string",
              "metadata": {
                "description": "The IP address of the Managed Environment."
              },
              "value": "[reference('managedEnvironment').staticIp]"
            },
            "domainVerificationId": {
              "type": "string",
              "metadata": {
                "description": "The domain verification id for custom domains."
              },
              "value": "[reference('managedEnvironment').customDomainConfiguration.customDomainVerificationId]"
            }
          }
        }
      },
      "dependsOn": [
        "appIdentity",
        "applicationInsights",
        "logAnalyticsWorkspace",
        "network"
      ]
    },
    "containerAppFrontend": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('container-app-frontend-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('ca-{0}frontend', variables('resourcesName')), 32)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentResourceId": {
            "value": "[reference('containerAppsEnvironment').outputs.resourceId.value]"
          },
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference('appIdentity').outputs.resourceId.value]"
              ]
            }
          },
          "containers": {
            "value": [
              {
                "env": [
                  {
                    "name": "API_URL",
                    "value": "[format('https://{0}', reference('containerAppBackend').outputs.fqdn.value)]"
                  }
                ],
                "image": "[format('{0}/{1}:{2}', parameters('frontendContainerRegistryHostname'), parameters('frontendContainerImageName'), parameters('frontendContainerImageTag'))]",
                "name": "cmsafrontend",
                "resources": {
                  "cpu": "1",
                  "memory": "2.0Gi"
                }
              }
            ]
          },
          "ingressTargetPort": {
            "value": 3000
          },
          "ingressExternal": {
            "value": true
          },
          "ingressAllowInsecure": {
            "value": false
          },
          "scaleSettings": {
            "value": {
              "maxReplicas": "[if(parameters('enableScaling'), 4, 2)]",
              "minReplicas": 2,
              "rules": "[if(parameters('enableScaling'), createArray(createObject('name', 'http-scaler', 'http', createObject('metadata', createObject('concurrentRequests', 100)))), createArray())]"
            }
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "5745763974354662218"
            },
            "name": "Container Apps",
            "description": "This module deploys a Container App."
          },
          "definitions": {
            "containerType": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container start command arguments."
                  }
                },
                "command": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container start command."
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/environmentVarType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container environment variables."
                  }
                },
                "image": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Container image tag."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom container name."
                  }
                },
                "probes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/containerAppProbeType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of probes for the container."
                  }
                },
                "resources": {
                  "type": "object",
                  "metadata": {
                    "description": "Required. Container resource requirements."
                  }
                },
                "volumeMounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/volumeMountType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container volume mounts."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a container."
              }
            },
            "ingressPortMappingType": {
              "type": "object",
              "properties": {
                "exposedPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                  }
                },
                "external": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Specifies whether the app port is accessible outside of the environment."
                  }
                },
                "targetPort": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Specifies the port the container listens on."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an ingress port mapping."
              }
            },
            "serviceBindingType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the service."
                  }
                },
                "serviceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The service ID."
                  }
                }
              },
              "metadata": {
                "description": "The type for a service binding."
              }
            },
            "environmentVarType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Environment variable name."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Non-secret environment variable value."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an environment variable."
              }
            },
            "containerAppProbeType": {
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 10,
                  "metadata": {
                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                  }
                },
                "httpGet": {
                  "$ref": "#/definitions/containerAppProbeHttpGetType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. HTTPGet specifies the http request to perform."
                  }
                },
                "initialDelaySeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 60,
                  "metadata": {
                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                  }
                },
                "periodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 240,
                  "metadata": {
                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                  }
                },
                "successThreshold": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 10,
                  "metadata": {
                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                  }
                },
                "tcpSocket": {
                  "$ref": "#/definitions/containerAppProbeTcpSocketType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TCP socket specifies an action involving a TCP port. TCP hooks not yet supported."
                  }
                },
                "terminationGracePeriodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                  }
                },
                "timeoutSeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 240,
                  "metadata": {
                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "Liveness",
                    "Readiness",
                    "Startup"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The type of probe."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe."
              }
            },
            "corsPolicyType": {
              "type": "object",
              "properties": {
                "allowCredentials": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Switch to determine whether the resource allows credentials."
                  }
                },
                "allowedHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                  }
                },
                "allowedMethods": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                  }
                },
                "allowedOrigins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                  }
                },
                "exposeHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                  }
                },
                "maxAge": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-max-age header."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a CORS policy."
              }
            },
            "containerAppProbeHttpGetType": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                  }
                },
                "httpHeaders": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItemType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. HTTP headers to set in the request."
                  }
                },
                "path": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Path to access on the HTTP server."
                  }
                },
                "port": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Name or number of the port to access on the container."
                  }
                },
                "scheme": {
                  "type": "string",
                  "allowedValues": [
                    "HTTP",
                    "HTTPS"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe HTTP GET."
              }
            },
            "containerAppProbeHttpGetHeadersItemType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the header."
                  }
                },
                "value": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Value of the header."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe HTTP GET header."
              }
            },
            "containerAppProbeTcpSocketType": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                  }
                },
                "port": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 65535,
                  "metadata": {
                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe TCP socket."
              }
            },
            "scaleType": {
              "type": "object",
              "properties": {
                "maxReplicas": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The maximum number of replicas."
                  }
                },
                "minReplicas": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The minimum number of replicas."
                  }
                },
                "cooldownPeriod": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The cooldown period in seconds."
                  }
                },
                "pollingInterval": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The polling interval in seconds."
                  }
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/scaleRuleType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The scaling rules."
                  }
                }
              },
              "metadata": {
                "description": "The scale settings for the Container App."
              }
            },
            "scaleRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the scaling rule."
                  }
                },
                "custom": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom scaling rule."
                  }
                },
                "azureQueue": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Queue based scaling rule."
                  }
                },
                "http": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The HTTP requests based scaling rule."
                  }
                },
                "tcp": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TCP based scaling rule."
                  }
                }
              },
              "metadata": {
                "description": "The scaling rules for the Container App."
              }
            },
            "volumeMountType": {
              "type": "object",
              "properties": {
                "mountPath": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                  }
                },
                "subPath": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                  }
                },
                "volumeName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. This must match the Name of a Volume."
                  }
                }
              },
              "metadata": {
                "description": "The type for a volume mount."
              }
            },
            "secretType": {
              "type": "object",
              "properties": {
                "identity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity."
                  }
                },
                "keyVaultUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The URL of the Azure Key Vault secret referenced by the Container App. Required if `value` is null."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the container app secret."
                  }
                },
                "value": {
                  "type": "securestring",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The container app secret value, if not fetched from the Key Vault. Required if `keyVaultUrl` is not null."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a secret."
              }
            },
            "authConfigType": {
              "type": "object",
              "properties": {
                "encryptionSettings": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/encryptionSettings"
                    },
                    "description": "Optional. The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "globalValidation": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/globalValidation"
                    },
                    "description": "Optional. The configuration settings that determines the validation flow of users using Service Authentication and/or Authorization."
                  },
                  "nullable": true
                },
                "httpSettings": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/httpSettings"
                    },
                    "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "identityProviders": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/identityProviders"
                    },
                    "description": "Optional. The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "login": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/login"
                    },
                    "description": "Optional. The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "platform": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/platform"
                    },
                    "description": "Optional. The configuration settings of the platform of ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the container app's authentication configuration."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Container App."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "disableIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Bool to disable all ingress traffic for the container app."
              }
            },
            "ingressExternal": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
              }
            },
            "clientCertificateMode": {
              "type": "string",
              "defaultValue": "ignore",
              "allowedValues": [
                "accept",
                "ignore",
                "require"
              ],
              "metadata": {
                "description": "Optional. Client certificate mode for mTLS."
              }
            },
            "corsPolicy": {
              "$ref": "#/definitions/corsPolicyType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Object userd to configure CORS policy."
              }
            },
            "stickySessionsAffinity": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "none",
                "sticky"
              ],
              "metadata": {
                "description": "Optional. Bool indicating if the Container App should enable session affinity."
              }
            },
            "ingressTransport": {
              "type": "string",
              "defaultValue": "auto",
              "allowedValues": [
                "auto",
                "http",
                "http2",
                "tcp"
              ],
              "metadata": {
                "description": "Optional. Ingress transport protocol."
              }
            },
            "service": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/service"
                },
                "description": "Optional. Dev ContainerApp service type."
              },
              "nullable": true
            },
            "includeAddOns": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Toggle to include the service configuration."
              }
            },
            "additionalPortMappings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ingressPortMappingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Settings to expose additional ports on container app."
              }
            },
            "ingressAllowInsecure": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
              }
            },
            "ingressTargetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Optional. Target Port in containers for traffic from ingress."
              }
            },
            "scaleSettings": {
              "$ref": "#/definitions/scaleType",
              "defaultValue": {
                "maxReplicas": 10,
                "minReplicas": 3
              },
              "metadata": {
                "description": "Optional. The scaling settings of the service."
              }
            },
            "serviceBinds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/serviceBindingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of container app services bound to the app."
              }
            },
            "activeRevisionsMode": {
              "type": "string",
              "defaultValue": "Single",
              "allowedValues": [
                "Multiple",
                "Single"
              ],
              "metadata": {
                "description": "Optional. Controls how active revisions are handled for the Container app."
              }
            },
            "environmentResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of environment."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "registries": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/registries"
                },
                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
              },
              "nullable": true
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "customDomains": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/ingress/properties/customDomains"
                },
                "description": "Optional. Custom domain bindings for Container App hostnames."
              },
              "nullable": true
            },
            "exposedPort": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
              }
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/ingress/properties/ipSecurityRestrictions"
                },
                "description": "Optional. Rules to restrict incoming IP address."
              },
              "nullable": true
            },
            "trafficLabel": {
              "type": "string",
              "defaultValue": "label-1",
              "metadata": {
                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
              }
            },
            "trafficLatestRevision": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
              }
            },
            "trafficRevisionName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of a revision."
              }
            },
            "trafficWeight": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Optional. Traffic weight assigned to a revision."
              }
            },
            "dapr": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/dapr"
                },
                "description": "Optional. Dapr configuration for the Container App."
              },
              "nullable": true
            },
            "identitySettings": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/identitySettings"
                },
                "description": "Optional. Settings for Managed Identities that are assigned to the Container App. If a Managed Identity is not specified here, default settings will be used."
              },
              "nullable": true
            },
            "maxInactiveRevisions": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Max inactive revisions a Container App can have."
              }
            },
            "runtime": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/runtime"
                },
                "description": "Optional. Runtime configuration for the Container App."
              },
              "nullable": true
            },
            "containers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerType"
              },
              "metadata": {
                "description": "Required. List of container definitions for the Container App."
              }
            },
            "initContainersTemplate": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/template/properties/initContainers"
                },
                "description": "Optional. List of specialized containers that run before app containers."
              },
              "nullable": true
            },
            "secrets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secretType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The secrets of the Container App."
              }
            },
            "revisionSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. User friendly suffix that is appended to the revision name."
              }
            },
            "volumes": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/template/properties/volumes"
                },
                "description": "Optional. List of volume definitions for the Container App."
              },
              "nullable": true
            },
            "workloadProfileName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Workload profile name to pin for container app execution."
              }
            },
            "authConfig": {
              "$ref": "#/definitions/authConfigType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the Container App Auth configs."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.17.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "containerApp": {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2025-01-01",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "properties": {
                "environmentId": "[parameters('environmentResourceId')]",
                "workloadProfileName": "[parameters('workloadProfileName')]",
                "template": {
                  "containers": "[parameters('containers')]",
                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                  "revisionSuffix": "[parameters('revisionSuffix')]",
                  "scale": "[parameters('scaleSettings')]",
                  "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                },
                "configuration": {
                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                  "identitySettings": "[if(not(empty(parameters('identitySettings'))), parameters('identitySettings'), null())]",
                  "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                  "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                  "secrets": "[parameters('secrets')]",
                  "runtime": "[if(not(empty(parameters('runtime'))), parameters('runtime'), null())]"
                }
              }
            },
            "containerApp_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "containerApp"
              ]
            },
            "containerApp_roleAssignments": {
              "copy": {
                "name": "containerApp_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "containerApp"
              ]
            },
            "containerAppAuthConfigs": {
              "condition": "[not(empty(parameters('authConfig')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-auth-config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerAppName": {
                    "value": "[parameters('name')]"
                  },
                  "encryptionSettings": {
                    "value": "[tryGet(parameters('authConfig'), 'encryptionSettings')]"
                  },
                  "globalValidation": {
                    "value": "[tryGet(parameters('authConfig'), 'globalValidation')]"
                  },
                  "httpSettings": {
                    "value": "[tryGet(parameters('authConfig'), 'httpSettings')]"
                  },
                  "identityProviders": {
                    "value": "[tryGet(parameters('authConfig'), 'identityProviders')]"
                  },
                  "login": {
                    "value": "[tryGet(parameters('authConfig'), 'login')]"
                  },
                  "platform": {
                    "value": "[tryGet(parameters('authConfig'), 'platform')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10437886961224228194"
                    },
                    "name": "Container App Auth Configs",
                    "description": "This module deploys Container App Auth Configs."
                  },
                  "parameters": {
                    "containerAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Container App. Required if the template is used in a standalone deployment."
                      }
                    },
                    "encryptionSettings": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/encryptionSettings"
                        },
                        "description": "Optional. The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "globalValidation": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/globalValidation"
                        },
                        "description": "Optional. The configuration settings that determines the validation flow of users using Service Authentication and/or Authorization."
                      },
                      "nullable": true
                    },
                    "httpSettings": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/httpSettings"
                        },
                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "identityProviders": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/identityProviders"
                        },
                        "description": "Optional. The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "login": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/login"
                        },
                        "description": "Optional. The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "platform": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/platform"
                        },
                        "description": "Optional. The configuration settings of the platform of ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "containerApp": {
                      "existing": true,
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('containerAppName')]"
                    },
                    "containerAppAuthConfigs": {
                      "type": "Microsoft.App/containerApps/authConfigs",
                      "apiVersion": "2025-01-01",
                      "name": "[format('{0}/{1}', parameters('containerAppName'), 'current')]",
                      "properties": {
                        "encryptionSettings": "[parameters('encryptionSettings')]",
                        "globalValidation": "[parameters('globalValidation')]",
                        "httpSettings": "[parameters('httpSettings')]",
                        "identityProviders": "[parameters('identityProviders')]",
                        "login": "[parameters('login')]",
                        "platform": "[parameters('platform')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the set of Container App Auth configs."
                      },
                      "value": "current"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the set of Container App Auth configs."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps/authConfigs', parameters('containerAppName'), 'current')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group containing the set of Container App Auth configs."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "containerApp"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container App."
              },
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "fqdn": {
              "type": "string",
              "metadata": {
                "description": "The configuration of ingress fqdn."
              },
              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Container App was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container App."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('containerApp', '2025-01-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('containerApp', '2025-01-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "appIdentity",
        "containerAppBackend",
        "containerAppsEnvironment"
      ]
    },
    "containerAppBackend": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[take(format('container-app-backend-{0}-deployment', variables('resourcesName')), 64)]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[take(format('ca-{0}backend', variables('resourcesName')), 32)]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "environmentResourceId": {
            "value": "[reference('containerAppsEnvironment').outputs.resourceId.value]"
          },
          "managedIdentities": {
            "value": {
              "userAssignedResourceIds": [
                "[reference('appIdentity').outputs.resourceId.value]"
              ]
            }
          },
          "containers": {
            "value": [
              {
                "name": "cmsabackend",
                "image": "[format('{0}/{1}:{2}', parameters('backendContainerRegistryHostname'), parameters('backendContainerImageName'), parameters('backendContainerImageTag'))]",
                "env": "[concat(createArray(createObject('name', 'COSMOSDB_ENDPOINT', 'value', listOutputsWithSecureValues('cosmosDb', '2022-09-01').endpoint), createObject('name', 'COSMOSDB_DATABASE', 'value', reference('cosmosDb').outputs.databaseName.value), createObject('name', 'COSMOSDB_BATCH_CONTAINER', 'value', reference('cosmosDb').outputs.containerNames.value.batch), createObject('name', 'COSMOSDB_FILE_CONTAINER', 'value', reference('cosmosDb').outputs.containerNames.value.file), createObject('name', 'COSMOSDB_LOG_CONTAINER', 'value', reference('cosmosDb').outputs.containerNames.value.log), createObject('name', 'AZURE_BLOB_ACCOUNT_NAME', 'value', reference('storageAccount').outputs.name.value), createObject('name', 'AZURE_BLOB_CONTAINER_NAME', 'value', variables('appStorageContainerName')), createObject('name', 'AZURE_OPENAI_ENDPOINT', 'value', format('https://{0}.openai.azure.com/', reference('aiServices').outputs.name.value)), createObject('name', 'MIGRATOR_AGENT_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'PICKER_AGENT_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'FIXER_AGENT_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'SEMANTIC_VERIFIER_AGENT_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'SYNTAX_CHECKER_AGENT_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'SELECTION_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'TERMINATION_MODEL_DEPLOY', 'value', variables('modelDeployment').name), createObject('name', 'AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME', 'value', variables('modelDeployment').name), createObject('name', 'AZURE_AI_AGENT_PROJECT_NAME', 'value', reference('aiServices').outputs.project.value.name), createObject('name', 'AZURE_AI_AGENT_RESOURCE_GROUP_NAME', 'value', resourceGroup().name), createObject('name', 'AZURE_AI_AGENT_SUBSCRIPTION_ID', 'value', subscription().subscriptionId), createObject('name', 'AZURE_AI_AGENT_ENDPOINT', 'value', reference('aiServices').outputs.project.value.apiEndpoint), createObject('name', 'AZURE_CLIENT_ID', 'value', reference('appIdentity').outputs.clientId.value)), if(parameters('enableMonitoring'), createArray(createObject('name', 'APPLICATIONINSIGHTS_INSTRUMENTATION_KEY', 'value', reference('applicationInsights').outputs.instrumentationKey.value), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', reference('applicationInsights').outputs.connectionString.value)), createArray()))]",
                "resources": {
                  "cpu": 1,
                  "memory": "2.0Gi"
                },
                "probes": "[if(parameters('enableMonitoring'), createArray(createObject('httpGet', createObject('path', '/health', 'port', 8000), 'initialDelaySeconds', 3, 'periodSeconds', 3, 'type', 'Liveness')), createArray())]"
              }
            ]
          },
          "ingressTargetPort": {
            "value": 8000
          },
          "ingressExternal": {
            "value": true
          },
          "ingressAllowInsecure": {
            "value": false
          },
          "scaleSettings": {
            "value": {
              "maxReplicas": "[if(parameters('enableScaling'), 4, 2)]",
              "minReplicas": 2,
              "rules": "[if(parameters('enableScaling'), createArray(createObject('name', 'http-scaler', 'http', createObject('metadata', createObject('concurrentRequests', 100)))), createArray())]"
            }
          },
          "tags": {
            "value": "[variables('allTags')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.1.42791",
              "templateHash": "5745763974354662218"
            },
            "name": "Container Apps",
            "description": "This module deploys a Container App."
          },
          "definitions": {
            "containerType": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container start command arguments."
                  }
                },
                "command": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container start command."
                  }
                },
                "env": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/environmentVarType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container environment variables."
                  }
                },
                "image": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Container image tag."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Custom container name."
                  }
                },
                "probes": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/containerAppProbeType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. List of probes for the container."
                  }
                },
                "resources": {
                  "type": "object",
                  "metadata": {
                    "description": "Required. Container resource requirements."
                  }
                },
                "volumeMounts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/volumeMountType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Container volume mounts."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a container."
              }
            },
            "ingressPortMappingType": {
              "type": "object",
              "properties": {
                "exposedPort": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                  }
                },
                "external": {
                  "type": "bool",
                  "metadata": {
                    "description": "Required. Specifies whether the app port is accessible outside of the environment."
                  }
                },
                "targetPort": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Specifies the port the container listens on."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an ingress port mapping."
              }
            },
            "serviceBindingType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the service."
                  }
                },
                "serviceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The service ID."
                  }
                }
              },
              "metadata": {
                "description": "The type for a service binding."
              }
            },
            "environmentVarType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Environment variable name."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Non-secret environment variable value."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for an environment variable."
              }
            },
            "containerAppProbeType": {
              "type": "object",
              "properties": {
                "failureThreshold": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 10,
                  "metadata": {
                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                  }
                },
                "httpGet": {
                  "$ref": "#/definitions/containerAppProbeHttpGetType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. HTTPGet specifies the http request to perform."
                  }
                },
                "initialDelaySeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 60,
                  "metadata": {
                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                  }
                },
                "periodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 240,
                  "metadata": {
                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                  }
                },
                "successThreshold": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 10,
                  "metadata": {
                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                  }
                },
                "tcpSocket": {
                  "$ref": "#/definitions/containerAppProbeTcpSocketType",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TCP socket specifies an action involving a TCP port. TCP hooks not yet supported."
                  }
                },
                "terminationGracePeriodSeconds": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                  }
                },
                "timeoutSeconds": {
                  "type": "int",
                  "nullable": true,
                  "minValue": 1,
                  "maxValue": 240,
                  "metadata": {
                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                  }
                },
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "Liveness",
                    "Readiness",
                    "Startup"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The type of probe."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe."
              }
            },
            "corsPolicyType": {
              "type": "object",
              "properties": {
                "allowCredentials": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Switch to determine whether the resource allows credentials."
                  }
                },
                "allowedHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                  }
                },
                "allowedMethods": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                  }
                },
                "allowedOrigins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                  }
                },
                "exposeHeaders": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                  }
                },
                "maxAge": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specifies the content for the access-control-max-age header."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a CORS policy."
              }
            },
            "containerAppProbeHttpGetType": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                  }
                },
                "httpHeaders": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItemType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. HTTP headers to set in the request."
                  }
                },
                "path": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Path to access on the HTTP server."
                  }
                },
                "port": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. Name or number of the port to access on the container."
                  }
                },
                "scheme": {
                  "type": "string",
                  "allowedValues": [
                    "HTTP",
                    "HTTPS"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe HTTP GET."
              }
            },
            "containerAppProbeHttpGetHeadersItemType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the header."
                  }
                },
                "value": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Value of the header."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe HTTP GET header."
              }
            },
            "containerAppProbeTcpSocketType": {
              "type": "object",
              "properties": {
                "host": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                  }
                },
                "port": {
                  "type": "int",
                  "minValue": 1,
                  "maxValue": 65535,
                  "metadata": {
                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                  }
                }
              },
              "metadata": {
                "description": "The type for a container app probe TCP socket."
              }
            },
            "scaleType": {
              "type": "object",
              "properties": {
                "maxReplicas": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The maximum number of replicas."
                  }
                },
                "minReplicas": {
                  "type": "int",
                  "metadata": {
                    "description": "Required. The minimum number of replicas."
                  }
                },
                "cooldownPeriod": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The cooldown period in seconds."
                  }
                },
                "pollingInterval": {
                  "type": "int",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The polling interval in seconds."
                  }
                },
                "rules": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/scaleRuleType"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The scaling rules."
                  }
                }
              },
              "metadata": {
                "description": "The scale settings for the Container App."
              }
            },
            "scaleRuleType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the scaling rule."
                  }
                },
                "custom": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The custom scaling rule."
                  }
                },
                "azureQueue": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Azure Queue based scaling rule."
                  }
                },
                "http": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The HTTP requests based scaling rule."
                  }
                },
                "tcp": {
                  "type": "object",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The TCP based scaling rule."
                  }
                }
              },
              "metadata": {
                "description": "The scaling rules for the Container App."
              }
            },
            "volumeMountType": {
              "type": "object",
              "properties": {
                "mountPath": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                  }
                },
                "subPath": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                  }
                },
                "volumeName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. This must match the Name of a Volume."
                  }
                }
              },
              "metadata": {
                "description": "The type for a volume mount."
              }
            },
            "secretType": {
              "type": "object",
              "properties": {
                "identity": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Resource ID of a managed identity to authenticate with Azure Key Vault, or System to use a system-assigned identity."
                  }
                },
                "keyVaultUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The URL of the Azure Key Vault secret referenced by the Container App. Required if `value` is null."
                  }
                },
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name of the container app secret."
                  }
                },
                "value": {
                  "type": "securestring",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The container app secret value, if not fetched from the Key Vault. Required if `keyVaultUrl` is not null."
                  }
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for a secret."
              }
            },
            "authConfigType": {
              "type": "object",
              "properties": {
                "encryptionSettings": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/encryptionSettings"
                    },
                    "description": "Optional. The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "globalValidation": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/globalValidation"
                    },
                    "description": "Optional. The configuration settings that determines the validation flow of users using Service Authentication and/or Authorization."
                  },
                  "nullable": true
                },
                "httpSettings": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/httpSettings"
                    },
                    "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "identityProviders": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/identityProviders"
                    },
                    "description": "Optional. The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "login": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/login"
                    },
                    "description": "Optional. The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                },
                "platform": {
                  "type": "object",
                  "metadata": {
                    "__bicep_resource_derived_type!": {
                      "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/platform"
                    },
                    "description": "Optional. The configuration settings of the platform of ContainerApp Service Authentication/Authorization."
                  },
                  "nullable": true
                }
              },
              "metadata": {
                "__bicep_export!": true,
                "description": "The type for the container app's authentication configuration."
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a lock.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "managedIdentityAllType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            },
            "roleAssignmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                  }
                },
                "roleDefinitionIdOrName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                  }
                },
                "principalId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                  }
                },
                "principalType": {
                  "type": "string",
                  "allowedValues": [
                    "Device",
                    "ForeignGroup",
                    "Group",
                    "ServicePrincipal",
                    "User"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The principal type of the assigned principal ID."
                  }
                },
                "description": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The description of the role assignment."
                  }
                },
                "condition": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                  }
                },
                "conditionVersion": {
                  "type": "string",
                  "allowedValues": [
                    "2.0"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Version of the condition."
                  }
                },
                "delegatedManagedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                  }
                }
              },
              "metadata": {
                "description": "An AVM-aligned type for a role assignment.",
                "__bicep_imported_from!": {
                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.4.1"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the Container App."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "disableIngress": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Bool to disable all ingress traffic for the container app."
              }
            },
            "ingressExternal": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
              }
            },
            "clientCertificateMode": {
              "type": "string",
              "defaultValue": "ignore",
              "allowedValues": [
                "accept",
                "ignore",
                "require"
              ],
              "metadata": {
                "description": "Optional. Client certificate mode for mTLS."
              }
            },
            "corsPolicy": {
              "$ref": "#/definitions/corsPolicyType",
              "nullable": true,
              "metadata": {
                "description": "Optional. Object userd to configure CORS policy."
              }
            },
            "stickySessionsAffinity": {
              "type": "string",
              "defaultValue": "none",
              "allowedValues": [
                "none",
                "sticky"
              ],
              "metadata": {
                "description": "Optional. Bool indicating if the Container App should enable session affinity."
              }
            },
            "ingressTransport": {
              "type": "string",
              "defaultValue": "auto",
              "allowedValues": [
                "auto",
                "http",
                "http2",
                "tcp"
              ],
              "metadata": {
                "description": "Optional. Ingress transport protocol."
              }
            },
            "service": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/service"
                },
                "description": "Optional. Dev ContainerApp service type."
              },
              "nullable": true
            },
            "includeAddOns": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Toggle to include the service configuration."
              }
            },
            "additionalPortMappings": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ingressPortMappingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Settings to expose additional ports on container app."
              }
            },
            "ingressAllowInsecure": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
              }
            },
            "ingressTargetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Optional. Target Port in containers for traffic from ingress."
              }
            },
            "scaleSettings": {
              "$ref": "#/definitions/scaleType",
              "defaultValue": {
                "maxReplicas": 10,
                "minReplicas": 3
              },
              "metadata": {
                "description": "Optional. The scaling settings of the service."
              }
            },
            "serviceBinds": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/serviceBindingType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. List of container app services bound to the app."
              }
            },
            "activeRevisionsMode": {
              "type": "string",
              "defaultValue": "Single",
              "allowedValues": [
                "Multiple",
                "Single"
              ],
              "metadata": {
                "description": "Optional. Controls how active revisions are handled for the Container app."
              }
            },
            "environmentResourceId": {
              "type": "string",
              "metadata": {
                "description": "Required. Resource ID of environment."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "registries": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/registries"
                },
                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
              },
              "nullable": true
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentityAllType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The managed identity definition for this resource."
              }
            },
            "roleAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/roleAssignmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "customDomains": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/ingress/properties/customDomains"
                },
                "description": "Optional. Custom domain bindings for Container App hostnames."
              },
              "nullable": true
            },
            "exposedPort": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
              }
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/ingress/properties/ipSecurityRestrictions"
                },
                "description": "Optional. Rules to restrict incoming IP address."
              },
              "nullable": true
            },
            "trafficLabel": {
              "type": "string",
              "defaultValue": "label-1",
              "metadata": {
                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
              }
            },
            "trafficLatestRevision": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
              }
            },
            "trafficRevisionName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Name of a revision."
              }
            },
            "trafficWeight": {
              "type": "int",
              "defaultValue": 100,
              "metadata": {
                "description": "Optional. Traffic weight assigned to a revision."
              }
            },
            "dapr": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/dapr"
                },
                "description": "Optional. Dapr configuration for the Container App."
              },
              "nullable": true
            },
            "identitySettings": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/identitySettings"
                },
                "description": "Optional. Settings for Managed Identities that are assigned to the Container App. If a Managed Identity is not specified here, default settings will be used."
              },
              "nullable": true
            },
            "maxInactiveRevisions": {
              "type": "int",
              "defaultValue": 0,
              "metadata": {
                "description": "Optional. Max inactive revisions a Container App can have."
              }
            },
            "runtime": {
              "type": "object",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/configuration/properties/runtime"
                },
                "description": "Optional. Runtime configuration for the Container App."
              },
              "nullable": true
            },
            "containers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/containerType"
              },
              "metadata": {
                "description": "Required. List of container definitions for the Container App."
              }
            },
            "initContainersTemplate": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/template/properties/initContainers"
                },
                "description": "Optional. List of specialized containers that run before app containers."
              },
              "nullable": true
            },
            "secrets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/secretType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The secrets of the Container App."
              }
            },
            "revisionSuffix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. User friendly suffix that is appended to the revision name."
              }
            },
            "volumes": {
              "type": "array",
              "metadata": {
                "__bicep_resource_derived_type!": {
                  "source": "Microsoft.App/containerApps@2025-01-01#properties/properties/properties/template/properties/volumes"
                },
                "description": "Optional. List of volume definitions for the Container App."
              },
              "nullable": true
            },
            "workloadProfileName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. Workload profile name to pin for container app execution."
              }
            },
            "authConfig": {
              "$ref": "#/definitions/authConfigType",
              "nullable": true,
              "metadata": {
                "description": "Optional. The name of the Container App Auth configs."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.17.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "containerApp": {
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2025-01-01",
              "name": "[parameters('name')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "identity": "[variables('identity')]",
              "properties": {
                "environmentId": "[parameters('environmentResourceId')]",
                "workloadProfileName": "[parameters('workloadProfileName')]",
                "template": {
                  "containers": "[parameters('containers')]",
                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                  "revisionSuffix": "[parameters('revisionSuffix')]",
                  "scale": "[parameters('scaleSettings')]",
                  "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                },
                "configuration": {
                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                  "identitySettings": "[if(not(empty(parameters('identitySettings'))), parameters('identitySettings'), null())]",
                  "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                  "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                  "secrets": "[parameters('secrets')]",
                  "runtime": "[if(not(empty(parameters('runtime'))), parameters('runtime'), null())]"
                }
              }
            },
            "containerApp_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "containerApp"
              ]
            },
            "containerApp_roleAssignments": {
              "copy": {
                "name": "containerApp_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "containerApp"
              ]
            },
            "containerAppAuthConfigs": {
              "condition": "[not(empty(parameters('authConfig')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-auth-config', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerAppName": {
                    "value": "[parameters('name')]"
                  },
                  "encryptionSettings": {
                    "value": "[tryGet(parameters('authConfig'), 'encryptionSettings')]"
                  },
                  "globalValidation": {
                    "value": "[tryGet(parameters('authConfig'), 'globalValidation')]"
                  },
                  "httpSettings": {
                    "value": "[tryGet(parameters('authConfig'), 'httpSettings')]"
                  },
                  "identityProviders": {
                    "value": "[tryGet(parameters('authConfig'), 'identityProviders')]"
                  },
                  "login": {
                    "value": "[tryGet(parameters('authConfig'), 'login')]"
                  },
                  "platform": {
                    "value": "[tryGet(parameters('authConfig'), 'platform')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.1.42791",
                      "templateHash": "10437886961224228194"
                    },
                    "name": "Container App Auth Configs",
                    "description": "This module deploys Container App Auth Configs."
                  },
                  "parameters": {
                    "containerAppName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Container App. Required if the template is used in a standalone deployment."
                      }
                    },
                    "encryptionSettings": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/encryptionSettings"
                        },
                        "description": "Optional. The configuration settings of the secrets references of encryption key and signing key for ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "globalValidation": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/globalValidation"
                        },
                        "description": "Optional. The configuration settings that determines the validation flow of users using Service Authentication and/or Authorization."
                      },
                      "nullable": true
                    },
                    "httpSettings": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/httpSettings"
                        },
                        "description": "Optional. The configuration settings of the HTTP requests for authentication and authorization requests made against ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "identityProviders": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/identityProviders"
                        },
                        "description": "Optional. The configuration settings of each of the identity providers used to configure ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "login": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/login"
                        },
                        "description": "Optional. The configuration settings of the login flow of users using ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    },
                    "platform": {
                      "type": "object",
                      "metadata": {
                        "__bicep_resource_derived_type!": {
                          "source": "Microsoft.App/containerApps/authConfigs@2025-01-01#properties/properties/properties/platform"
                        },
                        "description": "Optional. The configuration settings of the platform of ContainerApp Service Authentication/Authorization."
                      },
                      "nullable": true
                    }
                  },
                  "resources": {
                    "containerApp": {
                      "existing": true,
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2025-01-01",
                      "name": "[parameters('containerAppName')]"
                    },
                    "containerAppAuthConfigs": {
                      "type": "Microsoft.App/containerApps/authConfigs",
                      "apiVersion": "2025-01-01",
                      "name": "[format('{0}/{1}', parameters('containerAppName'), 'current')]",
                      "properties": {
                        "encryptionSettings": "[parameters('encryptionSettings')]",
                        "globalValidation": "[parameters('globalValidation')]",
                        "httpSettings": "[parameters('httpSettings')]",
                        "identityProviders": "[parameters('identityProviders')]",
                        "login": "[parameters('login')]",
                        "platform": "[parameters('platform')]"
                      }
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the set of Container App Auth configs."
                      },
                      "value": "current"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the set of Container App Auth configs."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps/authConfigs', parameters('containerAppName'), 'current')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group containing the set of Container App Auth configs."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "containerApp"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container App."
              },
              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
            },
            "fqdn": {
              "type": "string",
              "metadata": {
                "description": "The configuration of ingress fqdn."
              },
              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Container App was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container App."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[tryGet(tryGet(reference('containerApp', '2025-01-01', 'full'), 'identity'), 'principalId')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('containerApp', '2025-01-01', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "aiServices",
        "appIdentity",
        "applicationInsights",
        "containerAppsEnvironment",
        "cosmosDb",
        "storageAccount"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the resources were deployed into."
      },
      "value": "[resourceGroup().name]"
    }
  }
}