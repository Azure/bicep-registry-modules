{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.30.23.60470",
      "templateHash": "17417659473441028736"
    },
    "name": "Azd Machine Learning workspace",
    "description": "Create a machine learning workspace, configure the key vault access policy and assign role permissions to the machine learning instance.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "managedIdentitiesType": {
      "type": "object",
      "properties": {
        "systemAssigned": {
          "type": "bool",
          "nullable": true,
          "metadata": {
            "description": "Optional. Enables system assigned managed identity on the resource. Must be false if `primaryUserAssignedIdentity` is provided."
          }
        },
        "userAssignedResourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "nullable": true,
          "metadata": {
            "description": "Optional. The resource ID(s) to assign to the resource."
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the machine learning workspace."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
        "description": "Optional. Tags of the resource."
      }
    },
    "projectSku": {
      "type": "string",
      "defaultValue": "Basic",
      "allowedValues": [
        "Free",
        "Basic",
        "Standard",
        "Premium"
      ],
      "metadata": {
        "description": "Optional. Specifies the SKU, also referred as 'edition' of the Azure Machine Learning workspace."
      }
    },
    "projectKind": {
      "type": "string",
      "defaultValue": "Project",
      "allowedValues": [
        "Default",
        "Project",
        "Hub",
        "FeatureStore"
      ],
      "metadata": {
        "description": "Optional. The type of Azure Machine Learning workspace to create."
      }
    },
    "hbiWorkspace": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service."
      }
    },
    "publicNetworkAccess": {
      "type": "string",
      "defaultValue": "Enabled",
      "allowedValues": [
        "Enabled",
        "Disabled"
      ],
      "metadata": {
        "description": "Optional. Whether or not public network access is allowed for this machine learning workspace. For security reasons it should be disabled."
      }
    },
    "hubResourceId": {
      "type": "string",
      "metadata": {
        "description": "Required. The resource ID of the AI Studio Hub Resource where this project should be created."
      }
    },
    "keyVaultName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the key vault."
      }
    },
    "projectManagedIdentities": {
      "$ref": "#/definitions/managedIdentitiesType",
      "defaultValue": {
        "systemAssigned": true
      },
      "metadata": {
        "description": "Optional. The managed identity definition for the machine learning resource. At least one identity type is required."
      }
    },
    "userAssignedName": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the user assigned identity."
      }
    },
    "roleDefinitionIdOrName": {
      "type": "array",
      "defaultValue": [
        "f6c7c914-8db3-469d-8ca1-694a8f32e121",
        "ea01e6af-a1c1-4350-9563-ad00f8c72ec5"
      ],
      "metadata": {
        "description": "Optional. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'. Default roles: AzureML Data Scientist, Azure Machine Learning Workspace Connection Secrets Reader."
      }
    }
  },
  "resources": {
    "keyVault::keyVaultAccess": {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "objectId": "[reference('project').outputs.systemAssignedMIPrincipalId.value]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            },
            "tenantId": "[tenant().tenantId]"
          }
        ]
      },
      "dependsOn": [
        "keyVault",
        "project"
      ]
    },
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.azd-mlproject.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "keyVault": {
      "existing": true,
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2022-07-01",
      "name": "[parameters('keyVaultName')]"
    },
    "project": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-project', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('name')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "sku": {
            "value": "[parameters('projectSku')]"
          },
          "kind": {
            "value": "[parameters('projectKind')]"
          },
          "managedIdentities": {
            "value": "[parameters('projectManagedIdentities')]"
          },
          "hbiWorkspace": {
            "value": "[parameters('hbiWorkspace')]"
          },
          "publicNetworkAccess": {
            "value": "[parameters('publicNetworkAccess')]"
          },
          "hubResourceId": {
            "value": "[parameters('hubResourceId')]"
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "8914196510655371542"
            },
            "name": "Machine Learning Services Workspaces",
            "description": "This module deploys a Machine Learning Services Workspace.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "managedIdentitiesType": {
              "type": "object",
              "properties": {
                "systemAssigned": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Enables system assigned managed identity on the resource. Must be false if `primaryUserAssignedIdentity` is provided."
                  }
                },
                "userAssignedResourceIds": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID(s) to assign to the resource."
                  }
                }
              }
            },
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "privateEndpointType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private endpoint."
                    }
                  },
                  "location": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The location to deploy the private endpoint to."
                    }
                  },
                  "privateLinkServiceConnectionName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of the private link connection to create."
                    }
                  },
                  "service": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The subresource to deploy the private endpoint for. For example \"vault\", \"mysqlServer\" or \"dataFactory\"."
                    }
                  },
                  "subnetResourceId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                    }
                  },
                  "privateDnsZoneGroup": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "nullable": true,
                        "metadata": {
                          "description": "Optional. The name of the Private DNS Zone Group."
                        }
                      },
                      "privateDnsZoneGroupConfigs": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "name": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group config."
                              }
                            },
                            "privateDnsZoneResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource id of the private DNS zone."
                              }
                            }
                          }
                        },
                        "metadata": {
                          "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The private DNS zone group to configure for the private endpoint."
                    }
                  },
                  "isManualConnection": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. If Manual Private Link Connection is required."
                    }
                  },
                  "manualConnectionRequestMessage": {
                    "type": "string",
                    "nullable": true,
                    "maxLength": 140,
                    "metadata": {
                      "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                    }
                  },
                  "customDnsConfigs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "fqdn": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. Fqdn that resolves to private endpoint IP address."
                          }
                        },
                        "ipAddresses": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "metadata": {
                            "description": "Required. A list of private IP addresses of the private endpoint."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Custom DNS configurations."
                    }
                  },
                  "ipConfigurations": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the resource that is unique within a resource group."
                          }
                        },
                        "properties": {
                          "type": "object",
                          "properties": {
                            "groupId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "memberName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                              }
                            },
                            "privateIPAddress": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                              }
                            }
                          },
                          "metadata": {
                            "description": "Required. Properties of private endpoint IP configurations."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                    }
                  },
                  "applicationSecurityGroupResourceIds": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                    }
                  },
                  "customNetworkInterfaceName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                    }
                  },
                  "lock": {
                    "$ref": "#/definitions/lockType",
                    "metadata": {
                      "description": "Optional. Specify the type of lock."
                    }
                  },
                  "roleAssignments": {
                    "$ref": "#/definitions/roleAssignmentType",
                    "metadata": {
                      "description": "Optional. Array of role assignments to create."
                    }
                  },
                  "tags": {
                    "type": "object",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                    }
                  },
                  "enableTelemetry": {
                    "type": "bool",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Enable/Disable usage telemetry for module."
                    }
                  },
                  "resourceGroupName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Specify if you want to deploy the Private Endpoint into a different resource group than the main resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "featureStoreSettingType": {
              "type": "object",
              "properties": {
                "computeRuntime": {
                  "type": "object",
                  "properties": {
                    "sparkRuntimeVersion": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The spark runtime version."
                      }
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Compute runtime config for feature store type workspace."
                  }
                },
                "offlineStoreConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The offline store connection name."
                  }
                },
                "onlineStoreConnectionName": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The online store connection name."
                  }
                }
              },
              "nullable": true
            },
            "OutboundRuleType": {
              "type": "object",
              "discriminator": {
                "propertyName": "type",
                "mapping": {
                  "FQDN": {
                    "$ref": "#/definitions/FqdnOutboundRuleType"
                  },
                  "PrivateEndpoint": {
                    "$ref": "#/definitions/PrivateEndpointOutboundRule"
                  },
                  "ServiceTag": {
                    "$ref": "#/definitions/ServiceTagOutboundRule"
                  }
                }
              }
            },
            "FqdnOutboundRuleType": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "FQDN"
                  ],
                  "metadata": {
                    "description": "Required. Type of a managed network Outbound Rule of a machine learning workspace. Only supported when 'isolationMode' is 'AllowOnlyApprovedOutbound'."
                  }
                },
                "destination": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Fully Qualified Domain Name to allow for outbound traffic."
                  }
                },
                "category": {
                  "type": "string",
                  "allowedValues": [
                    "Dependency",
                    "Recommended",
                    "Required",
                    "UserDefined"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Category of a managed network Outbound Rule of a machine learning workspace."
                  }
                }
              }
            },
            "PrivateEndpointOutboundRule": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "PrivateEndpoint"
                  ],
                  "metadata": {
                    "description": "Required. Type of a managed network Outbound Rule of a machine learning workspace. Only supported when 'isolationMode' is 'AllowOnlyApprovedOutbound' or 'AllowInternetOutbound'."
                  }
                },
                "destination": {
                  "type": "object",
                  "properties": {
                    "serviceResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The resource ID of the target resource for the private endpoint."
                      }
                    },
                    "sparkEnabled": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Whether the private endpoint can be used by jobs running on Spark."
                      }
                    },
                    "subresourceTarget": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The sub resource to connect for the private endpoint."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace."
                  }
                },
                "category": {
                  "type": "string",
                  "allowedValues": [
                    "Dependency",
                    "Recommended",
                    "Required",
                    "UserDefined"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Category of a managed network Outbound Rule of a machine learning workspace."
                  }
                }
              }
            },
            "ServiceTagOutboundRule": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "allowedValues": [
                    "ServiceTag"
                  ],
                  "metadata": {
                    "description": "Required. Type of a managed network Outbound Rule of a machine learning workspace. Only supported when 'isolationMode' is 'AllowOnlyApprovedOutbound'."
                  }
                },
                "destination": {
                  "type": "object",
                  "properties": {
                    "portRanges": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the service tag to allow."
                      }
                    },
                    "protocol": {
                      "type": "string",
                      "allowedValues": [
                        "*",
                        "ICMP",
                        "TCP",
                        "UDP"
                      ],
                      "metadata": {
                        "description": "Required. The protocol to allow. Provide an asterisk(*) to allow any protocol."
                      }
                    },
                    "serviceTag": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Which ports will be allow traffic by this rule. Provide an asterisk(*) to allow any port."
                      }
                    }
                  },
                  "metadata": {
                    "description": "Required. Service Tag destination for a Service Tag Outbound Rule for the managed network of a machine learning workspace."
                  }
                },
                "category": {
                  "type": "string",
                  "allowedValues": [
                    "Dependency",
                    "Recommended",
                    "Required",
                    "UserDefined"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Category of a managed network Outbound Rule of a machine learning workspace."
                  }
                }
              }
            },
            "managedNetworkSettingType": {
              "type": "object",
              "properties": {
                "isolationMode": {
                  "type": "string",
                  "allowedValues": [
                    "AllowInternetOutbound",
                    "AllowOnlyApprovedOutbound",
                    "Disabled"
                  ],
                  "metadata": {
                    "description": "Required. Isolation mode for the managed network of a machine learning workspace."
                  }
                },
                "outboundRules": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "$ref": "#/definitions/OutboundRuleType",
                    "metadata": {
                      "description": "Required. The outbound rule. The name of the rule is the object key."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Outbound rules for the managed network of a machine learning workspace."
                  }
                }
              },
              "nullable": true
            },
            "serverlessComputeSettingType": {
              "type": "object",
              "properties": {
                "serverlessComputeCustomSubnet": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of an existing virtual network subnet in which serverless compute nodes should be deployed."
                  }
                },
                "serverlessComputeNoPublicIP": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The flag to signal if serverless compute nodes deployed in custom vNet would have no public IP addresses for a workspace with private endpoint."
                  }
                }
              },
              "nullable": true
            },
            "workspaceHubConfigType": {
              "type": "object",
              "properties": {
                "additionalWorkspaceStorageAccounts": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource IDs of additional storage accounts to attach to the workspace."
                  }
                },
                "defaultWorkspaceResourceGroup": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The resource ID of the default resource group for projects created in the workspace hub."
                  }
                }
              },
              "nullable": true
            },
            "diagnosticSettingType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of diagnostic setting."
                    }
                  },
                  "logCategoriesAndGroups": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                          }
                        },
                        "categoryGroup": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                    }
                  },
                  "metricCategories": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                          }
                        },
                        "enabled": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                          }
                        }
                      }
                    },
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                    }
                  },
                  "logAnalyticsDestinationType": {
                    "type": "string",
                    "allowedValues": [
                      "AzureDiagnostics",
                      "Dedicated"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                    }
                  },
                  "workspaceResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "storageAccountResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "eventHubAuthorizationRuleResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                    }
                  },
                  "eventHubName": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                    }
                  },
                  "marketplacePartnerResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                    }
                  }
                }
              },
              "nullable": true
            },
            "customerManagedKeyType": {
              "type": "object",
              "properties": {
                "keyVaultResourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                  }
                },
                "keyName": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The name of the customer managed key to use for encryption."
                  }
                },
                "keyVersion": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                  }
                },
                "userAssignedIdentityResourceId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                  }
                }
              },
              "nullable": true
            },
            "connectionType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Name of the connection to create."
                  }
                },
                "category": {
                  "$ref": "#/definitions/categoryType",
                  "metadata": {
                    "description": "Required. Category of the connection."
                  }
                },
                "expiryTime": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The expiry time of the connection."
                  }
                },
                "isSharedToAll": {
                  "type": "bool",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Indicates whether the connection is shared to all users in the workspace."
                  }
                },
                "metadata": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The metadata key-value pairs."
                    }
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. User metadata for the connection."
                  }
                },
                "sharedUserList": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. The shared user list of the connection."
                  }
                },
                "target": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The target of the connection."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Value details of the workspace connection."
                  }
                },
                "connectionProperties": {
                  "$ref": "#/definitions/connectionPropertyType",
                  "metadata": {
                    "description": "Required. The properties of the connection, specific to the auth type."
                  }
                }
              }
            },
            "_1.aadAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "AAD"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.accessKeyAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "AccessKey"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionAccessKeyType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.apiKeyAuthWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "ApiKey"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionApiKeyType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.customKeysType": {
              "type": "object",
              "properties": {
                "keys": {
                  "type": "object",
                  "properties": {},
                  "additionalProperties": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. Key-value pairs for the custom keys."
                    }
                  },
                  "metadata": {
                    "description": "Required. The custom keys for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.customKeysWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "CustomKeys"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.customKeysType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.managedIdentityAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "ManagedIdentity"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionManagedIdentityType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.noneAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "None"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.oauth2AuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "OAuth2"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionOAuth2Type",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.patAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "PAT"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionPersonalAccessTokenType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.sasAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "SAS"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionSharedAccessSignatureType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.servicePrincipalAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "ServicePrincipal"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionServicePrincipalType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.usernamePasswordAuthTypeWorkspaceConnectionPropertyType": {
              "type": "object",
              "properties": {
                "authType": {
                  "type": "string",
                  "allowedValues": [
                    "UsernamePassword"
                  ],
                  "metadata": {
                    "description": "Required. The authentication type of the connection target."
                  }
                },
                "credentials": {
                  "$ref": "#/definitions/_1.workspaceConnectionUsernamePasswordType",
                  "metadata": {
                    "description": "Required. The credentials for the connection."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionAccessKeyType": {
              "type": "object",
              "properties": {
                "accessKeyId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection access key ID."
                  }
                },
                "secretAccessKey": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection secret access key."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionApiKeyType": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection API key."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionManagedIdentityType": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection managed identity ID."
                  }
                },
                "resourceId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection managed identity resource ID."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionOAuth2Type": {
              "type": "object",
              "properties": {
                "authUrl": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection auth URL. Required by Concur connection category."
                  }
                },
                "clientId": {
                  "type": "string",
                  "minLength": 36,
                  "maxLength": 36,
                  "metadata": {
                    "description": "Required. The connection client ID in the format of UUID."
                  }
                },
                "clientSecret": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection client secret."
                  }
                },
                "developerToken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection developer token. Required by GoogleAdWords connection category."
                  }
                },
                "password": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection password. Required by Concur and ServiceNow connection categories where AccessToken grant type is 'Password'."
                  }
                },
                "refreshToken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection refresh token. Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero and Zoho connection categories."
                  }
                },
                "tenantId": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Required. The connection tenant ID. Required by QuickBooks and Xero connection categories."
                  }
                },
                "username": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection username. Required by Concur and ServiceNow connection categories where AccessToken grant type is 'Password'."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionPersonalAccessTokenType": {
              "type": "object",
              "properties": {
                "pat": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection personal access token."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionServicePrincipalType": {
              "type": "object",
              "properties": {
                "clientId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection client ID."
                  }
                },
                "clientSecret": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection client secret."
                  }
                },
                "tenantId": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection tenant ID."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionSharedAccessSignatureType": {
              "type": "object",
              "properties": {
                "sas": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection SAS token."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "_1.workspaceConnectionUsernamePasswordType": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection password."
                  }
                },
                "securityToken": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Conditional. The connection security token. Required by connections like SalesForce for extra security in addition to 'UsernamePassword'."
                  }
                },
                "username": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. The connection username."
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "categoryType": {
              "type": "string",
              "allowedValues": [
                "ADLSGen2",
                "AIServices",
                "AmazonMws",
                "AmazonRdsForOracle",
                "AmazonRdsForSqlServer",
                "AmazonRedshift",
                "AmazonS3Compatible",
                "ApiKey",
                "AzureBlob",
                "AzureDataExplorer",
                "AzureDatabricksDeltaLake",
                "AzureMariaDb",
                "AzureMySqlDb",
                "AzureOneLake",
                "AzureOpenAI",
                "AzurePostgresDb",
                "AzureSqlDb",
                "AzureSqlMi",
                "AzureSynapseAnalytics",
                "AzureTableStorage",
                "BingLLMSearch",
                "Cassandra",
                "CognitiveSearch",
                "CognitiveService",
                "Concur",
                "ContainerRegistry",
                "CosmosDb",
                "CosmosDbMongoDbApi",
                "Couchbase",
                "CustomKeys",
                "Db2",
                "Drill",
                "Dynamics",
                "DynamicsAx",
                "DynamicsCrm",
                "Eloqua",
                "FileServer",
                "FtpServer",
                "GenericContainerRegistry",
                "GenericHttp",
                "GenericRest",
                "Git",
                "GoogleAdWords",
                "GoogleBigQuery",
                "GoogleCloudStorage",
                "Greenplum",
                "Hbase",
                "Hdfs",
                "Hive",
                "Hubspot",
                "Impala",
                "Informix",
                "Jira",
                "Magento",
                "MariaDb",
                "Marketo",
                "MicrosoftAccess",
                "MongoDbAtlas",
                "MongoDbV2",
                "MySql",
                "Netezza",
                "ODataRest",
                "Odbc",
                "Office365",
                "OpenAI",
                "Oracle",
                "OracleCloudStorage",
                "OracleServiceCloud",
                "PayPal",
                "Phoenix",
                "PostgreSql",
                "Presto",
                "PythonFeed",
                "QuickBooks",
                "Redis",
                "Responsys",
                "S3",
                "Salesforce",
                "SalesforceMarketingCloud",
                "SalesforceServiceCloud",
                "SapBw",
                "SapCloudForCustomer",
                "SapEcc",
                "SapHana",
                "SapOpenHub",
                "SapTable",
                "Serp",
                "Serverless",
                "ServiceNow",
                "Sftp",
                "SharePointOnlineList",
                "Shopify",
                "Snowflake",
                "Spark",
                "SqlServer",
                "Square",
                "Sybase",
                "Teradata",
                "Vertica",
                "WebTable",
                "Xero",
                "Zoho"
              ],
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            },
            "connectionPropertyType": {
              "type": "secureObject",
              "discriminator": {
                "propertyName": "authType",
                "mapping": {
                  "AAD": {
                    "$ref": "#/definitions/_1.aadAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "AccessKey": {
                    "$ref": "#/definitions/_1.accessKeyAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "ApiKey": {
                    "$ref": "#/definitions/_1.apiKeyAuthWorkspaceConnectionPropertyType"
                  },
                  "CustomKeys": {
                    "$ref": "#/definitions/_1.customKeysWorkspaceConnectionPropertyType"
                  },
                  "ManagedIdentity": {
                    "$ref": "#/definitions/_1.managedIdentityAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "None": {
                    "$ref": "#/definitions/_1.noneAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "OAuth2": {
                    "$ref": "#/definitions/_1.oauth2AuthTypeWorkspaceConnectionPropertyType"
                  },
                  "PAT": {
                    "$ref": "#/definitions/_1.patAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "SAS": {
                    "$ref": "#/definitions/_1.sasAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "ServicePrincipal": {
                    "$ref": "#/definitions/_1.servicePrincipalAuthTypeWorkspaceConnectionPropertyType"
                  },
                  "UsernamePassword": {
                    "$ref": "#/definitions/_1.usernamePasswordAuthTypeWorkspaceConnectionPropertyType"
                  }
                }
              },
              "metadata": {
                "__bicep_imported_from!": {
                  "sourceTemplate": "connection/main.bicep"
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the machine learning workspace."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "sku": {
              "type": "string",
              "allowedValues": [
                "Free",
                "Basic",
                "Standard",
                "Premium"
              ],
              "metadata": {
                "description": "Required. Specifies the SKU, also referred as 'edition' of the Azure Machine Learning workspace."
              }
            },
            "kind": {
              "type": "string",
              "defaultValue": "Default",
              "allowedValues": [
                "Default",
                "Project",
                "Hub",
                "FeatureStore"
              ],
              "metadata": {
                "description": "Optional. The type of Azure Machine Learning workspace to create."
              }
            },
            "associatedStorageAccountResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The resource ID of the associated Storage Account. Required if 'kind' is 'Default', 'FeatureStore' or 'Hub'."
              }
            },
            "associatedKeyVaultResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The resource ID of the associated Key Vault. Required if 'kind' is 'Default', 'FeatureStore' or 'Hub'."
              }
            },
            "associatedApplicationInsightsResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The resource ID of the associated Application Insights. Required if 'kind' is 'Default' or 'FeatureStore'."
              }
            },
            "associatedContainerRegistryResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The resource ID of the associated Container Registry."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "hbiWorkspace": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. The flag to signal HBI data in the workspace and reduce diagnostic data collected by the service."
              }
            },
            "hubResourceId": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The resource ID of the hub to associate with the workspace. Required if 'kind' is set to 'Project'."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "privateEndpoints": {
              "$ref": "#/definitions/privateEndpointType",
              "metadata": {
                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
              }
            },
            "computes": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. Computes to create respectively attach to the workspace."
              }
            },
            "connections": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/connectionType"
              },
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Connections to create in the workspace."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Resource tags."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            },
            "managedIdentities": {
              "$ref": "#/definitions/managedIdentitiesType",
              "defaultValue": {
                "systemAssigned": true
              },
              "metadata": {
                "description": "Optional. The managed identity definition for this resource. At least one identity type is required."
              }
            },
            "featureStoreSettings": {
              "$ref": "#/definitions/featureStoreSettingType",
              "metadata": {
                "description": "Conditional. Settings for feature store type workspaces. Required if 'kind' is set to 'FeatureStore'."
              }
            },
            "managedNetworkSettings": {
              "$ref": "#/definitions/managedNetworkSettingType",
              "metadata": {
                "description": "Optional. Managed Network settings for a machine learning workspace."
              }
            },
            "serverlessComputeSettings": {
              "$ref": "#/definitions/serverlessComputeSettingType",
              "metadata": {
                "description": "Optional. Settings for serverless compute created in the workspace."
              }
            },
            "systemDatastoresAuthMode": {
              "type": "string",
              "nullable": true,
              "allowedValues": [
                "accessKey",
                "identity"
              ],
              "metadata": {
                "description": "Optional. The authentication mode used by the workspace when connecting to the default storage account."
              }
            },
            "workspaceHubConfig": {
              "$ref": "#/definitions/workspaceHubConfigType",
              "metadata": {
                "description": "Optional. Configuration for workspace hub settings."
              }
            },
            "diagnosticSettings": {
              "$ref": "#/definitions/diagnosticSettingType",
              "metadata": {
                "description": "Optional. The diagnostic settings of the service."
              }
            },
            "description": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The description of this workspace."
              }
            },
            "discoveryUrl": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. URL for the discovery service to identify regional endpoints for machine learning experimentation services."
              }
            },
            "customerManagedKey": {
              "$ref": "#/definitions/customerManagedKeyType",
              "metadata": {
                "description": "Optional. The customer managed key definition."
              }
            },
            "imageBuildCompute": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Optional. The compute name for image build."
              }
            },
            "primaryUserAssignedIdentity": {
              "type": "string",
              "nullable": true,
              "metadata": {
                "description": "Conditional. The user assigned identity resource ID that represents the workspace identity. Required if 'userAssignedIdentities' is not empty and may not be used if 'systemAssignedIdentity' is enabled."
              }
            },
            "serviceManagedResourcesSettings": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. The service managed resource settings."
              }
            },
            "sharedPrivateLinkResources": {
              "type": "array",
              "nullable": true,
              "metadata": {
                "description": "Optional. The list of shared private link resources in this workspace. Note: This property is not idempotent."
              }
            },
            "publicNetworkAccess": {
              "type": "string",
              "defaultValue": "Disabled",
              "allowedValues": [
                "Enabled",
                "Disabled"
              ],
              "metadata": {
                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
            "builtInRoleNames": {
              "AzureML Compute Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e503ece1-11d0-4e8e-8e2c-7a6c3bf38815')]",
              "AzureML Data Scientist": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f6c7c914-8db3-469d-8ca1-694a8f32e121')]",
              "AzureML Metrics Writer (preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '635dd51f-9968-44d3-b7fb-6d9a6bd613ae')]",
              "AzureML Registry User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '1823dd4f-9b8c-4ab6-ab4e-7397a3684615')]",
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "cMKKeyVault::cMKKey": {
              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults/keys",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
              "dependsOn": [
                "cMKKeyVault"
              ]
            },
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.machinelearningservices-workspace.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "cMKKeyVault": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
              "existing": true,
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
            },
            "cMKUserAssignedIdentity": {
              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
              "existing": true,
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
            },
            "workspace": {
              "type": "Microsoft.MachineLearningServices/workspaces",
              "apiVersion": "2024-04-01-preview",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "sku": {
                "name": "[parameters('sku')]",
                "tier": "[parameters('sku')]"
              },
              "identity": "[variables('identity')]",
              "properties": "[union(createObject('friendlyName', parameters('name'), 'storageAccount', parameters('associatedStorageAccountResourceId'), 'keyVault', parameters('associatedKeyVaultResourceId'), 'applicationInsights', parameters('associatedApplicationInsightsResourceId'), 'containerRegistry', parameters('associatedContainerRegistryResourceId'), 'hbiWorkspace', parameters('hbiWorkspace'), 'description', parameters('description'), 'discoveryUrl', parameters('discoveryUrl'), 'encryption', if(not(empty(parameters('customerManagedKey'))), createObject('status', 'Enabled', 'identity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), createObject('userAssignedIdentity', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/')))), null()), 'keyVaultProperties', createObject('keyVaultArmId', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2], split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]), 'Microsoft.KeyVault/vaults', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))), 'keyIdentifier', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null()), 'imageBuildCompute', parameters('imageBuildCompute'), 'primaryUserAssignedIdentity', parameters('primaryUserAssignedIdentity'), 'systemDatastoresAuthMode', parameters('systemDatastoresAuthMode'), 'publicNetworkAccess', parameters('publicNetworkAccess'), 'serviceManagedResourcesSettings', parameters('serviceManagedResourcesSettings'), 'featureStoreSettings', parameters('featureStoreSettings'), 'hubResourceId', parameters('hubResourceId'), 'managedNetwork', parameters('managedNetworkSettings'), 'serverlessComputeSettings', parameters('serverlessComputeSettings'), 'workspaceHubConfig', parameters('workspaceHubConfig')), if(not(empty(parameters('sharedPrivateLinkResources'))), createObject('sharedPrivateLinkResources', parameters('sharedPrivateLinkResources')), createObject()))]",
              "kind": "[parameters('kind')]",
              "dependsOn": [
                "cMKKeyVault",
                "cMKUserAssignedIdentity"
              ]
            },
            "workspace_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_diagnosticSettings": {
              "copy": {
                "name": "workspace_diagnosticSettings",
                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
              },
              "type": "Microsoft.Insights/diagnosticSettings",
              "apiVersion": "2021-05-01-preview",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "metrics",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                    "input": {
                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                      "timeGrain": null
                    }
                  },
                  {
                    "name": "logs",
                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                    "input": {
                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                    }
                  }
                ],
                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_roleAssignments": {
              "copy": {
                "name": "workspace_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.MachineLearningServices/workspaces/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_computes": {
              "copy": {
                "name": "workspace_computes",
                "count": "[length(coalesce(parameters('computes'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-{1}-compute', parameters('name'), coalesce(parameters('computes'), createArray())[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "machineLearningWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[coalesce(parameters('computes'), createArray())[copyIndex()].name]"
                  },
                  "location": {
                    "value": "[coalesce(parameters('computes'), createArray())[copyIndex()].location]"
                  },
                  "sku": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'sku')]"
                  },
                  "managedIdentities": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'managedIdentities')]"
                  },
                  "tags": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'tags')]"
                  },
                  "deployCompute": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'deployCompute')]"
                  },
                  "computeLocation": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'computeLocation')]"
                  },
                  "description": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'description')]"
                  },
                  "disableLocalAuth": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'disableLocalAuth')]"
                  },
                  "resourceId": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'resourceId')]"
                  },
                  "computeType": {
                    "value": "[coalesce(parameters('computes'), createArray())[copyIndex()].computeType]"
                  },
                  "properties": {
                    "value": "[tryGet(coalesce(parameters('computes'), createArray())[copyIndex()], 'properties')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "8580750401363518569"
                    },
                    "name": "Machine Learning Services Workspaces Computes",
                    "description": "This module deploys a Machine Learning Services Workspaces Compute.\n\nAttaching a compute is not idempotent and will fail in case you try to redeploy over an existing compute in AML (see parameter `deployCompute`).",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    }
                  },
                  "parameters": {
                    "machineLearningWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent Machine Learning Workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "minLength": 2,
                      "maxLength": 16,
                      "metadata": {
                        "description": "Required. Name of the compute."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Specifies the location of the resource."
                      }
                    },
                    "sku": {
                      "type": "string",
                      "nullable": true,
                      "allowedValues": [
                        "Basic",
                        "Free",
                        "Premium",
                        "Standard"
                      ],
                      "metadata": {
                        "description": "Optional. Specifies the sku, also referred as \"edition\". Required for creating a compute resource."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Contains resource tags defined as key-value pairs. Ignored when attaching a compute resource, i.e. when you provide a resource ID."
                      }
                    },
                    "deployCompute": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Flag to specify whether to deploy the compute. Required only for attach (i.e. providing a resource ID), as in this case the operation is not idempotent, i.e. a second deployment will fail. Therefore, this flag needs to be set to \"false\" as long as the compute resource exists."
                      }
                    },
                    "computeLocation": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for the underlying compute. Ignored when attaching a compute resource, i.e. when you provide a resource ID."
                      }
                    },
                    "description": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The description of the Machine Learning compute."
                      }
                    },
                    "disableLocalAuth": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Opt-out of local authentication and ensure customers can use only MSI and AAD exclusively for authentication."
                      }
                    },
                    "resourceId": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. ARM resource ID of the underlying compute."
                      }
                    },
                    "computeType": {
                      "type": "string",
                      "allowedValues": [
                        "AKS",
                        "AmlCompute",
                        "ComputeInstance",
                        "Databricks",
                        "DataFactory",
                        "DataLakeAnalytics",
                        "HDInsight",
                        "Kubernetes",
                        "SynapseSpark",
                        "VirtualMachine"
                      ],
                      "metadata": {
                        "description": "Required. Set the object type."
                      }
                    },
                    "properties": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The properties of the compute. Will be ignored in case \"resourceId\" is set."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    }
                  },
                  "variables": {
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]"
                  },
                  "resources": {
                    "machineLearningWorkspace": {
                      "existing": true,
                      "type": "Microsoft.MachineLearningServices/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('machineLearningWorkspaceName')]"
                    },
                    "compute": {
                      "condition": "[equals(parameters('deployCompute'), true())]",
                      "type": "Microsoft.MachineLearningServices/workspaces/computes",
                      "apiVersion": "2022-10-01",
                      "name": "[format('{0}/{1}', parameters('machineLearningWorkspaceName'), parameters('name'))]",
                      "location": "[parameters('location')]",
                      "tags": "[if(empty(parameters('resourceId')), parameters('tags'), null())]",
                      "sku": "[if(empty(parameters('resourceId')), createObject('name', parameters('sku'), 'tier', parameters('sku')), null())]",
                      "identity": "[if(empty(parameters('resourceId')), variables('identity'), null())]",
                      "properties": "[union(createObject('description', parameters('description'), 'disableLocalAuth', parameters('disableLocalAuth'), 'computeType', parameters('computeType')), if(not(empty(parameters('resourceId'))), createObject('resourceId', parameters('resourceId')), createObject('computeLocation', parameters('computeLocation'), 'properties', parameters('properties'))))]",
                      "dependsOn": [
                        "machineLearningWorkspace"
                      ]
                    }
                  },
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the compute."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the compute."
                      },
                      "value": "[resourceId('Microsoft.MachineLearningServices/workspaces/computes', parameters('machineLearningWorkspaceName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the compute was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('compute', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('compute', '2022-10-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workspace",
                "workspace_privateEndpoints"
              ]
            },
            "workspace_connections": {
              "copy": {
                "name": "workspace_connections",
                "count": "[length(parameters('connections'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-{1}-connection', parameters('name'), parameters('connections')[copyIndex()].name)]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "machineLearningWorkspaceName": {
                    "value": "[parameters('name')]"
                  },
                  "name": {
                    "value": "[parameters('connections')[copyIndex()].name]"
                  },
                  "category": {
                    "value": "[parameters('connections')[copyIndex()].category]"
                  },
                  "expiryTime": {
                    "value": "[tryGet(parameters('connections')[copyIndex()], 'expiryTime')]"
                  },
                  "isSharedToAll": {
                    "value": "[tryGet(parameters('connections')[copyIndex()], 'isSharedToAll')]"
                  },
                  "metadata": {
                    "value": "[tryGet(parameters('connections')[copyIndex()], 'metadata')]"
                  },
                  "sharedUserList": {
                    "value": "[tryGet(parameters('connections')[copyIndex()], 'sharedUserList')]"
                  },
                  "target": {
                    "value": "[parameters('connections')[copyIndex()].target]"
                  },
                  "value": {
                    "value": "[tryGet(parameters('connections')[copyIndex()], 'value')]"
                  },
                  "connectionProperties": {
                    "value": "[parameters('connections')[copyIndex()].connectionProperties]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "2277907099827503661"
                    },
                    "name": "Machine Learning Services Workspaces Connections",
                    "description": "This module creates a connection in a Machine Learning Services workspace.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "metadataType": {
                      "type": "object",
                      "properties": {},
                      "additionalProperties": {
                        "type": "string",
                        "metadata": {
                          "description": "Required. The metadata key-value pairs."
                        }
                      }
                    },
                    "categoryType": {
                      "type": "string",
                      "allowedValues": [
                        "ADLSGen2",
                        "AIServices",
                        "AmazonMws",
                        "AmazonRdsForOracle",
                        "AmazonRdsForSqlServer",
                        "AmazonRedshift",
                        "AmazonS3Compatible",
                        "ApiKey",
                        "AzureBlob",
                        "AzureDataExplorer",
                        "AzureDatabricksDeltaLake",
                        "AzureMariaDb",
                        "AzureMySqlDb",
                        "AzureOneLake",
                        "AzureOpenAI",
                        "AzurePostgresDb",
                        "AzureSqlDb",
                        "AzureSqlMi",
                        "AzureSynapseAnalytics",
                        "AzureTableStorage",
                        "BingLLMSearch",
                        "Cassandra",
                        "CognitiveSearch",
                        "CognitiveService",
                        "Concur",
                        "ContainerRegistry",
                        "CosmosDb",
                        "CosmosDbMongoDbApi",
                        "Couchbase",
                        "CustomKeys",
                        "Db2",
                        "Drill",
                        "Dynamics",
                        "DynamicsAx",
                        "DynamicsCrm",
                        "Eloqua",
                        "FileServer",
                        "FtpServer",
                        "GenericContainerRegistry",
                        "GenericHttp",
                        "GenericRest",
                        "Git",
                        "GoogleAdWords",
                        "GoogleBigQuery",
                        "GoogleCloudStorage",
                        "Greenplum",
                        "Hbase",
                        "Hdfs",
                        "Hive",
                        "Hubspot",
                        "Impala",
                        "Informix",
                        "Jira",
                        "Magento",
                        "MariaDb",
                        "Marketo",
                        "MicrosoftAccess",
                        "MongoDbAtlas",
                        "MongoDbV2",
                        "MySql",
                        "Netezza",
                        "ODataRest",
                        "Odbc",
                        "Office365",
                        "OpenAI",
                        "Oracle",
                        "OracleCloudStorage",
                        "OracleServiceCloud",
                        "PayPal",
                        "Phoenix",
                        "PostgreSql",
                        "Presto",
                        "PythonFeed",
                        "QuickBooks",
                        "Redis",
                        "Responsys",
                        "S3",
                        "Salesforce",
                        "SalesforceMarketingCloud",
                        "SalesforceServiceCloud",
                        "SapBw",
                        "SapCloudForCustomer",
                        "SapEcc",
                        "SapHana",
                        "SapOpenHub",
                        "SapTable",
                        "Serp",
                        "Serverless",
                        "ServiceNow",
                        "Sftp",
                        "SharePointOnlineList",
                        "Shopify",
                        "Snowflake",
                        "Spark",
                        "SqlServer",
                        "Square",
                        "Sybase",
                        "Teradata",
                        "Vertica",
                        "WebTable",
                        "Xero",
                        "Zoho"
                      ],
                      "metadata": {
                        "__bicep_export!": true
                      }
                    },
                    "aadAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "AAD"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        }
                      }
                    },
                    "accessKeyAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "AccessKey"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionAccessKeyType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "accountKeyAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "AccountKey"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionAccountKey",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "apiKeyAuthWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "ApiKey"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionApiKeyType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "customKeysWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "CustomKeys"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/customKeysType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "managedIdentityAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "ManagedIdentity"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionManagedIdentityType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "noneAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "None"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        }
                      }
                    },
                    "oauth2AuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "OAuth2"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionOAuth2Type",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "patAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "PAT"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionPersonalAccessTokenType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "sasAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "SAS"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionSharedAccessSignatureType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "servicePrincipalAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "ServicePrincipal"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionServicePrincipalType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "usernamePasswordAuthTypeWorkspaceConnectionPropertyType": {
                      "type": "object",
                      "properties": {
                        "authType": {
                          "type": "string",
                          "allowedValues": [
                            "UsernamePassword"
                          ],
                          "metadata": {
                            "description": "Required. The authentication type of the connection target."
                          }
                        },
                        "credentials": {
                          "$ref": "#/definitions/workspaceConnectionUsernamePasswordType",
                          "metadata": {
                            "description": "Required. The credentials for the connection."
                          }
                        }
                      }
                    },
                    "customKeysType": {
                      "type": "object",
                      "properties": {
                        "keys": {
                          "type": "object",
                          "properties": {},
                          "additionalProperties": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Key-value pairs for the custom keys."
                            }
                          },
                          "metadata": {
                            "description": "Required. The custom keys for the connection."
                          }
                        }
                      }
                    },
                    "workspaceConnectionAccessKeyType": {
                      "type": "object",
                      "properties": {
                        "accessKeyId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection access key ID."
                          }
                        },
                        "secretAccessKey": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection secret access key."
                          }
                        }
                      }
                    },
                    "workspaceConnectionAccountKey": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection key."
                          }
                        }
                      }
                    },
                    "workspaceConnectionApiKeyType": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection API key."
                          }
                        }
                      }
                    },
                    "workspaceConnectionManagedIdentityType": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection managed identity ID."
                          }
                        },
                        "resourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection managed identity resource ID."
                          }
                        }
                      }
                    },
                    "workspaceConnectionOAuth2Type": {
                      "type": "object",
                      "properties": {
                        "authUrl": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection auth URL. Required by Concur connection category."
                          }
                        },
                        "clientId": {
                          "type": "string",
                          "minLength": 36,
                          "maxLength": 36,
                          "metadata": {
                            "description": "Required. The connection client ID in the format of UUID."
                          }
                        },
                        "clientSecret": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection client secret."
                          }
                        },
                        "developerToken": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection developer token. Required by GoogleAdWords connection category."
                          }
                        },
                        "password": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection password. Required by Concur and ServiceNow connection categories where AccessToken grant type is 'Password'."
                          }
                        },
                        "refreshToken": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection refresh token. Required by GoogleBigQuery, GoogleAdWords, Hubspot, QuickBooks, Square, Xero and Zoho connection categories."
                          }
                        },
                        "tenantId": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Required. The connection tenant ID. Required by QuickBooks and Xero connection categories."
                          }
                        },
                        "username": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection username. Required by Concur and ServiceNow connection categories where AccessToken grant type is 'Password'."
                          }
                        }
                      }
                    },
                    "workspaceConnectionPersonalAccessTokenType": {
                      "type": "object",
                      "properties": {
                        "pat": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection personal access token."
                          }
                        }
                      }
                    },
                    "workspaceConnectionSharedAccessSignatureType": {
                      "type": "object",
                      "properties": {
                        "sas": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection SAS token."
                          }
                        }
                      }
                    },
                    "workspaceConnectionServicePrincipalType": {
                      "type": "object",
                      "properties": {
                        "clientId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection client ID."
                          }
                        },
                        "clientSecret": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection client secret."
                          }
                        },
                        "tenantId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection tenant ID."
                          }
                        }
                      }
                    },
                    "workspaceConnectionUsernamePasswordType": {
                      "type": "object",
                      "properties": {
                        "password": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection password."
                          }
                        },
                        "securityToken": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Conditional. The connection security token. Required by connections like SalesForce for extra security in addition to 'UsernamePassword'."
                          }
                        },
                        "username": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The connection username."
                          }
                        }
                      }
                    },
                    "connectionPropertyType": {
                      "type": "secureObject",
                      "discriminator": {
                        "propertyName": "authType",
                        "mapping": {
                          "AAD": {
                            "$ref": "#/definitions/aadAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "AccessKey": {
                            "$ref": "#/definitions/accessKeyAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "ApiKey": {
                            "$ref": "#/definitions/apiKeyAuthWorkspaceConnectionPropertyType"
                          },
                          "CustomKeys": {
                            "$ref": "#/definitions/customKeysWorkspaceConnectionPropertyType"
                          },
                          "ManagedIdentity": {
                            "$ref": "#/definitions/managedIdentityAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "None": {
                            "$ref": "#/definitions/noneAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "OAuth2": {
                            "$ref": "#/definitions/oauth2AuthTypeWorkspaceConnectionPropertyType"
                          },
                          "PAT": {
                            "$ref": "#/definitions/patAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "SAS": {
                            "$ref": "#/definitions/sasAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "ServicePrincipal": {
                            "$ref": "#/definitions/servicePrincipalAuthTypeWorkspaceConnectionPropertyType"
                          },
                          "UsernamePassword": {
                            "$ref": "#/definitions/usernamePasswordAuthTypeWorkspaceConnectionPropertyType"
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_export!": true
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the connection to create."
                      }
                    },
                    "machineLearningWorkspaceName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the parent Machine Learning Workspace. Required if the template is used in a standalone deployment."
                      }
                    },
                    "category": {
                      "$ref": "#/definitions/categoryType",
                      "metadata": {
                        "description": "Required. Category of the connection."
                      }
                    },
                    "expiryTime": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The expiry time of the connection."
                      }
                    },
                    "isSharedToAll": {
                      "type": "bool",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Indicates whether the connection is shared to all users in the workspace."
                      }
                    },
                    "metadata": {
                      "$ref": "#/definitions/metadataType",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. User metadata for the connection."
                      }
                    },
                    "sharedUserList": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The shared user list of the connection."
                      }
                    },
                    "target": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The target of the connection."
                      }
                    },
                    "value": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Value details of the workspace connection."
                      }
                    },
                    "connectionProperties": {
                      "$ref": "#/definitions/connectionPropertyType",
                      "metadata": {
                        "description": "Required. The properties of the connection, specific to the auth type."
                      }
                    }
                  },
                  "resources": {
                    "machineLearningWorkspace": {
                      "existing": true,
                      "type": "Microsoft.MachineLearningServices/workspaces",
                      "apiVersion": "2022-10-01",
                      "name": "[parameters('machineLearningWorkspaceName')]"
                    },
                    "connection": {
                      "type": "Microsoft.MachineLearningServices/workspaces/connections",
                      "apiVersion": "2024-04-01",
                      "name": "[format('{0}/{1}', parameters('machineLearningWorkspaceName'), parameters('name'))]",
                      "properties": "[union(createObject('category', parameters('category'), 'expiryTime', parameters('expiryTime'), 'isSharedToAll', parameters('isSharedToAll'), 'metadata', parameters('metadata'), 'sharedUserList', parameters('sharedUserList'), 'target', parameters('target'), 'value', parameters('value')), parameters('connectionProperties'))]",
                      "dependsOn": [
                        "machineLearningWorkspace"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the connection."
                      },
                      "value": "[resourceId('Microsoft.MachineLearningServices/workspaces/connections', parameters('machineLearningWorkspaceName'), parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the connection."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the connection was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workspace"
              ]
            },
            "workspace_privateEndpoints": {
              "copy": {
                "name": "workspace_privateEndpoints",
                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-workspace-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "resourceGroup": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupName'), '')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'amlworkspace'), copyIndex()))]"
                  },
                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'amlworkspace'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'amlworkspace')))))), createObject('value', null()))]",
                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'amlworkspace'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'amlworkspace')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                  "subnetResourceId": {
                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                  },
                  "enableTelemetry": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                  },
                  "location": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                  },
                  "lock": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                  },
                  "privateDnsZoneGroup": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                  },
                  "roleAssignments": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                  },
                  "tags": {
                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                  },
                  "customDnsConfigs": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                  },
                  "ipConfigurations": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                  },
                  "applicationSecurityGroupResourceIds": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                  },
                  "customNetworkInterfaceName": {
                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "3308873178893851812"
                    },
                    "name": "Private Endpoints",
                    "description": "This module deploys a Private Endpoint.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "privateDnsZoneGroupType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the Private DNS Zone Group."
                          }
                        },
                        "privateDnsZoneGroupConfigs": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                          },
                          "metadata": {
                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                          }
                        }
                      }
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "ipConfigurationsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the resource that is unique within a resource group."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "memberName": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                }
                              },
                              "privateIPAddress": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private endpoint IP configurations."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "manualPrivateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateLinkServiceConnectionsType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The name of the private link service connection."
                            }
                          },
                          "properties": {
                            "type": "object",
                            "properties": {
                              "groupIds": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "metadata": {
                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                }
                              },
                              "privateLinkServiceId": {
                                "type": "string",
                                "metadata": {
                                  "description": "Required. The resource id of private link service."
                                }
                              },
                              "requestMessage": {
                                "type": "string",
                                "nullable": true,
                                "metadata": {
                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                }
                              }
                            },
                            "metadata": {
                              "description": "Required. Properties of private link service connection."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "customDnsConfigType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "fqdn": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                            }
                          },
                          "ipAddresses": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "metadata": {
                              "description": "Required. A list of private IP addresses of the private endpoint."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "privateDnsZoneGroupConfigType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The name of the private DNS zone group config."
                          }
                        },
                        "privateDnsZoneResourceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The resource id of the private DNS zone."
                          }
                        }
                      },
                      "metadata": {
                        "__bicep_imported_from!": {
                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the private endpoint resource to create."
                      }
                    },
                    "subnetResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                      }
                    },
                    "applicationSecurityGroupResourceIds": {
                      "type": "array",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                      }
                    },
                    "customNetworkInterfaceName": {
                      "type": "string",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                      }
                    },
                    "ipConfigurations": {
                      "$ref": "#/definitions/ipConfigurationsType",
                      "metadata": {
                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                      }
                    },
                    "privateDnsZoneGroup": {
                      "$ref": "#/definitions/privateDnsZoneGroupType",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                      }
                    },
                    "customDnsConfigs": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "Optional. Custom DNS configurations."
                      }
                    },
                    "manualPrivateLinkServiceConnections": {
                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                      }
                    },
                    "privateLinkServiceConnections": {
                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                      "metadata": {
                        "description": "Optional. A grouping of information about the connection to the remote resource."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "builtInRoleNames": {
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "privateEndpoint": {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2023-11-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "copy": [
                          {
                            "name": "applicationSecurityGroups",
                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                            "input": {
                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                            }
                          }
                        ],
                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                        "subnet": {
                          "id": "[parameters('subnetResourceId')]"
                        }
                      }
                    },
                    "privateEndpoint_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_roleAssignments": {
                      "copy": {
                        "name": "privateEndpoint_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    },
                    "privateEndpoint_privateDnsZoneGroup": {
                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                          },
                          "privateEndpointName": {
                            "value": "[parameters('name')]"
                          },
                          "privateDnsZoneConfigs": {
                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "5805178546717255803"
                            },
                            "name": "Private Endpoint Private DNS Zone Groups",
                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "privateDnsZoneGroupConfigType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private DNS zone group config."
                                  }
                                },
                                "privateDnsZoneResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource id of the private DNS zone."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            }
                          },
                          "parameters": {
                            "privateEndpointName": {
                              "type": "string",
                              "metadata": {
                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                              }
                            },
                            "privateDnsZoneConfigs": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                              },
                              "minLength": 1,
                              "maxLength": 5,
                              "metadata": {
                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The name of the private DNS zone group."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "privateDnsZoneConfigsVar",
                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                "input": {
                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                  "properties": {
                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                  }
                                }
                              }
                            ]
                          },
                          "resources": {
                            "privateEndpoint": {
                              "existing": true,
                              "type": "Microsoft.Network/privateEndpoints",
                              "apiVersion": "2023-11-01",
                              "name": "[parameters('privateEndpointName')]"
                            },
                            "privateDnsZoneGroup": {
                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                              "apiVersion": "2023-11-01",
                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                              "properties": {
                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                              },
                              "dependsOn": [
                                "privateEndpoint"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the private endpoint DNS zone group."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the private endpoint DNS zone group."
                              },
                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "privateEndpoint"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource group the private endpoint was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the private endpoint."
                      },
                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the private endpoint."
                      },
                      "value": "[parameters('name')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                    },
                    "customDnsConfig": {
                      "$ref": "#/definitions/customDnsConfigType",
                      "metadata": {
                        "description": "The custom DNS configurations of the private endpoint."
                      },
                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                    },
                    "groupId": {
                      "type": "string",
                      "metadata": {
                        "description": "The group Id for the private endpoint Group."
                      },
                      "value": "[if(and(not(empty(reference('privateEndpoint').manualPrivateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').manualPrivateLinkServiceConnections[0].properties, 'groupIds', 0), ''), if(and(not(empty(reference('privateEndpoint').privateLinkServiceConnections)), greater(length(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds')), 0)), coalesce(tryGet(reference('privateEndpoint').privateLinkServiceConnections[0].properties, 'groupIds', 0), ''), ''))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "workspace"
              ]
            }
          },
          "outputs": {
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the machine learning service."
              },
              "value": "[resourceId('Microsoft.MachineLearningServices/workspaces', parameters('name'))]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the machine learning service was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the machine learning service."
              },
              "value": "[parameters('name')]"
            },
            "systemAssignedMIPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the system assigned identity."
              },
              "value": "[coalesce(tryGet(tryGet(reference('workspace', '2024-04-01-preview', 'full'), 'identity'), 'principalId'), '')]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('workspace', '2024-04-01-preview', 'full').location]"
            }
          }
        }
      }
    },
    "mlServiceRoleAssigned": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-roleassignment', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('userAssignedName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "roleAssignments": {
            "copy": [
              {
                "name": "value",
                "count": "[length(parameters('roleDefinitionIdOrName'))]",
                "input": "[createObject('principalId', reference('project').outputs.systemAssignedMIPrincipalId.value, 'roleDefinitionIdOrName', parameters('roleDefinitionIdOrName')[copyIndex('value')], 'principalType', 'ServicePrincipal')]"
              }
            ]
          },
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "10609859695208799167"
            },
            "name": "User Assigned Identities",
            "description": "This module deploys a User Assigned Identity.",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "lockType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the name of lock."
                  }
                },
                "kind": {
                  "type": "string",
                  "allowedValues": [
                    "CanNotDelete",
                    "None",
                    "ReadOnly"
                  ],
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Specify the type of lock."
                  }
                }
              },
              "nullable": true
            },
            "roleAssignmentType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                    }
                  },
                  "roleDefinitionIdOrName": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                    }
                  },
                  "principalId": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                    }
                  },
                  "principalType": {
                    "type": "string",
                    "allowedValues": [
                      "Device",
                      "ForeignGroup",
                      "Group",
                      "ServicePrincipal",
                      "User"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The principal type of the assigned principal ID."
                    }
                  },
                  "description": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The description of the role assignment."
                    }
                  },
                  "condition": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                    }
                  },
                  "conditionVersion": {
                    "type": "string",
                    "allowedValues": [
                      "2.0"
                    ],
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. Version of the condition."
                    }
                  },
                  "delegatedManagedIdentityResourceId": {
                    "type": "string",
                    "nullable": true,
                    "metadata": {
                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                    }
                  }
                }
              },
              "nullable": true
            },
            "federatedIdentityCredentialsType": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The name of the federated identity credential."
                    }
                  },
                  "audiences": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "metadata": {
                      "description": "Required. The list of audiences that can appear in the issued token."
                    }
                  },
                  "issuer": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The URL of the issuer to be trusted."
                    }
                  },
                  "subject": {
                    "type": "string",
                    "metadata": {
                      "description": "Required. The identifier of the external identity."
                    }
                  }
                }
              },
              "nullable": true
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the User Assigned Identity."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all resources."
              }
            },
            "federatedIdentityCredentials": {
              "$ref": "#/definitions/federatedIdentityCredentialsType",
              "metadata": {
                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
              }
            },
            "lock": {
              "$ref": "#/definitions/lockType",
              "metadata": {
                "description": "Optional. The lock settings of the service."
              }
            },
            "roleAssignments": {
              "$ref": "#/definitions/roleAssignmentType",
              "metadata": {
                "description": "Optional. Array of role assignments to create."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "copy": [
              {
                "name": "formattedRoleAssignments",
                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
              }
            ],
            "builtInRoleNames": {
              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
            }
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.4.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "userAssignedIdentity": {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]"
            },
            "userAssignedIdentity_lock": {
              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
              "type": "Microsoft.Authorization/locks",
              "apiVersion": "2020-05-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
              "properties": {
                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_roleAssignments": {
              "copy": {
                "name": "userAssignedIdentity_roleAssignments",
                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
              },
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
              "properties": {
                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            },
            "userAssignedIdentity_federatedIdentityCredentials": {
              "copy": {
                "name": "userAssignedIdentity_federatedIdentityCredentials",
                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                "mode": "serial",
                "batchSize": 1
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                  },
                  "userAssignedIdentityName": {
                    "value": "[parameters('name')]"
                  },
                  "audiences": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                  },
                  "issuer": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                  },
                  "subject": {
                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "3716898257490923786"
                    },
                    "name": "User Assigned Identity Federated Identity Credential",
                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "userAssignedIdentityName": {
                      "type": "string",
                      "metadata": {
                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                      }
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the secret."
                      }
                    },
                    "audiences": {
                      "type": "array",
                      "metadata": {
                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                      }
                    },
                    "issuer": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                      }
                    },
                    "subject": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                      "apiVersion": "2023-01-31",
                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                      "properties": {
                        "audiences": "[parameters('audiences')]",
                        "issuer": "[parameters('issuer')]",
                        "subject": "[parameters('subject')]"
                      }
                    }
                  ],
                  "outputs": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the federated identity credential."
                      },
                      "value": "[parameters('name')]"
                    },
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the federated identity credential."
                      },
                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the federated identity credential was created in."
                      },
                      "value": "[resourceGroup().name]"
                    }
                  }
                }
              },
              "dependsOn": [
                "userAssignedIdentity"
              ]
            }
          },
          "outputs": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the user assigned identity."
              },
              "value": "[parameters('name')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the user assigned identity."
              },
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID (object ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').principalId]"
            },
            "clientId": {
              "type": "string",
              "metadata": {
                "description": "The client ID (application ID) of the user assigned identity."
              },
              "value": "[reference('userAssignedIdentity').clientId]"
            },
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The resource group the user assigned identity was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "location": {
              "type": "string",
              "metadata": {
                "description": "The location the resource was deployed into."
              },
              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
            }
          }
        }
      },
      "dependsOn": [
        "project"
      ]
    }
  },
  "outputs": {
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The resource group the machine learning workspace were deployed into."
      },
      "value": "[resourceGroup().name]"
    },
    "projectResourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the machine learning workspace."
      },
      "value": "[reference('project').outputs.resourceId.value]"
    },
    "projectName": {
      "type": "string",
      "metadata": {
        "description": "The resource name of the machine learning workspace."
      },
      "value": "[reference('project').outputs.name.value]"
    },
    "projectPrincipalId": {
      "type": "string",
      "metadata": {
        "description": "The principal ID of the machine learning workspace."
      },
      "value": "[reference('project').outputs.systemAssignedMIPrincipalId.value]"
    }
  }
}