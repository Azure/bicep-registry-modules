{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "languageVersion": "2.0",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "610733373146441190"
    },
    "name": "Azd Container App Upsert",
    "description": "Creates or updates an existing Azure Container App.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case",
    "owner": "Azure/module-maintainers"
  },
  "definitions": {
    "environmentType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "metadata": {
            "description": "Required. Environment variable name."
          }
        },
        "secretRef": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
          }
        },
        "value": {
          "type": "string",
          "nullable": true,
          "metadata": {
            "description": "Optional. Non-secret environment variable value."
          }
        }
      }
    }
  },
  "parameters": {
    "name": {
      "type": "string",
      "metadata": {
        "description": "Required. The name of the Container App."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Optional. Location for all Resources."
      }
    },
    "tags": {
      "type": "object",
      "nullable": true,
      "metadata": {
        "description": "Optional. Tags of the resource."
      }
    },
    "containerAppsEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "Required. Name of the environment for container apps."
      }
    },
    "containerCpuCoreCount": {
      "type": "string",
      "defaultValue": "0.5",
      "metadata": {
        "description": "Optional. The number of CPU cores allocated to a single container instance, e.g., 0.5."
      }
    },
    "containerMaxReplicas": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 1,
      "metadata": {
        "description": "Optional. The maximum number of replicas to run. Must be at least 1."
      }
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "1.0Gi",
      "metadata": {
        "description": "Optional. The amount of memory allocated to a single container instance, e.g., 1Gi."
      }
    },
    "containerMinReplicas": {
      "type": "int",
      "defaultValue": 2,
      "minValue": 1,
      "metadata": {
        "description": "Optional. The minimum number of replicas to run. Must be at least 2."
      }
    },
    "containerName": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "Optional. The name of the container."
      }
    },
    "containerRegistryName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the container registry."
      }
    },
    "containerRegistryHostSuffix": {
      "type": "string",
      "defaultValue": "azurecr.io",
      "metadata": {
        "description": "Optional. Hostname suffix for container registry. Set when deploying to sovereign clouds."
      }
    },
    "daprAppProtocol": {
      "type": "string",
      "defaultValue": "http",
      "allowedValues": [
        "http",
        "grpc"
      ],
      "metadata": {
        "description": "Optional. The protocol used by Dapr to connect to the app, e.g., HTTP or gRPC."
      }
    },
    "daprEnabled": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Enable or disable Dapr for the container app."
      }
    },
    "daprAppId": {
      "type": "string",
      "defaultValue": "[parameters('containerName')]",
      "metadata": {
        "description": "Optional. The Dapr app ID."
      }
    },
    "exists": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Optional. Specifies if the resource already exists."
      }
    },
    "ingressEnabled": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies if Ingress is enabled for the container app."
      }
    },
    "identityType": {
      "type": "string",
      "defaultValue": "None",
      "allowedValues": [
        "None",
        "SystemAssigned",
        "UserAssigned"
      ],
      "metadata": {
        "description": "Optional. The type of identity for the resource."
      }
    },
    "identityName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the user-assigned identity."
      }
    },
    "imageName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The name of the container image."
      }
    },
    "secrets": {
      "type": "secureObject",
      "defaultValue": {},
      "metadata": {
        "description": "Optional. The secrets required for the container."
      }
    },
    "env": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/environmentType"
      },
      "nullable": true,
      "metadata": {
        "description": "Optional. The environment variables for the container."
      }
    },
    "external": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Specifies if the resource ingress is exposed externally."
      }
    },
    "serviceBinds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Optional. The service binds associated with the container."
      }
    },
    "targetPort": {
      "type": "int",
      "defaultValue": 80,
      "metadata": {
        "description": "Optional. The target port for the container."
      }
    },
    "identityPrincipalId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The principal ID of the principal to assign the role to."
      }
    },
    "userAssignedIdentityResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Optional. The resource id of the user-assigned identity."
      }
    },
    "enableTelemetry": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Optional. Enable/Disable usage telemetry for module."
      }
    }
  },
  "resources": {
    "avmTelemetry": {
      "condition": "[parameters('enableTelemetry')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2024-03-01",
      "name": "[format('46d3xbcp.ptn.azd-containerappupsert.{0}.{1}', replace('-..--..-', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [],
          "outputs": {
            "telemetry": {
              "type": "String",
              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
            }
          }
        }
      }
    },
    "existingApp": {
      "condition": "[parameters('exists')]",
      "existing": true,
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-02-preview",
      "name": "[parameters('name')]"
    },
    "app": {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-container-app-update', uniqueString(deployment().name, parameters('location')))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('name')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[parameters('tags')]"
          },
          "identityType": {
            "value": "[parameters('identityType')]"
          },
          "identityName": {
            "value": "[parameters('identityName')]"
          },
          "ingressEnabled": {
            "value": "[parameters('ingressEnabled')]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "containerAppsEnvironmentName": {
            "value": "[parameters('containerAppsEnvironmentName')]"
          },
          "containerRegistryName": {
            "value": "[parameters('containerRegistryName')]"
          },
          "containerRegistryHostSuffix": {
            "value": "[parameters('containerRegistryHostSuffix')]"
          },
          "containerCpuCoreCount": {
            "value": "[parameters('containerCpuCoreCount')]"
          },
          "containerMemory": {
            "value": "[parameters('containerMemory')]"
          },
          "containerMinReplicas": {
            "value": "[parameters('containerMinReplicas')]"
          },
          "containerMaxReplicas": {
            "value": "[parameters('containerMaxReplicas')]"
          },
          "daprEnabled": {
            "value": "[parameters('daprEnabled')]"
          },
          "daprAppId": {
            "value": "[parameters('daprAppId')]"
          },
          "daprAppProtocol": {
            "value": "[parameters('daprAppProtocol')]"
          },
          "secrets": {
            "value": "[parameters('secrets')]"
          },
          "external": {
            "value": "[parameters('external')]"
          },
          "env": {
            "value": "[parameters('env')]"
          },
          "imageName": "[if(not(empty(parameters('imageName'))), createObject('value', parameters('imageName')), if(parameters('exists'), createObject('value', reference('existingApp').template.containers[0].image), createObject('value', '')))]",
          "targetPort": {
            "value": "[parameters('targetPort')]"
          },
          "serviceBinds": {
            "value": "[parameters('serviceBinds')]"
          },
          "principalId": "[if(and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName')))), createObject('value', parameters('identityPrincipalId')), createObject('value', ''))]",
          "userAssignedIdentityResourceId": "[if(and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName')))), createObject('value', parameters('userAssignedIdentityResourceId')), createObject('value', ''))]",
          "enableTelemetry": {
            "value": "[parameters('enableTelemetry')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "languageVersion": "2.0",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.30.23.60470",
              "templateHash": "1832494856594008897"
            },
            "name": "Azd ACR Linked Container App",
            "description": "Creates a container app in an Azure Container App environment.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case",
            "owner": "Azure/module-maintainers"
          },
          "definitions": {
            "environmentType": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "metadata": {
                    "description": "Required. Environment variable name."
                  }
                },
                "secretRef": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                  }
                },
                "value": {
                  "type": "string",
                  "nullable": true,
                  "metadata": {
                    "description": "Optional. Non-secret environment variable value."
                  }
                }
              }
            }
          },
          "parameters": {
            "name": {
              "type": "string",
              "metadata": {
                "description": "Required. The name of the Container App."
              }
            },
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Optional. Location for all Resources."
              }
            },
            "tags": {
              "type": "object",
              "nullable": true,
              "metadata": {
                "description": "Optional. Tags of the resource."
              }
            },
            "allowedOrigins": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Allowed origins."
              }
            },
            "containerAppsEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Required. Name of the environment for container apps."
              }
            },
            "containerCpuCoreCount": {
              "type": "string",
              "defaultValue": "0.5",
              "metadata": {
                "description": "Optional. CPU cores allocated to a single container instance, e.g., 0.5."
              }
            },
            "containerMaxReplicas": {
              "type": "int",
              "defaultValue": 10,
              "minValue": 1,
              "metadata": {
                "description": "Optional. The maximum number of replicas to run. Must be at least 1."
              }
            },
            "containerMemory": {
              "type": "string",
              "defaultValue": "1.0Gi",
              "metadata": {
                "description": "Optional. Memory allocated to a single container instance, e.g., 1Gi."
              }
            },
            "containerMinReplicas": {
              "type": "int",
              "defaultValue": 2,
              "metadata": {
                "description": "Optional. The minimum number of replicas to run. Must be at least 2."
              }
            },
            "containerName": {
              "type": "string",
              "defaultValue": "main",
              "metadata": {
                "description": "Optional. The name of the container."
              }
            },
            "containerRegistryName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the container registry."
              }
            },
            "containerRegistryHostSuffix": {
              "type": "string",
              "defaultValue": "azurecr.io",
              "metadata": {
                "description": "Optional. Hostname suffix for container registry. Set when deploying to sovereign clouds."
              }
            },
            "daprAppProtocol": {
              "type": "string",
              "defaultValue": "http",
              "allowedValues": [
                "http",
                "grpc"
              ],
              "metadata": {
                "description": "Optional. The protocol used by Dapr to connect to the app, e.g., http or grpc."
              }
            },
            "daprAppId": {
              "type": "string",
              "defaultValue": "[parameters('containerName')]",
              "metadata": {
                "description": "Optional. The Dapr app ID."
              }
            },
            "daprEnabled": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Enable Dapr."
              }
            },
            "env": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/environmentType"
              },
              "nullable": true,
              "metadata": {
                "description": "Optional. The environment variables for the container."
              }
            },
            "external": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if the resource ingress is exposed externally."
              }
            },
            "identityName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the user-assigned identity."
              }
            },
            "identityType": {
              "type": "string",
              "defaultValue": "None",
              "allowedValues": [
                "None",
                "SystemAssigned",
                "UserAssigned"
              ],
              "metadata": {
                "description": "Optional. The type of identity for the resource."
              }
            },
            "imageName": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the container image."
              }
            },
            "ingressEnabled": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Specifies if Ingress is enabled for the container app."
              }
            },
            "ingressTransport": {
              "type": "string",
              "defaultValue": "auto",
              "allowedValues": [
                "auto",
                "http",
                "http2",
                "tcp"
              ],
              "metadata": {
                "description": "Optional. Ingress transport protocol."
              }
            },
            "ipSecurityRestrictions": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. Rules to restrict incoming IP address."
              }
            },
            "ingressAllowInsecure": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
              }
            },
            "revisionMode": {
              "type": "string",
              "defaultValue": "Single",
              "allowedValues": [
                "Multiple",
                "Single"
              ],
              "metadata": {
                "description": "Optional. Controls how active revisions are handled for the Container app."
              }
            },
            "secrets": {
              "type": "secureObject",
              "defaultValue": {},
              "metadata": {
                "description": "Optional. The secrets required for the container."
              }
            },
            "serviceBinds": {
              "type": "array",
              "defaultValue": [],
              "metadata": {
                "description": "Optional. The service binds associated with the container."
              }
            },
            "serviceType": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The name of the container apps add-on to use. e.g. redis."
              }
            },
            "targetPort": {
              "type": "int",
              "defaultValue": 80,
              "metadata": {
                "description": "Optional. The target port for the container."
              }
            },
            "includeAddOns": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Optional. Toggle to include the service configuration."
              }
            },
            "principalId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The principal ID of the principal to assign the role to."
              }
            },
            "userAssignedIdentityResourceId": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Optional. The resource id of the user-assigned identity."
              }
            },
            "enableTelemetry": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Optional. Enable/Disable usage telemetry for module."
              }
            }
          },
          "variables": {
            "usePrivateRegistry": "[and(not(empty(parameters('identityName'))), not(empty(parameters('containerRegistryName'))))]",
            "normalizedIdentityType": "[if(not(empty(parameters('identityName'))), 'UserAssigned', parameters('identityType'))]"
          },
          "resources": {
            "avmTelemetry": {
              "condition": "[parameters('enableTelemetry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2024-03-01",
              "name": "[format('46d3xbcp.ptn.azd-acrcontainerapp.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
              "properties": {
                "mode": "Incremental",
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "resources": [],
                  "outputs": {
                    "telemetry": {
                      "type": "String",
                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                    }
                  }
                }
              }
            },
            "containerAppsEnvironment": {
              "existing": true,
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2023-05-01",
              "name": "[parameters('containerAppsEnvironmentName')]"
            },
            "containerApp": {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-container-app', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[parameters('name')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "managedIdentities": "[if(and(not(empty(parameters('identityName'))), equals(variables('normalizedIdentityType'), 'UserAssigned')), createObject('value', createObject('userAssignedResourceIds', createArray(parameters('userAssignedIdentityResourceId')))), createObject('value', createObject('systemAssigned', equals(variables('normalizedIdentityType'), 'SystemAssigned'))))]",
                  "environmentResourceId": {
                    "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppsEnvironmentName'))]"
                  },
                  "activeRevisionsMode": {
                    "value": "[parameters('revisionMode')]"
                  },
                  "disableIngress": {
                    "value": "[not(parameters('ingressEnabled'))]"
                  },
                  "ingressExternal": {
                    "value": "[parameters('external')]"
                  },
                  "ingressTargetPort": {
                    "value": "[parameters('targetPort')]"
                  },
                  "ingressTransport": {
                    "value": "[parameters('ingressTransport')]"
                  },
                  "ipSecurityRestrictions": {
                    "value": "[parameters('ipSecurityRestrictions')]"
                  },
                  "ingressAllowInsecure": {
                    "value": "[parameters('ingressAllowInsecure')]"
                  },
                  "corsPolicy": {
                    "value": {
                      "allowedOrigins": "[union(createArray('https://portal.azure.com', 'https://ms.portal.azure.com'), parameters('allowedOrigins'))]"
                    }
                  },
                  "dapr": "[if(parameters('daprEnabled'), createObject('value', createObject('enabled', true(), 'appId', parameters('daprAppId'), 'appProtocol', parameters('daprAppProtocol'), 'appPort', if(parameters('ingressEnabled'), parameters('targetPort'), 0))), createObject('value', createObject('enabled', false())))]",
                  "secrets": {
                    "value": "[parameters('secrets')]"
                  },
                  "includeAddOns": {
                    "value": "[parameters('includeAddOns')]"
                  },
                  "service": {
                    "value": {
                      "type": "[parameters('serviceType')]"
                    }
                  },
                  "registries": "[if(variables('usePrivateRegistry'), createObject('value', createArray(createObject('server', format('{0}.{1}', parameters('containerRegistryName'), parameters('containerRegistryHostSuffix')), 'identity', parameters('userAssignedIdentityResourceId')))), createObject('value', createArray()))]",
                  "serviceBinds": {
                    "value": "[parameters('serviceBinds')]"
                  },
                  "containers": {
                    "value": [
                      {
                        "image": "[if(not(empty(parameters('imageName'))), parameters('imageName'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                        "name": "[parameters('containerName')]",
                        "env": "[parameters('env')]",
                        "resources": {
                          "cpu": "[json(parameters('containerCpuCoreCount'))]",
                          "memory": "[parameters('containerMemory')]"
                        }
                      }
                    ]
                  },
                  "scaleMaxReplicas": {
                    "value": "[parameters('containerMaxReplicas')]"
                  },
                  "scaleMinReplicas": {
                    "value": "[parameters('containerMinReplicas')]"
                  },
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "languageVersion": "2.0",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "9894768173968934379"
                    },
                    "name": "Container Apps",
                    "description": "This module deploys a Container App.",
                    "owner": "Azure/module-maintainers"
                  },
                  "definitions": {
                    "managedIdentitiesType": {
                      "type": "object",
                      "properties": {
                        "systemAssigned": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Enables system assigned managed identity on the resource."
                          }
                        },
                        "userAssignedResourceIds": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The resource ID(s) to assign to the resource."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "lockType": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the name of lock."
                          }
                        },
                        "kind": {
                          "type": "string",
                          "allowedValues": [
                            "CanNotDelete",
                            "None",
                            "ReadOnly"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specify the type of lock."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "roleAssignmentType": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                            }
                          },
                          "roleDefinitionIdOrName": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                            }
                          },
                          "principalId": {
                            "type": "string",
                            "metadata": {
                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                            }
                          },
                          "principalType": {
                            "type": "string",
                            "allowedValues": [
                              "Device",
                              "ForeignGroup",
                              "Group",
                              "ServicePrincipal",
                              "User"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The principal type of the assigned principal ID."
                            }
                          },
                          "description": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The description of the role assignment."
                            }
                          },
                          "condition": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                            }
                          },
                          "conditionVersion": {
                            "type": "string",
                            "allowedValues": [
                              "2.0"
                            ],
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. Version of the condition."
                            }
                          },
                          "delegatedManagedIdentityResourceId": {
                            "type": "string",
                            "nullable": true,
                            "metadata": {
                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                            }
                          }
                        }
                      },
                      "nullable": true
                    },
                    "container": {
                      "type": "object",
                      "properties": {
                        "args": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command arguments."
                          }
                        },
                        "command": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container start command."
                          }
                        },
                        "env": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/environmentVar"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container environment variables."
                          }
                        },
                        "image": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Container image tag."
                          }
                        },
                        "name": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Custom container name."
                          }
                        },
                        "probes": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbe"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. List of probes for the container."
                          }
                        },
                        "resources": {
                          "type": "object",
                          "metadata": {
                            "description": "Required. Container resource requirements."
                          }
                        },
                        "volumeMounts": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/volumeMount"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Container volume mounts."
                          }
                        }
                      }
                    },
                    "ingressPortMapping": {
                      "type": "object",
                      "properties": {
                        "exposedPort": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the exposed port for the target port. If not specified, it defaults to target port."
                          }
                        },
                        "external": {
                          "type": "bool",
                          "metadata": {
                            "description": "Required. Specifies whether the app port is accessible outside of the environment."
                          }
                        },
                        "targetPort": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Specifies the port the container listens on."
                          }
                        }
                      }
                    },
                    "serviceBind": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The name of the service."
                          }
                        },
                        "serviceId": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. The service ID."
                          }
                        }
                      }
                    },
                    "environmentVar": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Environment variable name."
                          }
                        },
                        "secretRef": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                          }
                        },
                        "value": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Non-secret environment variable value."
                          }
                        }
                      }
                    },
                    "containerAppProbe": {
                      "type": "object",
                      "properties": {
                        "failureThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                          }
                        },
                        "httpGet": {
                          "$ref": "#/definitions/containerAppProbeHttpGet",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTPGet specifies the http request to perform."
                          }
                        },
                        "initialDelaySeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 60,
                          "metadata": {
                            "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                          }
                        },
                        "periodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                          }
                        },
                        "successThreshold": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 10,
                          "metadata": {
                            "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                          }
                        },
                        "tcpSocket": {
                          "$ref": "#/definitions/containerAppProbeTcpSocket",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                          }
                        },
                        "terminationGracePeriodSeconds": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                          }
                        },
                        "timeoutSeconds": {
                          "type": "int",
                          "nullable": true,
                          "minValue": 1,
                          "maxValue": 240,
                          "metadata": {
                            "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                          }
                        },
                        "type": {
                          "type": "string",
                          "allowedValues": [
                            "Liveness",
                            "Readiness",
                            "Startup"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. The type of probe."
                          }
                        }
                      }
                    },
                    "corsPolicyType": {
                      "type": "object",
                      "properties": {
                        "allowCredentials": {
                          "type": "bool",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Switch to determine whether the resource allows credentials."
                          }
                        },
                        "allowedHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-headers header."
                          }
                        },
                        "allowedMethods": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-methods header."
                          }
                        },
                        "allowedOrigins": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-allow-origins header."
                          }
                        },
                        "exposeHeaders": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-expose-headers header."
                          }
                        },
                        "maxAge": {
                          "type": "int",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Specifies the content for the access-control-max-age header."
                          }
                        }
                      },
                      "nullable": true
                    },
                    "containerAppProbeHttpGet": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to. Defaults to the pod IP."
                          }
                        },
                        "httpHeaders": {
                          "type": "array",
                          "items": {
                            "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                          },
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. HTTP headers to set in the request."
                          }
                        },
                        "path": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path to access on the HTTP server."
                          }
                        },
                        "port": {
                          "type": "int",
                          "metadata": {
                            "description": "Required. Name or number of the port to access on the container."
                          }
                        },
                        "scheme": {
                          "type": "string",
                          "allowedValues": [
                            "HTTP",
                            "HTTPS"
                          ],
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                          }
                        }
                      }
                    },
                    "containerAppProbeHttpGetHeadersItem": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Name of the header."
                          }
                        },
                        "value": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Value of the header."
                          }
                        }
                      }
                    },
                    "containerAppProbeTcpSocket": {
                      "type": "object",
                      "properties": {
                        "host": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Host name to connect to, defaults to the pod IP."
                          }
                        },
                        "port": {
                          "type": "int",
                          "minValue": 1,
                          "maxValue": 65535,
                          "metadata": {
                            "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                          }
                        }
                      }
                    },
                    "volumeMount": {
                      "type": "object",
                      "properties": {
                        "mountPath": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                          }
                        },
                        "subPath": {
                          "type": "string",
                          "nullable": true,
                          "metadata": {
                            "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                          }
                        },
                        "volumeName": {
                          "type": "string",
                          "metadata": {
                            "description": "Required. This must match the Name of a Volume."
                          }
                        }
                      }
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Name of the Container App."
                      }
                    },
                    "location": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().location]",
                      "metadata": {
                        "description": "Optional. Location for all Resources."
                      }
                    },
                    "disableIngress": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Bool to disable all ingress traffic for the container app."
                      }
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                      }
                    },
                    "clientCertificateMode": {
                      "type": "string",
                      "defaultValue": "ignore",
                      "allowedValues": [
                        "accept",
                        "ignore",
                        "require"
                      ],
                      "metadata": {
                        "description": "Optional. Client certificate mode for mTLS."
                      }
                    },
                    "corsPolicy": {
                      "$ref": "#/definitions/corsPolicyType",
                      "metadata": {
                        "description": "Optional. Object userd to configure CORS policy."
                      }
                    },
                    "stickySessionsAffinity": {
                      "type": "string",
                      "defaultValue": "none",
                      "allowedValues": [
                        "none",
                        "sticky"
                      ],
                      "metadata": {
                        "description": "Optional. Bool indicating if the Container App should enable session affinity."
                      }
                    },
                    "ingressTransport": {
                      "type": "string",
                      "defaultValue": "auto",
                      "allowedValues": [
                        "auto",
                        "http",
                        "http2",
                        "tcp"
                      ],
                      "metadata": {
                        "description": "Optional. Ingress transport protocol."
                      }
                    },
                    "service": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dev ContainerApp service type."
                      }
                    },
                    "includeAddOns": {
                      "type": "bool",
                      "defaultValue": false,
                      "metadata": {
                        "description": "Optional. Toggle to include the service configuration."
                      }
                    },
                    "additionalPortMappings": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/ingressPortMapping"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Settings to expose additional ports on container app."
                      }
                    },
                    "ingressAllowInsecure": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                      }
                    },
                    "ingressTargetPort": {
                      "type": "int",
                      "defaultValue": 80,
                      "metadata": {
                        "description": "Optional. Target Port in containers for traffic from ingress."
                      }
                    },
                    "scaleMaxReplicas": {
                      "type": "int",
                      "defaultValue": 10,
                      "metadata": {
                        "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                      }
                    },
                    "scaleMinReplicas": {
                      "type": "int",
                      "defaultValue": 3,
                      "metadata": {
                        "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                      }
                    },
                    "scaleRules": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Scaling rules."
                      }
                    },
                    "serviceBinds": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/serviceBind"
                      },
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. List of container app services bound to the app."
                      }
                    },
                    "activeRevisionsMode": {
                      "type": "string",
                      "defaultValue": "Single",
                      "allowedValues": [
                        "Multiple",
                        "Single"
                      ],
                      "metadata": {
                        "description": "Optional. Controls how active revisions are handled for the Container app."
                      }
                    },
                    "environmentResourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. Resource ID of environment."
                      }
                    },
                    "lock": {
                      "$ref": "#/definitions/lockType",
                      "metadata": {
                        "description": "Optional. The lock settings of the service."
                      }
                    },
                    "tags": {
                      "type": "object",
                      "nullable": true,
                      "metadata": {
                        "description": "Optional. Tags of the resource."
                      }
                    },
                    "registries": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                      }
                    },
                    "managedIdentities": {
                      "$ref": "#/definitions/managedIdentitiesType",
                      "metadata": {
                        "description": "Optional. The managed identity definition for this resource."
                      }
                    },
                    "roleAssignments": {
                      "$ref": "#/definitions/roleAssignmentType",
                      "metadata": {
                        "description": "Optional. Array of role assignments to create."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    },
                    "customDomains": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Custom domain bindings for Container App hostnames."
                      }
                    },
                    "exposedPort": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                      }
                    },
                    "ipSecurityRestrictions": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. Rules to restrict incoming IP address."
                      }
                    },
                    "trafficLabel": {
                      "type": "string",
                      "defaultValue": "label-1",
                      "metadata": {
                        "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                      }
                    },
                    "trafficLatestRevision": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                      }
                    },
                    "trafficRevisionName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Name of a revision."
                      }
                    },
                    "trafficWeight": {
                      "type": "int",
                      "defaultValue": 100,
                      "metadata": {
                        "description": "Optional. Traffic weight assigned to a revision."
                      }
                    },
                    "dapr": {
                      "type": "object",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. Dapr configuration for the Container App."
                      }
                    },
                    "maxInactiveRevisions": {
                      "type": "int",
                      "defaultValue": 0,
                      "metadata": {
                        "description": "Optional. Max inactive revisions a Container App can have."
                      }
                    },
                    "containers": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/container"
                      },
                      "metadata": {
                        "description": "Required. List of container definitions for the Container App."
                      }
                    },
                    "initContainersTemplate": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of specialized containers that run before app containers."
                      }
                    },
                    "secrets": {
                      "type": "secureObject",
                      "defaultValue": {},
                      "metadata": {
                        "description": "Optional. The secrets of the Container App."
                      }
                    },
                    "revisionSuffix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. User friendly suffix that is appended to the revision name."
                      }
                    },
                    "volumes": {
                      "type": "array",
                      "defaultValue": [],
                      "metadata": {
                        "description": "Optional. List of volume definitions for the Container App."
                      }
                    },
                    "workloadProfileName": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Optional. Workload profile name to pin for container app execution."
                      }
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "formattedRoleAssignments",
                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                      }
                    ],
                    "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                    "builtInRoleNames": {
                      "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                    }
                  },
                  "resources": {
                    "avmTelemetry": {
                      "condition": "[parameters('enableTelemetry')]",
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2024-03-01",
                      "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.10.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                      "properties": {
                        "mode": "Incremental",
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "resources": [],
                          "outputs": {
                            "telemetry": {
                              "type": "String",
                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                            }
                          }
                        }
                      }
                    },
                    "containerApp": {
                      "type": "Microsoft.App/containerApps",
                      "apiVersion": "2024-03-01",
                      "name": "[parameters('name')]",
                      "tags": "[parameters('tags')]",
                      "location": "[parameters('location')]",
                      "identity": "[variables('identity')]",
                      "properties": {
                        "environmentId": "[parameters('environmentResourceId')]",
                        "configuration": {
                          "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                          "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                          "ingress": "[if(parameters('disableIngress'), null(), createObject('additionalPortMappings', parameters('additionalPortMappings'), 'allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                          "service": "[if(and(parameters('includeAddOns'), not(empty(parameters('service')))), parameters('service'), null())]",
                          "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                          "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                          "secrets": "[variables('secretList')]"
                        },
                        "template": {
                          "containers": "[parameters('containers')]",
                          "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                          "revisionSuffix": "[parameters('revisionSuffix')]",
                          "scale": {
                            "maxReplicas": "[parameters('scaleMaxReplicas')]",
                            "minReplicas": "[parameters('scaleMinReplicas')]",
                            "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                          },
                          "serviceBinds": "[if(and(parameters('includeAddOns'), not(empty(parameters('serviceBinds')))), parameters('serviceBinds'), null())]",
                          "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                        },
                        "workloadProfileName": "[parameters('workloadProfileName')]"
                      }
                    },
                    "containerApp_lock": {
                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                      "type": "Microsoft.Authorization/locks",
                      "apiVersion": "2020-05-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                      "properties": {
                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    },
                    "containerApp_roleAssignments": {
                      "copy": {
                        "name": "containerApp_roleAssignments",
                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                      },
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2022-04-01",
                      "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                      "properties": {
                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                      },
                      "dependsOn": [
                        "containerApp"
                      ]
                    }
                  },
                  "outputs": {
                    "resourceId": {
                      "type": "string",
                      "metadata": {
                        "description": "The resource ID of the Container App."
                      },
                      "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                    },
                    "fqdn": {
                      "type": "string",
                      "metadata": {
                        "description": "The configuration of ingress fqdn."
                      },
                      "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                    },
                    "resourceGroupName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the resource group the Container App was deployed into."
                      },
                      "value": "[resourceGroup().name]"
                    },
                    "name": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the Container App."
                      },
                      "value": "[parameters('name')]"
                    },
                    "systemAssignedMIPrincipalId": {
                      "type": "string",
                      "metadata": {
                        "description": "The principal ID of the system assigned identity."
                      },
                      "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2024-03-01', 'full'), 'identity'), 'principalId'), '')]"
                    },
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "The location the resource was deployed into."
                      },
                      "value": "[reference('containerApp', '2024-03-01', 'full').location]"
                    }
                  }
                }
              },
              "dependsOn": [
                "containerAppsEnvironment",
                "containerRegistryAccess"
              ]
            },
            "containerRegistryAccess": {
              "condition": "[variables('usePrivateRegistry')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-registry-access', uniqueString(deployment().name, parameters('location')))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "containerRegistryName": {
                    "value": "[parameters('containerRegistryName')]"
                  },
                  "principalId": "[if(variables('usePrivateRegistry'), createObject('value', parameters('principalId')), createObject('value', ''))]",
                  "enableTelemetry": {
                    "value": "[parameters('enableTelemetry')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.30.23.60470",
                      "templateHash": "11140098273900072819"
                    },
                    "name": "ACR Pull permissions",
                    "description": "Assigns ACR Pull permissions to access an Azure Container Registry.",
                    "owner": "Azure/module-maintainers"
                  },
                  "parameters": {
                    "containerRegistryName": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The name of the container registry."
                      }
                    },
                    "principalId": {
                      "type": "string",
                      "metadata": {
                        "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                      }
                    },
                    "enableTelemetry": {
                      "type": "bool",
                      "defaultValue": true,
                      "metadata": {
                        "description": "Optional. Enable/Disable usage telemetry for module."
                      }
                    }
                  },
                  "variables": {
                    "acrPullRole": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "acrpullrole-deployment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "principalId": {
                            "value": "[parameters('principalId')]"
                          },
                          "resourceId": {
                            "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
                          },
                          "roleDefinitionId": {
                            "value": "[variables('acrPullRole')]"
                          },
                          "principalType": {
                            "value": "ServicePrincipal"
                          },
                          "enableTelemetry": {
                            "value": "[parameters('enableTelemetry')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.28.1.47646",
                              "templateHash": "1847432691715853168"
                            },
                            "name": "Resource-scoped role assignment",
                            "description": "This module deploys a Role Assignment for a specific resource.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The scope for the role assignment, fully qualified resourceId."
                              }
                            },
                            "name": {
                              "type": "string",
                              "defaultValue": "[guid(parameters('resourceId'), parameters('principalId'), if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId'))))]",
                              "metadata": {
                                "description": "Optional. The unique guid name for the role assignment."
                              }
                            },
                            "roleDefinitionId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The role definition ID for the role assignment."
                              }
                            },
                            "roleName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The name for the role, used for logging."
                              }
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The Principal or Object ID of the Security Principal (User, Group, Service Principal, Managed Identity)."
                              }
                            },
                            "principalType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "ServicePrincipal",
                                "Group",
                                "User",
                                "ForeignGroup",
                                "Device",
                                ""
                              ],
                              "metadata": {
                                "description": "Optional. The principal type of the assigned principal ID."
                              }
                            },
                            "description": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The description of role assignment."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "$fxv#0": {
                              "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                              "contentVersion": "1.0.0.0",
                              "parameters": {
                                "scope": {
                                  "type": "string"
                                },
                                "name": {
                                  "type": "string"
                                },
                                "roleDefinitionId": {
                                  "type": "string"
                                },
                                "principalId": {
                                  "type": "string"
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User",
                                    ""
                                  ],
                                  "defaultValue": "",
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string"
                                }
                              },
                              "resources": [
                                {
                                  "type": "Microsoft.Authorization/roleAssignments",
                                  "apiVersion": "2022-04-01",
                                  "scope": "[[parameters('scope')]",
                                  "name": "[[parameters('name')]",
                                  "properties": {
                                    "roleDefinitionId": "[[parameters('roleDefinitionId')]",
                                    "principalId": "[[parameters('principalId')]",
                                    "principalType": "[[parameters('principalType')]",
                                    "description": "[[parameters('description')]"
                                  }
                                }
                              ],
                              "outputs": {
                                "roleAssignmentId": {
                                  "type": "string",
                                  "value": "[[extensionResourceId(parameters('scope'), 'Microsoft.Authorization/roleAssignments', parameters('name'))]"
                                }
                              }
                            }
                          },
                          "resources": [
                            {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.ptn.authorization-resourceroleassignment.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))]",
                              "properties": {
                                "mode": "Incremental",
                                "expressionEvaluationOptions": {
                                  "scope": "Outer"
                                },
                                "template": "[variables('$fxv#0')]",
                                "parameters": {
                                  "scope": {
                                    "value": "[parameters('resourceId')]"
                                  },
                                  "name": {
                                    "value": "[parameters('name')]"
                                  },
                                  "roleDefinitionId": {
                                    "value": "[if(contains(parameters('roleDefinitionId'), '/providers/Microsoft.Authorization/roleDefinitions/'), parameters('roleDefinitionId'), subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('roleDefinitionId')))]"
                                  },
                                  "principalId": {
                                    "value": "[parameters('principalId')]"
                                  },
                                  "principalType": {
                                    "value": "[parameters('principalType')]"
                                  },
                                  "description": {
                                    "value": "[parameters('description')]"
                                  }
                                }
                              }
                            }
                          ],
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The GUID of the Role Assignment."
                              },
                              "value": "[parameters('name')]"
                            },
                            "roleName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name for the role, used for logging."
                              },
                              "value": "[parameters('roleName')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Role Assignment."
                              },
                              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-ResourceRoleAssignment', guid(parameters('resourceId'), parameters('principalId'), parameters('roleDefinitionId')))), '2023-07-01').outputs.roleAssignmentId.value]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the role assignment was applied at."
                              },
                              "value": "[resourceGroup().name]"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "outputs": {
            "resourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "The name of the resource group the Container App was deployed into."
              },
              "value": "[resourceGroup().name]"
            },
            "defaultDomain": {
              "type": "string",
              "metadata": {
                "description": "The Default domain of the Managed Environment."
              },
              "value": "[reference('containerAppsEnvironment').defaultDomain]"
            },
            "identityPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "The principal ID of the identity."
              },
              "value": "[if(equals(variables('normalizedIdentityType'), 'None'), '', if(empty(parameters('identityName')), reference('containerApp').outputs.systemAssignedMIPrincipalId.value, parameters('principalId')))]"
            },
            "imageName": {
              "type": "string",
              "metadata": {
                "description": "The name of the container image."
              },
              "value": "[parameters('imageName')]"
            },
            "name": {
              "type": "string",
              "metadata": {
                "description": "The name of the Container App."
              },
              "value": "[reference('containerApp').outputs.name.value]"
            },
            "serviceBind": {
              "type": "object",
              "metadata": {
                "description": "The service binds associated with the container."
              },
              "value": "[if(not(empty(parameters('serviceType'))), createObject('serviceId', reference('containerApp').outputs.resourceId.value, 'name', reference('containerApp').outputs.name.value), createObject())]"
            },
            "uri": {
              "type": "string",
              "metadata": {
                "description": "The uri of the Container App."
              },
              "value": "[if(parameters('ingressEnabled'), format('https://{0}', reference('containerApp').outputs.fqdn.value), '')]"
            },
            "resourceId": {
              "type": "string",
              "metadata": {
                "description": "The resource ID of the Container App."
              },
              "value": "[reference('containerApp').outputs.resourceId.value]"
            }
          }
        }
      },
      "dependsOn": [
        "existingApp"
      ]
    }
  },
  "outputs": {
    "defaultDomain": {
      "type": "string",
      "metadata": {
        "description": "The Default domain of the Container App."
      },
      "value": "[reference('app').outputs.defaultDomain.value]"
    },
    "imageName": {
      "type": "string",
      "metadata": {
        "description": "The name of the container image."
      },
      "value": "[reference('app').outputs.imageName.value]"
    },
    "name": {
      "type": "string",
      "metadata": {
        "description": "The name of the Container App."
      },
      "value": "[reference('app').outputs.name.value]"
    },
    "uri": {
      "type": "string",
      "metadata": {
        "description": "The uri of the Container App."
      },
      "value": "[reference('app').outputs.uri.value]"
    },
    "resourceId": {
      "type": "string",
      "metadata": {
        "description": "The resource ID of the Container App."
      },
      "value": "[reference('app').outputs.resourceId.value]"
    },
    "resourceGroupName": {
      "type": "string",
      "metadata": {
        "description": "The name of the resource group the Container App was deployed into."
      },
      "value": "[resourceGroup().name]"
    }
  }
}